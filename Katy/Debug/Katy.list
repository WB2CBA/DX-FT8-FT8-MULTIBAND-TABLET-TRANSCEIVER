
Katy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00045cf8  0800fd54  0800fd54  0001fd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08055a4c  08055a4c  00065a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08055a54  08055a54  00065a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08055a58  08055a58  00065a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000011fc  20000000  08055a5c  00070000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00044064  20001200  08056c58  00071200  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20045264  08056c58  00075264  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000711fc  2**0
                  CONTENTS, READONLY
 10 .debug_line   00032bcb  00000000  00000000  0007122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0005c8d4  00000000  00000000  000a3df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000b3db  00000000  00000000  001006cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001dd0  00000000  00000000  0010baa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b6f68  00000000  00000000  0010d878  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00021036  00000000  00000000  001c47e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003ab0  00000000  00000000  001e5818  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00025805  00000000  00000000  001e92c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0020eacd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000644c  00000000  00000000  0020eb48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001200 	.word	0x20001200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fd3c 	.word	0x0800fd3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001204 	.word	0x20001204
 800020c:	0800fd3c 	.word	0x0800fd3c

08000210 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000210:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000212:	2b01      	cmp	r3, #1
	IT       LS
 8000214:	bf98      	it	ls
	BXLS     lr
 8000216:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800021c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000228:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800022e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000230:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000232:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000234:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800023e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000244:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000248:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800024c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000250:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800025a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800026c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800026e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000270:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800027a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800027c:	2b01      	cmp	r3, #1
	IT       LS
 800027e:	bf98      	it	ls
	BXLS     lr
 8000280:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000286:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000292:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002b0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002be:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002c2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002c4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002c6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ce:	4770      	bx	lr

080002d0 <strcmp>:
 80002d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	bf28      	it	cs
 80002dc:	429a      	cmpcs	r2, r3
 80002de:	d0f7      	beq.n	80002d0 <strcmp>
 80002e0:	1ad0      	subs	r0, r2, r3
 80002e2:	4770      	bx	lr

080002e4 <strlen>:
 80002e4:	4603      	mov	r3, r0
 80002e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	d1fb      	bne.n	80002e6 <strlen+0x2>
 80002ee:	1a18      	subs	r0, r3, r0
 80002f0:	3801      	subs	r0, #1
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004de:	f1a4 0401 	sub.w	r4, r4, #1
 80004e2:	d1e9      	bne.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_ldivmod>:
 8000da8:	b97b      	cbnz	r3, 8000dca <__aeabi_ldivmod+0x22>
 8000daa:	b972      	cbnz	r2, 8000dca <__aeabi_ldivmod+0x22>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	bfbe      	ittt	lt
 8000db0:	2000      	movlt	r0, #0
 8000db2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000db6:	e006      	blt.n	8000dc6 <__aeabi_ldivmod+0x1e>
 8000db8:	bf08      	it	eq
 8000dba:	2800      	cmpeq	r0, #0
 8000dbc:	bf1c      	itt	ne
 8000dbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc6:	f000 b9bd 	b.w	8001144 <__aeabi_idiv0>
 8000dca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	db09      	blt.n	8000dea <__aeabi_ldivmod+0x42>
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db1a      	blt.n	8000e10 <__aeabi_ldivmod+0x68>
 8000dda:	f000 f84d 	bl	8000e78 <__udivmoddi4>
 8000dde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de6:	b004      	add	sp, #16
 8000de8:	4770      	bx	lr
 8000dea:	4240      	negs	r0, r0
 8000dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db1b      	blt.n	8000e2c <__aeabi_ldivmod+0x84>
 8000df4:	f000 f840 	bl	8000e78 <__udivmoddi4>
 8000df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e00:	b004      	add	sp, #16
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	4252      	negs	r2, r2
 8000e0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e0e:	4770      	bx	lr
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	f000 f82f 	bl	8000e78 <__udivmoddi4>
 8000e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e22:	b004      	add	sp, #16
 8000e24:	4240      	negs	r0, r0
 8000e26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2a:	4770      	bx	lr
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e32:	f000 f821 	bl	8000e78 <__udivmoddi4>
 8000e36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3e:	b004      	add	sp, #16
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_uldivmod>:
 8000e48:	b953      	cbnz	r3, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4a:	b94a      	cbnz	r2, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	bf08      	it	eq
 8000e50:	2800      	cmpeq	r0, #0
 8000e52:	bf1c      	itt	ne
 8000e54:	f04f 31ff 	movne.w	r1, #4294967295
 8000e58:	f04f 30ff 	movne.w	r0, #4294967295
 8000e5c:	f000 b972 	b.w	8001144 <__aeabi_idiv0>
 8000e60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e68:	f000 f806 	bl	8000e78 <__udivmoddi4>
 8000e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <__udivmoddi4>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	9e08      	ldr	r6, [sp, #32]
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4688      	mov	r8, r1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d14b      	bne.n	8000f1e <__udivmoddi4+0xa6>
 8000e86:	428a      	cmp	r2, r1
 8000e88:	4615      	mov	r5, r2
 8000e8a:	d967      	bls.n	8000f5c <__udivmoddi4+0xe4>
 8000e8c:	fab2 f282 	clz	r2, r2
 8000e90:	b14a      	cbz	r2, 8000ea6 <__udivmoddi4+0x2e>
 8000e92:	f1c2 0720 	rsb	r7, r2, #32
 8000e96:	fa01 f302 	lsl.w	r3, r1, r2
 8000e9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000e9e:	4095      	lsls	r5, r2
 8000ea0:	ea47 0803 	orr.w	r8, r7, r3
 8000ea4:	4094      	lsls	r4, r2
 8000ea6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eaa:	0c23      	lsrs	r3, r4, #16
 8000eac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000eb0:	fa1f fc85 	uxth.w	ip, r5
 8000eb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000eb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ebc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d909      	bls.n	8000ed8 <__udivmoddi4+0x60>
 8000ec4:	18eb      	adds	r3, r5, r3
 8000ec6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000eca:	f080 811b 	bcs.w	8001104 <__udivmoddi4+0x28c>
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	f240 8118 	bls.w	8001104 <__udivmoddi4+0x28c>
 8000ed4:	3f02      	subs	r7, #2
 8000ed6:	442b      	add	r3, r5
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x8c>
 8000ef0:	192c      	adds	r4, r5, r4
 8000ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef6:	f080 8107 	bcs.w	8001108 <__udivmoddi4+0x290>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	f240 8104 	bls.w	8001108 <__udivmoddi4+0x290>
 8000f00:	3802      	subs	r0, #2
 8000f02:	442c      	add	r4, r5
 8000f04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f08:	eba4 040c 	sub.w	r4, r4, ip
 8000f0c:	2700      	movs	r7, #0
 8000f0e:	b11e      	cbz	r6, 8000f18 <__udivmoddi4+0xa0>
 8000f10:	40d4      	lsrs	r4, r2
 8000f12:	2300      	movs	r3, #0
 8000f14:	e9c6 4300 	strd	r4, r3, [r6]
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d909      	bls.n	8000f36 <__udivmoddi4+0xbe>
 8000f22:	2e00      	cmp	r6, #0
 8000f24:	f000 80eb 	beq.w	80010fe <__udivmoddi4+0x286>
 8000f28:	2700      	movs	r7, #0
 8000f2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000f2e:	4638      	mov	r0, r7
 8000f30:	4639      	mov	r1, r7
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	fab3 f783 	clz	r7, r3
 8000f3a:	2f00      	cmp	r7, #0
 8000f3c:	d147      	bne.n	8000fce <__udivmoddi4+0x156>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d302      	bcc.n	8000f48 <__udivmoddi4+0xd0>
 8000f42:	4282      	cmp	r2, r0
 8000f44:	f200 80fa 	bhi.w	800113c <__udivmoddi4+0x2c4>
 8000f48:	1a84      	subs	r4, r0, r2
 8000f4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	4698      	mov	r8, r3
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	d0e0      	beq.n	8000f18 <__udivmoddi4+0xa0>
 8000f56:	e9c6 4800 	strd	r4, r8, [r6]
 8000f5a:	e7dd      	b.n	8000f18 <__udivmoddi4+0xa0>
 8000f5c:	b902      	cbnz	r2, 8000f60 <__udivmoddi4+0xe8>
 8000f5e:	deff      	udf	#255	; 0xff
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	2a00      	cmp	r2, #0
 8000f66:	f040 808f 	bne.w	8001088 <__udivmoddi4+0x210>
 8000f6a:	1b49      	subs	r1, r1, r5
 8000f6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f70:	fa1f f885 	uxth.w	r8, r5
 8000f74:	2701      	movs	r7, #1
 8000f76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000f7a:	0c23      	lsrs	r3, r4, #16
 8000f7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000f80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f84:	fb08 f10c 	mul.w	r1, r8, ip
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d907      	bls.n	8000f9c <__udivmoddi4+0x124>
 8000f8c:	18eb      	adds	r3, r5, r3
 8000f8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f92:	d202      	bcs.n	8000f9a <__udivmoddi4+0x122>
 8000f94:	4299      	cmp	r1, r3
 8000f96:	f200 80cd 	bhi.w	8001134 <__udivmoddi4+0x2bc>
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	1a59      	subs	r1, r3, r1
 8000f9e:	b2a3      	uxth	r3, r4
 8000fa0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fa4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000fa8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fac:	fb08 f800 	mul.w	r8, r8, r0
 8000fb0:	45a0      	cmp	r8, r4
 8000fb2:	d907      	bls.n	8000fc4 <__udivmoddi4+0x14c>
 8000fb4:	192c      	adds	r4, r5, r4
 8000fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fba:	d202      	bcs.n	8000fc2 <__udivmoddi4+0x14a>
 8000fbc:	45a0      	cmp	r8, r4
 8000fbe:	f200 80b6 	bhi.w	800112e <__udivmoddi4+0x2b6>
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	eba4 0408 	sub.w	r4, r4, r8
 8000fc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fcc:	e79f      	b.n	8000f0e <__udivmoddi4+0x96>
 8000fce:	f1c7 0c20 	rsb	ip, r7, #32
 8000fd2:	40bb      	lsls	r3, r7
 8000fd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000fd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000fdc:	fa01 f407 	lsl.w	r4, r1, r7
 8000fe0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000fe4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000fe8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000fec:	4325      	orrs	r5, r4
 8000fee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ff2:	0c2c      	lsrs	r4, r5, #16
 8000ff4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ff8:	fa1f fa8e 	uxth.w	sl, lr
 8000ffc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001000:	fb09 f40a 	mul.w	r4, r9, sl
 8001004:	429c      	cmp	r4, r3
 8001006:	fa02 f207 	lsl.w	r2, r2, r7
 800100a:	fa00 f107 	lsl.w	r1, r0, r7
 800100e:	d90b      	bls.n	8001028 <__udivmoddi4+0x1b0>
 8001010:	eb1e 0303 	adds.w	r3, lr, r3
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	f080 8087 	bcs.w	800112a <__udivmoddi4+0x2b2>
 800101c:	429c      	cmp	r4, r3
 800101e:	f240 8084 	bls.w	800112a <__udivmoddi4+0x2b2>
 8001022:	f1a9 0902 	sub.w	r9, r9, #2
 8001026:	4473      	add	r3, lr
 8001028:	1b1b      	subs	r3, r3, r4
 800102a:	b2ad      	uxth	r5, r5
 800102c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001030:	fb08 3310 	mls	r3, r8, r0, r3
 8001034:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001038:	fb00 fa0a 	mul.w	sl, r0, sl
 800103c:	45a2      	cmp	sl, r4
 800103e:	d908      	bls.n	8001052 <__udivmoddi4+0x1da>
 8001040:	eb1e 0404 	adds.w	r4, lr, r4
 8001044:	f100 33ff 	add.w	r3, r0, #4294967295
 8001048:	d26b      	bcs.n	8001122 <__udivmoddi4+0x2aa>
 800104a:	45a2      	cmp	sl, r4
 800104c:	d969      	bls.n	8001122 <__udivmoddi4+0x2aa>
 800104e:	3802      	subs	r0, #2
 8001050:	4474      	add	r4, lr
 8001052:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	eba4 040a 	sub.w	r4, r4, sl
 800105e:	454c      	cmp	r4, r9
 8001060:	46c2      	mov	sl, r8
 8001062:	464b      	mov	r3, r9
 8001064:	d354      	bcc.n	8001110 <__udivmoddi4+0x298>
 8001066:	d051      	beq.n	800110c <__udivmoddi4+0x294>
 8001068:	2e00      	cmp	r6, #0
 800106a:	d069      	beq.n	8001140 <__udivmoddi4+0x2c8>
 800106c:	ebb1 050a 	subs.w	r5, r1, sl
 8001070:	eb64 0403 	sbc.w	r4, r4, r3
 8001074:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001078:	40fd      	lsrs	r5, r7
 800107a:	40fc      	lsrs	r4, r7
 800107c:	ea4c 0505 	orr.w	r5, ip, r5
 8001080:	e9c6 5400 	strd	r5, r4, [r6]
 8001084:	2700      	movs	r7, #0
 8001086:	e747      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001088:	f1c2 0320 	rsb	r3, r2, #32
 800108c:	fa20 f703 	lsr.w	r7, r0, r3
 8001090:	4095      	lsls	r5, r2
 8001092:	fa01 f002 	lsl.w	r0, r1, r2
 8001096:	fa21 f303 	lsr.w	r3, r1, r3
 800109a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800109e:	4338      	orrs	r0, r7
 80010a0:	0c01      	lsrs	r1, r0, #16
 80010a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80010a6:	fa1f f885 	uxth.w	r8, r5
 80010aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80010ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010b2:	fb07 f308 	mul.w	r3, r7, r8
 80010b6:	428b      	cmp	r3, r1
 80010b8:	fa04 f402 	lsl.w	r4, r4, r2
 80010bc:	d907      	bls.n	80010ce <__udivmoddi4+0x256>
 80010be:	1869      	adds	r1, r5, r1
 80010c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80010c4:	d22f      	bcs.n	8001126 <__udivmoddi4+0x2ae>
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d92d      	bls.n	8001126 <__udivmoddi4+0x2ae>
 80010ca:	3f02      	subs	r7, #2
 80010cc:	4429      	add	r1, r5
 80010ce:	1acb      	subs	r3, r1, r3
 80010d0:	b281      	uxth	r1, r0
 80010d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80010d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80010da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010de:	fb00 f308 	mul.w	r3, r0, r8
 80010e2:	428b      	cmp	r3, r1
 80010e4:	d907      	bls.n	80010f6 <__udivmoddi4+0x27e>
 80010e6:	1869      	adds	r1, r5, r1
 80010e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80010ec:	d217      	bcs.n	800111e <__udivmoddi4+0x2a6>
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d915      	bls.n	800111e <__udivmoddi4+0x2a6>
 80010f2:	3802      	subs	r0, #2
 80010f4:	4429      	add	r1, r5
 80010f6:	1ac9      	subs	r1, r1, r3
 80010f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80010fc:	e73b      	b.n	8000f76 <__udivmoddi4+0xfe>
 80010fe:	4637      	mov	r7, r6
 8001100:	4630      	mov	r0, r6
 8001102:	e709      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001104:	4607      	mov	r7, r0
 8001106:	e6e7      	b.n	8000ed8 <__udivmoddi4+0x60>
 8001108:	4618      	mov	r0, r3
 800110a:	e6fb      	b.n	8000f04 <__udivmoddi4+0x8c>
 800110c:	4541      	cmp	r1, r8
 800110e:	d2ab      	bcs.n	8001068 <__udivmoddi4+0x1f0>
 8001110:	ebb8 0a02 	subs.w	sl, r8, r2
 8001114:	eb69 020e 	sbc.w	r2, r9, lr
 8001118:	3801      	subs	r0, #1
 800111a:	4613      	mov	r3, r2
 800111c:	e7a4      	b.n	8001068 <__udivmoddi4+0x1f0>
 800111e:	4660      	mov	r0, ip
 8001120:	e7e9      	b.n	80010f6 <__udivmoddi4+0x27e>
 8001122:	4618      	mov	r0, r3
 8001124:	e795      	b.n	8001052 <__udivmoddi4+0x1da>
 8001126:	4667      	mov	r7, ip
 8001128:	e7d1      	b.n	80010ce <__udivmoddi4+0x256>
 800112a:	4681      	mov	r9, r0
 800112c:	e77c      	b.n	8001028 <__udivmoddi4+0x1b0>
 800112e:	3802      	subs	r0, #2
 8001130:	442c      	add	r4, r5
 8001132:	e747      	b.n	8000fc4 <__udivmoddi4+0x14c>
 8001134:	f1ac 0c02 	sub.w	ip, ip, #2
 8001138:	442b      	add	r3, r5
 800113a:	e72f      	b.n	8000f9c <__udivmoddi4+0x124>
 800113c:	4638      	mov	r0, r7
 800113e:	e708      	b.n	8000f52 <__udivmoddi4+0xda>
 8001140:	4637      	mov	r7, r6
 8001142:	e6e9      	b.n	8000f18 <__udivmoddi4+0xa0>

08001144 <__aeabi_idiv0>:
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <arm_cfft_radix4by2_q15>:

void arm_cfft_radix4by2_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef) 
{    
 8001148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef ARM_MATH_CM0_FAMILY
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
    q15_t *pSi = pSrc;
    q15_t *pSl = pSrc + fftLen;
 800114c:	eb00 0841 	add.w	r8, r0, r1, lsl #1
{    
 8001150:	4604      	mov	r4, r0
#else
    uint32_t ia, l;
    q15_t xt, yt, cosVal, sinVal;
#endif
    
    n2 = fftLen >> 1; 
 8001152:	084d      	lsrs	r5, r1, #1
{    
 8001154:	4617      	mov	r7, r2
 8001156:	3804      	subs	r0, #4
    q15_t *pSl = pSrc + fftLen;
 8001158:	4641      	mov	r1, r8
    const q15_t *pC = pCoef;
 800115a:	4694      	mov	ip, r2

#ifndef ARM_MATH_CM0_FAMILY

    for (i = n2; i > 0; i--)
 800115c:	462e      	mov	r6, r5

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800115e:	f04f 0e00 	mov.w	lr, #0
        out2 = __SMUAD(coeff, R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001162:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80011f0 <arm_cfft_radix4by2_q15+0xa8>
    for (i = n2; i > 0; i--)
 8001166:	b996      	cbnz	r6, 800118e <arm_cfft_radix4by2_q15+0x46>
    } 
    
#endif //    #ifndef ARM_MATH_CM0_FAMILY
    
    // first col
    arm_radix4_butterfly_q15( pSrc, n2, (q15_t*)pCoef, 2u);
 8001168:	2302      	movs	r3, #2
 800116a:	463a      	mov	r2, r7
 800116c:	4629      	mov	r1, r5
 800116e:	4620      	mov	r0, r4
 8001170:	f000 f8f2 	bl	8001358 <arm_radix4_butterfly_q15>
    // second col
    arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
 8001174:	4640      	mov	r0, r8
 8001176:	2302      	movs	r3, #2
 8001178:	463a      	mov	r2, r7
 800117a:	4629      	mov	r1, r5
 800117c:	f000 f8ec 	bl	8001358 <arm_radix4_butterfly_q15>
 8001180:	4620      	mov	r0, r4
			
    for (i = 0; i < fftLen >> 1; i++)
 8001182:	42ae      	cmp	r6, r5
 8001184:	f100 0008 	add.w	r0, r0, #8
 8001188:	d11b      	bne.n	80011c2 <arm_cfft_radix4by2_q15+0x7a>
        pSrc[4*i+0] = p0;
        pSrc[4*i+1] = p1;
        pSrc[4*i+2] = p2;
        pSrc[4*i+3] = p3;
    }
}
 800118a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        coeff = _SIMD32_OFFSET(pC);
 800118e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8001192:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8001196:	fa92 fa2e 	shadd16	sl, r2, lr
 800119a:	680a      	ldr	r2, [r1, #0]
 800119c:	fa92 f22e 	shadd16	r2, r2, lr

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80011a0:	fada fb12 	qsub16	fp, sl, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80011a4:	fa9a f222 	shadd16	r2, sl, r2
        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 80011a8:	6002      	str	r2, [r0, #0]

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80011aa:	fb23 f20b 	smuad	r2, r3, fp

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80011ae:	fb43 f31b 	smusdx	r3, r3, fp
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80011b2:	ea03 0309 	and.w	r3, r3, r9
    for (i = n2; i > 0; i--)
 80011b6:	3e01      	subs	r6, #1
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80011b8:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
        _SIMD32_OFFSET(pSl) =
 80011bc:	f841 3b04 	str.w	r3, [r1], #4
 80011c0:	e7d1      	b.n	8001166 <arm_cfft_radix4by2_q15+0x1e>
        p0 <<= 1;
 80011c2:	f930 4c08 	ldrsh.w	r4, [r0, #-8]
    for (i = 0; i < fftLen >> 1; i++)
 80011c6:	3601      	adds	r6, #1
        p1 <<= 1;
 80011c8:	f930 1c06 	ldrsh.w	r1, [r0, #-6]
        p2 <<= 1;
 80011cc:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
        p0 <<= 1;
 80011d0:	0064      	lsls	r4, r4, #1
        p3 <<= 1;
 80011d2:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
        p1 <<= 1;
 80011d6:	0049      	lsls	r1, r1, #1
        p2 <<= 1;
 80011d8:	0052      	lsls	r2, r2, #1
        p0 <<= 1;
 80011da:	f820 4c08 	strh.w	r4, [r0, #-8]
        p3 <<= 1;
 80011de:	005b      	lsls	r3, r3, #1
        p1 <<= 1;
 80011e0:	f820 1c06 	strh.w	r1, [r0, #-6]
        p2 <<= 1;
 80011e4:	f820 2c04 	strh.w	r2, [r0, #-4]
        p3 <<= 1;
 80011e8:	f820 3c02 	strh.w	r3, [r0, #-2]
 80011ec:	e7c9      	b.n	8001182 <arm_cfft_radix4by2_q15+0x3a>
 80011ee:	bf00      	nop
 80011f0:	ffff0000 	.word	0xffff0000

080011f4 <arm_cfft_radix4by2_inverse_q15>:

void arm_cfft_radix4by2_inverse_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef) 
{    
 80011f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef ARM_MATH_CM0_FAMILY
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
    q15_t *pSi = pSrc;
    q15_t *pSl = pSrc + fftLen;
 80011f8:	eb00 0841 	add.w	r8, r0, r1, lsl #1
{    
 80011fc:	4604      	mov	r4, r0
#else
    uint32_t ia, l;
    q15_t xt, yt, cosVal, sinVal;
#endif
    
    n2 = fftLen >> 1; 
 80011fe:	084d      	lsrs	r5, r1, #1
{    
 8001200:	4617      	mov	r7, r2
 8001202:	3804      	subs	r0, #4
    q15_t *pSl = pSrc + fftLen;
 8001204:	4641      	mov	r1, r8
    const q15_t *pC = pCoef;
 8001206:	4694      	mov	ip, r2

#ifndef ARM_MATH_CM0_FAMILY

    for (i = n2; i > 0; i--)
 8001208:	462e      	mov	r6, r5
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800120a:	f04f 0e00 	mov.w	lr, #0
        out2 = __SMUSD(__QSUB(0, coeff), R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 800120e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800129c <arm_cfft_radix4by2_inverse_q15+0xa8>
    for (i = n2; i > 0; i--)
 8001212:	b996      	cbnz	r6, 800123a <arm_cfft_radix4by2_inverse_q15+0x46>
    } 
    
#endif //    #ifndef ARM_MATH_CM0_FAMILY

    // first col
    arm_radix4_butterfly_inverse_q15( pSrc, n2, (q15_t*)pCoef, 2u);
 8001214:	2302      	movs	r3, #2
 8001216:	463a      	mov	r2, r7
 8001218:	4629      	mov	r1, r5
 800121a:	4620      	mov	r0, r4
 800121c:	f000 f9c2 	bl	80015a4 <arm_radix4_butterfly_inverse_q15>
    // second col
    arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2u);
 8001220:	4640      	mov	r0, r8
 8001222:	2302      	movs	r3, #2
 8001224:	463a      	mov	r2, r7
 8001226:	4629      	mov	r1, r5
 8001228:	f000 f9bc 	bl	80015a4 <arm_radix4_butterfly_inverse_q15>
 800122c:	4620      	mov	r0, r4
			
    for (i = 0; i < fftLen >> 1; i++)
 800122e:	42ae      	cmp	r6, r5
 8001230:	f100 0008 	add.w	r0, r0, #8
 8001234:	d11b      	bne.n	800126e <arm_cfft_radix4by2_inverse_q15+0x7a>
        pSrc[4*i+0] = p0;
        pSrc[4*i+1] = p1;
        pSrc[4*i+2] = p2;
        pSrc[4*i+3] = p3;
    }
}
 8001236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        coeff = _SIMD32_OFFSET(pC);
 800123a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800123e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8001242:	fa92 fa2e 	shadd16	sl, r2, lr
 8001246:	680a      	ldr	r2, [r1, #0]
 8001248:	fa92 f22e 	shadd16	r2, r2, lr
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800124c:	fada fb12 	qsub16	fp, sl, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001250:	fa9a f222 	shadd16	r2, sl, r2
        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 8001254:	6002      	str	r2, [r0, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001256:	fb43 f20b 	smusd	r2, r3, fp
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800125a:	fb23 f31b 	smuadx	r3, r3, fp
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 800125e:	ea03 0309 	and.w	r3, r3, r9
    for (i = n2; i > 0; i--)
 8001262:	3e01      	subs	r6, #1
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);        
 8001264:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
        _SIMD32_OFFSET(pSl) =
 8001268:	f841 3b04 	str.w	r3, [r1], #4
 800126c:	e7d1      	b.n	8001212 <arm_cfft_radix4by2_inverse_q15+0x1e>
        p0 <<= 1;
 800126e:	f930 4c08 	ldrsh.w	r4, [r0, #-8]
    for (i = 0; i < fftLen >> 1; i++)
 8001272:	3601      	adds	r6, #1
        p1 <<= 1;
 8001274:	f930 1c06 	ldrsh.w	r1, [r0, #-6]
        p2 <<= 1;
 8001278:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
        p0 <<= 1;
 800127c:	0064      	lsls	r4, r4, #1
        p3 <<= 1;
 800127e:	f930 3c02 	ldrsh.w	r3, [r0, #-2]
        p1 <<= 1;
 8001282:	0049      	lsls	r1, r1, #1
        p2 <<= 1;
 8001284:	0052      	lsls	r2, r2, #1
        p0 <<= 1;
 8001286:	f820 4c08 	strh.w	r4, [r0, #-8]
        p3 <<= 1;
 800128a:	005b      	lsls	r3, r3, #1
        p1 <<= 1;
 800128c:	f820 1c06 	strh.w	r1, [r0, #-6]
        p2 <<= 1;
 8001290:	f820 2c04 	strh.w	r2, [r0, #-4]
        p3 <<= 1;
 8001294:	f820 3c02 	strh.w	r3, [r0, #-2]
 8001298:	e7c9      	b.n	800122e <arm_cfft_radix4by2_inverse_q15+0x3a>
 800129a:	bf00      	nop
 800129c:	ffff0000 	.word	0xffff0000

080012a0 <arm_cfft_q15>:
    if(ifftFlag == 1u)
 80012a0:	2a01      	cmp	r2, #1
{
 80012a2:	b570      	push	{r4, r5, r6, lr}
 80012a4:	460d      	mov	r5, r1
 80012a6:	4604      	mov	r4, r0
 80012a8:	461e      	mov	r6, r3
    uint32_t L = S->fftLen;
 80012aa:	8801      	ldrh	r1, [r0, #0]
    if(ifftFlag == 1u)
 80012ac:	d12d      	bne.n	800130a <arm_cfft_q15+0x6a>
        switch (L) 
 80012ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80012b2:	d005      	beq.n	80012c0 <arm_cfft_q15+0x20>
 80012b4:	d817      	bhi.n	80012e6 <arm_cfft_q15+0x46>
 80012b6:	2920      	cmp	r1, #32
 80012b8:	d022      	beq.n	8001300 <arm_cfft_q15+0x60>
 80012ba:	d807      	bhi.n	80012cc <arm_cfft_q15+0x2c>
 80012bc:	2910      	cmp	r1, #16
 80012be:	d109      	bne.n	80012d4 <arm_cfft_q15+0x34>
            arm_radix4_butterfly_inverse_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80012c0:	2301      	movs	r3, #1
 80012c2:	6862      	ldr	r2, [r4, #4]
 80012c4:	4628      	mov	r0, r5
 80012c6:	f000 f96d 	bl	80015a4 <arm_radix4_butterfly_inverse_q15>
            break;
 80012ca:	e003      	b.n	80012d4 <arm_cfft_q15+0x34>
        switch (L) 
 80012cc:	2940      	cmp	r1, #64	; 0x40
 80012ce:	d0f7      	beq.n	80012c0 <arm_cfft_q15+0x20>
 80012d0:	2980      	cmp	r1, #128	; 0x80
 80012d2:	d015      	beq.n	8001300 <arm_cfft_q15+0x60>
    if( bitReverseFlag )
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	d03d      	beq.n	8001354 <arm_cfft_q15+0xb4>
        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
 80012d8:	68a2      	ldr	r2, [r4, #8]
 80012da:	4628      	mov	r0, r5
 80012dc:	89a1      	ldrh	r1, [r4, #12]
}
 80012de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);    
 80012e2:	f7fe bfca 	b.w	800027a <arm_bitreversal_16>
        switch (L) 
 80012e6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80012ea:	d0e9      	beq.n	80012c0 <arm_cfft_q15+0x20>
 80012ec:	d802      	bhi.n	80012f4 <arm_cfft_q15+0x54>
 80012ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80012f2:	e7ee      	b.n	80012d2 <arm_cfft_q15+0x32>
 80012f4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80012f8:	d002      	beq.n	8001300 <arm_cfft_q15+0x60>
 80012fa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80012fe:	e7de      	b.n	80012be <arm_cfft_q15+0x1e>
            arm_cfft_radix4by2_inverse_q15  ( p1, L, S->pTwiddle );
 8001300:	6862      	ldr	r2, [r4, #4]
 8001302:	4628      	mov	r0, r5
 8001304:	f7ff ff76 	bl	80011f4 <arm_cfft_radix4by2_inverse_q15>
            break;
 8001308:	e7e4      	b.n	80012d4 <arm_cfft_q15+0x34>
        switch (L) 
 800130a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800130e:	d005      	beq.n	800131c <arm_cfft_q15+0x7c>
 8001310:	d813      	bhi.n	800133a <arm_cfft_q15+0x9a>
 8001312:	2920      	cmp	r1, #32
 8001314:	d00c      	beq.n	8001330 <arm_cfft_q15+0x90>
 8001316:	d807      	bhi.n	8001328 <arm_cfft_q15+0x88>
 8001318:	2910      	cmp	r1, #16
 800131a:	d1db      	bne.n	80012d4 <arm_cfft_q15+0x34>
            arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 800131c:	2301      	movs	r3, #1
 800131e:	6862      	ldr	r2, [r4, #4]
 8001320:	4628      	mov	r0, r5
 8001322:	f000 f819 	bl	8001358 <arm_radix4_butterfly_q15>
            break;
 8001326:	e7d5      	b.n	80012d4 <arm_cfft_q15+0x34>
        switch (L) 
 8001328:	2940      	cmp	r1, #64	; 0x40
 800132a:	d0f7      	beq.n	800131c <arm_cfft_q15+0x7c>
 800132c:	2980      	cmp	r1, #128	; 0x80
 800132e:	d1d1      	bne.n	80012d4 <arm_cfft_q15+0x34>
            arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8001330:	6862      	ldr	r2, [r4, #4]
 8001332:	4628      	mov	r0, r5
 8001334:	f7ff ff08 	bl	8001148 <arm_cfft_radix4by2_q15>
            break;
 8001338:	e7cc      	b.n	80012d4 <arm_cfft_q15+0x34>
        switch (L) 
 800133a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800133e:	d0ed      	beq.n	800131c <arm_cfft_q15+0x7c>
 8001340:	d802      	bhi.n	8001348 <arm_cfft_q15+0xa8>
 8001342:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001346:	e7f2      	b.n	800132e <arm_cfft_q15+0x8e>
 8001348:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800134c:	d0f0      	beq.n	8001330 <arm_cfft_q15+0x90>
 800134e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001352:	e7e2      	b.n	800131a <arm_cfft_q15+0x7a>
}
 8001354:	bd70      	pop	{r4, r5, r6, pc}
	...

08001358 <arm_radix4_butterfly_q15>:
void arm_radix4_butterfly_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 8001358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800135c:	b08d      	sub	sp, #52	; 0x34

  /* n2 = fftLen/4 */
  n2 >>= 2u;

  /* Index for twiddle coefficient */
  ic = 0u;
 800135e:	2600      	movs	r6, #0
 8001360:	f1a0 0904 	sub.w	r9, r0, #4
    T = __SHADD16(T, 0);

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001364:	f8df e238 	ldr.w	lr, [pc, #568]	; 80015a0 <arm_radix4_butterfly_q15+0x248>
{
 8001368:	9108      	str	r1, [sp, #32]
  n2 >>= 2u;
 800136a:	0889      	lsrs	r1, r1, #2
{
 800136c:	9001      	str	r0, [sp, #4]
  n2 >>= 2u;
 800136e:	9100      	str	r1, [sp, #0]
  pSi1 = pSi0 + 2 * n2;
 8001370:	0089      	lsls	r1, r1, #2
  j = n2;
 8001372:	f8dd c000 	ldr.w	ip, [sp]
  pSi1 = pSi0 + 2 * n2;
 8001376:	1847      	adds	r7, r0, r1
  pSi2 = pSi1 + 2 * n2;
 8001378:	187d      	adds	r5, r7, r1
 800137a:	3904      	subs	r1, #4
 800137c:	f1a5 0804 	sub.w	r8, r5, #4
 8001380:	440d      	add	r5, r1
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001382:	4631      	mov	r1, r6
 8001384:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8001388:	fa90 f021 	shadd16	r0, r0, r1
 800138c:	fa90 f021 	shadd16	r0, r0, r1
 8001390:	f858 4f04 	ldr.w	r4, [r8, #4]!
 8001394:	fa94 fa21 	shadd16	sl, r4, r1
 8001398:	fa9a fa21 	shadd16	sl, sl, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800139c:	fa90 fb1a 	qadd16	fp, r0, sl
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013a0:	fad0 fa1a 	qsub16	sl, r0, sl
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013a4:	683c      	ldr	r4, [r7, #0]
 80013a6:	fa94 f421 	shadd16	r4, r4, r1
 80013aa:	fa94 f021 	shadd16	r0, r4, r1
 80013ae:	686c      	ldr	r4, [r5, #4]
 80013b0:	fa94 f421 	shadd16	r4, r4, r1
 80013b4:	fa94 f421 	shadd16	r4, r4, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013b8:	fa90 f414 	qadd16	r4, r0, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013bc:	fa9b f024 	shadd16	r0, fp, r4
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 80013c0:	f8c9 0000 	str.w	r0, [r9]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013c4:	fadb f414 	qsub16	r4, fp, r4
    out1 = __SMUAD(C2, R) >> 16u;
 80013c8:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013cc:	fb20 fb04 	smuad	fp, r0, r4
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013d0:	fb40 f014 	smusdx	r0, r0, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013d4:	683c      	ldr	r4, [r7, #0]
 80013d6:	fa94 f421 	shadd16	r4, r4, r1
 80013da:	fa94 f421 	shadd16	r4, r4, r1
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80013de:	ea00 000e 	and.w	r0, r0, lr
 80013e2:	ea40 401b 	orr.w	r0, r0, fp, lsr #16
    _SIMD32_OFFSET(pSi1) =
 80013e6:	f847 0b04 	str.w	r0, [r7], #4
 80013ea:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80013ee:	fa90 f021 	shadd16	r0, r0, r1
 80013f2:	fa90 f021 	shadd16	r0, r0, r1
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013f6:	fad4 f410 	qsub16	r4, r4, r0
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013fa:	faaa fb14 	qasx	fp, sl, r4
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013fe:	faea f014 	qsax	r0, sl, r4
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16u;
 8001402:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001406:	fb24 fa00 	smuad	sl, r4, r0
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800140a:	fb44 f010 	smusdx	r0, r4, r0

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xb', yb') in little endian format */
    _SIMD32_OFFSET(pSi2) =
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 800140e:	ea00 000e 	and.w	r0, r0, lr
 8001412:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
    _SIMD32_OFFSET(pSi2) =
 8001416:	f8c8 0000 	str.w	r0, [r8]
    pSi2 += 2;


    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 800141a:	200c      	movs	r0, #12
 800141c:	4370      	muls	r0, r6
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16u;
 800141e:	5810      	ldr	r0, [r2, r0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001420:	fb20 f40b 	smuad	r4, r0, fp
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001424:	fb40 fb1b 	smusdx	fp, r0, fp

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001428:	ea0b 0b0e 	and.w	fp, fp, lr
    pSi3 += 2;

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;

  } while(--j);
 800142c:	f1bc 0c01 	subs.w	ip, ip, #1
    ic = ic + twidCoefModifier;
 8001430:	441e      	add	r6, r3
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001432:	ea4b 4414 	orr.w	r4, fp, r4, lsr #16
    _SIMD32_OFFSET(pSi3) =
 8001436:	602c      	str	r4, [r5, #0]
  } while(--j);
 8001438:	d1a4      	bne.n	8001384 <arm_radix4_butterfly_q15+0x2c>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2u;
 800143a:	009b      	lsls	r3, r3, #2
  n2 >>= 2u;
 800143c:	9800      	ldr	r0, [sp, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800143e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  twidCoefModifier <<= 2u;
 8001442:	9303      	str	r3, [sp, #12]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 8001444:	2804      	cmp	r0, #4
 8001446:	d82b      	bhi.n	80014a0 <arm_radix4_butterfly_q15+0x148>
 8001448:	9801      	ldr	r0, [sp, #4]
 800144a:	3010      	adds	r0, #16

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 800144c:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8001450:	f850 6c08 	ldr.w	r6, [r0, #-8]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001454:	fa93 f116 	qadd16	r1, r3, r6

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8001458:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 800145c:	f850 4c04 	ldr.w	r4, [r0, #-4]
 8001460:	fa92 f514 	qadd16	r5, r2, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001464:	fa91 f525 	shadd16	r5, r1, r5
    ptr1 = ptr1 - 8u;


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 8001468:	f840 5c10 	str.w	r5, [r0, #-16]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800146c:	fa92 f514 	qadd16	r5, r2, r4
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001470:	fad1 f125 	shsub16	r1, r1, r5
    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 8001474:	f840 1c0c 	str.w	r1, [r0, #-12]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001478:	fad3 f316 	qsub16	r3, r3, r6
 800147c:	fad2 f214 	qsub16	r2, r2, r4
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001480:	fae3 f122 	shsax	r1, r3, r2

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 8001484:	f840 1c08 	str.w	r1, [r0, #-8]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001488:	faa3 f322 	shasx	r3, r3, r2


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 800148c:	f840 3c04 	str.w	r3, [r0, #-4]
 8001490:	3010      	adds	r0, #16
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while(--j);
 8001492:	9b00      	ldr	r3, [sp, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	d1d8      	bne.n	800144c <arm_radix4_butterfly_q15+0xf4>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800149a:	b00d      	add	sp, #52	; 0x34
 800149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n2 >>= 2u;
 80014a0:	0883      	lsrs	r3, r0, #2
 80014a2:	f8dd 9004 	ldr.w	r9, [sp, #4]
        pSi0 += 2 * n1;
 80014a6:	ea4f 0880 	mov.w	r8, r0, lsl #2
    n2 >>= 2u;
 80014aa:	930a      	str	r3, [sp, #40]	; 0x28
      pSi1 = pSi0 + 2 * n2;
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	9302      	str	r3, [sp, #8]
    for (j = 0u; j <= (n2 - 1u); j++)
 80014b0:	2300      	movs	r3, #0
    ic = 0u;
 80014b2:	461c      	mov	r4, r3
    for (j = 0u; j <= (n2 - 1u); j++)
 80014b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80014b6:	428b      	cmp	r3, r1
 80014b8:	d104      	bne.n	80014c4 <arm_radix4_butterfly_q15+0x16c>
    twidCoefModifier <<= 2u;
 80014ba:	9903      	ldr	r1, [sp, #12]
 80014bc:	4618      	mov	r0, r3
 80014be:	0089      	lsls	r1, r1, #2
 80014c0:	9103      	str	r1, [sp, #12]
 80014c2:	e7bf      	b.n	8001444 <arm_radix4_butterfly_q15+0xec>
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 80014c4:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
      pSi0 = pSrc16 + 2 * j;
 80014c8:	46ca      	mov	sl, r9
 80014ca:	9d02      	ldr	r5, [sp, #8]
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 80014cc:	9105      	str	r1, [sp, #20]
      C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 80014ce:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 80014d2:	9e02      	ldr	r6, [sp, #8]
 80014d4:	9106      	str	r1, [sp, #24]
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 80014d6:	210c      	movs	r1, #12
      for (i0 = j; i0 < fftLen; i0 += n1)
 80014d8:	9304      	str	r3, [sp, #16]
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 80014da:	4361      	muls	r1, r4
 80014dc:	5851      	ldr	r1, [r2, r1]
 80014de:	9107      	str	r1, [sp, #28]
      ic = ic + twidCoefModifier;
 80014e0:	9903      	ldr	r1, [sp, #12]
 80014e2:	440c      	add	r4, r1
 80014e4:	9902      	ldr	r1, [sp, #8]
 80014e6:	4449      	add	r1, r9
 80014e8:	440d      	add	r5, r1
 80014ea:	eb06 0c05 	add.w	ip, r6, r5
      for (i0 = j; i0 < fftLen; i0 += n1)
 80014ee:	9e04      	ldr	r6, [sp, #16]
 80014f0:	9f08      	ldr	r7, [sp, #32]
 80014f2:	42be      	cmp	r6, r7
 80014f4:	d303      	bcc.n	80014fe <arm_radix4_butterfly_q15+0x1a6>
    for (j = 0u; j <= (n2 - 1u); j++)
 80014f6:	3301      	adds	r3, #1
 80014f8:	f109 0904 	add.w	r9, r9, #4
 80014fc:	e7da      	b.n	80014b4 <arm_radix4_butterfly_q15+0x15c>
        R = __QADD16(T, S);
 80014fe:	f8da 6000 	ldr.w	r6, [sl]
 8001502:	682f      	ldr	r7, [r5, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001504:	fa96 fb17 	qadd16	fp, r6, r7
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001508:	fad6 fe17 	qsub16	lr, r6, r7
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800150c:	680e      	ldr	r6, [r1, #0]
 800150e:	f8dc 7000 	ldr.w	r7, [ip]
 8001512:	fa96 f617 	qadd16	r6, r6, r7
 8001516:	9609      	str	r6, [sp, #36]	; 0x24
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001518:	fa9b f626 	shadd16	r6, fp, r6
 800151c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800151e:	fa96 f727 	shadd16	r7, r6, r7
        _SIMD32_OFFSET(pSi0) = out1;
 8001522:	f8ca 7000 	str.w	r7, [sl]
        pSi0 += 2 * n1;
 8001526:	44c2      	add	sl, r8
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001528:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800152a:	fadb fb26 	shsub16	fp, fp, r6
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800152e:	9e06      	ldr	r6, [sp, #24]
 8001530:	fb26 f60b 	smuad	r6, r6, fp
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001534:	9f06      	ldr	r7, [sp, #24]
 8001536:	fb47 fb1b 	smusdx	fp, r7, fp
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800153a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
        T = _SIMD32_OFFSET(pSi1);
 800153e:	680f      	ldr	r7, [r1, #0]
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001540:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8001544:	ea4b 4616 	orr.w	r6, fp, r6, lsr #16
        _SIMD32_OFFSET(pSi1) =
 8001548:	600e      	str	r6, [r1, #0]
        pSi1 += 2 * n1;
 800154a:	4441      	add	r1, r8
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800154c:	f8dc 6000 	ldr.w	r6, [ip]
 8001550:	fad7 f616 	qsub16	r6, r7, r6
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001554:	faae fb26 	shasx	fp, lr, r6
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001558:	faee fe26 	shsax	lr, lr, r6
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800155c:	9e05      	ldr	r6, [sp, #20]
 800155e:	fb26 f60e 	smuad	r6, r6, lr
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001562:	9f05      	ldr	r7, [sp, #20]
 8001564:	fb47 fe1e 	smusdx	lr, r7, lr
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001568:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800156c:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8001570:	ea4e 4616 	orr.w	r6, lr, r6, lsr #16
        _SIMD32_OFFSET(pSi2) =
 8001574:	602e      	str	r6, [r5, #0]
        pSi2 += 2 * n1;
 8001576:	4445      	add	r5, r8
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001578:	9e07      	ldr	r6, [sp, #28]
 800157a:	fb26 f60b 	smuad	r6, r6, fp
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800157e:	9f07      	ldr	r7, [sp, #28]
 8001580:	fb47 fb1b 	smusdx	fp, r7, fp
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001584:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8001588:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 800158c:	ea4b 4616 	orr.w	r6, fp, r6, lsr #16
        _SIMD32_OFFSET(pSi3) =
 8001590:	f8cc 6000 	str.w	r6, [ip]
        pSi3 += 2 * n1;
 8001594:	44c4      	add	ip, r8
      for (i0 = j; i0 < fftLen; i0 += n1)
 8001596:	9e04      	ldr	r6, [sp, #16]
 8001598:	4406      	add	r6, r0
 800159a:	9604      	str	r6, [sp, #16]
 800159c:	e7a7      	b.n	80014ee <arm_radix4_butterfly_q15+0x196>
 800159e:	bf00      	nop
 80015a0:	ffff0000 	.word	0xffff0000

080015a4 <arm_radix4_butterfly_inverse_q15>:
void arm_radix4_butterfly_inverse_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 80015a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a8:	b08d      	sub	sp, #52	; 0x34

  /* n2 = fftLen/4 */
  n2 >>= 2u;

  /* Index for twiddle coefficient */
  ic = 0u;
 80015aa:	2600      	movs	r6, #0
 80015ac:	f1a0 0904 	sub.w	r9, r0, #4
    T = __SHADD16(T, 0);

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80015b0:	f8df e238 	ldr.w	lr, [pc, #568]	; 80017ec <arm_radix4_butterfly_inverse_q15+0x248>
{
 80015b4:	9108      	str	r1, [sp, #32]
  n2 >>= 2u;
 80015b6:	0889      	lsrs	r1, r1, #2
{
 80015b8:	9001      	str	r0, [sp, #4]
  n2 >>= 2u;
 80015ba:	9100      	str	r1, [sp, #0]
  pSi1 = pSi0 + 2 * n2;
 80015bc:	0089      	lsls	r1, r1, #2
  j = n2;
 80015be:	f8dd c000 	ldr.w	ip, [sp]
  pSi1 = pSi0 + 2 * n2;
 80015c2:	1847      	adds	r7, r0, r1
  pSi2 = pSi1 + 2 * n2;
 80015c4:	187d      	adds	r5, r7, r1
 80015c6:	3904      	subs	r1, #4
 80015c8:	f1a5 0804 	sub.w	r8, r5, #4
 80015cc:	440d      	add	r5, r1
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80015ce:	4631      	mov	r1, r6
 80015d0:	f859 0f04 	ldr.w	r0, [r9, #4]!
 80015d4:	fa90 f021 	shadd16	r0, r0, r1
 80015d8:	fa90 f021 	shadd16	r0, r0, r1
 80015dc:	f858 4f04 	ldr.w	r4, [r8, #4]!
 80015e0:	fa94 fa21 	shadd16	sl, r4, r1
 80015e4:	fa9a fa21 	shadd16	sl, sl, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80015e8:	fa90 fb1a 	qadd16	fp, r0, sl
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80015ec:	fad0 fa1a 	qsub16	sl, r0, sl
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80015f0:	683c      	ldr	r4, [r7, #0]
 80015f2:	fa94 f421 	shadd16	r4, r4, r1
 80015f6:	fa94 f021 	shadd16	r0, r4, r1
 80015fa:	686c      	ldr	r4, [r5, #4]
 80015fc:	fa94 f421 	shadd16	r4, r4, r1
 8001600:	fa94 f421 	shadd16	r4, r4, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001604:	fa90 f414 	qadd16	r4, r0, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001608:	fa9b f024 	shadd16	r0, fp, r4
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 800160c:	f8c9 0000 	str.w	r0, [r9]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001610:	fadb f414 	qsub16	r4, fp, r4
    out1 = __SMUSD(C2, R) >> 16u;
 8001614:	f852 0036 	ldr.w	r0, [r2, r6, lsl #3]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001618:	fb40 fb04 	smusd	fp, r0, r4
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800161c:	fb20 f014 	smuadx	r0, r0, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001620:	683c      	ldr	r4, [r7, #0]
 8001622:	fa94 f421 	shadd16	r4, r4, r1
 8001626:	fa94 f421 	shadd16	r4, r4, r1
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800162a:	ea00 000e 	and.w	r0, r0, lr
 800162e:	ea40 401b 	orr.w	r0, r0, fp, lsr #16
    _SIMD32_OFFSET(pSi1) =
 8001632:	f847 0b04 	str.w	r0, [r7], #4
 8001636:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800163a:	fa90 f021 	shadd16	r0, r0, r1
 800163e:	fa90 f021 	shadd16	r0, r0, r1
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001642:	fad4 f410 	qsub16	r4, r4, r0
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001646:	faea fb14 	qsax	fp, sl, r4
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800164a:	faaa f014 	qasx	r0, sl, r4
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16u;
 800164e:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001652:	fb44 fa00 	smusd	sl, r4, r0
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001656:	fb24 f010 	smuadx	r0, r4, r0

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xb', yb') in little endian format */
    _SIMD32_OFFSET(pSi2) =
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 800165a:	ea00 000e 	and.w	r0, r0, lr
 800165e:	ea40 401a 	orr.w	r0, r0, sl, lsr #16
    _SIMD32_OFFSET(pSi2) =
 8001662:	f8c8 0000 	str.w	r0, [r8]
    pSi2 += 2;


    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001666:	200c      	movs	r0, #12
 8001668:	4370      	muls	r0, r6
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16u;
 800166a:	5810      	ldr	r0, [r2, r0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800166c:	fb40 f40b 	smusd	r4, r0, fp
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001670:	fb20 fb1b 	smuadx	fp, r0, fp

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001674:	ea0b 0b0e 	and.w	fp, fp, lr
    pSi3 += 2;

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;

  } while(--j);
 8001678:	f1bc 0c01 	subs.w	ip, ip, #1
    ic = ic + twidCoefModifier;
 800167c:	441e      	add	r6, r3
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800167e:	ea4b 4414 	orr.w	r4, fp, r4, lsr #16
    _SIMD32_OFFSET(pSi3) =
 8001682:	602c      	str	r4, [r5, #0]
  } while(--j);
 8001684:	d1a4      	bne.n	80015d0 <arm_radix4_butterfly_inverse_q15+0x2c>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2u;
 8001686:	009b      	lsls	r3, r3, #2
  n2 >>= 2u;
 8001688:	9800      	ldr	r0, [sp, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800168a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  twidCoefModifier <<= 2u;
 800168e:	9303      	str	r3, [sp, #12]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4u; k > 4u; k >>= 2u)
 8001690:	2804      	cmp	r0, #4
 8001692:	d82b      	bhi.n	80016ec <arm_radix4_butterfly_inverse_q15+0x148>
 8001694:	9801      	ldr	r0, [sp, #4]
 8001696:	3010      	adds	r0, #16

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8001698:	f850 3c10 	ldr.w	r3, [r0, #-16]
 800169c:	f850 6c08 	ldr.w	r6, [r0, #-8]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016a0:	fa93 f116 	qadd16	r1, r3, r6

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80016a4:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 80016a8:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80016ac:	fa92 f514 	qadd16	r5, r2, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016b0:	fa91 f525 	shadd16	r5, r1, r5
    ptr1 = ptr1 - 8u;


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 80016b4:	f840 5c10 	str.w	r5, [r0, #-16]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016b8:	fa92 f514 	qadd16	r5, r2, r4
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016bc:	fad1 f125 	shsub16	r1, r1, r5
    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 80016c0:	f840 1c0c 	str.w	r1, [r0, #-12]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016c4:	fad3 f316 	qsub16	r3, r3, r6
 80016c8:	fad2 f214 	qsub16	r2, r2, r4
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016cc:	faa3 f122 	shasx	r1, r3, r2

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 80016d0:	f840 1c08 	str.w	r1, [r0, #-8]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80016d4:	fae3 f322 	shsax	r3, r3, r2


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 80016d8:	f840 3c04 	str.w	r3, [r0, #-4]
 80016dc:	3010      	adds	r0, #16
    *__SIMD32(ptr1)++ = __SHASX(S, U);


#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while(--j);
 80016de:	9b00      	ldr	r3, [sp, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	d1d8      	bne.n	8001698 <arm_radix4_butterfly_inverse_q15+0xf4>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80016e6:	b00d      	add	sp, #52	; 0x34
 80016e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    n2 >>= 2u;
 80016ec:	0883      	lsrs	r3, r0, #2
 80016ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
        pSi0 += 2 * n1;
 80016f2:	ea4f 0880 	mov.w	r8, r0, lsl #2
    n2 >>= 2u;
 80016f6:	930a      	str	r3, [sp, #40]	; 0x28
      pSi1 = pSi0 + 2 * n2;
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	9302      	str	r3, [sp, #8]
    for (j = 0u; j <= (n2 - 1u); j++)
 80016fc:	2300      	movs	r3, #0
    ic = 0u;
 80016fe:	461c      	mov	r4, r3
    for (j = 0u; j <= (n2 - 1u); j++)
 8001700:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001702:	428b      	cmp	r3, r1
 8001704:	d104      	bne.n	8001710 <arm_radix4_butterfly_inverse_q15+0x16c>
    twidCoefModifier <<= 2u;
 8001706:	9903      	ldr	r1, [sp, #12]
 8001708:	4618      	mov	r0, r3
 800170a:	0089      	lsls	r1, r1, #2
 800170c:	9103      	str	r1, [sp, #12]
 800170e:	e7bf      	b.n	8001690 <arm_radix4_butterfly_inverse_q15+0xec>
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 8001710:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
      pSi0 = pSrc16 + 2 * j;
 8001714:	46ca      	mov	sl, r9
 8001716:	9d02      	ldr	r5, [sp, #8]
      C1 = _SIMD32_OFFSET(pCoef16 + (2u * ic));
 8001718:	9105      	str	r1, [sp, #20]
      C2 = _SIMD32_OFFSET(pCoef16 + (4u * ic));
 800171a:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 800171e:	9e02      	ldr	r6, [sp, #8]
 8001720:	9106      	str	r1, [sp, #24]
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001722:	210c      	movs	r1, #12
      for (i0 = j; i0 < fftLen; i0 += n1)
 8001724:	9304      	str	r3, [sp, #16]
      C3 = _SIMD32_OFFSET(pCoef16 + (6u * ic));
 8001726:	4361      	muls	r1, r4
 8001728:	5851      	ldr	r1, [r2, r1]
 800172a:	9107      	str	r1, [sp, #28]
      ic = ic + twidCoefModifier;
 800172c:	9903      	ldr	r1, [sp, #12]
 800172e:	440c      	add	r4, r1
 8001730:	9902      	ldr	r1, [sp, #8]
 8001732:	4449      	add	r1, r9
 8001734:	440d      	add	r5, r1
 8001736:	eb06 0c05 	add.w	ip, r6, r5
      for (i0 = j; i0 < fftLen; i0 += n1)
 800173a:	9e04      	ldr	r6, [sp, #16]
 800173c:	9f08      	ldr	r7, [sp, #32]
 800173e:	42be      	cmp	r6, r7
 8001740:	d303      	bcc.n	800174a <arm_radix4_butterfly_inverse_q15+0x1a6>
    for (j = 0u; j <= (n2 - 1u); j++)
 8001742:	3301      	adds	r3, #1
 8001744:	f109 0904 	add.w	r9, r9, #4
 8001748:	e7da      	b.n	8001700 <arm_radix4_butterfly_inverse_q15+0x15c>
        R = __QADD16(T, S);
 800174a:	f8da 6000 	ldr.w	r6, [sl]
 800174e:	682f      	ldr	r7, [r5, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001750:	fa96 fb17 	qadd16	fp, r6, r7
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001754:	fad6 fe17 	qsub16	lr, r6, r7
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001758:	680e      	ldr	r6, [r1, #0]
 800175a:	f8dc 7000 	ldr.w	r7, [ip]
 800175e:	fa96 f617 	qadd16	r6, r6, r7
 8001762:	9609      	str	r6, [sp, #36]	; 0x24
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001764:	fa9b f626 	shadd16	r6, fp, r6
 8001768:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800176a:	fa96 f727 	shadd16	r7, r6, r7
        _SIMD32_OFFSET(pSi0) = out1;
 800176e:	f8ca 7000 	str.w	r7, [sl]
        pSi0 += 2 * n1;
 8001772:	44c2      	add	sl, r8
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001774:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001776:	fadb fb26 	shsub16	fp, fp, r6
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800177a:	9e06      	ldr	r6, [sp, #24]
 800177c:	fb46 f60b 	smusd	r6, r6, fp
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001780:	9f06      	ldr	r7, [sp, #24]
 8001782:	fb27 fb1b 	smuadx	fp, r7, fp
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8001786:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
        T = _SIMD32_OFFSET(pSi1);
 800178a:	680f      	ldr	r7, [r1, #0]
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800178c:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8001790:	ea4b 4616 	orr.w	r6, fp, r6, lsr #16
        _SIMD32_OFFSET(pSi1) =
 8001794:	600e      	str	r6, [r1, #0]
        pSi1 += 2 * n1;
 8001796:	4441      	add	r1, r8
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001798:	f8dc 6000 	ldr.w	r6, [ip]
 800179c:	fad7 f616 	qsub16	r6, r7, r6
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017a0:	faee fb26 	shsax	fp, lr, r6
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017a4:	faae fe26 	shasx	lr, lr, r6
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017a8:	9e05      	ldr	r6, [sp, #20]
 80017aa:	fb46 f60e 	smusd	r6, r6, lr
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017ae:	9f05      	ldr	r7, [sp, #20]
 80017b0:	fb27 fe1e 	smuadx	lr, r7, lr
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80017b4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80017b8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80017bc:	ea4e 4616 	orr.w	r6, lr, r6, lsr #16
        _SIMD32_OFFSET(pSi2) =
 80017c0:	602e      	str	r6, [r5, #0]
        pSi2 += 2 * n1;
 80017c2:	4445      	add	r5, r8
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017c4:	9e07      	ldr	r6, [sp, #28]
 80017c6:	fb46 f60b 	smusd	r6, r6, fp
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80017ca:	9f07      	ldr	r7, [sp, #28]
 80017cc:	fb27 fb1b 	smuadx	fp, r7, fp
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80017d0:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 80017d4:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 80017d8:	ea4b 4616 	orr.w	r6, fp, r6, lsr #16
        _SIMD32_OFFSET(pSi3) =
 80017dc:	f8cc 6000 	str.w	r6, [ip]
        pSi3 += 2 * n1;
 80017e0:	44c4      	add	ip, r8
      for (i0 = j; i0 < fftLen; i0 += n1)
 80017e2:	9e04      	ldr	r6, [sp, #16]
 80017e4:	4406      	add	r6, r0
 80017e6:	9604      	str	r6, [sp, #16]
 80017e8:	e7a7      	b.n	800173a <arm_radix4_butterfly_inverse_q15+0x196>
 80017ea:	bf00      	nop
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <arm_cmplx_mag_squared_q15>:

void arm_cmplx_mag_squared_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples)
{
 80017f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t blkCnt;                               /* loop counter */
  q31_t in1, in2, in3, in4;
  q31_t acc2, acc3;

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80017f4:	0897      	lsrs	r7, r2, #2
 80017f6:	f100 0410 	add.w	r4, r0, #16
 80017fa:	460b      	mov	r3, r1
 80017fc:	46bc      	mov	ip, r7
 80017fe:	3410      	adds	r4, #16
 8001800:	3308      	adds	r3, #8

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001802:	f1bc 0f00 	cmp.w	ip, #0
 8001806:	d10b      	bne.n	8001820 <arm_cmplx_mag_squared_q15+0x30>
 8001808:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
    blkCnt--;
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 800180c:	f002 0203 	and.w	r2, r2, #3
 8001810:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8001814:	eb01 0242 	add.w	r2, r1, r2, lsl #1

  while(blkCnt > 0u)
 8001818:	4291      	cmp	r1, r2
 800181a:	d122      	bne.n	8001862 <arm_cmplx_mag_squared_q15+0x72>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acc0 = __SMUAD(in1, in1);
 8001820:	f854 5c20 	ldr.w	r5, [r4, #-32]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001824:	fb25 f805 	smuad	r8, r5, r5
    acc1 = __SMUAD(in2, in2);
 8001828:	f854 5c1c 	ldr.w	r5, [r4, #-28]
 800182c:	fb25 fe05 	smuad	lr, r5, r5
    acc2 = __SMUAD(in3, in3);
 8001830:	f854 6c18 	ldr.w	r6, [r4, #-24]
 8001834:	fb26 f606 	smuad	r6, r6, r6
    acc3 = __SMUAD(in4, in4);
 8001838:	f854 5c14 	ldr.w	r5, [r4, #-20]
 800183c:	fb25 f505 	smuad	r5, r5, r5
    *pDst++ = (q15_t) (acc0 >> 17);
 8001840:	ea4f 4868 	mov.w	r8, r8, asr #17
    blkCnt--;
 8001844:	f10c 3cff 	add.w	ip, ip, #4294967295
    *pDst++ = (q15_t) (acc1 >> 17);
 8001848:	ea4f 4e6e 	mov.w	lr, lr, asr #17
    *pDst++ = (q15_t) (acc2 >> 17);
 800184c:	1476      	asrs	r6, r6, #17
    *pDst++ = (q15_t) (acc0 >> 17);
 800184e:	f823 8c08 	strh.w	r8, [r3, #-8]
    *pDst++ = (q15_t) (acc3 >> 17);
 8001852:	146d      	asrs	r5, r5, #17
    *pDst++ = (q15_t) (acc1 >> 17);
 8001854:	f823 ec06 	strh.w	lr, [r3, #-6]
    *pDst++ = (q15_t) (acc2 >> 17);
 8001858:	f823 6c04 	strh.w	r6, [r3, #-4]
    *pDst++ = (q15_t) (acc3 >> 17);
 800185c:	f823 5c02 	strh.w	r5, [r3, #-2]
 8001860:	e7cd      	b.n	80017fe <arm_cmplx_mag_squared_q15+0xe>
    acc0 = __SMUAD(in1, in1);
 8001862:	f850 3b04 	ldr.w	r3, [r0], #4
 8001866:	fb23 f303 	smuad	r3, r3, r3
    *pDst++ = (q15_t) (acc0 >> 17);
 800186a:	145b      	asrs	r3, r3, #17
 800186c:	f821 3b02 	strh.w	r3, [r1], #2
 8001870:	e7d2      	b.n	8001818 <arm_cmplx_mag_squared_q15+0x28>

08001872 <arm_fir_q15>:
void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 8001872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001876:	b093      	sub	sp, #76	; 0x4c

  blkCnt = blockSize >> 2;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001878:	f04f 0b04 	mov.w	fp, #4
 800187c:	f04f 0e00 	mov.w	lr, #0
{
 8001880:	930f      	str	r3, [sp, #60]	; 0x3c
  q15_t *pState = S->pState;                     /* State pointer */
 8001882:	6843      	ldr	r3, [r0, #4]
{
 8001884:	9005      	str	r0, [sp, #20]
  q15_t *pState = S->pState;                     /* State pointer */
 8001886:	9302      	str	r3, [sp, #8]
  q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8001888:	6883      	ldr	r3, [r0, #8]
 800188a:	9307      	str	r3, [sp, #28]
  uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
 800188c:	8803      	ldrh	r3, [r0, #0]
  pStateCurnt = &(S->pState[(numTaps - 1u)]);
 800188e:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  uint32_t numTaps = S->numTaps;                 /* Number of taps in the filter */
 8001892:	9301      	str	r3, [sp, #4]
  pStateCurnt = &(S->pState[(numTaps - 1u)]);
 8001894:	9b02      	ldr	r3, [sp, #8]
 8001896:	3c01      	subs	r4, #1
 8001898:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800189c:	9306      	str	r3, [sp, #24]
  blkCnt = blockSize >> 2;
 800189e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	930d      	str	r3, [sp, #52]	; 0x34
 80018a4:	9b02      	ldr	r3, [sp, #8]
 80018a6:	f103 0c0c 	add.w	ip, r3, #12

    px1 += 2u;

    /* Loop over the number of taps.  Unroll by a factor of 4.       
     ** Repeat until we've computed numTaps-4 coefficients. */
    tapCnt = numTaps >> 2;
 80018aa:	9b01      	ldr	r3, [sp, #4]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	00db      	lsls	r3, r3, #3
{
 80018b0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80018b4:	9308      	str	r3, [sp, #32]
 80018b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	930e      	str	r3, [sp, #56]	; 0x38
 80018be:	9b02      	ldr	r3, [sp, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	9310      	str	r3, [sp, #64]	; 0x40
    }


    /* If the filter length is not a multiple of 4, compute the remaining filter taps.       
     ** This is always be 2 taps since the filter length is even. */
    if((numTaps & 0x3u) != 0u)
 80018c4:	9b01      	ldr	r3, [sp, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	9311      	str	r3, [sp, #68]	; 0x44
  while(blkCnt > 0u)
 80018cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018ce:	4573      	cmp	r3, lr
 80018d0:	d137      	bne.n	8001942 <arm_fir_q15+0xd0>
 80018d2:	00dc      	lsls	r4, r3, #3
 80018d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.       
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
  while(blkCnt > 0u)
 80018d6:	2600      	movs	r6, #0
 80018d8:	4423      	add	r3, r4
 80018da:	469a      	mov	sl, r3
 80018dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018de:	4423      	add	r3, r4
 80018e0:	4698      	mov	r8, r3
 80018e2:	9b02      	ldr	r3, [sp, #8]
 80018e4:	4423      	add	r3, r4
 80018e6:	469e      	mov	lr, r3
 80018e8:	9b06      	ldr	r3, [sp, #24]
 80018ea:	4423      	add	r3, r4
 80018ec:	461c      	mov	r4, r3
    px1 = pState;

    /* Initialize coeff pointer of type q31 */
    pb = pCoeffs;

    tapCnt = numTaps >> 1;
 80018ee:	9b01      	ldr	r3, [sp, #4]
 80018f0:	ea4f 0953 	mov.w	r9, r3, lsr #1
  blkCnt = blockSize % 0x4u;
 80018f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018f6:	f003 0b03 	and.w	fp, r3, #3
 80018fa:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
  while(blkCnt > 0u)
 80018fe:	455e      	cmp	r6, fp
 8001900:	eb0e 0006 	add.w	r0, lr, r6
 8001904:	f040 80ad 	bne.w	8001a62 <arm_fir_q15+0x1f0>
  /* Processing is complete.       
   ** Now copy the last numTaps - 1 samples to the satrt of the state buffer.       
   ** This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8001908:	9b05      	ldr	r3, [sp, #20]
 800190a:	f100 0508 	add.w	r5, r0, #8
 800190e:	6859      	ldr	r1, [r3, #4]

  /* Calculation of count for copying integer writes */
  tapCnt = (numTaps - 1u) >> 2;
 8001910:	9b01      	ldr	r3, [sp, #4]
 8001912:	f101 0408 	add.w	r4, r1, #8
 8001916:	3b01      	subs	r3, #1
 8001918:	089a      	lsrs	r2, r3, #2
 800191a:	4616      	mov	r6, r2
 800191c:	3508      	adds	r5, #8
 800191e:	3408      	adds	r4, #8

  while(tapCnt > 0u)
 8001920:	2e00      	cmp	r6, #0
 8001922:	f040 80b7 	bne.w	8001a94 <arm_fir_q15+0x222>
 8001926:	00d2      	lsls	r2, r2, #3
    tapCnt--;

  }

  /* Calculation of count for remaining q15_t data */
  tapCnt = (numTaps - 1u) % 0x4u;
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	4410      	add	r0, r2
 800192e:	3a02      	subs	r2, #2
 8001930:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001934:	440a      	add	r2, r1

  /* copy remaining data */
  while(tapCnt > 0u)
 8001936:	4298      	cmp	r0, r3
 8001938:	f040 80b6 	bne.w	8001aa8 <arm_fir_q15+0x236>
    *pStateCurnt++ = *pState++;

    /* Decrement the loop counter */
    tapCnt--;
  }
}
 800193c:	b013      	add	sp, #76	; 0x4c
 800193e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8001942:	9b09      	ldr	r3, [sp, #36]	; 0x24
    while(tapCnt > 0u)
 8001944:	46e0      	mov	r8, ip
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8001946:	9a06      	ldr	r2, [sp, #24]
 8001948:	f853 303e 	ldr.w	r3, [r3, lr, lsl #3]
    pb = pCoeffs;
 800194c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8001950:	f842 303e 	str.w	r3, [r2, lr, lsl #3]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pSrc)++;
 8001954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001956:	f853 300b 	ldr.w	r3, [r3, fp]
 800195a:	f842 300b 	str.w	r3, [r2, fp]
    x0 = _SIMD32_OFFSET(px1);
 800195e:	f85c 3c0c 	ldr.w	r3, [ip, #-12]
 8001962:	9303      	str	r3, [sp, #12]
    x1 = _SIMD32_OFFSET(px1 + 1u);
 8001964:	f85c 3c0a 	ldr.w	r3, [ip, #-10]
 8001968:	9304      	str	r3, [sp, #16]
    acc3 = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	4699      	mov	r9, r3
    acc2 = 0;
 800196e:	461a      	mov	r2, r3
 8001970:	461c      	mov	r4, r3
    acc1 = 0;
 8001972:	461d      	mov	r5, r3
    acc0 = 0;
 8001974:	4619      	mov	r1, r3
 8001976:	461e      	mov	r6, r3
    acc1 = 0;
 8001978:	9300      	str	r3, [sp, #0]
    while(tapCnt > 0u)
 800197a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800197c:	f108 0808 	add.w	r8, r8, #8
 8001980:	4582      	cmp	sl, r0
 8001982:	d13f      	bne.n	8001a04 <arm_fir_q15+0x192>
    if((numTaps & 0x3u) != 0u)
 8001984:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001986:	b1c0      	cbz	r0, 80019ba <arm_fir_q15+0x148>
      x2 = _SIMD32_OFFSET(px1);
 8001988:	9810      	ldr	r0, [sp, #64]	; 0x40
 800198a:	f850 000b 	ldr.w	r0, [r0, fp]
 800198e:	900b      	str	r0, [sp, #44]	; 0x2c
      x3 = _SIMD32_OFFSET(px1 + 1u);
 8001990:	9808      	ldr	r0, [sp, #32]
 8001992:	eb0c 0800 	add.w	r8, ip, r0
      acc0 = __SMLALD(x0, c0, acc0);
 8001996:	980e      	ldr	r0, [sp, #56]	; 0x38
      x3 = _SIMD32_OFFSET(px1 + 1u);
 8001998:	f858 ac06 	ldr.w	sl, [r8, #-6]
      acc0 = __SMLALD(x0, c0, acc0);
 800199c:	f8d0 8000 	ldr.w	r8, [r0]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80019a0:	9803      	ldr	r0, [sp, #12]
 80019a2:	fbc0 16c8 	smlald	r1, r6, r0, r8
 80019a6:	9800      	ldr	r0, [sp, #0]
 80019a8:	9f04      	ldr	r7, [sp, #16]
 80019aa:	fbc7 05c8 	smlald	r0, r5, r7, r8
      acc1 = __SMLALD(x1, c0, acc1);
 80019ae:	9000      	str	r0, [sp, #0]
 80019b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80019b2:	fbc0 24c8 	smlald	r2, r4, r0, r8
 80019b6:	fbca 39c8 	smlald	r3, r9, sl, r8
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 80019ba:	9800      	ldr	r0, [sp, #0]
 80019bc:	0bc9      	lsrs	r1, r1, #15
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019be:	0bd2      	lsrs	r2, r2, #15
 80019c0:	f10c 0c08 	add.w	ip, ip, #8
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 80019c4:	0bc0      	lsrs	r0, r0, #15
 80019c6:	ea41 4146 	orr.w	r1, r1, r6, lsl #17
 80019ca:	ea40 4045 	orr.w	r0, r0, r5, lsl #17
 80019ce:	f301 010f 	ssat	r1, #16, r1
 80019d2:	f300 000f 	ssat	r0, #16, r0
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019d6:	0bdb      	lsrs	r3, r3, #15
      __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 80019d8:	eac1 4100 	pkhbt	r1, r1, r0, lsl #16
    *__SIMD32(pDst)++ =
 80019dc:	980a      	ldr	r0, [sp, #40]	; 0x28
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019de:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
 80019e2:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
    *__SIMD32(pDst)++ =
 80019e6:	f840 103e 	str.w	r1, [r0, lr, lsl #3]
 80019ea:	f10e 0e01 	add.w	lr, lr, #1
      __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80019ee:	f302 020f 	ssat	r2, #16, r2
 80019f2:	f303 030f 	ssat	r3, #16, r3
 80019f6:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
    *__SIMD32(pDst)++ =
 80019fa:	f840 200b 	str.w	r2, [r0, fp]
 80019fe:	f10b 0b08 	add.w	fp, fp, #8
 8001a02:	e763      	b.n	80018cc <arm_fir_q15+0x5a>
      acc0 = __SMLALD(x0, c0, acc0);
 8001a04:	f85a 7b08 	ldr.w	r7, [sl], #8
 8001a08:	9803      	ldr	r0, [sp, #12]
 8001a0a:	fbc0 16c7 	smlald	r1, r6, r0, r7
 8001a0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8001a10:	9804      	ldr	r0, [sp, #16]
 8001a12:	9900      	ldr	r1, [sp, #0]
 8001a14:	fbc0 15c7 	smlald	r1, r5, r0, r7
 8001a18:	9100      	str	r1, [sp, #0]
 8001a1a:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8001a1e:	fbc0 24c7 	smlald	r2, r4, r0, r7
 8001a22:	f858 0c0e 	ldr.w	r0, [r8, #-14]
 8001a26:	fbc0 39c7 	smlald	r3, r9, r0, r7
 8001a2a:	930c      	str	r3, [sp, #48]	; 0x30
      acc0 = __SMLALD(x2, c0, acc0);
 8001a2c:	f85a 7c04 	ldr.w	r7, [sl, #-4]
 8001a30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001a32:	f858 0c10 	ldr.w	r0, [r8, #-16]
 8001a36:	fbc0 16c7 	smlald	r1, r6, r0, r7
 8001a3a:	9800      	ldr	r0, [sp, #0]
 8001a3c:	f858 3c0e 	ldr.w	r3, [r8, #-14]
 8001a40:	fbc3 05c7 	smlald	r0, r5, r3, r7
      x0 = _SIMD32_OFFSET(px1 + 2u);
 8001a44:	f858 3c0c 	ldr.w	r3, [r8, #-12]
      acc1 = __SMLALD(x3, c0, acc1);
 8001a48:	9000      	str	r0, [sp, #0]
      x0 = _SIMD32_OFFSET(px1 + 2u);
 8001a4a:	9303      	str	r3, [sp, #12]
      x1 = _SIMD32_OFFSET(px1 + 3u);
 8001a4c:	f858 3c0a 	ldr.w	r3, [r8, #-10]
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	9b03      	ldr	r3, [sp, #12]
 8001a54:	fbc3 24c7 	smlald	r2, r4, r3, r7
 8001a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a5a:	9804      	ldr	r0, [sp, #16]
 8001a5c:	fbc0 39c7 	smlald	r3, r9, r0, r7
 8001a60:	e78b      	b.n	800197a <arm_fir_q15+0x108>
    *pStateCurnt++ = *pSrc++;
 8001a62:	f93a 3006 	ldrsh.w	r3, [sl, r6]
    tapCnt = numTaps >> 1;
 8001a66:	464f      	mov	r7, r9
    pb = pCoeffs;
 8001a68:	f8dd c01c 	ldr.w	ip, [sp, #28]
    *pStateCurnt++ = *pSrc++;
 8001a6c:	53a3      	strh	r3, [r4, r6]
    acc0 = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	461d      	mov	r5, r3
      acc0 = __SMLALD(x0, c0, acc0);
 8001a72:	f850 2b04 	ldr.w	r2, [r0], #4
 8001a76:	f85c 1b04 	ldr.w	r1, [ip], #4
 8001a7a:	fbc2 35c1 	smlald	r3, r5, r2, r1
    while(tapCnt > 0u);
 8001a7e:	3f01      	subs	r7, #1
 8001a80:	d1f7      	bne.n	8001a72 <arm_fir_q15+0x200>
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8001a82:	0bdb      	lsrs	r3, r3, #15
 8001a84:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8001a88:	f303 030f 	ssat	r3, #16, r3
 8001a8c:	f828 3006 	strh.w	r3, [r8, r6]
 8001a90:	3602      	adds	r6, #2
 8001a92:	e734      	b.n	80018fe <arm_fir_q15+0x8c>
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8001a94:	f855 7c10 	ldr.w	r7, [r5, #-16]
    tapCnt--;
 8001a98:	3e01      	subs	r6, #1
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8001a9a:	f844 7c10 	str.w	r7, [r4, #-16]
    *__SIMD32(pStateCurnt)++ = *__SIMD32(pState)++;
 8001a9e:	f855 7c0c 	ldr.w	r7, [r5, #-12]
 8001aa2:	f844 7c0c 	str.w	r7, [r4, #-12]
 8001aa6:	e739      	b.n	800191c <arm_fir_q15+0xaa>
    *pStateCurnt++ = *pState++;
 8001aa8:	f930 1b02 	ldrsh.w	r1, [r0], #2
 8001aac:	f822 1f02 	strh.w	r1, [r2, #2]!
 8001ab0:	e741      	b.n	8001936 <arm_fir_q15+0xc4>
	...

08001ab4 <arm_rfft_init_q15>:
arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	b289      	uxth	r1, r1

    /*  Initialize the Real FFT length */
    S->fftLenReal = (uint16_t) fftLenReal;

    /*  Initialize the Twiddle coefficientA pointer */
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 8001ab8:	4c25      	ldr	r4, [pc, #148]	; (8001b50 <arm_rfft_init_q15+0x9c>)

    /*  Initialize the Twiddle coefficientB pointer */
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;

    /*  Initialize the Flag for selection of RFFT or RIFFT */
    S->ifftFlagR = (uint8_t) ifftFlagR;
 8001aba:	7102      	strb	r2, [r0, #4]
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 8001abc:	60c4      	str	r4, [r0, #12]

    /*  Initialize the Flag for calculation Bit reversal or not */
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;

    /*  Initialization of coef modifier depending on the FFT length */
    switch (S->fftLenReal)
 8001abe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 8001ac2:	4c24      	ldr	r4, [pc, #144]	; (8001b54 <arm_rfft_init_q15+0xa0>)
    S->fftLenReal = (uint16_t) fftLenReal;
 8001ac4:	6001      	str	r1, [r0, #0]
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 8001ac6:	6104      	str	r4, [r0, #16]
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;
 8001ac8:	7143      	strb	r3, [r0, #5]
    switch (S->fftLenReal)
 8001aca:	d030      	beq.n	8001b2e <arm_rfft_init_q15+0x7a>
 8001acc:	d810      	bhi.n	8001af0 <arm_rfft_init_q15+0x3c>
 8001ace:	2940      	cmp	r1, #64	; 0x40
 8001ad0:	d035      	beq.n	8001b3e <arm_rfft_init_q15+0x8a>
 8001ad2:	d804      	bhi.n	8001ade <arm_rfft_init_q15+0x2a>
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d036      	beq.n	8001b46 <arm_rfft_init_q15+0x92>
        S->twidCoefRModifier = 256u;
        S->pCfft = &arm_cfft_sR_q15_len16;
        break;
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	e01e      	b.n	8001b1c <arm_rfft_init_q15+0x68>
    switch (S->fftLenReal)
 8001ade:	2980      	cmp	r1, #128	; 0x80
 8001ae0:	d029      	beq.n	8001b36 <arm_rfft_init_q15+0x82>
 8001ae2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ae6:	d1f7      	bne.n	8001ad8 <arm_rfft_init_q15+0x24>
        S->twidCoefRModifier = 32u;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len128;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <arm_rfft_init_q15+0xa4>)
 8001aee:	e013      	b.n	8001b18 <arm_rfft_init_q15+0x64>
    switch (S->fftLenReal)
 8001af0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001af4:	d017      	beq.n	8001b26 <arm_rfft_init_q15+0x72>
 8001af6:	d806      	bhi.n	8001b06 <arm_rfft_init_q15+0x52>
 8001af8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001afc:	d1ec      	bne.n	8001ad8 <arm_rfft_init_q15+0x24>
        S->twidCoefRModifier = 8u;
 8001afe:	2308      	movs	r3, #8
 8001b00:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len512;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <arm_rfft_init_q15+0xa8>)
 8001b04:	e008      	b.n	8001b18 <arm_rfft_init_q15+0x64>
    switch (S->fftLenReal)
 8001b06:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001b0a:	d008      	beq.n	8001b1e <arm_rfft_init_q15+0x6a>
 8001b0c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8001b10:	d1e2      	bne.n	8001ad8 <arm_rfft_init_q15+0x24>
        S->twidCoefRModifier = 1u;
 8001b12:	2301      	movs	r3, #1
 8001b14:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len4096;
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <arm_rfft_init_q15+0xac>)
        S->pCfft = &arm_cfft_sR_q15_len16;
 8001b18:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8001b1a:	2000      	movs	r0, #0
        break;
    }

    /* return the status of RFFT Init function */
    return (status);
}
 8001b1c:	bd10      	pop	{r4, pc}
        S->twidCoefRModifier = 2u;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len2048;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <arm_rfft_init_q15+0xb0>)
 8001b24:	e7f8      	b.n	8001b18 <arm_rfft_init_q15+0x64>
        S->twidCoefRModifier = 4u;
 8001b26:	2304      	movs	r3, #4
 8001b28:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len1024;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <arm_rfft_init_q15+0xb4>)
 8001b2c:	e7f4      	b.n	8001b18 <arm_rfft_init_q15+0x64>
        S->twidCoefRModifier = 16u;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len256;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <arm_rfft_init_q15+0xb8>)
 8001b34:	e7f0      	b.n	8001b18 <arm_rfft_init_q15+0x64>
        S->twidCoefRModifier = 64u;
 8001b36:	2340      	movs	r3, #64	; 0x40
 8001b38:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len64;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <arm_rfft_init_q15+0xbc>)
 8001b3c:	e7ec      	b.n	8001b18 <arm_rfft_init_q15+0x64>
        S->twidCoefRModifier = 128u;
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len32;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <arm_rfft_init_q15+0xc0>)
 8001b44:	e7e8      	b.n	8001b18 <arm_rfft_init_q15+0x64>
        S->twidCoefRModifier = 256u;
 8001b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4a:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len16;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <arm_rfft_init_q15+0xc4>)
 8001b4e:	e7e3      	b.n	8001b18 <arm_rfft_init_q15+0x64>
 8001b50:	08048dd0 	.word	0x08048dd0
 8001b54:	08044dd0 	.word	0x08044dd0
 8001b58:	08044c70 	.word	0x08044c70
 8001b5c:	08044c50 	.word	0x08044c50
 8001b60:	08044c20 	.word	0x08044c20
 8001b64:	08044c30 	.word	0x08044c30
 8001b68:	08044c40 	.word	0x08044c40
 8001b6c:	08044c60 	.word	0x08044c60
 8001b70:	08044c80 	.word	0x08044c80
 8001b74:	08044c90 	.word	0x08044c90
 8001b78:	08044ca0 	.word	0x08044ca0

08001b7c <arm_split_rfft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 8001b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif

    //  pSrc[2u * fftLen] = pSrc[0]; 
    //  pSrc[(2u * fftLen) + 1u] = pSrc[1]; 

    pCoefA = &pATable[modifier * 2u];
 8001b80:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
    /* Run the below code for Cortex-M4 and Cortex-M3 */
    i = 1u;
    pD1 = pDst + 2;
    pD2 = pDst + (4u * fftLen) - 2;

    for(i = fftLen - 1; i > 0; i--)
 8001b84:	f04f 0e00 	mov.w	lr, #0
{
 8001b88:	9301      	str	r3, [sp, #4]
    pCoefA = &pATable[modifier * 2u];
 8001b8a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 8001b8e:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pD2 = pDst + (4u * fftLen) - 2;
 8001b92:	eb05 07c1 	add.w	r7, r5, r1, lsl #3
    for(i = fftLen - 1; i > 0; i--)
 8001b96:	4676      	mov	r6, lr
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 8001b98:	3c01      	subs	r4, #1
    pD2 = pDst + (4u * fftLen) - 2;
 8001b9a:	3f04      	subs	r7, #4
    pSrc2 = &pSrc[(2u * fftLen) - 2u];
 8001b9c:	00a4      	lsls	r4, r4, #2
 8001b9e:	f104 0804 	add.w	r8, r4, #4
 8001ba2:	4480      	add	r8, r0
 8001ba4:	3601      	adds	r6, #1
 8001ba6:	44d6      	add	lr, sl
 8001ba8:	3f04      	subs	r7, #4
    for(i = fftLen - 1; i > 0; i--)
 8001baa:	42b1      	cmp	r1, r6
 8001bac:	d114      	bne.n	8001bd8 <arm_split_rfft_q15+0x5c>
        /* update coefficient pointer */
        pCoefB = pCoefB + (2u * modifier);
        pCoefA = pCoefA + (2u * modifier);
    }

    pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8001bae:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8001bb2:	442c      	add	r4, r5
 8001bb4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001bb8:	1a9b      	subs	r3, r3, r2
    pDst[(2u * fftLen) + 1u] = 0;
 8001bba:	2200      	movs	r2, #0
    pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8001bbc:	105b      	asrs	r3, r3, #1
    pDst[(2u * fftLen) + 1u] = 0;
 8001bbe:	80e2      	strh	r2, [r4, #6]
    pDst[2u * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8001bc0:	80a3      	strh	r3, [r4, #4]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
 8001bc2:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001bc6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    pDst[1] = 0;
 8001bca:	806a      	strh	r2, [r5, #2]
    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
 8001bcc:	440b      	add	r3, r1
 8001bce:	105b      	asrs	r3, r3, #1
 8001bd0:	802b      	strh	r3, [r5, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */
}
 8001bd2:	b003      	add	sp, #12
 8001bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001bd8:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 8001bdc:	469c      	mov	ip, r3
 8001bde:	f852 300e 	ldr.w	r3, [r2, lr]
 8001be2:	fb4c fc03 	smusd	ip, ip, r3
        outR = __SMLAD(*__SIMD32(pSrc2), *__SIMD32(pCoefB), outR) >> 16u;
 8001be6:	9b01      	ldr	r3, [sp, #4]
 8001be8:	f858 9d04 	ldr.w	r9, [r8, #-4]!
 8001bec:	f853 b00e 	ldr.w	fp, [r3, lr]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001bf0:	fb29 cc0b 	smlad	ip, r9, fp, ip
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001bf4:	fb49 f91b 	smusdx	r9, r9, fp
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001bf8:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 8001bfc:	469b      	mov	fp, r3
 8001bfe:	f852 300e 	ldr.w	r3, [r2, lr]
 8001c02:	fb2b 9913 	smladx	r9, fp, r3, r9
        *pD1++ = (q15_t) outR;
 8001c06:	ea4f 4c2c 	mov.w	ip, ip, asr #16
        *pD1++ = outI >> 16u;
 8001c0a:	ea4f 4929 	mov.w	r9, r9, asr #16
 8001c0e:	eb05 0b86 	add.w	fp, r5, r6, lsl #2
        *pD1++ = (q15_t) outR;
 8001c12:	f825 c026 	strh.w	ip, [r5, r6, lsl #2]
        *pD1++ = outI >> 16u;
 8001c16:	f8ab 9002 	strh.w	r9, [fp, #2]
        pD2[1] = -(outI >> 16u);
 8001c1a:	f1c9 0900 	rsb	r9, r9, #0
        pD2[0] = (q15_t) outR;
 8001c1e:	f8a7 c004 	strh.w	ip, [r7, #4]
        pD2[1] = -(outI >> 16u);
 8001c22:	f8a7 9006 	strh.w	r9, [r7, #6]
 8001c26:	e7bd      	b.n	8001ba4 <arm_split_rfft_q15+0x28>

08001c28 <arm_split_rifft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 8001c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        *__SIMD32(pDst1)++ = __PKHBT((outI >> 16u), outR, 16);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* update coefficient pointer */
        pCoefB = pCoefB + (2u * modifier);
 8001c2c:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 8001c30:	4684      	mov	ip, r0
 8001c32:	00b6      	lsls	r6, r6, #2
    while(i > 0u)
 8001c34:	b909      	cbnz	r1, 8001c3a <arm_split_rifft_q15+0x12>
        pCoefA = pCoefA + (2u * modifier);

        i--;
    }
#endif /* #ifndef ARM_MATH_CM0_FAMILY */
}
 8001c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        outR = __SMUSD(*__SIMD32(pSrc2), *__SIMD32(pCoefB));
 8001c3a:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8001c3e:	f8d3 9000 	ldr.w	r9, [r3]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001c42:	fb45 fe09 	smusd	lr, r5, r9
        outR = __SMLAD(*__SIMD32(pSrc1), *__SIMD32(pCoefA), outR) >> 16u;
 8001c46:	f850 8b04 	ldr.w	r8, [r0], #4
 8001c4a:	6814      	ldr	r4, [r2, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c4c:	fb28 ee04 	smlad	lr, r8, r4, lr
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001c50:	fb25 f519 	smuadx	r5, r5, r9
        outI = __SMLSDX(*__SIMD32(pCoefA), *__SIMD32(pSrc1)++, -outI);
 8001c54:	426d      	negs	r5, r5

__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001c56:	fb44 5418 	smlsdx	r4, r4, r8, r5
        outR = __SMLAD(*__SIMD32(pSrc1), *__SIMD32(pCoefA), outR) >> 16u;
 8001c5a:	ea4f 451e 	mov.w	r5, lr, lsr #16
        pCoefB = pCoefB + (2u * modifier);
 8001c5e:	4433      	add	r3, r6
        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16u), 16);
 8001c60:	1424      	asrs	r4, r4, #16
        pCoefA = pCoefA + (2u * modifier);
 8001c62:	4432      	add	r2, r6
        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16u), 16);
 8001c64:	eac5 4404 	pkhbt	r4, r5, r4, lsl #16
        i--;
 8001c68:	3901      	subs	r1, #1
        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16u), 16);
 8001c6a:	f847 4b04 	str.w	r4, [r7], #4
 8001c6e:	e7e1      	b.n	8001c34 <arm_split_rifft_q15+0xc>

08001c70 <arm_rfft_q15>:
{
 8001c70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c74:	4615      	mov	r5, r2
    if(S->ifftFlagR == 1u)
 8001c76:	7902      	ldrb	r2, [r0, #4]
    uint32_t L2 = S->fftLenReal >> 1;
 8001c78:	6806      	ldr	r6, [r0, #0]
{
 8001c7a:	4604      	mov	r4, r0
    if(S->ifftFlagR == 1u)
 8001c7c:	2a01      	cmp	r2, #1
{
 8001c7e:	460f      	mov	r7, r1
    const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8001c80:	f8d0 8014 	ldr.w	r8, [r0, #20]
    uint32_t L2 = S->fftLenReal >> 1;
 8001c84:	ea4f 0656 	mov.w	r6, r6, lsr #1
    if(S->ifftFlagR == 1u)
 8001c88:	d11d      	bne.n	8001cc6 <arm_rfft_q15+0x56>
        arm_split_rifft_q15(pSrc, L2, S->pTwiddleAReal,
 8001c8a:	6883      	ldr	r3, [r0, #8]
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	e9cd 5300 	strd	r5, r3, [sp]
 8001c92:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8001c96:	4638      	mov	r0, r7
 8001c98:	f7ff ffc6 	bl	8001c28 <arm_split_rifft_q15>
        arm_cfft_q15(S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8001c9c:	7963      	ldrb	r3, [r4, #5]
 8001c9e:	7922      	ldrb	r2, [r4, #4]
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	f7ff fafc 	bl	80012a0 <arm_cfft_q15>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	462a      	mov	r2, r5
 8001cac:	eb05 0343 	add.w	r3, r5, r3, lsl #1
        for(i=0;i<S->fftLenReal;i++)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d102      	bne.n	8001cba <arm_rfft_q15+0x4a>
}
 8001cb4:	b002      	add	sp, #8
 8001cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pDst[i] = pDst[i] << 1;
 8001cba:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001cbe:	0049      	lsls	r1, r1, #1
 8001cc0:	f822 1b02 	strh.w	r1, [r2], #2
 8001cc4:	e7f4      	b.n	8001cb0 <arm_rfft_q15+0x40>
        arm_cfft_q15(S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8001cc6:	7943      	ldrb	r3, [r0, #5]
 8001cc8:	4640      	mov	r0, r8
 8001cca:	f7ff fae9 	bl	80012a0 <arm_cfft_q15>
        arm_split_rfft_q15(pSrc, L2, S->pTwiddleAReal,
 8001cce:	68a3      	ldr	r3, [r4, #8]
 8001cd0:	4631      	mov	r1, r6
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	e9cd 5300 	strd	r5, r3, [sp]
 8001cd8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8001cdc:	f7ff ff4e 	bl	8001b7c <arm_split_rfft_q15>
}
 8001ce0:	e7e8      	b.n	8001cb4 <arm_rfft_q15+0x44>

08001ce2 <arm_shift_q15>:

  /* Getting the sign of shiftBits */
  sign = (shiftBits & 0x80);

  /* If the shift value is positive then do right shift else left shift */
  if(sign == 0u)
 8001ce2:	2900      	cmp	r1, #0
{
 8001ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  blkCnt = blockSize >> 2u;
 8001ce8:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8001cec:	f102 0508 	add.w	r5, r2, #8
  if(sign == 0u)
 8001cf0:	da18      	bge.n	8001d24 <arm_shift_q15+0x42>
 8001cf2:	4606      	mov	r6, r0
  blkCnt = blockSize >> 2u;
 8001cf4:	46a6      	mov	lr, r4

      /* C = A >> shiftBits */
      /* Shift the inputs and then store the results in the destination buffer. */
#ifndef  ARM_MATH_BIG_ENDIAN

      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001cf6:	f1c1 0c00 	rsb	ip, r1, #0
 8001cfa:	3508      	adds	r5, #8
 8001cfc:	3608      	adds	r6, #8
    while(blkCnt > 0u)
 8001cfe:	f1be 0f00 	cmp.w	lr, #0
 8001d02:	d14a      	bne.n	8001d9a <arm_shift_q15+0xb8>
 8001d04:	00e4      	lsls	r4, r4, #3
      blkCnt--;
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8001d06:	f003 0303 	and.w	r3, r3, #3

    while(blkCnt > 0u)
    {
      /* C = A >> shiftBits */
      /* Shift the inputs and then store the results in the destination buffer. */
      *pDst++ = (*pSrc++ >> -shiftBits);
 8001d0a:	4249      	negs	r1, r1
 8001d0c:	4422      	add	r2, r4
 8001d0e:	4420      	add	r0, r4
 8001d10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    while(blkCnt > 0u)
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d015      	beq.n	8001d44 <arm_shift_q15+0x62>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8001d18:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8001d1c:	410c      	asrs	r4, r1
 8001d1e:	f822 4b02 	strh.w	r4, [r2], #2
 8001d22:	e7f7      	b.n	8001d14 <arm_shift_q15+0x32>
 8001d24:	4607      	mov	r7, r0
  blkCnt = blockSize >> 2u;
 8001d26:	46a4      	mov	ip, r4
 8001d28:	3508      	adds	r5, #8
 8001d2a:	3708      	adds	r7, #8
    while(blkCnt > 0u)
 8001d2c:	f1bc 0f00 	cmp.w	ip, #0
 8001d30:	d10a      	bne.n	8001d48 <arm_shift_q15+0x66>
 8001d32:	00e4      	lsls	r4, r4, #3
    blkCnt = blockSize % 0x4u;
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	4422      	add	r2, r4
 8001d3a:	4420      	add	r0, r4
 8001d3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    while(blkCnt > 0u)
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d122      	bne.n	8001d8a <arm_shift_q15+0xa8>
    }
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d48:	f937 6c08 	ldrsh.w	r6, [r7, #-8]
      blkCnt--;
 8001d4c:	f10c 3cff 	add.w	ip, ip, #4294967295
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d50:	f937 ec06 	ldrsh.w	lr, [r7, #-6]
 8001d54:	408e      	lsls	r6, r1
 8001d56:	fa0e fe01 	lsl.w	lr, lr, r1
 8001d5a:	f306 060f 	ssat	r6, #16, r6
 8001d5e:	f30e 0e0f 	ssat	lr, #16, lr
 8001d62:	eac6 460e 	pkhbt	r6, r6, lr, lsl #16
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d66:	f937 ec02 	ldrsh.w	lr, [r7, #-2]
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d6a:	f845 6c10 	str.w	r6, [r5, #-16]
      *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 8001d6e:	f937 6c04 	ldrsh.w	r6, [r7, #-4]
 8001d72:	fa0e fe01 	lsl.w	lr, lr, r1
 8001d76:	f30e 0e0f 	ssat	lr, #16, lr
 8001d7a:	408e      	lsls	r6, r1
 8001d7c:	f306 060f 	ssat	r6, #16, r6
 8001d80:	eac6 460e 	pkhbt	r6, r6, lr, lsl #16
 8001d84:	f845 6c0c 	str.w	r6, [r5, #-12]
 8001d88:	e7ce      	b.n	8001d28 <arm_shift_q15+0x46>
      *pDst++ = __SSAT((*pSrc++ << shiftBits), 16);
 8001d8a:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8001d8e:	408c      	lsls	r4, r1
 8001d90:	f304 040f 	ssat	r4, #16, r4
 8001d94:	f822 4b02 	strh.w	r4, [r2], #2
 8001d98:	e7d2      	b.n	8001d40 <arm_shift_q15+0x5e>
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001d9a:	f936 7c08 	ldrsh.w	r7, [r6, #-8]
      blkCnt--;
 8001d9e:	f10e 3eff 	add.w	lr, lr, #4294967295
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001da2:	f936 8c06 	ldrsh.w	r8, [r6, #-6]
 8001da6:	fa47 f70c 	asr.w	r7, r7, ip
 8001daa:	fa48 f80c 	asr.w	r8, r8, ip
 8001dae:	eac7 4708 	pkhbt	r7, r7, r8, lsl #16
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001db2:	f936 8c02 	ldrsh.w	r8, [r6, #-2]
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001db6:	f845 7c10 	str.w	r7, [r5, #-16]
      *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 8001dba:	f936 7c04 	ldrsh.w	r7, [r6, #-4]
 8001dbe:	fa48 f80c 	asr.w	r8, r8, ip
 8001dc2:	fa47 f70c 	asr.w	r7, r7, ip
 8001dc6:	eac7 4708 	pkhbt	r7, r7, r8, lsl #16
 8001dca:	f845 7c0c 	str.w	r7, [r5, #-12]
 8001dce:	e794      	b.n	8001cfa <arm_shift_q15+0x18>

08001dd0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	4606      	mov	r6, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001dd6:	f002 fed5 	bl	8004b84 <HAL_I2C_GetState>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d157      	bne.n	8001e8e <I2Cx_Init+0xbe>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001dde:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <I2Cx_Init+0x144>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8001de0:	2500      	movs	r5, #0
 8001de2:	4c4d      	ldr	r4, [pc, #308]	; (8001f18 <I2Cx_Init+0x148>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001de4:	429e      	cmp	r6, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001de6:	6175      	str	r5, [r6, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001de8:	bf0c      	ite	eq
 8001dea:	4a4c      	ldreq	r2, [pc, #304]	; (8001f1c <I2Cx_Init+0x14c>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001dec:	4a4c      	ldrne	r2, [pc, #304]	; (8001f20 <I2Cx_Init+0x150>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001dee:	429e      	cmp	r6, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001df0:	6032      	str	r2, [r6, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8001df2:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <I2Cx_Init+0x154>)
 8001df4:	e9c6 2501 	strd	r2, r5, [r6, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001df8:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001dfc:	e9c6 5507 	strd	r5, r5, [r6, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e00:	e9c6 2503 	strd	r2, r5, [r6, #12]
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e04:	d145      	bne.n	8001e92 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e06:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e08:	2080      	movs	r0, #128	; 0x80
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001e0c:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e10:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e16:	6323      	str	r3, [r4, #48]	; 0x30
 8001e18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001e1a:	9507      	str	r5, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e24:	2312      	movs	r3, #18
 8001e26:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001e2a:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e2c:	483e      	ldr	r0, [pc, #248]	; (8001f28 <I2Cx_Init+0x158>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001e2e:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e32:	f002 faeb 	bl	800440c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e3a:	a905      	add	r1, sp, #20
 8001e3c:	483a      	ldr	r0, [pc, #232]	; (8001f28 <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001e3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e40:	f002 fae4 	bl	800440c <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e44:	9502      	str	r5, [sp, #8]
    HAL_NVIC_SetPriority(72, 0x05, 0);
 8001e46:	462a      	mov	r2, r5
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(72, 0x05, 0);
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	2048      	movs	r0, #72	; 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e52:	6423      	str	r3, [r4, #64]	; 0x40
 8001e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001e5e:	6a23      	ldr	r3, [r4, #32]
 8001e60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e64:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001e66:	6a23      	ldr	r3, [r4, #32]
 8001e68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e6c:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(72, 0x05, 0);
 8001e6e:	f001 ffa7 	bl	8003dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(72);
 8001e72:	2048      	movs	r0, #72	; 0x48
 8001e74:	f001 ffd6 	bl	8003e24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(73, 0x05, 0);
 8001e78:	2049      	movs	r0, #73	; 0x49
 8001e7a:	462a      	mov	r2, r5
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	f001 ff9f 	bl	8003dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(73);
 8001e82:	2049      	movs	r0, #73	; 0x49
    HAL_NVIC_EnableIRQ(32);
 8001e84:	f001 ffce 	bl	8003e24 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f002 fce9 	bl	8004860 <HAL_I2C_Init>
  }
}
 8001e8e:	b00a      	add	sp, #40	; 0x28
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e92:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e98:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001e9a:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e9c:	4823      	ldr	r0, [pc, #140]	; (8001f2c <I2Cx_Init+0x15c>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e9e:	f043 0302 	orr.w	r3, r3, #2
 8001ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8001ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001ea6:	9507      	str	r5, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	9303      	str	r3, [sp, #12]
 8001eae:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ebc:	a905      	add	r1, sp, #20
 8001ebe:	f002 faa5 	bl	800440c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ec6:	a905      	add	r1, sp, #20
 8001ec8:	4818      	ldr	r0, [pc, #96]	; (8001f2c <I2Cx_Init+0x15c>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001eca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ecc:	f002 fa9e 	bl	800440c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001ed0:	9504      	str	r5, [sp, #16]
    HAL_NVIC_SetPriority(31, 0x05, 0);
 8001ed2:	462a      	mov	r2, r5
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    HAL_NVIC_SetPriority(31, 0x05, 0);
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ede:	6423      	str	r3, [r4, #64]	; 0x40
 8001ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee6:	9304      	str	r3, [sp, #16]
 8001ee8:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001eea:	6a23      	ldr	r3, [r4, #32]
 8001eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ef0:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001ef2:	6a23      	ldr	r3, [r4, #32]
 8001ef4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ef8:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(31, 0x05, 0);
 8001efa:	f001 ff61 	bl	8003dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(31);
 8001efe:	201f      	movs	r0, #31
 8001f00:	f001 ff90 	bl	8003e24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(32, 0x05, 0);
 8001f04:	2020      	movs	r0, #32
 8001f06:	462a      	mov	r2, r5
 8001f08:	2105      	movs	r1, #5
 8001f0a:	f001 ff59 	bl	8003dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(32);
 8001f0e:	2020      	movs	r0, #32
 8001f10:	e7b8      	b.n	8001e84 <I2Cx_Init+0xb4>
 8001f12:	bf00      	nop
 8001f14:	2000121c 	.word	0x2000121c
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40005c00 	.word	0x40005c00
 8001f20:	40005400 	.word	0x40005400
 8001f24:	40912732 	.word	0x40912732
 8001f28:	40021c00 	.word	0x40021c00
 8001f2c:	40020400 	.word	0x40020400

08001f30 <I2Cx_Error.isra.1>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 8001f30:	b510      	push	{r4, lr}
 8001f32:	4604      	mov	r4, r0
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f34:	f002 fce0 	bl	80048f8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f38:	4620      	mov	r0, r4
}
 8001f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  I2Cx_Init(i2c_handler);
 8001f3e:	f7ff bf47 	b.w	8001dd0 <I2Cx_Init>

08001f42 <I2Cx_WriteMultiple>:
{
 8001f42:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f44:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8001f48:	b085      	sub	sp, #20
 8001f4a:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f4c:	9402      	str	r4, [sp, #8]
 8001f4e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001f52:	9401      	str	r4, [sp, #4]
 8001f54:	9c08      	ldr	r4, [sp, #32]
 8001f56:	9400      	str	r4, [sp, #0]
 8001f58:	f002 fce4 	bl	8004924 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	b110      	cbz	r0, 8001f66 <I2Cx_WriteMultiple+0x24>
    I2Cx_Error(i2c_handler, Addr);
 8001f60:	4628      	mov	r0, r5
 8001f62:	f7ff ffe5 	bl	8001f30 <I2Cx_Error.isra.1>
}
 8001f66:	4620      	mov	r0, r4
 8001f68:	b005      	add	sp, #20
 8001f6a:	bd30      	pop	{r4, r5, pc}

08001f6c <I2Cx_ReadMultiple>:
{
 8001f6c:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f6e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8001f72:	b085      	sub	sp, #20
 8001f74:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f76:	9402      	str	r4, [sp, #8]
 8001f78:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001f7c:	9401      	str	r4, [sp, #4]
 8001f7e:	9c08      	ldr	r4, [sp, #32]
 8001f80:	9400      	str	r4, [sp, #0]
 8001f82:	f002 fd65 	bl	8004a50 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001f86:	4604      	mov	r4, r0
 8001f88:	b110      	cbz	r0, 8001f90 <I2Cx_ReadMultiple+0x24>
    I2Cx_Error(i2c_handler, Addr);
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	f7ff ffd0 	bl	8001f30 <I2Cx_Error.isra.1>
}
 8001f90:	4620      	mov	r0, r4
 8001f92:	b005      	add	sp, #20
 8001f94:	bd30      	pop	{r4, r5, pc}
	...

08001f98 <BSP_LED_Init>:
{
 8001f98:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 8001f9a:	4604      	mov	r4, r0
{
 8001f9c:	b087      	sub	sp, #28
  if (Led == LED1)
 8001f9e:	b9d0      	cbnz	r0, 8001fd6 <BSP_LED_Init+0x3e>
    LED1_GPIO_CLK_ENABLE();
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <BSP_LED_Init+0x44>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2502      	movs	r5, #2
    LED1_GPIO_CLK_ENABLE();
 8001fa4:	9000      	str	r0, [sp, #0]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001fa6:	a901      	add	r1, sp, #4
    LED1_GPIO_CLK_ENABLE();
 8001fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001faa:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <BSP_LED_Init+0x48>)
    LED1_GPIO_CLK_ENABLE();
 8001fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001fc2:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8001fc8:	f002 fa20 	bl	800440c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001fcc:	4622      	mov	r2, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	4803      	ldr	r0, [pc, #12]	; (8001fe0 <BSP_LED_Init+0x48>)
 8001fd2:	f002 fb0f 	bl	80045f4 <HAL_GPIO_WritePin>
}
 8001fd6:	b007      	add	sp, #28
 8001fd8:	bd30      	pop	{r4, r5, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <BSP_PB_Init>:
{
 8001fe4:	b530      	push	{r4, r5, lr}
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <BSP_PB_Init+0xb8>)
 8001fe8:	b089      	sub	sp, #36	; 0x24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001fea:	4604      	mov	r4, r0
 8001fec:	b9d0      	cbnz	r0, 8002024 <BSP_PB_Init+0x40>
 8001fee:	9000      	str	r0, [sp, #0]
 8001ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002002:	bb49      	cbnz	r1, 8002058 <BSP_PB_Init+0x74>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002004:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <BSP_PB_Init+0xbc>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002006:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002008:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800200c:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002010:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002012:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002014:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <BSP_PB_Init+0xc0>)
 8002018:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800201c:	f002 f9f6 	bl	800440c <HAL_GPIO_Init>
}
 8002020:	b009      	add	sp, #36	; 0x24
 8002022:	bd30      	pop	{r4, r5, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002024:	2801      	cmp	r0, #1
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	d10a      	bne.n	8002042 <BSP_PB_Init+0x5e>
 800202c:	9201      	str	r2, [sp, #4]
 800202e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002034:	631a      	str	r2, [r3, #48]	; 0x30
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9b01      	ldr	r3, [sp, #4]
 8002040:	e7df      	b.n	8002002 <BSP_PB_Init+0x1e>
 8002042:	9202      	str	r2, [sp, #8]
 8002044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	9b02      	ldr	r3, [sp, #8]
 8002056:	e7d4      	b.n	8002002 <BSP_PB_Init+0x1e>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002058:	2901      	cmp	r1, #1
 800205a:	d1e1      	bne.n	8002020 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800205c:	4d10      	ldr	r5, [pc, #64]	; (80020a0 <BSP_PB_Init+0xbc>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800205e:	2300      	movs	r3, #0
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002060:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 8002064:	9203      	str	r2, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002066:	2202      	movs	r2, #2
 8002068:	e9cd 3205 	strd	r3, r2, [sp, #20]
    if(Button != BUTTON_WAKEUP)
 800206c:	b1a4      	cbz	r4, 8002098 <BSP_PB_Init+0xb4>
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <BSP_PB_Init+0xc4>)
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002070:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002072:	a903      	add	r1, sp, #12
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <BSP_PB_Init+0xc0>)
 8002076:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800207a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800207e:	f002 f9c5 	bl	800440c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002082:	2200      	movs	r2, #0
 8002084:	f994 4006 	ldrsb.w	r4, [r4, #6]
 8002088:	210f      	movs	r1, #15
 800208a:	4620      	mov	r0, r4
 800208c:	f001 fe98 	bl	8003dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002090:	4620      	mov	r0, r4
 8002092:	f001 fec7 	bl	8003e24 <HAL_NVIC_EnableIRQ>
}
 8002096:	e7c3      	b.n	8002020 <BSP_PB_Init+0x3c>
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <BSP_PB_Init+0xc8>)
 800209a:	e7e9      	b.n	8002070 <BSP_PB_Init+0x8c>
 800209c:	40023800 	.word	0x40023800
 80020a0:	0804cdd0 	.word	0x0804cdd0
 80020a4:	20000000 	.word	0x20000000
 80020a8:	10210000 	.word	0x10210000
 80020ac:	10110000 	.word	0x10110000

080020b0 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 80020b0:	4801      	ldr	r0, [pc, #4]	; (80020b8 <AUDIO_IO_Init+0x8>)
 80020b2:	f7ff be8d 	b.w	8001dd0 <I2Cx_Init>
 80020b6:	bf00      	nop
 80020b8:	2000121c 	.word	0x2000121c

080020bc <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 80020bc:	4770      	bx	lr
	...

080020c0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80020c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80020c2:	ba52      	rev16	r2, r2
 80020c4:	ac04      	add	r4, sp, #16
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80020c6:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80020c8:	f824 2d02 	strh.w	r2, [r4, #-2]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80020cc:	460a      	mov	r2, r1
 80020ce:	4601      	mov	r1, r0
 80020d0:	4803      	ldr	r0, [pc, #12]	; (80020e0 <AUDIO_IO_Write+0x20>)
 80020d2:	e9cd 4300 	strd	r4, r3, [sp]
 80020d6:	f7ff ff34 	bl	8001f42 <I2Cx_WriteMultiple>
}
 80020da:	b004      	add	sp, #16
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	2000121c 	.word	0x2000121c

080020e4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80020e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	aa04      	add	r2, sp, #16
 80020ea:	f822 3d02 	strh.w	r3, [r2, #-2]!
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80020ee:	2302      	movs	r3, #2
 80020f0:	e9cd 2300 	strd	r2, r3, [sp]
 80020f4:	460a      	mov	r2, r1
 80020f6:	4601      	mov	r1, r0
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <AUDIO_IO_Read+0x28>)
 80020fa:	f7ff ff37 	bl	8001f6c <I2Cx_ReadMultiple>
 80020fe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8002102:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8002104:	b280      	uxth	r0, r0
 8002106:	b005      	add	sp, #20
 8002108:	f85d fb04 	ldr.w	pc, [sp], #4
 800210c:	2000121c 	.word	0x2000121c

08002110 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8002110:	f00b bc9c 	b.w	800da4c <HAL_Delay>

08002114 <TS_IO_Init>:
 8002114:	f7ff bfcc 	b.w	80020b0 <AUDIO_IO_Init>

08002118 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800211a:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800211c:	2301      	movs	r3, #1
{
 800211e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002122:	460a      	mov	r2, r1
 8002124:	4601      	mov	r1, r0
 8002126:	4803      	ldr	r0, [pc, #12]	; (8002134 <TS_IO_Write+0x1c>)
 8002128:	e9cd 4300 	strd	r4, r3, [sp]
 800212c:	f7ff ff09 	bl	8001f42 <I2Cx_WriteMultiple>
}
 8002130:	b004      	add	sp, #16
 8002132:	bd10      	pop	{r4, pc}
 8002134:	2000121c 	.word	0x2000121c

08002138 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	aa04      	add	r2, sp, #16
 800213e:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002142:	2301      	movs	r3, #1
 8002144:	e9cd 2300 	strd	r2, r3, [sp]
 8002148:	460a      	mov	r2, r1
 800214a:	4601      	mov	r1, r0
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <TS_IO_Read+0x24>)
 800214e:	f7ff ff0d 	bl	8001f6c <I2Cx_ReadMultiple>

  return read_value;
}
 8002152:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002156:	b005      	add	sp, #20
 8002158:	f85d fb04 	ldr.w	pc, [sp], #4
 800215c:	2000121c 	.word	0x2000121c

08002160 <TS_IO_Delay>:
 8002160:	f00b bc74 	b.w	800da4c <HAL_Delay>

08002164 <EXT_I2C_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void EXT_I2C_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002166:	ac04      	add	r4, sp, #16
	  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002168:	2301      	movs	r3, #1
{
 800216a:	f824 2d02 	strh.w	r2, [r4, #-2]!
	  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800216e:	460a      	mov	r2, r1
 8002170:	4601      	mov	r1, r0
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <EXT_I2C_Write+0x1c>)
 8002174:	e9cd 4300 	strd	r4, r3, [sp]
 8002178:	f7ff fee3 	bl	8001f42 <I2Cx_WriteMultiple>
}
 800217c:	b004      	add	sp, #16
 800217e:	bd10      	pop	{r4, pc}
 8002180:	20001258 	.word	0x20001258

08002184 <EXT_I2C_Write_N>:
}



void EXT_I2C_Write_N(uint8_t Addr, uint8_t Reg, uint8_t Value, uint8_t Items)
{
 8002184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002186:	ac04      	add	r4, sp, #16
 8002188:	f804 2d01 	strb.w	r2, [r4, #-1]!
	  I2Cx_WriteMultiple(&hI2cExtHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, Items);
 800218c:	460a      	mov	r2, r1
 800218e:	4601      	mov	r1, r0
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <EXT_I2C_Write_N+0x1c>)
 8002192:	e9cd 4300 	strd	r4, r3, [sp]
 8002196:	2301      	movs	r3, #1
 8002198:	f7ff fed3 	bl	8001f42 <I2Cx_WriteMultiple>
}
 800219c:	b004      	add	sp, #16
 800219e:	bd10      	pop	{r4, pc}
 80021a0:	20001258 	.word	0x20001258

080021a4 <EXT_I2C_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t EXT_I2C_Read(uint8_t Addr, uint16_t Reg)
{
 80021a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	  uint8_t read_value = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	aa04      	add	r2, sp, #16
 80021aa:	f802 3d01 	strb.w	r3, [r2, #-1]!

	  I2Cx_ReadMultiple(&hI2cExtHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021ae:	2301      	movs	r3, #1
 80021b0:	e9cd 2300 	strd	r2, r3, [sp]
 80021b4:	460a      	mov	r2, r1
 80021b6:	4601      	mov	r1, r0
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <EXT_I2C_Read+0x24>)
 80021ba:	f7ff fed7 	bl	8001f6c <I2Cx_ReadMultiple>
	  return read_value;
}
 80021be:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80021c2:	b005      	add	sp, #20
 80021c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80021c8:	20001258 	.word	0x20001258

080021cc <EXT_I2C_Init>:



void EXT_I2C_Init(void)
{
  I2Cx_Init(&hI2cExtHandler);
 80021cc:	4801      	ldr	r0, [pc, #4]	; (80021d4 <EXT_I2C_Init+0x8>)
 80021ce:	f7ff bdff 	b.w	8001dd0 <I2Cx_Init>
 80021d2:	bf00      	nop
 80021d4:	20001258 	.word	0x20001258

080021d8 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SAIx_Out_DeInit+0x14>)
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <SAIx_Out_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80021dc:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80021de:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80021e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021e4:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 80021e6:	f003 bf00 	b.w	8005fea <HAL_SAI_DeInit>
 80021ea:	bf00      	nop
 80021ec:	40015c04 	.word	0x40015c04
 80021f0:	20001294 	.word	0x20001294

080021f4 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SAIx_In_DeInit+0x14>)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80021f8:	681a      	ldr	r2, [r3, #0]
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80021fa:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80021fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002202:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002204:	f003 bef1 	b.w	8005fea <HAL_SAI_DeInit>
 8002208:	40015c24 	.word	0x40015c24
 800220c:	20001294 	.word	0x20001294

08002210 <SAIx_In_Init>:
{
 8002210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <SAIx_In_Init+0xe4>)
{
 8002216:	b085      	sub	sp, #20
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002218:	4c37      	ldr	r4, [pc, #220]	; (80022f8 <SAIx_In_Init+0xe8>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800221a:	2500      	movs	r5, #0
{
 800221c:	9100      	str	r1, [sp, #0]
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800221e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002222:	6819      	ldr	r1, [r3, #0]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002224:	2601      	movs	r6, #1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002226:	6023      	str	r3, [r4, #0]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002228:	f04f 0b40 	mov.w	fp, #64	; 0x40
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800222c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002230:	f04f 0a20 	mov.w	sl, #32
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002234:	f44f 2880 	mov.w	r8, #262144	; 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002238:	2704      	movs	r7, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800223a:	6019      	str	r1, [r3, #0]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800223c:	f44f 7300 	mov.w	r3, #512	; 0x200
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002240:	6060      	str	r0, [r4, #4]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002242:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002246:	2180      	movs	r1, #128	; 0x80
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002248:	63e3      	str	r3, [r4, #60]	; 0x3c
 800224a:	9301      	str	r3, [sp, #4]
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800224c:	9b00      	ldr	r3, [sp, #0]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800224e:	6120      	str	r0, [r4, #16]
  HAL_SAI_Init(&haudio_out_sai);
 8002250:	4620      	mov	r0, r4
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002252:	61e2      	str	r2, [r4, #28]
 8002254:	9203      	str	r2, [sp, #12]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002256:	6361      	str	r1, [r4, #52]	; 0x34
 8002258:	9102      	str	r1, [sp, #8]
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800225a:	6623      	str	r3, [r4, #96]	; 0x60
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800225c:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800225e:	6325      	str	r5, [r4, #48]	; 0x30
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002260:	63a5      	str	r5, [r4, #56]	; 0x38
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002262:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002264:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002266:	65a5      	str	r5, [r4, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002268:	65e7      	str	r7, [r4, #92]	; 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800226a:	e9c4 ba10 	strd	fp, sl, [r4, #64]	; 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800226e:	e9c4 9512 	strd	r9, r5, [r4, #72]	; 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002272:	e9c4 8514 	strd	r8, r5, [r4, #80]	; 0x50
  HAL_SAI_Init(&haudio_out_sai);
 8002276:	f003 fe1f 	bl	8005eb8 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800227a:	4820      	ldr	r0, [pc, #128]	; (80022fc <SAIx_In_Init+0xec>)
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800227c:	9a03      	ldr	r2, [sp, #12]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800227e:	f8d0 c000 	ldr.w	ip, [r0]
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002282:	9b01      	ldr	r3, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002284:	f42c 3c80 	bic.w	ip, ip, #65536	; 0x10000
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002288:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800228c:	9902      	ldr	r1, [sp, #8]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800228e:	f8c0 c000 	str.w	ip, [r0]
  HAL_SAI_Init(&haudio_in_sai);
 8002292:	f104 0084 	add.w	r0, r4, #132	; 0x84
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002296:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 800229a:	2203      	movs	r2, #3
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800229c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80022a0:	9b00      	ldr	r3, [sp, #0]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80022a2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80022a6:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80022aa:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80022ae:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80022b2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80022b6:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80022ba:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80022be:	e9c4 152e 	strd	r1, r5, [r4, #184]	; 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80022c2:	e9c4 ba31 	strd	fp, sl, [r4, #196]	; 0xc4
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80022c6:	e9c4 9533 	strd	r9, r5, [r4, #204]	; 0xcc
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80022ca:	e9c4 8535 	strd	r8, r5, [r4, #212]	; 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80022ce:	e9c4 5737 	strd	r5, r7, [r4, #220]	; 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 80022d2:	f003 fdf1 	bl	8005eb8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	6813      	ldr	r3, [r2, #0]
 80022da:	ea43 0309 	orr.w	r3, r3, r9
 80022de:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80022e0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80022e4:	6813      	ldr	r3, [r2, #0]
 80022e6:	ea43 0309 	orr.w	r3, r3, r9
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	b005      	add	sp, #20
 80022ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40015c04 	.word	0x40015c04
 80022f8:	20001294 	.word	0x20001294
 80022fc:	40015c24 	.word	0x40015c24

08002300 <BSP_AUDIO_OUT_Play>:
{
 8002300:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <BSP_AUDIO_OUT_Play+0x34>)
{
 8002304:	4605      	mov	r5, r0
 8002306:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8002308:	b28a      	uxth	r2, r1
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4601      	mov	r1, r0
 800230e:	2034      	movs	r0, #52	; 0x34
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4798      	blx	r3
 8002314:	b960      	cbnz	r0, 8002330 <BSP_AUDIO_OUT_Play+0x30>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8002316:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 800231a:	4629      	mov	r1, r5
 800231c:	4806      	ldr	r0, [pc, #24]	; (8002338 <BSP_AUDIO_OUT_Play+0x38>)
 800231e:	bf34      	ite	cc
 8002320:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8002324:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8002328:	f003 fea8 	bl	800607c <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 800232c:	2000      	movs	r0, #0
}
 800232e:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8002330:	2001      	movs	r0, #1
 8002332:	e7fc      	b.n	800232e <BSP_AUDIO_OUT_Play+0x2e>
 8002334:	20001a78 	.word	0x20001a78
 8002338:	20001294 	.word	0x20001294

0800233c <HAL_SAI_TxCpltCallback>:
{
 800233c:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 800233e:	f009 f863 	bl	800b408 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002342:	bd08      	pop	{r3, pc}

08002344 <HAL_SAI_TxHalfCpltCallback>:
{
 8002344:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002346:	f009 f860 	bl	800b40a <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800234a:	bd08      	pop	{r3, pc}

0800234c <BSP_AUDIO_OUT_Error_CallBack>:
 800234c:	4770      	bx	lr
	...

08002350 <BSP_AUDIO_OUT_MspInit>:
{ 
 8002350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002354:	4c53      	ldr	r4, [pc, #332]	; (80024a4 <BSP_AUDIO_OUT_MspInit+0x154>)
{ 
 8002356:	b08a      	sub	sp, #40	; 0x28
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002358:	2500      	movs	r5, #0
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800235a:	f04f 0802 	mov.w	r8, #2
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800235e:	2603      	movs	r6, #3
 8002360:	270a      	movs	r7, #10
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002362:	9500      	str	r5, [sp, #0]
{ 
 8002364:	4681      	mov	r9, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002366:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002368:	a905      	add	r1, sp, #20
 800236a:	484f      	ldr	r0, [pc, #316]	; (80024a8 <BSP_AUDIO_OUT_MspInit+0x158>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800236c:	f04f 0a40 	mov.w	sl, #64	; 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002370:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002374:	6463      	str	r3, [r4, #68]	; 0x44
 8002376:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002378:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002380:	9501      	str	r5, [sp, #4]
 8002382:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6323      	str	r3, [r4, #48]	; 0x30
 800238a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002394:	9502      	str	r5, [sp, #8]
 8002396:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6323      	str	r3, [r4, #48]	; 0x30
 800239e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80023a8:	9503      	str	r5, [sp, #12]
 80023aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6323      	str	r3, [r4, #48]	; 0x30
 80023b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 80023b4:	9507      	str	r5, [sp, #28]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80023b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80023be:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80023c0:	e9cd 6708 	strd	r6, r7, [sp, #32]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80023c4:	e9cd 3805 	strd	r3, r8, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80023c8:	f002 f820 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80023cc:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80023ce:	a905      	add	r1, sp, #20
 80023d0:	4835      	ldr	r0, [pc, #212]	; (80024a8 <BSP_AUDIO_OUT_MspInit+0x158>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80023d2:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80023d4:	e9cd 3805 	strd	r3, r8, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80023d8:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80023dc:	f002 f816 	bl	800440c <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80023e0:	a905      	add	r1, sp, #20
 80023e2:	4831      	ldr	r0, [pc, #196]	; (80024a8 <BSP_AUDIO_OUT_MspInit+0x158>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80023e4:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80023e6:	e9cd a805 	strd	sl, r8, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80023ea:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80023ee:	f002 f80d 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80023f2:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80023f4:	a905      	add	r1, sp, #20
 80023f6:	482c      	ldr	r0, [pc, #176]	; (80024a8 <BSP_AUDIO_OUT_MspInit+0x158>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80023f8:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80023fa:	e9cd 3805 	strd	r3, r8, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80023fe:	e9cd 5607 	strd	r5, r6, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002402:	f002 f803 	bl	800440c <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002406:	9504      	str	r5, [sp, #16]
 8002408:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800240a:	f8d9 2000 	ldr.w	r2, [r9]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800240e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002412:	6323      	str	r3, [r4, #48]	; 0x30
 8002414:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	9304      	str	r3, [sp, #16]
 800241c:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <BSP_AUDIO_OUT_MspInit+0x15c>)
 8002420:	429a      	cmp	r2, r3
 8002422:	d134      	bne.n	800248e <BSP_AUDIO_OUT_MspInit+0x13e>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <BSP_AUDIO_OUT_MspInit+0x160>)
 8002426:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800242a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800242e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002432:	f503 7484 	add.w	r4, r3, #264	; 0x108
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002436:	f8c3 a110 	str.w	sl, [r3, #272]	; 0x110
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800243a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800243e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002442:	f8c9 406c 	str.w	r4, [r9, #108]	; 0x6c
    HAL_DMA_DeInit(&hdma_sai_tx);
 8002446:	4620      	mov	r0, r4
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002448:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 800244c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002450:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8002454:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002458:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800245c:	f8c3 6130 	str.w	r6, [r3, #304]	; 0x130
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002460:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002468:	f8c3 5134 	str.w	r5, [r3, #308]	; 0x134
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800246c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002470:	2204      	movs	r2, #4
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002472:	f8c3 5138 	str.w	r5, [r3, #312]	; 0x138
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002476:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <BSP_AUDIO_OUT_MspInit+0x164>)
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800247c:	f8c3 9140 	str.w	r9, [r3, #320]	; 0x140
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8002480:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    HAL_DMA_DeInit(&hdma_sai_tx);
 8002484:	f001 fd4a 	bl	8003f1c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 8002488:	4620      	mov	r0, r4
 800248a:	f001 fd03 	bl	8003e94 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2105      	movs	r1, #5
 8002492:	203c      	movs	r0, #60	; 0x3c
 8002494:	f001 fc94 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8002498:	203c      	movs	r0, #60	; 0x3c
 800249a:	f001 fcc3 	bl	8003e24 <HAL_NVIC_EnableIRQ>
}
 800249e:	b00a      	add	sp, #40	; 0x28
 80024a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40015c04 	.word	0x40015c04
 80024b0:	20001294 	.word	0x20001294
 80024b4:	40026470 	.word	0x40026470

080024b8 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80024b8:	b510      	push	{r4, lr}
 80024ba:	b0a2      	sub	sp, #136	; 0x88
 80024bc:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 80024be:	a801      	add	r0, sp, #4
 80024c0:	f003 fb74 	bl	8005bac <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 80024c4:	f642 3311 	movw	r3, #11025	; 0x2b11
 80024c8:	429c      	cmp	r4, r3
 80024ca:	d007      	beq.n	80024dc <BSP_AUDIO_OUT_ClockConfig+0x24>
 80024cc:	f245 6322 	movw	r3, #22050	; 0x5622
 80024d0:	429c      	cmp	r4, r3
 80024d2:	d003      	beq.n	80024dc <BSP_AUDIO_OUT_ClockConfig+0x24>
 80024d4:	f64a 4344 	movw	r3, #44100	; 0xac44
 80024d8:	429c      	cmp	r4, r3
 80024da:	d111      	bne.n	8002500 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80024dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e0:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80024e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024e6:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80024e8:	f240 13ad 	movw	r3, #429	; 0x1ad
 80024ec:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80024ee:	2302      	movs	r3, #2
 80024f0:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80024f2:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80024f4:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80024f6:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80024f8:	f002 ffb8 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
}
 80024fc:	b022      	add	sp, #136	; 0x88
 80024fe:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002504:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002506:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800250a:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800250c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002510:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8002512:	2307      	movs	r3, #7
 8002514:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e7ec      	b.n	80024f4 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

0800251c <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800251c:	b28a      	uxth	r2, r1
 800251e:	4601      	mov	r1, r0
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <BSP_AUDIO_IN_Record+0x10>)
{
 8002522:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8002524:	f003 fdf4 	bl	8006110 <HAL_SAI_Receive_DMA>
}
 8002528:	2000      	movs	r0, #0
 800252a:	bd08      	pop	{r3, pc}
 800252c:	20001318 	.word	0x20001318

08002530 <HAL_SAI_RxCpltCallback>:
{
 8002530:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002532:	f008 ff51 	bl	800b3d8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002536:	bd08      	pop	{r3, pc}

08002538 <HAL_SAI_RxHalfCpltCallback>:
{
 8002538:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 800253a:	f008 ff59 	bl	800b3f0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800253e:	bd08      	pop	{r3, pc}

08002540 <BSP_AUDIO_IN_Error_CallBack>:
 8002540:	4770      	bx	lr
	...

08002544 <HAL_SAI_ErrorCallback>:
{
 8002544:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <HAL_SAI_ErrorCallback+0x34>)
 8002548:	f003 fe7d 	bl	8006246 <HAL_SAI_GetState>
 800254c:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <HAL_SAI_ErrorCallback+0x38>)
 8002550:	f003 fe79 	bl	8006246 <HAL_SAI_GetState>
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX)
 8002554:	1eab      	subs	r3, r5, #2
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002556:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX)
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_SAI_ErrorCallback+0x1e>
 800255e:	2d12      	cmp	r5, #18
 8002560:	d101      	bne.n	8002566 <HAL_SAI_ErrorCallback+0x22>
    BSP_AUDIO_OUT_Error_CallBack();
 8002562:	f7ff fef3 	bl	800234c <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX)
 8002566:	1ea3      	subs	r3, r4, #2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_SAI_ErrorCallback+0x2e>
 800256e:	2c22      	cmp	r4, #34	; 0x22
 8002570:	d101      	bne.n	8002576 <HAL_SAI_ErrorCallback+0x32>
    BSP_AUDIO_IN_Error_CallBack();
 8002572:	f7ff ffe5 	bl	8002540 <BSP_AUDIO_IN_Error_CallBack>
}
 8002576:	bd38      	pop	{r3, r4, r5, pc}
 8002578:	20001294 	.word	0x20001294
 800257c:	20001318 	.word	0x20001318

08002580 <BSP_AUDIO_IN_MspInit>:
{
 8002580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002584:	4d44      	ldr	r5, [pc, #272]	; (8002698 <BSP_AUDIO_IN_MspInit+0x118>)
{
 8002586:	b08a      	sub	sp, #40	; 0x28
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002588:	2400      	movs	r4, #0
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800258a:	2702      	movs	r7, #2
 800258c:	f44f 6880 	mov.w	r8, #1024	; 0x400
{
 8002590:	4606      	mov	r6, r0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002592:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002594:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002596:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002598:	4840      	ldr	r0, [pc, #256]	; (800269c <BSP_AUDIO_IN_MspInit+0x11c>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 800259a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800259e:	646b      	str	r3, [r5, #68]	; 0x44
 80025a0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80025a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 80025aa:	9402      	str	r4, [sp, #8]
 80025ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b2:	632b      	str	r3, [r5, #48]	; 0x30
 80025b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80025be:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80025c0:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80025c4:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025c6:	e9cd 4707 	strd	r4, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80025ca:	f001 ff1f 	bl	800440c <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 80025ce:	9403      	str	r4, [sp, #12]
 80025d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80025d2:	a905      	add	r1, sp, #20
 80025d4:	4832      	ldr	r0, [pc, #200]	; (80026a0 <BSP_AUDIO_IN_MspInit+0x120>)
  AUDIO_IN_INT_GPIO_ENABLE();
 80025d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025da:	632b      	str	r3, [r5, #48]	; 0x30
 80025dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	9303      	str	r3, [sp, #12]
 80025e4:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80025e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025ea:	e9cd 4707 	strd	r4, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80025f2:	f001 ff0b 	bl	800440c <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80025f6:	9404      	str	r4, [sp, #16]
 80025f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 80025fa:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80025fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002600:	632b      	str	r3, [r5, #48]	; 0x30
 8002602:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <BSP_AUDIO_IN_MspInit+0x124>)
 800260e:	429a      	cmp	r2, r3
 8002610:	d12f      	bne.n	8002672 <BSP_AUDIO_IN_MspInit+0xf2>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <BSP_AUDIO_IN_MspInit+0x128>)
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002618:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800261c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002620:	f8c3 4164 	str.w	r4, [r3, #356]	; 0x164
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002624:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800262c:	f8c3 4168 	str.w	r4, [r3, #360]	; 0x168
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002630:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002634:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002638:	f8c3 416c 	str.w	r4, [r3, #364]	; 0x16c
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800263c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002640:	2203      	movs	r2, #3
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002642:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002646:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800264a:	f8c3 4190 	str.w	r4, [r3, #400]	; 0x190
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800264e:	f503 74b0 	add.w	r4, r3, #352	; 0x160
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002652:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002656:	4a15      	ldr	r2, [pc, #84]	; (80026ac <BSP_AUDIO_IN_MspInit+0x12c>)
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002658:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800265a:	6734      	str	r4, [r6, #112]	; 0x70
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800265c:	f8c3 8170 	str.w	r8, [r3, #368]	; 0x170
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002660:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002664:	f8c3 6198 	str.w	r6, [r3, #408]	; 0x198
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002668:	f001 fc58 	bl	8003f1c <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 800266c:	4620      	mov	r0, r4
 800266e:	f001 fc11 	bl	8003e94 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2106      	movs	r1, #6
 8002676:	2046      	movs	r0, #70	; 0x46
 8002678:	f001 fba2 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800267c:	2046      	movs	r0, #70	; 0x46
 800267e:	f001 fbd1 	bl	8003e24 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, 3, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2103      	movs	r1, #3
 8002686:	2028      	movs	r0, #40	; 0x28
 8002688:	f001 fb9a 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800268c:	2028      	movs	r0, #40	; 0x28
 800268e:	f001 fbc9 	bl	8003e24 <HAL_NVIC_EnableIRQ>
}
 8002692:	b00a      	add	sp, #40	; 0x28
 8002694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	40021800 	.word	0x40021800
 80026a0:	40021c00 	.word	0x40021c00
 80026a4:	40015c24 	.word	0x40015c24
 80026a8:	20001294 	.word	0x20001294
 80026ac:	400264b8 	.word	0x400264b8

080026b0 <BSP_AUDIO_IN_OUT_Init>:
{
 80026b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b4:	461e      	mov	r6, r3
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026b6:	f420 7380 	bic.w	r3, r0, #256	; 0x100
{
 80026ba:	4605      	mov	r5, r0
 80026bc:	460f      	mov	r7, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
{
 80026c2:	4690      	mov	r8, r2
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 80026c4:	d002      	beq.n	80026cc <BSP_AUDIO_IN_OUT_Init+0x1c>
    ret = AUDIO_ERROR;
 80026c6:	2001      	movs	r0, #1
}
 80026c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80026cc:	4c20      	ldr	r4, [pc, #128]	; (8002750 <BSP_AUDIO_IN_OUT_Init+0xa0>)
    SAIx_In_DeInit();
 80026ce:	f7ff fd91 	bl	80021f4 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 80026d2:	f7ff fd81 	bl	80021d8 <SAIx_Out_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80026d6:	4631      	mov	r1, r6
 80026d8:	2200      	movs	r2, #0
 80026da:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80026de:	f7ff feeb 	bl	80024b8 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80026e2:	4620      	mov	r0, r4
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <BSP_AUDIO_IN_OUT_Init+0xa4>)
 80026e6:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80026ea:	f003 fdac 	bl	8006246 <HAL_SAI_GetState>
 80026ee:	4601      	mov	r1, r0
 80026f0:	b918      	cbnz	r0, 80026fa <BSP_AUDIO_IN_OUT_Init+0x4a>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80026f2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80026f6:	f7ff ff43 	bl	8002580 <BSP_AUDIO_IN_MspInit>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <BSP_AUDIO_IN_OUT_Init+0xa8>)
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80026fc:	4814      	ldr	r0, [pc, #80]	; (8002750 <BSP_AUDIO_IN_OUT_Init+0xa0>)
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80026fe:	6023      	str	r3, [r4, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002700:	f003 fda1 	bl	8006246 <HAL_SAI_GetState>
 8002704:	4601      	mov	r1, r0
 8002706:	b910      	cbnz	r0, 800270e <BSP_AUDIO_IN_OUT_Init+0x5e>
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002708:	4811      	ldr	r0, [pc, #68]	; (8002750 <BSP_AUDIO_IN_OUT_Init+0xa0>)
 800270a:	f7ff fe21 	bl	8002350 <BSP_AUDIO_OUT_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800270e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002712:	4c12      	ldr	r4, [pc, #72]	; (800275c <BSP_AUDIO_IN_OUT_Init+0xac>)
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002714:	4632      	mov	r2, r6
 8002716:	f04f 0000 	mov.w	r0, #0
 800271a:	bf0c      	ite	eq
 800271c:	210a      	moveq	r1, #10
 800271e:	2105      	movne	r1, #5
 8002720:	f7ff fd76 	bl	8002210 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002724:	68a3      	ldr	r3, [r4, #8]
 8002726:	2034      	movs	r0, #52	; 0x34
 8002728:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 800272a:	f648 1394 	movw	r3, #35220	; 0x8994
 800272e:	4298      	cmp	r0, r3
 8002730:	d1c9      	bne.n	80026c6 <BSP_AUDIO_IN_OUT_Init+0x16>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002732:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002734:	2034      	movs	r0, #52	; 0x34
 8002736:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <BSP_AUDIO_IN_OUT_Init+0xb0>)
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, Volume, AudioFreq);
 800273a:	4642      	mov	r2, r8
 800273c:	ea45 0107 	orr.w	r1, r5, r7
      audio_drv = &wm8994_drv;
 8002740:	601c      	str	r4, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, Volume, AudioFreq);
 8002742:	2034      	movs	r0, #52	; 0x34
 8002744:	6824      	ldr	r4, [r4, #0]
 8002746:	4633      	mov	r3, r6
 8002748:	47a0      	blx	r4
      ret = AUDIO_OK;
 800274a:	2000      	movs	r0, #0
 800274c:	e7bc      	b.n	80026c8 <BSP_AUDIO_IN_OUT_Init+0x18>
 800274e:	bf00      	nop
 8002750:	20001294 	.word	0x20001294
 8002754:	40015c24 	.word	0x40015c24
 8002758:	40015c04 	.word	0x40015c04
 800275c:	2000006c 	.word	0x2000006c
 8002760:	20001a78 	.word	0x20001a78

08002764 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002768:	4616      	mov	r6, r2
 800276a:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800276c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <LL_FillBuffer+0x6c>)
{
 8002772:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002774:	2034      	movs	r0, #52	; 0x34
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002776:	605a      	str	r2, [r3, #4]
{
 8002778:	460d      	mov	r5, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800277a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800277e:	fb00 3202 	mla	r2, r0, r2, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002782:	4813      	ldr	r0, [pc, #76]	; (80027d0 <LL_FillBuffer+0x6c>)
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002784:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002788:	2a02      	cmp	r2, #2
{
 800278a:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800278e:	bf18      	it	ne
 8002790:	2200      	movne	r2, #0
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002792:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hDma2dHandler.Instance = DMA2D;
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <LL_FillBuffer+0x70>)
 8002798:	601a      	str	r2, [r3, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800279a:	f001 fd28 	bl	80041ee <HAL_DMA2D_Init>
 800279e:	b998      	cbnz	r0, 80027c8 <LL_FillBuffer+0x64>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80027a0:	4641      	mov	r1, r8
 80027a2:	480b      	ldr	r0, [pc, #44]	; (80027d0 <LL_FillBuffer+0x6c>)
 80027a4:	f001 fdce 	bl	8004344 <HAL_DMA2D_ConfigLayer>
 80027a8:	b970      	cbnz	r0, 80027c8 <LL_FillBuffer+0x64>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80027aa:	9700      	str	r7, [sp, #0]
 80027ac:	4633      	mov	r3, r6
 80027ae:	462a      	mov	r2, r5
 80027b0:	4621      	mov	r1, r4
 80027b2:	4807      	ldr	r0, [pc, #28]	; (80027d0 <LL_FillBuffer+0x6c>)
 80027b4:	f001 fd47 	bl	8004246 <HAL_DMA2D_Start>
 80027b8:	b930      	cbnz	r0, 80027c8 <LL_FillBuffer+0x64>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80027ba:	210a      	movs	r1, #10
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 80027be:	b002      	add	sp, #8
 80027c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80027c4:	f001 bd5f 	b.w	8004286 <HAL_DMA2D_PollForTransfer>
}
 80027c8:	b002      	add	sp, #8
 80027ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027ce:	bf00      	nop
 80027d0:	200014a4 	.word	0x200014a4
 80027d4:	4002b000 	.word	0x4002b000

080027d8 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <BSP_LCD_GetXSize+0x14>)
 80027da:	2134      	movs	r1, #52	; 0x34
 80027dc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80027e0:	fb01 2303 	mla	r3, r1, r3, r2
}
 80027e4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	200014a4 	.word	0x200014a4

080027f0 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <BSP_LCD_GetYSize+0x14>)
 80027f2:	2134      	movs	r1, #52	; 0x34
 80027f4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80027f8:	fb01 2303 	mla	r3, r1, r3, r2
}
 80027fc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200014a4 	.word	0x200014a4

08002808 <BSP_LCD_LayerDefaultInit>:
{     
 8002808:	b530      	push	{r4, r5, lr}
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800280a:	4d1b      	ldr	r5, [pc, #108]	; (8002878 <BSP_LCD_LayerDefaultInit+0x70>)
{     
 800280c:	4604      	mov	r4, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800280e:	2034      	movs	r0, #52	; 0x34
{     
 8002810:	b08f      	sub	sp, #60	; 0x3c
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002812:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
  layer_cfg.WindowX0 = 0;
 8002816:	2300      	movs	r3, #0
  layer_cfg.FBStartAdress = FB_Address;
 8002818:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 800281a:	21ff      	movs	r1, #255	; 0xff
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800281c:	fb00 5202 	mla	r2, r0, r2, r5
  layer_cfg.WindowX0 = 0;
 8002820:	9301      	str	r3, [sp, #4]
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002822:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002826:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
  layer_cfg.Backcolor.Blue = 0;
 800282a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 800282e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.WindowY0 = 0;
 8002832:	e9cd 0302 	strd	r0, r3, [sp, #8]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002836:	e9cd 2304 	strd	r2, r3, [sp, #16]
  layer_cfg.Alpha0 = 0;
 800283a:	e9cd 1306 	strd	r1, r3, [sp, #24]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800283e:	2307      	movs	r3, #7
 8002840:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002844:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002848:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800284c:	4622      	mov	r2, r4
 800284e:	a901      	add	r1, sp, #4
 8002850:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8002854:	f002 fa90 	bl	8004d78 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002858:	200c      	movs	r0, #12
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	fb00 5004 	mla	r0, r0, r4, r5
 8002862:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <BSP_LCD_LayerDefaultInit+0x74>)
 8002868:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800286c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002870:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
 8002874:	b00f      	add	sp, #60	; 0x3c
 8002876:	bd30      	pop	{r4, r5, pc}
 8002878:	200014a4 	.word	0x200014a4
 800287c:	20000018 	.word	0x20000018

08002880 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8002880:	4b01      	ldr	r3, [pc, #4]	; (8002888 <BSP_LCD_SelectLayer+0x8>)
 8002882:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
 8002886:	4770      	bx	lr
 8002888:	200014a4 	.word	0x200014a4

0800288c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <BSP_LCD_SetTextColor+0x14>)
 800288e:	210c      	movs	r1, #12
 8002890:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8002894:	fb01 2303 	mla	r3, r1, r3, r2
 8002898:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200014a4 	.word	0x200014a4

080028a4 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <BSP_LCD_SetBackColor+0x14>)
 80028a6:	210c      	movs	r1, #12
 80028a8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80028ac:	fb01 2303 	mla	r3, r1, r3, r2
 80028b0:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200014a4 	.word	0x200014a4

080028bc <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <BSP_LCD_SetFont+0x14>)
 80028be:	210c      	movs	r1, #12
 80028c0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80028c4:	fb01 2303 	mla	r3, r1, r3, r2
 80028c8:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	200014a4 	.word	0x200014a4

080028d4 <BSP_LCD_DrawPixel>:
{
 80028d4:	b530      	push	{r4, r5, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80028d6:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <BSP_LCD_DrawPixel+0x2c>)
 80028d8:	2534      	movs	r5, #52	; 0x34
 80028da:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80028de:	fb05 4303 	mla	r3, r5, r3, r4
 80028e2:	e9d3 5427 	ldrd	r5, r4, [r3, #156]	; 0x9c
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	fb04 0101 	mla	r1, r4, r1, r0
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d103      	bne.n	80028fa <BSP_LCD_DrawPixel+0x26>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80028f2:	b292      	uxth	r2, r2
 80028f4:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
}
 80028f8:	bd30      	pop	{r4, r5, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80028fa:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
}
 80028fe:	e7fb      	b.n	80028f8 <BSP_LCD_DrawPixel+0x24>
 8002900:	200014a4 	.word	0x200014a4

08002904 <BSP_LCD_DisplayChar>:
{
 8002904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002908:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800290a:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 800290e:	f04f 0800 	mov.w	r8, #0
{
 8002912:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002916:	4829      	ldr	r0, [pc, #164]	; (80029bc <BSP_LCD_DisplayChar+0xb8>)
 8002918:	210c      	movs	r1, #12
 800291a:	f8d0 b0e8 	ldr.w	fp, [r0, #232]	; 0xe8
 800291e:	fb01 010b 	mla	r1, r1, fp, r0
 8002922:	f8d1 10f4 	ldr.w	r1, [r1, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002926:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 800292a:	88cb      	ldrh	r3, [r1, #6]
 800292c:	f10a 0607 	add.w	r6, sl, #7
 8002930:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002932:	435d      	muls	r5, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002934:	10f6      	asrs	r6, r6, #3
 8002936:	9300      	str	r3, [sp, #0]
  offset =  8 *((width + 7)/8) -  width ;
 8002938:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 800293c:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1))) 
 8002940:	f10a 32ff 	add.w	r2, sl, #4294967295
 8002944:	fa52 f380 	uxtab	r3, r2, r0
 8002948:	9303      	str	r3, [sp, #12]
 800294a:	9b02      	ldr	r3, [sp, #8]
 800294c:	eb03 0908 	add.w	r9, r3, r8
  for(i = 0; i < height; i++)
 8002950:	9b00      	ldr	r3, [sp, #0]
 8002952:	4598      	cmp	r8, r3
 8002954:	fa1f f989 	uxth.w	r9, r9
 8002958:	d302      	bcc.n	8002960 <BSP_LCD_DisplayChar+0x5c>
}
 800295a:	b005      	add	sp, #20
 800295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8002960:	2e01      	cmp	r6, #1
 8002962:	782c      	ldrb	r4, [r5, #0]
 8002964:	d004      	beq.n	8002970 <BSP_LCD_DisplayChar+0x6c>
 8002966:	2e02      	cmp	r6, #2
 8002968:	d109      	bne.n	800297e <BSP_LCD_DisplayChar+0x7a>
      line =  (pchar[0]<< 8) | pchar[1];      
 800296a:	882c      	ldrh	r4, [r5, #0]
 800296c:	ba64      	rev16	r4, r4
 800296e:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8002970:	2700      	movs	r7, #0
 8002972:	45ba      	cmp	sl, r7
 8002974:	d80a      	bhi.n	800298c <BSP_LCD_DisplayChar+0x88>
  for(i = 0; i < height; i++)
 8002976:	f108 0801 	add.w	r8, r8, #1
 800297a:	4435      	add	r5, r6
 800297c:	e7e5      	b.n	800294a <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800297e:	786a      	ldrb	r2, [r5, #1]
 8002980:	0424      	lsls	r4, r4, #16
 8002982:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002986:	78aa      	ldrb	r2, [r5, #2]
 8002988:	4314      	orrs	r4, r2
 800298a:	e7f1      	b.n	8002970 <BSP_LCD_DisplayChar+0x6c>
 800298c:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 800298e:	2201      	movs	r2, #1
 8002990:	19d8      	adds	r0, r3, r7
 8002992:	9b03      	ldr	r3, [sp, #12]
 8002994:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <BSP_LCD_DisplayChar+0xb8>)
 8002998:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 800299a:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 800299c:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800299e:	4649      	mov	r1, r9
      if(line & (1 << (width- j + offset- 1))) 
 80029a0:	4222      	tst	r2, r4
 80029a2:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80029a6:	fb02 320b 	mla	r2, r2, fp, r3
 80029aa:	bf14      	ite	ne
 80029ac:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80029b0:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 80029b4:	f7ff ff8e 	bl	80028d4 <BSP_LCD_DrawPixel>
 80029b8:	e7db      	b.n	8002972 <BSP_LCD_DisplayChar+0x6e>
 80029ba:	bf00      	nop
 80029bc:	200014a4 	.word	0x200014a4

080029c0 <BSP_LCD_DisplayStringAt>:
{
 80029c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029c4:	4607      	mov	r7, r0
 80029c6:	460d      	mov	r5, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	eba2 0904 	sub.w	r9, r2, r4
  while (*ptr++) size ++ ;
 80029ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80029d2:	2900      	cmp	r1, #0
 80029d4:	d1f9      	bne.n	80029ca <BSP_LCD_DisplayStringAt+0xa>
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80029d6:	4823      	ldr	r0, [pc, #140]	; (8002a64 <BSP_LCD_DisplayStringAt+0xa4>)
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80029d8:	220c      	movs	r2, #12
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80029da:	f04f 0e34 	mov.w	lr, #52	; 0x34
  switch (Mode)
 80029de:	2b01      	cmp	r3, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80029e0:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 80029e4:	4680      	mov	r8, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80029e6:	fb02 0201 	mla	r2, r2, r1, r0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80029ea:	fb0e 0e01 	mla	lr, lr, r1, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80029ee:	f8d2 60f4 	ldr.w	r6, [r2, #244]	; 0xf4
 80029f2:	f8de 20a0 	ldr.w	r2, [lr, #160]	; 0xa0
 80029f6:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80029fa:	fbb2 f2fc 	udiv	r2, r2, ip
  switch (Mode)
 80029fe:	d01a      	beq.n	8002a36 <BSP_LCD_DisplayStringAt+0x76>
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d020      	beq.n	8002a46 <BSP_LCD_DisplayStringAt+0x86>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002a04:	b23b      	sxth	r3, r7
    ref_column = 1;
 8002a06:	46a1      	mov	r9, r4
 8002a08:	2b00      	cmp	r3, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002a0a:	f04f 0334 	mov.w	r3, #52	; 0x34
    ref_column = 1;
 8002a0e:	bfd8      	it	le
 8002a10:	2701      	movle	r7, #1
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002a12:	fb03 8801 	mla	r8, r3, r1, r8
 8002a16:	eba9 0304 	sub.w	r3, r9, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a1a:	88b0      	ldrh	r0, [r6, #4]
 8002a1c:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f819 2b01 	ldrb.w	r2, [r9], #1
 8002a26:	fb00 1313 	mls	r3, r0, r3, r1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	4283      	cmp	r3, r0
 8002a2e:	d300      	bcc.n	8002a32 <BSP_LCD_DisplayStringAt+0x72>
 8002a30:	b97a      	cbnz	r2, 8002a52 <BSP_LCD_DisplayStringAt+0x92>
}
 8002a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a36:	eba2 0009 	sub.w	r0, r2, r9
 8002a3a:	fb0c f000 	mul.w	r0, ip, r0
 8002a3e:	eb07 0050 	add.w	r0, r7, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a42:	b287      	uxth	r7, r0
      break;
 8002a44:	e7de      	b.n	8002a04 <BSP_LCD_DisplayStringAt+0x44>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a46:	eba2 0009 	sub.w	r0, r2, r9
 8002a4a:	fb10 f00c 	smulbb	r0, r0, ip
 8002a4e:	1bc0      	subs	r0, r0, r7
 8002a50:	e7f7      	b.n	8002a42 <BSP_LCD_DisplayStringAt+0x82>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002a52:	4638      	mov	r0, r7
 8002a54:	4629      	mov	r1, r5
 8002a56:	f7ff ff55 	bl	8002904 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002a5a:	88b0      	ldrh	r0, [r6, #4]
 8002a5c:	4438      	add	r0, r7
 8002a5e:	b287      	uxth	r7, r0
 8002a60:	e7d9      	b.n	8002a16 <BSP_LCD_DisplayStringAt+0x56>
 8002a62:	bf00      	nop
 8002a64:	200014a4 	.word	0x200014a4

08002a68 <BSP_LCD_DrawLine>:
{
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002a6c:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002a6e:	1a5e      	subs	r6, r3, r1
{
 8002a70:	b087      	sub	sp, #28
  x = x1;                       /* Start x off at the first pixel */
 8002a72:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002a76:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
 8002a78:	fa0f fa81 	sxth.w	sl, r1
 8002a7c:	f04f 0502 	mov.w	r5, #2
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002a80:	bfb8      	it	lt
 8002a82:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002a84:	2e00      	cmp	r6, #0
 8002a86:	bfb8      	it	lt
 8002a88:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002a8a:	b224      	sxth	r4, r4
    xinc1 = -1;
 8002a8c:	4282      	cmp	r2, r0
 8002a8e:	bf2c      	ite	cs
 8002a90:	2701      	movcs	r7, #1
 8002a92:	f04f 37ff 	movcc.w	r7, #4294967295
    yinc1 = -1;
 8002a96:	428b      	cmp	r3, r1
 8002a98:	bf2c      	ite	cs
 8002a9a:	f04f 0801 	movcs.w	r8, #1
 8002a9e:	f04f 38ff 	movcc.w	r8, #4294967295
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002aa2:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002aa4:	42b4      	cmp	r4, r6
 8002aa6:	db0e      	blt.n	8002ac6 <BSP_LCD_DrawLine+0x5e>
 8002aa8:	9703      	str	r7, [sp, #12]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002aaa:	2700      	movs	r7, #0
    num = deltax / 2;
 8002aac:	fb94 f5f5 	sdiv	r5, r4, r5
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002ab0:	9704      	str	r7, [sp, #16]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002ab2:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <BSP_LCD_DrawLine+0xd4>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002ab8:	fa0f f28b 	sxth.w	r2, fp
 8002abc:	4294      	cmp	r4, r2
 8002abe:	da0f      	bge.n	8002ae0 <BSP_LCD_DrawLine+0x78>
}
 8002ac0:	b007      	add	sp, #28
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8002ac6:	fb96 f5f5 	sdiv	r5, r6, r5
 8002aca:	4623      	mov	r3, r4
 8002acc:	f8cd 8010 	str.w	r8, [sp, #16]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002ad0:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 8002ad4:	4634      	mov	r4, r6
 8002ad6:	b22d      	sxth	r5, r5
 8002ad8:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ade:	e7e8      	b.n	8002ab2 <BSP_LCD_DrawLine+0x4a>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002ae0:	fa1f f289 	uxth.w	r2, r9
 8002ae4:	210c      	movs	r1, #12
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002ae6:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002ae8:	9305      	str	r3, [sp, #20]
 8002aea:	9201      	str	r2, [sp, #4]
 8002aec:	fa1f f28a 	uxth.w	r2, sl
 8002af0:	9202      	str	r2, [sp, #8]
 8002af2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002af6:	fb01 3202 	mla	r2, r1, r2, r3
 8002afa:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 8002afe:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8002b02:	f7ff fee7 	bl	80028d4 <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
 8002b06:	9b05      	ldr	r3, [sp, #20]
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002b08:	b2aa      	uxth	r2, r5
 8002b0a:	b215      	sxth	r5, r2
    if (num >= den)                           /* Check if numerator >= denominator */
 8002b0c:	42ac      	cmp	r4, r5
 8002b0e:	dc09      	bgt.n	8002b24 <BSP_LCD_DrawLine+0xbc>
      num -= den;                             /* Calculate the new numerator value */
 8002b10:	1b15      	subs	r5, r2, r4
      x += xinc1;                             /* Change the x as appropriate */
 8002b12:	9a01      	ldr	r2, [sp, #4]
 8002b14:	443a      	add	r2, r7
      num -= den;                             /* Calculate the new numerator value */
 8002b16:	b22d      	sxth	r5, r5
      x += xinc1;                             /* Change the x as appropriate */
 8002b18:	fa0f f982 	sxth.w	r9, r2
      y += yinc1;                             /* Change the y as appropriate */
 8002b1c:	9a02      	ldr	r2, [sp, #8]
 8002b1e:	4442      	add	r2, r8
 8002b20:	fa0f fa82 	sxth.w	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8002b24:	9a03      	ldr	r2, [sp, #12]
 8002b26:	f10b 0b01 	add.w	fp, fp, #1
 8002b2a:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 8002b2c:	9a04      	ldr	r2, [sp, #16]
 8002b2e:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8002b30:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8002b34:	fa0f fa8a 	sxth.w	sl, sl
 8002b38:	e7be      	b.n	8002ab8 <BSP_LCD_DrawLine+0x50>
 8002b3a:	bf00      	nop
 8002b3c:	200014a4 	.word	0x200014a4

08002b40 <BSP_LCD_FillRect>:
{
 8002b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002b42:	4c10      	ldr	r4, [pc, #64]	; (8002b84 <BSP_LCD_FillRect+0x44>)
 8002b44:	250c      	movs	r5, #12
 8002b46:	f8d4 70e8 	ldr.w	r7, [r4, #232]	; 0xe8
 8002b4a:	fb05 4507 	mla	r5, r5, r7, r4
 8002b4e:	f8d5 c0ec 	ldr.w	ip, [r5, #236]	; 0xec
 8002b52:	2534      	movs	r5, #52	; 0x34
 8002b54:	fb05 4507 	mla	r5, r5, r7, r4
 8002b58:	e9d5 4627 	ldrd	r4, r6, [r5, #156]	; 0x9c
 8002b5c:	fb06 0101 	mla	r1, r6, r1, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b60:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002b64:	1ab6      	subs	r6, r6, r2
 8002b66:	f8cd c004 	str.w	ip, [sp, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b6a:	2802      	cmp	r0, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	9600      	str	r6, [sp, #0]
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b70:	bf0c      	ite	eq
 8002b72:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002b76:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002b7a:	f7ff fdf3 	bl	8002764 <LL_FillBuffer>
}
 8002b7e:	b003      	add	sp, #12
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200014a4 	.word	0x200014a4

08002b88 <BSP_LCD_DisplayOn>:
{
 8002b88:	b508      	push	{r3, lr}
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b90:	4808      	ldr	r0, [pc, #32]	; (8002bb4 <BSP_LCD_DisplayOn+0x2c>)
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b94:	6993      	ldr	r3, [r2, #24]
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f001 fd29 	bl	80045f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2108      	movs	r1, #8
 8002ba6:	4804      	ldr	r0, [pc, #16]	; (8002bb8 <BSP_LCD_DisplayOn+0x30>)
}
 8002ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002bac:	f001 bd22 	b.w	80045f4 <HAL_GPIO_WritePin>
 8002bb0:	200014a4 	.word	0x200014a4
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022800 	.word	0x40022800

08002bbc <BSP_LCD_MspInit>:
{
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <BSP_LCD_MspInit+0x140>)
{
 8002bc0:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bc2:	2200      	movs	r2, #0
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bc4:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002bc6:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002bc8:	484d      	ldr	r0, [pc, #308]	; (8002d00 <BSP_LCD_MspInit+0x144>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bca:	9200      	str	r2, [sp, #0]
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002bcc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bd0:	6c59      	ldr	r1, [r3, #68]	; 0x44
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002bd2:	4e4c      	ldr	r6, [pc, #304]	; (8002d04 <BSP_LCD_MspInit+0x148>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002bd4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002bd8:	6459      	str	r1, [r3, #68]	; 0x44
 8002bda:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002bdc:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8002be0:	9100      	str	r1, [sp, #0]
 8002be2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002be4:	9201      	str	r2, [sp, #4]
 8002be6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002bec:	6319      	str	r1, [r3, #48]	; 0x30
 8002bee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf0:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8002bf4:	9101      	str	r1, [sp, #4]
 8002bf6:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf8:	9202      	str	r2, [sp, #8]
 8002bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bfc:	f041 0110 	orr.w	r1, r1, #16
 8002c00:	6319      	str	r1, [r3, #48]	; 0x30
 8002c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c04:	f001 0110 	and.w	r1, r1, #16
 8002c08:	9102      	str	r1, [sp, #8]
 8002c0a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c0c:	9203      	str	r2, [sp, #12]
 8002c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c10:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002c14:	6319      	str	r1, [r3, #48]	; 0x30
 8002c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c18:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8002c1c:	9103      	str	r1, [sp, #12]
 8002c1e:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c20:	9204      	str	r2, [sp, #16]
 8002c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c24:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c28:	6319      	str	r1, [r3, #48]	; 0x30
 8002c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c2c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8002c30:	9104      	str	r1, [sp, #16]
 8002c32:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c34:	9205      	str	r2, [sp, #20]
 8002c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c38:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002c3c:	6319      	str	r1, [r3, #48]	; 0x30
 8002c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c40:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002c44:	9105      	str	r1, [sp, #20]
 8002c46:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002c48:	9206      	str	r2, [sp, #24]
 8002c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002c50:	6319      	str	r1, [r3, #48]	; 0x30
 8002c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c54:	f401 6180 	and.w	r1, r1, #1024	; 0x400
 8002c58:	9106      	str	r1, [sp, #24]
 8002c5a:	9906      	ldr	r1, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002c5c:	9207      	str	r2, [sp, #28]
 8002c5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c60:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c64:	6319      	str	r1, [r3, #48]	; 0x30
 8002c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c68:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8002c6c:	9107      	str	r1, [sp, #28]
 8002c6e:	9907      	ldr	r1, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002c70:	9208      	str	r2, [sp, #32]
 8002c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c74:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002c78:	6319      	str	r1, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c7a:	a909      	add	r1, sp, #36	; 0x24
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002c7e:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	9308      	str	r3, [sp, #32]
 8002c86:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c88:	2310      	movs	r3, #16
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c8a:	e9cd 240b 	strd	r2, r4, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c8e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c92:	f001 fbbb 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002c96:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c98:	a909      	add	r1, sp, #36	; 0x24
 8002c9a:	481b      	ldr	r0, [pc, #108]	; (8002d08 <BSP_LCD_MspInit+0x14c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002c9c:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c9e:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ca2:	f001 fbb3 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8002ca6:	f44f 4367 	mov.w	r3, #59136	; 0xe700
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002caa:	a909      	add	r1, sp, #36	; 0x24
 8002cac:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002cae:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cb0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002cb4:	f001 fbaa 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002cb8:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002cbc:	a909      	add	r1, sp, #36	; 0x24
 8002cbe:	4813      	ldr	r0, [pc, #76]	; (8002d0c <BSP_LCD_MspInit+0x150>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002cc0:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cc2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002cc6:	f001 fba1 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002cca:	23f7      	movs	r3, #247	; 0xf7
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002ccc:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002cce:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002cd0:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002cd2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002cd6:	4c0e      	ldr	r4, [pc, #56]	; (8002d10 <BSP_LCD_MspInit+0x154>)
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f001 fb97 	bl	800440c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002cde:	a909      	add	r1, sp, #36	; 0x24
 8002ce0:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002ce2:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ce4:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002ce6:	f001 fb91 	bl	800440c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002cea:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002cec:	a909      	add	r1, sp, #36	; 0x24
 8002cee:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002cf0:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002cf4:	f001 fb8a 	bl	800440c <HAL_GPIO_Init>
}
 8002cf8:	b00f      	add	sp, #60	; 0x3c
 8002cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40021800 	.word	0x40021800
 8002d0c:	40022400 	.word	0x40022400
 8002d10:	40022800 	.word	0x40022800

08002d14 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <BSP_LCD_ClockConfig+0x20>)
 8002d16:	2308      	movs	r3, #8
 8002d18:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002d1c:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002d1e:	f500 7082 	add.w	r0, r0, #260	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002d22:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002d24:	2305      	movs	r3, #5
 8002d26:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2c:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002d2e:	f002 bb9d 	b.w	800546c <HAL_RCCEx_PeriphCLKConfig>
 8002d32:	bf00      	nop
 8002d34:	200014a4 	.word	0x200014a4

08002d38 <BSP_LCD_Init>:
{    
 8002d38:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002d3a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002d3c:	4c26      	ldr	r4, [pc, #152]	; (8002dd8 <BSP_LCD_Init+0xa0>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002d3e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d40:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d42:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d46:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002d4a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d4e:	230b      	movs	r3, #11
 8002d50:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d54:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d58:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d5a:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d5e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d62:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d66:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d6a:	f7ff ffd3 	bl	8002d14 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d6e:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8002d72:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8002d76:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d78:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d82:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d86:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d8a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <BSP_LCD_Init+0xa4>)
 8002d90:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d94:	f002 f819 	bl	8004dca <HAL_LTDC_GetState>
 8002d98:	4601      	mov	r1, r0
 8002d9a:	b918      	cbnz	r0, 8002da4 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002d9c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002da0:	f7ff ff0c 	bl	8002bbc <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002da4:	480e      	ldr	r0, [pc, #56]	; (8002de0 <BSP_LCD_Init+0xa8>)
 8002da6:	f001 ff77 	bl	8004c98 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002daa:	2201      	movs	r2, #1
 8002dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <BSP_LCD_Init+0xac>)
 8002db2:	f001 fc1f 	bl	80045f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002db6:	2201      	movs	r2, #1
 8002db8:	2108      	movs	r1, #8
 8002dba:	480b      	ldr	r0, [pc, #44]	; (8002de8 <BSP_LCD_Init+0xb0>)
 8002dbc:	f001 fc1a 	bl	80045f4 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002dc0:	f000 fa9e 	bl	8003300 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8002dc4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8002dc8:	220c      	movs	r2, #12
}
 8002dca:	2000      	movs	r0, #0
  DrawProp[ActiveLayer].pFont = fonts;
 8002dcc:	fb02 4403 	mla	r4, r2, r3, r4
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <BSP_LCD_Init+0xb4>)
 8002dd2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
 8002dd6:	bd10      	pop	{r4, pc}
 8002dd8:	200014a4 	.word	0x200014a4
 8002ddc:	40016800 	.word	0x40016800
 8002de0:	200014e4 	.word	0x200014e4
 8002de4:	40022000 	.word	0x40022000
 8002de8:	40022800 	.word	0x40022800
 8002dec:	20000018 	.word	0x20000018

08002df0 <BSP_SD_ITConfig>:
/**
  * @brief  Configures Interrupt mode for SD detection pin.
  * @retval Returns MSD_OK
  */
uint8_t BSP_SD_ITConfig(void)
{  
 8002df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */  
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8002df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  gpio_init_structure.Pull = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002df6:	2101      	movs	r1, #1
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002df8:	480a      	ldr	r0, [pc, #40]	; (8002e24 <BSP_SD_ITConfig+0x34>)
  gpio_init_structure.Pin = SD_DETECT_PIN;
 8002dfa:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <BSP_SD_ITConfig+0x38>)
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002e04:	a901      	add	r1, sp, #4
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e06:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8002e08:	f001 fb00 	bl	800440c <HAL_GPIO_Init>

  /* Enable and set SD detect EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(SD_DETECT_EXTI_IRQn), 0x0F, 0x00);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	210f      	movs	r1, #15
 8002e10:	2028      	movs	r0, #40	; 0x28
 8002e12:	f000 ffd5 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(SD_DETECT_EXTI_IRQn));
 8002e16:	2028      	movs	r0, #40	; 0x28
 8002e18:	f001 f804 	bl	8003e24 <HAL_NVIC_EnableIRQ>

  return MSD_OK;
}
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	b007      	add	sp, #28
 8002e20:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e24:	40020800 	.word	0x40020800
 8002e28:	10310000 	.word	0x10310000

08002e2c <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 8002e2c:	2301      	movs	r3, #1
{
 8002e2e:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8002e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e34:	4807      	ldr	r0, [pc, #28]	; (8002e54 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 8002e36:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8002e3a:	f001 fbd5 	bl	80045e8 <HAL_GPIO_ReadPin>
 8002e3e:	2801      	cmp	r0, #1
 8002e40:	d102      	bne.n	8002e48 <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 8002e48:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002e4c:	b003      	add	sp, #12
 8002e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e52:	bf00      	nop
 8002e54:	40020800 	.word	0x40020800

08002e58 <BSP_SD_ReadBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8002e58:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 8002e5a:	9905      	ldr	r1, [sp, #20]
 8002e5c:	9101      	str	r1, [sp, #4]
 8002e5e:	9904      	ldr	r1, [sp, #16]
 8002e60:	9100      	str	r1, [sp, #0]
 8002e62:	4601      	mov	r1, r0
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <BSP_SD_ReadBlocks+0x20>)
 8002e66:	f003 ff8b 	bl	8006d80 <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8002e6a:	3000      	adds	r0, #0
 8002e6c:	bf18      	it	ne
 8002e6e:	2001      	movne	r0, #1
 8002e70:	b003      	add	sp, #12
 8002e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e76:	bf00      	nop
 8002e78:	20001630 	.word	0x20001630

08002e7c <BSP_SD_WriteBlocks>:
  * @param  BlockSize: SD card data block size, that should be 512
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfBlocks)
{
 8002e7c:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)
 8002e7e:	9905      	ldr	r1, [sp, #20]
 8002e80:	9101      	str	r1, [sp, #4]
 8002e82:	9904      	ldr	r1, [sp, #16]
 8002e84:	9100      	str	r1, [sp, #0]
 8002e86:	4601      	mov	r1, r0
 8002e88:	4804      	ldr	r0, [pc, #16]	; (8002e9c <BSP_SD_WriteBlocks+0x20>)
 8002e8a:	f004 f82f 	bl	8006eec <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 8002e8e:	3000      	adds	r0, #0
 8002e90:	bf18      	it	ne
 8002e92:	2001      	movne	r0, #1
 8002e94:	b003      	add	sp, #12
 8002e96:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e9a:	bf00      	nop
 8002e9c:	20001630 	.word	0x20001630

08002ea0 <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ea4:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <BSP_SD_MspInit+0x170>)
{
 8002ea6:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ea8:	2500      	movs	r5, #0
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8002eaa:	f04f 0803 	mov.w	r8, #3
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002eae:	ac0e      	add	r4, sp, #56	; 0x38
{
 8002eb0:	4607      	mov	r7, r0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002eb2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002eb4:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002eba:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002ebe:	4855      	ldr	r0, [pc, #340]	; (8003014 <BSP_SD_MspInit+0x174>)
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002ec0:	f04f 0a20 	mov.w	sl, #32
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
 8002eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ecc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ed0:	9205      	str	r2, [sp, #20]
 8002ed2:	9a05      	ldr	r2, [sp, #20]
  __DMAx_TxRx_CLK_ENABLE();
 8002ed4:	9506      	str	r5, [sp, #24]
 8002ed6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002ee4:	9206      	str	r2, [sp, #24]
 8002ee6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee8:	9507      	str	r5, [sp, #28]
 8002eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eec:	f042 0204 	orr.w	r2, r2, #4
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef4:	f002 0204 	and.w	r2, r2, #4
 8002ef8:	9207      	str	r2, [sp, #28]
 8002efa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efc:	9508      	str	r5, [sp, #32]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	f042 0208 	orr.w	r2, r2, #8
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002f06:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	9308      	str	r3, [sp, #32]
 8002f10:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002f1e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f22:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002f26:	4621      	mov	r1, r4
 8002f28:	f001 fa70 	bl	800440c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	483a      	ldr	r0, [pc, #232]	; (8003018 <BSP_SD_MspInit+0x178>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 8002f30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002f34:	f001 fa6a 	bl	800440c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002f38:	462a      	mov	r2, r5
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	2031      	movs	r0, #49	; 0x31
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002f3e:	4c37      	ldr	r4, [pc, #220]	; (800301c <BSP_SD_MspInit+0x17c>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8002f40:	f000 ff3e 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002f44:	2031      	movs	r0, #49	; 0x31
 8002f46:	f000 ff6d 	bl	8003e24 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002f4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002f52:	4626      	mov	r6, r4
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f54:	6763      	str	r3, [r4, #116]	; 0x74
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f5a:	9301      	str	r3, [sp, #4]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002f5c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002f60:	482f      	ldr	r0, [pc, #188]	; (8003020 <BSP_SD_MspInit+0x180>)
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8002f62:	6661      	str	r1, [r4, #100]	; 0x64
 8002f64:	9103      	str	r1, [sp, #12]
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002f66:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8002f6a:	f846 0f60 	str.w	r0, [r6, #96]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8002f6e:	4630      	mov	r0, r6
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8002f70:	65be      	str	r6, [r7, #88]	; 0x58
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002f72:	6722      	str	r2, [r4, #112]	; 0x70
 8002f74:	9202      	str	r2, [sp, #8]
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f76:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8002f7a:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002f7e:	e9c4 3920 	strd	r3, r9, [r4, #128]	; 0x80
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002f82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002f86:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002f8a:	e9c4 1323 	strd	r1, r3, [r4, #140]	; 0x8c
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8002f8e:	e9c4 ba1e 	strd	fp, sl, [r4, #120]	; 0x78
  HAL_DMA_DeInit(&dma_rx_handle);
 8002f92:	f000 ffc3 	bl	8003f1c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8002f96:	4630      	mov	r0, r6
 8002f98:	f000 ff7c 	bl	8003e94 <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f9c:	9b01      	ldr	r3, [sp, #4]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002f9e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8002fa2:	9903      	ldr	r1, [sp, #12]
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8002fa4:	4626      	mov	r6, r4
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002fa6:	9a02      	ldr	r2, [sp, #8]
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8002fa8:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002fac:	2140      	movs	r1, #64	; 0x40
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002fae:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8002fb2:	f8c4 a0d4 	str.w	sl, [r4, #212]	; 0xd4
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002fb6:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8002fba:	f8c4 70f0 	str.w	r7, [r4, #240]	; 0xf0
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002fbe:	e9c4 3b33 	strd	r3, fp, [r4, #204]	; 0xcc
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8002fc2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002fc6:	e9c4 3936 	strd	r3, r9, [r4, #216]	; 0xd8
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8002fca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fce:	e9c4 0339 	strd	r0, r3, [r4, #228]	; 0xe4
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8002fd2:	4b14      	ldr	r3, [pc, #80]	; (8003024 <BSP_SD_MspInit+0x184>)
 8002fd4:	f846 3fb8 	str.w	r3, [r6, #184]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8002fd8:	4630      	mov	r0, r6
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8002fda:	65fe      	str	r6, [r7, #92]	; 0x5c
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002fdc:	e9c4 1530 	strd	r1, r5, [r4, #192]	; 0xc0
  HAL_DMA_DeInit(&dma_tx_handle);
 8002fe0:	f000 ff9c 	bl	8003f1c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f000 ff55 	bl	8003e94 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 6, 0);
 8002fea:	462a      	mov	r2, r5
 8002fec:	2106      	movs	r1, #6
 8002fee:	203b      	movs	r0, #59	; 0x3b
 8002ff0:	f000 fee6 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8002ff4:	203b      	movs	r0, #59	; 0x3b
 8002ff6:	f000 ff15 	bl	8003e24 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 6, 0);
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	2106      	movs	r1, #6
 8002ffe:	2045      	movs	r0, #69	; 0x45
 8003000:	f000 fede 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003004:	2045      	movs	r0, #69	; 0x45
 8003006:	f000 ff0d 	bl	8003e24 <HAL_NVIC_EnableIRQ>
}
 800300a:	b00f      	add	sp, #60	; 0x3c
 800300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	40020800 	.word	0x40020800
 8003018:	40020c00 	.word	0x40020c00
 800301c:	20001630 	.word	0x20001630
 8003020:	40026458 	.word	0x40026458
 8003024:	400264a0 	.word	0x400264a0

08003028 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 800302a:	2100      	movs	r1, #0
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <BSP_SD_Detect_MspInit+0x38>)
  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800302e:	480d      	ldr	r0, [pc, #52]	; (8003064 <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 8003030:	9100      	str	r1, [sp, #0]
 8003032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003034:	f042 0204 	orr.w	r2, r2, #4
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800303a:	2201      	movs	r2, #1
  SD_DETECT_GPIO_CLK_ENABLE();
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8003046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800304a:	e9cd 3101 	strd	r3, r1, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800304e:	2303      	movs	r3, #3
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003050:	a901      	add	r1, sp, #4
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003052:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003056:	f001 f9d9 	bl	800440c <HAL_GPIO_Init>
}
 800305a:	b007      	add	sp, #28
 800305c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003060:	40023800 	.word	0x40023800
 8003064:	40020800 	.word	0x40020800

08003068 <BSP_SD_Init>:
{ 
 8003068:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 800306a:	4c15      	ldr	r4, [pc, #84]	; (80030c0 <BSP_SD_Init+0x58>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800306c:	2500      	movs	r5, #0
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <BSP_SD_Init+0x5c>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003070:	4629      	mov	r1, r5
 8003072:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8003074:	61a5      	str	r5, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003076:	e9c4 3500 	strd	r3, r5, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800307a:	e9c4 5502 	strd	r5, r5, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800307e:	e9c4 5504 	strd	r5, r5, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003082:	f7ff ffd1 	bl	8003028 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8003086:	f7ff fed1 	bl	8002e2c <BSP_SD_IsDetected>
 800308a:	2801      	cmp	r0, #1
 800308c:	4606      	mov	r6, r0
 800308e:	d112      	bne.n	80030b6 <BSP_SD_Init+0x4e>
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003090:	4629      	mov	r1, r5
 8003092:	4620      	mov	r0, r4
 8003094:	f7ff ff04 	bl	8002ea0 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle, &uSdCardInfo) != SD_OK)
 8003098:	f504 7188 	add.w	r1, r4, #272	; 0x110
 800309c:	4620      	mov	r0, r4
 800309e:	f003 fbed 	bl	800687c <HAL_SD_Init>
 80030a2:	b950      	cbnz	r0, 80030ba <BSP_SD_Init+0x52>
    if(HAL_SD_WideBusOperation_Config(&uSdHandle, SDMMC_BUS_WIDE_4B) != SD_OK)
 80030a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030a8:	4620      	mov	r0, r4
 80030aa:	f003 fdbd 	bl	8006c28 <HAL_SD_WideBusOperation_Config>
    return MSD_ERROR_SD_NOT_PRESENT;
 80030ae:	1b40      	subs	r0, r0, r5
 80030b0:	bf18      	it	ne
 80030b2:	2001      	movne	r0, #1
}
 80030b4:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 80030b6:	2002      	movs	r0, #2
 80030b8:	e7fc      	b.n	80030b4 <BSP_SD_Init+0x4c>
    sd_state = MSD_ERROR;
 80030ba:	4630      	mov	r0, r6
 80030bc:	e7fa      	b.n	80030b4 <BSP_SD_Init+0x4c>
 80030be:	bf00      	nop
 80030c0:	20001630 	.word	0x20001630
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <BSP_SD_GetStatus>:
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  *            @arg  SD_TRANSFER_ERROR: Data transfer error 
  */
HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
{
  return(HAL_SD_GetStatus(&uSdHandle));
 80030c8:	4801      	ldr	r0, [pc, #4]	; (80030d0 <BSP_SD_GetStatus+0x8>)
 80030ca:	f004 b802 	b.w	80070d2 <HAL_SD_GetStatus>
 80030ce:	bf00      	nop
 80030d0:	20001630 	.word	0x20001630

080030d4 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_Get_CardInfo(&uSdHandle, CardInfo);
 80030d4:	4601      	mov	r1, r0
 80030d6:	4801      	ldr	r0, [pc, #4]	; (80030dc <BSP_SD_GetCardInfo+0x8>)
 80030d8:	f003 ba91 	b.w	80065fe <HAL_SD_Get_CardInfo>
 80030dc:	20001630 	.word	0x20001630

080030e0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80030e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80030e4:	4c21      	ldr	r4, [pc, #132]	; (800316c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80030e6:	2710      	movs	r7, #16
 80030e8:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 80030ea:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80030ee:	19e5      	adds	r5, r4, r7
 80030f0:	4621      	mov	r1, r4
{
 80030f2:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80030f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030f8:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 80030fa:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80030fe:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8003102:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003106:	f004 f82a 	bl	800715e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800310a:	4630      	mov	r0, r6
 800310c:	f00a fc9e 	bl	800da4c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003110:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003112:	4621      	mov	r1, r4
 8003114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003118:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800311a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800311e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003122:	f004 f81c 	bl	800715e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003126:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003128:	4621      	mov	r1, r4
 800312a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800312e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003130:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8003134:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8003136:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800313a:	f004 f810 	bl	800715e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800313e:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003142:	4621      	mov	r1, r4
 8003144:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003148:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800314a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800314c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800314e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003150:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003154:	9b01      	ldr	r3, [sp, #4]
 8003156:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003158:	f004 f801 	bl	800715e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800315c:	4649      	mov	r1, r9
 800315e:	4628      	mov	r0, r5
}
 8003160:	b003      	add	sp, #12
 8003162:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003166:	f004 b811 	b.w	800718c <HAL_SDRAM_ProgramRefreshRate>
 800316a:	bf00      	nop
 800316c:	20001848 	.word	0x20001848

08003170 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003170:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003172:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <BSP_SDRAM_MspInit+0x16c>)
{  
 8003174:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8003176:	2400      	movs	r4, #0
{  
 8003178:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800317a:	ad0e      	add	r5, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800317c:	4858      	ldr	r0, [pc, #352]	; (80032e0 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800317e:	9401      	str	r4, [sp, #4]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	f002 0201 	and.w	r2, r2, #1
 800318e:	9201      	str	r2, [sp, #4]
 8003190:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8003192:	9402      	str	r4, [sp, #8]
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
 800319c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80031a2:	9202      	str	r2, [sp, #8]
 80031a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a6:	9403      	str	r4, [sp, #12]
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	f042 0204 	orr.w	r2, r2, #4
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
 80031b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b2:	f002 0204 	and.w	r2, r2, #4
 80031b6:	9203      	str	r2, [sp, #12]
 80031b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ba:	9404      	str	r4, [sp, #16]
 80031bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031be:	f042 0208 	orr.w	r2, r2, #8
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	f002 0208 	and.w	r2, r2, #8
 80031ca:	9204      	str	r2, [sp, #16]
 80031cc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ce:	9405      	str	r4, [sp, #20]
 80031d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031d2:	f042 0210 	orr.w	r2, r2, #16
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
 80031d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031da:	f002 0210 	and.w	r2, r2, #16
 80031de:	9205      	str	r2, [sp, #20]
 80031e0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031e2:	9406      	str	r4, [sp, #24]
 80031e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e6:	f042 0220 	orr.w	r2, r2, #32
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
 80031ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ee:	f002 0220 	and.w	r2, r2, #32
 80031f2:	9206      	str	r2, [sp, #24]
 80031f4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031f6:	9407      	str	r4, [sp, #28]
 80031f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003202:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003206:	9207      	str	r2, [sp, #28]
 8003208:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800320a:	9408      	str	r4, [sp, #32]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003214:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	9308      	str	r3, [sp, #32]
 800321e:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003220:	2302      	movs	r3, #2
 8003222:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003226:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003228:	230c      	movs	r3, #12
 800322a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800322c:	2308      	movs	r3, #8
 800322e:	f845 3d14 	str.w	r3, [r5, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003232:	4629      	mov	r1, r5
 8003234:	f001 f8ea 	bl	800440c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003238:	f24c 730b 	movw	r3, #50955	; 0xc70b
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800323c:	4629      	mov	r1, r5
 800323e:	4829      	ldr	r0, [pc, #164]	; (80032e4 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003240:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003242:	f001 f8e3 	bl	800440c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003246:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800324a:	4629      	mov	r1, r5
 800324c:	4826      	ldr	r0, [pc, #152]	; (80032e8 <BSP_SDRAM_MspInit+0x178>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800324e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003250:	f001 f8dc 	bl	800440c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003254:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003258:	4629      	mov	r1, r5
 800325a:	4824      	ldr	r0, [pc, #144]	; (80032ec <BSP_SDRAM_MspInit+0x17c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800325c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800325e:	f001 f8d5 	bl	800440c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003262:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003266:	4629      	mov	r1, r5
 8003268:	4821      	ldr	r0, [pc, #132]	; (80032f0 <BSP_SDRAM_MspInit+0x180>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800326a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800326c:	f001 f8ce 	bl	800440c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003270:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003272:	4629      	mov	r1, r5
 8003274:	481f      	ldr	r0, [pc, #124]	; (80032f4 <BSP_SDRAM_MspInit+0x184>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003276:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003278:	f001 f8c8 	bl	800440c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <BSP_SDRAM_MspInit+0x188>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	f44f 7200 	mov.w	r2, #512	; 0x200
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003284:	f44f 6080 	mov.w	r0, #1024	; 0x400
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003288:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800328a:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800328c:	649c      	str	r4, [r3, #72]	; 0x48
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800328e:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003296:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800329a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
 800329e:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80032a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80032a6:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80032aa:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80032ac:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80032b0:	4a12      	ldr	r2, [pc, #72]	; (80032fc <BSP_SDRAM_MspInit+0x18c>)
 80032b2:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80032b6:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80032b8:	6335      	str	r5, [r6, #48]	; 0x30
 80032ba:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
 80032bc:	f000 fe2e 	bl	8003f1c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80032c0:	4628      	mov	r0, r5
 80032c2:	f000 fde7 	bl	8003e94 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 80032c6:	4622      	mov	r2, r4
 80032c8:	2105      	movs	r1, #5
 80032ca:	2038      	movs	r0, #56	; 0x38
 80032cc:	f000 fd78 	bl	8003dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80032d0:	2038      	movs	r0, #56	; 0x38
 80032d2:	f000 fda7 	bl	8003e24 <HAL_NVIC_EnableIRQ>
}
 80032d6:	b00e      	add	sp, #56	; 0x38
 80032d8:	bd70      	pop	{r4, r5, r6, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40021400 	.word	0x40021400
 80032f0:	40021800 	.word	0x40021800
 80032f4:	40021c00 	.word	0x40021c00
 80032f8:	20001848 	.word	0x20001848
 80032fc:	40026410 	.word	0x40026410

08003300 <BSP_SDRAM_Init>:
{ 
 8003300:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8003304:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003306:	4c1b      	ldr	r4, [pc, #108]	; (8003374 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8003308:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800330a:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800330c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003310:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8003312:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003314:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8003316:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  Timing.ExitSelfRefreshDelay = 7;
 800331a:	e9c4 3127 	strd	r3, r1, [r4, #156]	; 0x9c
  Timing.RPDelay              = 2;
 800331e:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003322:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 8003324:	e9c4 2129 	strd	r2, r1, [r4, #164]	; 0xa4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003328:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800332c:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800332e:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003332:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003336:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003338:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800333c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003340:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003344:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003348:	f7ff ff12 	bl	8003170 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800334c:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 8003350:	f104 0010 	add.w	r0, r4, #16
 8003354:	4c08      	ldr	r4, [pc, #32]	; (8003378 <BSP_SDRAM_Init+0x78>)
 8003356:	f003 fee2 	bl	800711e <HAL_SDRAM_Init>
 800335a:	b138      	cbz	r0, 800336c <BSP_SDRAM_Init+0x6c>
    sdramstatus = SDRAM_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003360:	f240 6003 	movw	r0, #1539	; 0x603
 8003364:	f7ff febc 	bl	80030e0 <BSP_SDRAM_Initialization_sequence>
}
 8003368:	7820      	ldrb	r0, [r4, #0]
 800336a:	bd10      	pop	{r4, pc}
    sdramstatus = SDRAM_OK;
 800336c:	7020      	strb	r0, [r4, #0]
 800336e:	e7f7      	b.n	8003360 <BSP_SDRAM_Init+0x60>
 8003370:	a0000140 	.word	0xa0000140
 8003374:	20001848 	.word	0x20001848
 8003378:	20000040 	.word	0x20000040

0800337c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800337c:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 800337e:	4c0b      	ldr	r4, [pc, #44]	; (80033ac <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003380:	4d0b      	ldr	r5, [pc, #44]	; (80033b0 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 8003382:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003384:	2070      	movs	r0, #112	; 0x70
 8003386:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 8003388:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800338a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800338c:	686b      	ldr	r3, [r5, #4]
 800338e:	2070      	movs	r0, #112	; 0x70
 8003390:	4798      	blx	r3
 8003392:	2851      	cmp	r0, #81	; 0x51
 8003394:	d108      	bne.n	80033a8 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 8003396:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 8003398:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 800339a:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 800339c:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800339e:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 80033a0:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 80033a2:	4798      	blx	r3
  uint8_t status = TS_OK;
 80033a4:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 80033a8:	2003      	movs	r0, #3
 80033aa:	e7fc      	b.n	80033a6 <BSP_TS_Init+0x2a>
 80033ac:	20001958 	.word	0x20001958
 80033b0:	20000044 	.word	0x20000044

080033b4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80033b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <BSP_TS_Get_GestureId+0x5c>)
  uint32_t gestureId = 0;
 80033b8:	a902      	add	r1, sp, #8
 80033ba:	2400      	movs	r4, #0
{
 80033bc:	4605      	mov	r5, r0
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80033be:	7a18      	ldrb	r0, [r3, #8]
  uint32_t gestureId = 0;
 80033c0:	f841 4d04 	str.w	r4, [r1, #-4]!
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80033c4:	f000 f992 	bl	80036ec <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80033c8:	9801      	ldr	r0, [sp, #4]
 80033ca:	2818      	cmp	r0, #24
 80033cc:	d017      	beq.n	80033fe <BSP_TS_Get_GestureId+0x4a>
 80033ce:	d809      	bhi.n	80033e4 <BSP_TS_Get_GestureId+0x30>
 80033d0:	2810      	cmp	r0, #16
 80033d2:	d00f      	beq.n	80033f4 <BSP_TS_Get_GestureId+0x40>
 80033d4:	2814      	cmp	r0, #20
 80033d6:	d010      	beq.n	80033fa <BSP_TS_Get_GestureId+0x46>
 80033d8:	b9b8      	cbnz	r0, 800340a <BSP_TS_Get_GestureId+0x56>
  uint8_t  ts_status = TS_OK;
 80033da:	4604      	mov	r4, r0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80033dc:	62a8      	str	r0, [r5, #40]	; 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 80033de:	4620      	mov	r0, r4
 80033e0:	b003      	add	sp, #12
 80033e2:	bd30      	pop	{r4, r5, pc}
  switch(gestureId)
 80033e4:	2840      	cmp	r0, #64	; 0x40
 80033e6:	d00c      	beq.n	8003402 <BSP_TS_Get_GestureId+0x4e>
 80033e8:	2849      	cmp	r0, #73	; 0x49
 80033ea:	d00c      	beq.n	8003406 <BSP_TS_Get_GestureId+0x52>
 80033ec:	281c      	cmp	r0, #28
 80033ee:	d10c      	bne.n	800340a <BSP_TS_Get_GestureId+0x56>
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80033f0:	2304      	movs	r3, #4
 80033f2:	e000      	b.n	80033f6 <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80033f4:	2301      	movs	r3, #1
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80033f6:	62ab      	str	r3, [r5, #40]	; 0x28
      break;
 80033f8:	e7f1      	b.n	80033de <BSP_TS_Get_GestureId+0x2a>
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80033fa:	2302      	movs	r3, #2
 80033fc:	e7fb      	b.n	80033f6 <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80033fe:	2303      	movs	r3, #3
 8003400:	e7f9      	b.n	80033f6 <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003402:	2305      	movs	r3, #5
 8003404:	e7f7      	b.n	80033f6 <BSP_TS_Get_GestureId+0x42>
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003406:	2306      	movs	r3, #6
 8003408:	e7f5      	b.n	80033f6 <BSP_TS_Get_GestureId+0x42>
      ts_status = TS_ERROR;
 800340a:	2401      	movs	r4, #1
 800340c:	e7e7      	b.n	80033de <BSP_TS_Get_GestureId+0x2a>
 800340e:	bf00      	nop
 8003410:	20001958 	.word	0x20001958

08003414 <BSP_TS_GetState>:
{
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003418:	4d55      	ldr	r5, [pc, #340]	; (8003570 <BSP_TS_GetState+0x15c>)
{
 800341a:	b095      	sub	sp, #84	; 0x54
  uint32_t weight = 0;
 800341c:	2400      	movs	r4, #0
{
 800341e:	4680      	mov	r8, r0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003420:	686b      	ldr	r3, [r5, #4]
  uint32_t event = 0;
 8003422:	9407      	str	r4, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	7a28      	ldrb	r0, [r5, #8]
  uint32_t area = 0;
 8003428:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800342c:	4798      	blx	r3
 800342e:	f888 0000 	strb.w	r0, [r8]
  if(TS_State->touchDetected)
 8003432:	b170      	cbz	r0, 8003452 <BSP_TS_GetState+0x3e>
 8003434:	f108 0616 	add.w	r6, r8, #22
 8003438:	f108 0702 	add.w	r7, r8, #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800343c:	f105 0a0c 	add.w	sl, r5, #12
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003440:	f105 0b20 	add.w	fp, r5, #32
    for(index=0; index < TS_State->touchDetected; index++)
 8003444:	f898 3000 	ldrb.w	r3, [r8]
 8003448:	42a3      	cmp	r3, r4
 800344a:	d805      	bhi.n	8003458 <BSP_TS_GetState+0x44>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800344c:	4640      	mov	r0, r8
 800344e:	f7ff ffb1 	bl	80033b4 <BSP_TS_Get_GestureId>
}
 8003452:	b015      	add	sp, #84	; 0x54
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003458:	686a      	ldr	r2, [r5, #4]
 800345a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800345e:	ab0e      	add	r3, sp, #56	; 0x38
 8003460:	0061      	lsls	r1, r4, #1
 8003462:	6952      	ldr	r2, [r2, #20]
 8003464:	9303      	str	r3, [sp, #12]
 8003466:	4694      	mov	ip, r2
 8003468:	7a28      	ldrb	r0, [r5, #8]
 800346a:	eb09 0201 	add.w	r2, r9, r1
 800346e:	4419      	add	r1, r3
 8003470:	4663      	mov	r3, ip
 8003472:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8003474:	7a68      	ldrb	r0, [r5, #9]
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	a908      	add	r1, sp, #32
 800347a:	2801      	cmp	r0, #1
 800347c:	aa0b      	add	r2, sp, #44	; 0x2c
        x[index] = brute_x[index];
 800347e:	bf01      	itttt	eq
 8003480:	f833 c014 	ldrheq.w	ip, [r3, r4, lsl #1]
 8003484:	f821 c014 	strheq.w	ip, [r1, r4, lsl #1]
        y[index] = brute_y[index];
 8003488:	f839 c014 	ldrheq.w	ip, [r9, r4, lsl #1]
 800348c:	f822 c014 	strheq.w	ip, [r2, r4, lsl #1]
      if(tsOrientation & TS_SWAP_X)
 8003490:	f010 0f02 	tst.w	r0, #2
        x[index] = 4096 - brute_x[index];
 8003494:	bf1e      	ittt	ne
 8003496:	f833 c014 	ldrhne.w	ip, [r3, r4, lsl #1]
 800349a:	f5cc 5c80 	rsbne	ip, ip, #4096	; 0x1000
 800349e:	f821 c014 	strhne.w	ip, [r1, r4, lsl #1]
      if(tsOrientation & TS_SWAP_Y)
 80034a2:	f010 0f04 	tst.w	r0, #4
        y[index] = 4096 - brute_y[index];
 80034a6:	bf1e      	ittt	ne
 80034a8:	f839 c014 	ldrhne.w	ip, [r9, r4, lsl #1]
 80034ac:	f5cc 5c80 	rsbne	ip, ip, #4096	; 0x1000
 80034b0:	f822 c014 	strhne.w	ip, [r2, r4, lsl #1]
      if(tsOrientation & TS_SWAP_XY)
 80034b4:	0700      	lsls	r0, r0, #28
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034b6:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        y[index] = brute_x[index];
 80034ba:	bf42      	ittt	mi
 80034bc:	f833 3014 	ldrhmi.w	r3, [r3, r4, lsl #1]
 80034c0:	f822 3014 	strhmi.w	r3, [r2, r4, lsl #1]
        x[index] = brute_y[index];
 80034c4:	f839 3014 	ldrhmi.w	r3, [r9, r4, lsl #1]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034c8:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
        x[index] = brute_y[index];
 80034cc:	bf48      	it	mi
 80034ce:	f821 3014 	strhmi.w	r3, [r1, r4, lsl #1]
 80034d2:	b283      	uxth	r3, r0
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034d4:	f831 e014 	ldrh.w	lr, [r1, r4, lsl #1]
 80034d8:	00a1      	lsls	r1, r4, #2
 80034da:	4586      	cmp	lr, r0
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034dc:	f851 000b 	ldr.w	r0, [r1, fp]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034e0:	bf88      	it	hi
 80034e2:	ebae 0303 	subhi.w	r3, lr, r3
 80034e6:	b282      	uxth	r2, r0
 80034e8:	bf98      	it	ls
 80034ea:	eba3 030e 	subls.w	r3, r3, lr
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034ee:	4584      	cmp	ip, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80034f0:	7a28      	ldrb	r0, [r5, #8]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034f2:	bf8c      	ite	hi
 80034f4:	ebac 0202 	subhi.w	r2, ip, r2
 80034f8:	eba2 020c 	subls.w	r2, r2, ip
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80034fc:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80034fe:	b292      	uxth	r2, r2
      if ((x_diff + y_diff) > 5)
 8003500:	4413      	add	r3, r2
 8003502:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 8003504:	bfc4      	itt	gt
 8003506:	f84a e001 	strgt.w	lr, [sl, r1]
        _y[index] = y[index];
 800350a:	f84b c001 	strgt.w	ip, [fp, r1]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800350e:	2870      	cmp	r0, #112	; 0x70
 8003510:	d116      	bne.n	8003540 <BSP_TS_GetState+0x12c>
        TS_State->touchX[index] = x[index];
 8003512:	f8a7 e000 	strh.w	lr, [r7]
        TS_State->touchY[index] = y[index];
 8003516:	f8a7 c00a 	strh.w	ip, [r7, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800351a:	ab07      	add	r3, sp, #28
 800351c:	aa05      	add	r2, sp, #20
 800351e:	4621      	mov	r1, r4
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	ab06      	add	r3, sp, #24
 8003524:	f000 f8f2 	bl	800370c <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 8003528:	9b05      	ldr	r3, [sp, #20]
 800352a:	f806 3b01 	strb.w	r3, [r6], #1
      TS_State->touchArea[index]   = area;
 800352e:	9b06      	ldr	r3, [sp, #24]
 8003530:	7273      	strb	r3, [r6, #9]
      switch(event)
 8003532:	9b07      	ldr	r3, [sp, #28]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d812      	bhi.n	800355e <BSP_TS_GetState+0x14a>
 8003538:	e8df f003 	tbb	[pc, r3]
 800353c:	1816140f 	.word	0x1816140f
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003540:	f85a 3001 	ldr.w	r3, [sl, r1]
 8003544:	882a      	ldrh	r2, [r5, #0]
 8003546:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003548:	886a      	ldrh	r2, [r5, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800354a:	0b1b      	lsrs	r3, r3, #12
 800354c:	803b      	strh	r3, [r7, #0]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800354e:	f85b 3001 	ldr.w	r3, [fp, r1]
 8003552:	4353      	muls	r3, r2
 8003554:	0b1b      	lsrs	r3, r3, #12
 8003556:	817b      	strh	r3, [r7, #10]
 8003558:	e7df      	b.n	800351a <BSP_TS_GetState+0x106>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800355a:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800355c:	7133      	strb	r3, [r6, #4]
    for(index=0; index < TS_State->touchDetected; index++)
 800355e:	3401      	adds	r4, #1
 8003560:	3702      	adds	r7, #2
 8003562:	e76f      	b.n	8003444 <BSP_TS_GetState+0x30>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003564:	2302      	movs	r3, #2
 8003566:	e7f9      	b.n	800355c <BSP_TS_GetState+0x148>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003568:	2303      	movs	r3, #3
 800356a:	e7f7      	b.n	800355c <BSP_TS_GetState+0x148>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800356c:	2300      	movs	r3, #0
 800356e:	e7f5      	b.n	800355c <BSP_TS_GetState+0x148>
 8003570:	20001958 	.word	0x20001958

08003574 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8003574:	4770      	bx	lr

08003576 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8003576:	2000      	movs	r0, #0
 8003578:	4770      	bx	lr
	...

0800357c <ft5336_ReadID>:
{
 800357c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 800357e:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8003580:	4c0f      	ldr	r4, [pc, #60]	; (80035c0 <ft5336_ReadID+0x44>)
{
 8003582:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8003584:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003588:	7823      	ldrb	r3, [r4, #0]
 800358a:	b91b      	cbnz	r3, 8003594 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800358c:	f7fe fdc2 	bl	8002114 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003590:	2301      	movs	r3, #1
 8003592:	7023      	strb	r3, [r4, #0]
{
 8003594:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003596:	b2ed      	uxtb	r5, r5
 8003598:	3c01      	subs	r4, #1
 800359a:	21a8      	movs	r1, #168	; 0xa8
 800359c:	4628      	mov	r0, r5
 800359e:	f7fe fdcb 	bl	8002138 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80035a2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80035a6:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80035aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035ae:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80035b0:	d103      	bne.n	80035ba <ft5336_ReadID+0x3e>
  return (ucReadId);
 80035b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80035b6:	b003      	add	sp, #12
 80035b8:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80035ba:	2b51      	cmp	r3, #81	; 0x51
 80035bc:	d1ec      	bne.n	8003598 <ft5336_ReadID+0x1c>
 80035be:	e7f8      	b.n	80035b2 <ft5336_ReadID+0x36>
 80035c0:	2000198c 	.word	0x2000198c

080035c4 <ft5336_TS_DetectTouch>:
{
 80035c4:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80035c6:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035c8:	2102      	movs	r1, #2
 80035ca:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80035cc:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80035d0:	f7fe fdb2 	bl	8002138 <TS_IO_Read>
 80035d4:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80035d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80035e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d901      	bls.n	80035f0 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80035ec:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80035f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80035fa:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80035fc:	2200      	movs	r2, #0
 80035fe:	709a      	strb	r2, [r3, #2]
}
 8003600:	b002      	add	sp, #8
 8003602:	bd10      	pop	{r4, pc}
 8003604:	2000198c 	.word	0x2000198c

08003608 <ft5336_TS_GetXY>:
{
 8003608:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800360c:	4c27      	ldr	r4, [pc, #156]	; (80036ac <ft5336_TS_GetXY+0xa4>)
{
 800360e:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8003610:	2500      	movs	r5, #0
{
 8003612:	4688      	mov	r8, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8003614:	78a2      	ldrb	r2, [r4, #2]
 8003616:	7863      	ldrb	r3, [r4, #1]
  volatile uint8_t ucReadData = 0;
 8003618:	f88d 5007 	strb.w	r5, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800361c:	4293      	cmp	r3, r2
 800361e:	d93d      	bls.n	800369c <ft5336_TS_GetXY+0x94>
 8003620:	2a09      	cmp	r2, #9
 8003622:	d83e      	bhi.n	80036a2 <ft5336_TS_GetXY+0x9a>
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <ft5336_TS_GetXY+0xa8>)
 8003626:	5c99      	ldrb	r1, [r3, r2]
 8003628:	4413      	add	r3, r2
 800362a:	f893 a00a 	ldrb.w	sl, [r3, #10]
 800362e:	f893 9014 	ldrb.w	r9, [r3, #20]
 8003632:	7f9d      	ldrb	r5, [r3, #30]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003634:	b2c7      	uxtb	r7, r0
 8003636:	4638      	mov	r0, r7
 8003638:	f7fe fd7e 	bl	8002138 <TS_IO_Read>
 800363c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003640:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003644:	4651      	mov	r1, sl
 8003646:	4638      	mov	r0, r7
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003648:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800364a:	f7fe fd75 	bl	8002138 <TS_IO_Read>
 800364e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003652:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003654:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003658:	4638      	mov	r0, r7
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800365a:	88a2      	ldrh	r2, [r4, #4]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003662:	4313      	orrs	r3, r2
    *X = coord;
 8003664:	f8a8 3000 	strh.w	r3, [r8]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003668:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800366a:	f7fe fd65 	bl	8002138 <TS_IO_Read>
 800366e:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003672:	4629      	mov	r1, r5
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003674:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003678:	4638      	mov	r0, r7
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800367a:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800367c:	f7fe fd5c 	bl	8002138 <TS_IO_Read>
 8003680:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003684:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003688:	88a2      	ldrh	r2, [r4, #4]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003690:	4313      	orrs	r3, r2
 8003692:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 8003694:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003696:	78a3      	ldrb	r3, [r4, #2]
 8003698:	3301      	adds	r3, #1
 800369a:	70a3      	strb	r3, [r4, #2]
}
 800369c:	b002      	add	sp, #8
 800369e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80036a2:	46a9      	mov	r9, r5
 80036a4:	46aa      	mov	sl, r5
 80036a6:	4629      	mov	r1, r5
 80036a8:	e7c4      	b.n	8003634 <ft5336_TS_GetXY+0x2c>
 80036aa:	bf00      	nop
 80036ac:	2000198c 	.word	0x2000198c
 80036b0:	08050ac4 	.word	0x08050ac4

080036b4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80036b4:	2201      	movs	r2, #1
 80036b6:	21a4      	movs	r1, #164	; 0xa4
 80036b8:	b2c0      	uxtb	r0, r0
 80036ba:	f7fe bd2d 	b.w	8002118 <TS_IO_Write>

080036be <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80036be:	2200      	movs	r2, #0
 80036c0:	21a4      	movs	r1, #164	; 0xa4
 80036c2:	b2c0      	uxtb	r0, r0
 80036c4:	f7fe bd28 	b.w	8002118 <TS_IO_Write>

080036c8 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80036c8:	f7ff bff9 	b.w	80036be <ft5336_TS_DisableIT>

080036cc <ft5336_TS_ClearIT>:
 80036cc:	4770      	bx	lr
	...

080036d0 <ft5336_Init>:
{
 80036d0:	b510      	push	{r4, lr}
  return(ft5336_handle.i2cInitialized);
 80036d2:	4c05      	ldr	r4, [pc, #20]	; (80036e8 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 80036d4:	20c8      	movs	r0, #200	; 0xc8
 80036d6:	f7fe fd43 	bl	8002160 <TS_IO_Delay>
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80036da:	7823      	ldrb	r3, [r4, #0]
 80036dc:	b91b      	cbnz	r3, 80036e6 <ft5336_Init+0x16>
    TS_IO_Init();
 80036de:	f7fe fd19 	bl	8002114 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80036e2:	2301      	movs	r3, #1
 80036e4:	7023      	strb	r3, [r4, #0]
}
 80036e6:	bd10      	pop	{r4, pc}
 80036e8:	2000198c 	.word	0x2000198c

080036ec <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 80036ec:	2300      	movs	r3, #0
{
 80036ee:	b513      	push	{r0, r1, r4, lr}
 80036f0:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80036f2:	b2c0      	uxtb	r0, r0
 80036f4:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 80036f6:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80036fa:	f7fe fd1d 	bl	8002138 <TS_IO_Read>
 80036fe:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 8003702:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003706:	6023      	str	r3, [r4, #0]
}
 8003708:	b002      	add	sp, #8
 800370a:	bd10      	pop	{r4, pc}

0800370c <ft5336_TS_GetTouchInfo>:
{
 800370c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003710:	461e      	mov	r6, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <ft5336_TS_GetTouchInfo+0x78>)
  volatile uint8_t ucReadData = 0;
 8003714:	2400      	movs	r4, #0
{
 8003716:	4617      	mov	r7, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003718:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 800371a:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800371e:	428b      	cmp	r3, r1
 8003720:	d92d      	bls.n	800377e <ft5336_TS_GetTouchInfo+0x72>
 8003722:	2909      	cmp	r1, #9
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003724:	b2c5      	uxtb	r5, r0
 8003726:	bf94      	ite	ls
 8003728:	4c17      	ldrls	r4, [pc, #92]	; (8003788 <ft5336_TS_GetTouchInfo+0x7c>)
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800372a:	4621      	movhi	r1, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800372c:	4628      	mov	r0, r5
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800372e:	bf8f      	iteee	hi
 8003730:	46a0      	movhi	r8, r4
 8003732:	1864      	addls	r4, r4, r1
 8003734:	f894 1028 	ldrbls.w	r1, [r4, #40]	; 0x28
 8003738:	f894 8032 	ldrbls.w	r8, [r4, #50]	; 0x32
 800373c:	bf98      	it	ls
 800373e:	f894 403c 	ldrbls.w	r4, [r4, #60]	; 0x3c
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003742:	f7fe fcf9 	bl	8002138 <TS_IO_Read>
 8003746:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800374a:	4628      	mov	r0, r5
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800374c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003750:	9b08      	ldr	r3, [sp, #32]
 8003752:	0989      	lsrs	r1, r1, #6
 8003754:	6019      	str	r1, [r3, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003756:	4641      	mov	r1, r8
 8003758:	f7fe fcee 	bl	8002138 <TS_IO_Read>
 800375c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8003760:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8003764:	4621      	mov	r1, r4
 8003766:	4628      	mov	r0, r5
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8003768:	603b      	str	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800376a:	f7fe fce5 	bl	8002138 <TS_IO_Read>
 800376e:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8003772:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003776:	0912      	lsrs	r2, r2, #4
 8003778:	f002 0204 	and.w	r2, r2, #4
 800377c:	6032      	str	r2, [r6, #0]
}
 800377e:	b002      	add	sp, #8
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	2000198c 	.word	0x2000198c
 8003788:	08050ac4 	.word	0x08050ac4

0800378c <wm8994_SetVolume>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
	return 0;
}
 800378c:	2000      	movs	r0, #0
 800378e:	4770      	bx	lr

08003790 <wm8994_Init>:
{
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	4604      	mov	r4, r0
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003794:	b2cf      	uxtb	r7, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8003796:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
  AUDIO_IO_Init();
 800379a:	f7fe fc89 	bl	80020b0 <AUDIO_IO_Init>
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800379e:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80037a0:	2203      	movs	r2, #3
 80037a2:	f44f 7181 	mov.w	r1, #258	; 0x102
    outputEnabled = 1;
 80037a6:	2501      	movs	r5, #1
 AUDIO_IO_Write(Addr, Reg, Value);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f7fe fc89 	bl	80020c0 <AUDIO_IO_Write>
 80037ae:	2200      	movs	r2, #0
 80037b0:	f640 0117 	movw	r1, #2071	; 0x817
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7fe fc83 	bl	80020c0 <AUDIO_IO_Write>
 80037ba:	2200      	movs	r2, #0
 80037bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7fe fc7d 	bl	80020c0 <AUDIO_IO_Write>
 80037c6:	226c      	movs	r2, #108	; 0x6c
 80037c8:	2139      	movs	r1, #57	; 0x39
 80037ca:	4620      	mov	r0, r4
 80037cc:	f7fe fc78 	bl	80020c0 <AUDIO_IO_Write>
 80037d0:	2203      	movs	r2, #3
 80037d2:	2101      	movs	r1, #1
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fe fc73 	bl	80020c0 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 80037da:	2032      	movs	r0, #50	; 0x32
 80037dc:	f7fe fc98 	bl	8002110 <AUDIO_IO_Delay>
    outputEnabled = 1;
 80037e0:	4bac      	ldr	r3, [pc, #688]	; (8003a94 <wm8994_Init+0x304>)
 AUDIO_IO_Write(Addr, Reg, Value);
 80037e2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80037e6:	2105      	movs	r1, #5
 80037e8:	4620      	mov	r0, r4
    outputEnabled = 1;
 80037ea:	601d      	str	r5, [r3, #0]
 AUDIO_IO_Write(Addr, Reg, Value);
 80037ec:	f7fe fc68 	bl	80020c0 <AUDIO_IO_Write>
 80037f0:	462a      	mov	r2, r5
 80037f2:	f240 6101 	movw	r1, #1537	; 0x601
 80037f6:	4620      	mov	r0, r4
 80037f8:	f7fe fc62 	bl	80020c0 <AUDIO_IO_Write>
 80037fc:	462a      	mov	r2, r5
 80037fe:	f240 6102 	movw	r1, #1538	; 0x602
 8003802:	4620      	mov	r0, r4
 8003804:	f7fe fc5c 	bl	80020c0 <AUDIO_IO_Write>
 8003808:	2202      	movs	r2, #2
 800380a:	f240 6104 	movw	r1, #1540	; 0x604
 800380e:	4620      	mov	r0, r4
 8003810:	f7fe fc56 	bl	80020c0 <AUDIO_IO_Write>
 8003814:	2202      	movs	r2, #2
 8003816:	f240 6105 	movw	r1, #1541	; 0x605
 800381a:	4620      	mov	r0, r4
 800381c:	f7fe fc50 	bl	80020c0 <AUDIO_IO_Write>
 8003820:	f640 7233 	movw	r2, #3891	; 0xf33
 8003824:	2104      	movs	r1, #4
 8003826:	4620      	mov	r0, r4
 8003828:	f7fe fc4a 	bl	80020c0 <AUDIO_IO_Write>
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003832:	4620      	mov	r0, r4
 8003834:	f7fe fc44 	bl	80020c0 <AUDIO_IO_Write>
 8003838:	2200      	movs	r2, #0
 800383a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800383e:	4620      	mov	r0, r4
 8003840:	f7fe fc3e 	bl	80020c0 <AUDIO_IO_Write>
 8003844:	f246 3250 	movw	r2, #25424	; 0x6350
 8003848:	2102      	movs	r1, #2
 800384a:	4620      	mov	r0, r4
 800384c:	f7fe fc38 	bl	80020c0 <AUDIO_IO_Write>
 8003850:	2202      	movs	r2, #2
 8003852:	f240 6106 	movw	r1, #1542	; 0x606
 8003856:	4620      	mov	r0, r4
 8003858:	f7fe fc32 	bl	80020c0 <AUDIO_IO_Write>
 800385c:	2202      	movs	r2, #2
 800385e:	f240 6107 	movw	r1, #1543	; 0x607
 8003862:	4620      	mov	r0, r4
 8003864:	f7fe fc2c 	bl	80020c0 <AUDIO_IO_Write>
 8003868:	2202      	movs	r2, #2
 800386a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800386e:	4620      	mov	r0, r4
 8003870:	f7fe fc26 	bl	80020c0 <AUDIO_IO_Write>
 8003874:	2202      	movs	r2, #2
 8003876:	f240 6109 	movw	r1, #1545	; 0x609
 800387a:	4620      	mov	r0, r4
 800387c:	f7fe fc20 	bl	80020c0 <AUDIO_IO_Write>
 8003880:	220d      	movs	r2, #13
 8003882:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003886:	4620      	mov	r0, r4
 8003888:	f7fe fc1a 	bl	80020c0 <AUDIO_IO_Write>
 800388c:	f244 0210 	movw	r2, #16400	; 0x4010
 8003890:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003894:	4620      	mov	r0, r4
 8003896:	f7fe fc13 	bl	80020c0 <AUDIO_IO_Write>
 800389a:	2200      	movs	r2, #0
 800389c:	f240 3102 	movw	r1, #770	; 0x302
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7fe fc0d 	bl	80020c0 <AUDIO_IO_Write>
 80038a6:	220a      	movs	r2, #10
 80038a8:	f44f 7102 	mov.w	r1, #520	; 0x208
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7fe fc07 	bl	80020c0 <AUDIO_IO_Write>
 80038b2:	462a      	mov	r2, r5
 80038b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7fe fc01 	bl	80020c0 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 80038be:	2f00      	cmp	r7, #0
 80038c0:	f000 8083 	beq.w	80039ca <wm8994_Init+0x23a>
 AUDIO_IO_Write(Addr, Reg, Value);
 80038c4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80038c8:	2103      	movs	r1, #3
 80038ca:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80038cc:	f243 3703 	movw	r7, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 80038d0:	f7fe fbf6 	bl	80020c0 <AUDIO_IO_Write>
 80038d4:	2200      	movs	r2, #0
 80038d6:	2122      	movs	r1, #34	; 0x22
 80038d8:	4620      	mov	r0, r4
 80038da:	f7fe fbf1 	bl	80020c0 <AUDIO_IO_Write>
 80038de:	2200      	movs	r2, #0
 80038e0:	2123      	movs	r1, #35	; 0x23
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7fe fbec 	bl	80020c0 <AUDIO_IO_Write>
 80038e8:	2203      	movs	r2, #3
 80038ea:	2136      	movs	r1, #54	; 0x36
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7fe fbe7 	bl	80020c0 <AUDIO_IO_Write>
 80038f2:	f240 127f 	movw	r2, #383	; 0x17f
 80038f6:	2125      	movs	r1, #37	; 0x25
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7fe fbe1 	bl	80020c0 <AUDIO_IO_Write>
 80038fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003902:	2123      	movs	r1, #35	; 0x23
 8003904:	4620      	mov	r0, r4
 8003906:	f7fe fbdb 	bl	80020c0 <AUDIO_IO_Write>
 800390a:	f243 0203 	movw	r2, #12291	; 0x3003
 800390e:	4629      	mov	r1, r5
 8003910:	4620      	mov	r0, r4
 8003912:	f7fe fbd5 	bl	80020c0 <AUDIO_IO_Write>
 8003916:	2205      	movs	r2, #5
 8003918:	2151      	movs	r1, #81	; 0x51
 800391a:	4620      	mov	r0, r4
 800391c:	f7fe fbd0 	bl	80020c0 <AUDIO_IO_Write>
 8003920:	f243 3203 	movw	r2, #13059	; 0x3303
 8003924:	4629      	mov	r1, r5
 8003926:	4620      	mov	r0, r4
 8003928:	f7fe fbca 	bl	80020c0 <AUDIO_IO_Write>
 800392c:	2222      	movs	r2, #34	; 0x22
 800392e:	2160      	movs	r1, #96	; 0x60
 8003930:	4620      	mov	r0, r4
 8003932:	f7fe fbc5 	bl	80020c0 <AUDIO_IO_Write>
 8003936:	f649 7225 	movw	r2, #40741	; 0x9f25
 800393a:	214c      	movs	r1, #76	; 0x4c
 800393c:	4620      	mov	r0, r4
 800393e:	f7fe fbbf 	bl	80020c0 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8003942:	200f      	movs	r0, #15
 8003944:	f7fe fbe4 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003948:	462a      	mov	r2, r5
 800394a:	212d      	movs	r1, #45	; 0x2d
 800394c:	4620      	mov	r0, r4
 800394e:	f7fe fbb7 	bl	80020c0 <AUDIO_IO_Write>
 8003952:	462a      	mov	r2, r5
 8003954:	212e      	movs	r1, #46	; 0x2e
 8003956:	4620      	mov	r0, r4
 8003958:	f7fe fbb2 	bl	80020c0 <AUDIO_IO_Write>
 800395c:	f44f 724c 	mov.w	r2, #816	; 0x330
 8003960:	2103      	movs	r1, #3
 8003962:	4620      	mov	r0, r4
 8003964:	f7fe fbac 	bl	80020c0 <AUDIO_IO_Write>
 8003968:	2233      	movs	r2, #51	; 0x33
 800396a:	2154      	movs	r1, #84	; 0x54
 800396c:	4620      	mov	r0, r4
 800396e:	f7fe fba7 	bl	80020c0 <AUDIO_IO_Write>
    AUDIO_IO_Delay(250);
 8003972:	20fa      	movs	r0, #250	; 0xfa
 8003974:	f7fe fbcc 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003978:	22ee      	movs	r2, #238	; 0xee
 800397a:	2160      	movs	r1, #96	; 0x60
 800397c:	4620      	mov	r0, r4
 800397e:	f7fe fb9f 	bl	80020c0 <AUDIO_IO_Write>
 8003982:	22c0      	movs	r2, #192	; 0xc0
 8003984:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8003988:	4620      	mov	r0, r4
 800398a:	f7fe fb99 	bl	80020c0 <AUDIO_IO_Write>
 800398e:	22c0      	movs	r2, #192	; 0xc0
 8003990:	f240 6111 	movw	r1, #1553	; 0x611
 8003994:	4620      	mov	r0, r4
 8003996:	f7fe fb93 	bl	80020c0 <AUDIO_IO_Write>
 800399a:	2200      	movs	r2, #0
 800399c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7fe fb8d 	bl	80020c0 <AUDIO_IO_Write>
 80039a6:	22c0      	movs	r2, #192	; 0xc0
 80039a8:	f240 6112 	movw	r1, #1554	; 0x612
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7fe fb87 	bl	80020c0 <AUDIO_IO_Write>
 80039b2:	22c0      	movs	r2, #192	; 0xc0
 80039b4:	f240 6113 	movw	r1, #1555	; 0x613
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fe fb81 	bl	80020c0 <AUDIO_IO_Write>
 80039be:	2200      	movs	r2, #0
 80039c0:	f240 4122 	movw	r1, #1058	; 0x422
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7fe fb7b 	bl	80020c0 <AUDIO_IO_Write>
  if (input_device > 0) /* Audio input selected */
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d060      	beq.n	8003a90 <wm8994_Init+0x300>
 AUDIO_IO_Write(Addr, Reg, Value);
 80039ce:	f047 0213 	orr.w	r2, r7, #19
 80039d2:	2101      	movs	r1, #1
 80039d4:	4620      	mov	r0, r4
 80039d6:	f7fe fb73 	bl	80020c0 <AUDIO_IO_Write>
 80039da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039de:	f240 4111 	movw	r1, #1041	; 0x411
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7fe fb6c 	bl	80020c0 <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 80039e8:	2002      	movs	r0, #2
 80039ea:	f7fe fb91 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80039ee:	228b      	movs	r2, #139	; 0x8b
 80039f0:	2118      	movs	r1, #24
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7fe fb64 	bl	80020c0 <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 80039f8:	2002      	movs	r0, #2
 80039fa:	f7fe fb89 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80039fe:	f240 128b 	movw	r2, #395	; 0x18b
 8003a02:	211a      	movs	r1, #26
 8003a04:	4620      	mov	r0, r4
 8003a06:	f7fe fb5b 	bl	80020c0 <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	f7fe fb80 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a10:	2220      	movs	r2, #32
 8003a12:	2129      	movs	r1, #41	; 0x29
 8003a14:	4620      	mov	r0, r4
 8003a16:	f7fe fb53 	bl	80020c0 <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a1a:	2002      	movs	r0, #2
 8003a1c:	f7fe fb78 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a20:	2220      	movs	r2, #32
 8003a22:	212a      	movs	r1, #42	; 0x2a
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7fe fb4b 	bl	80020c0 <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a2a:	2002      	movs	r0, #2
 8003a2c:	f7fe fb70 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a30:	2211      	movs	r2, #17
 8003a32:	2128      	movs	r1, #40	; 0x28
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7fe fb43 	bl	80020c0 <AUDIO_IO_Write>
      AUDIO_IO_Delay(2);
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f7fe fb68 	bl	8002110 <AUDIO_IO_Delay>
      AUDIO_IO_Delay(2);
 8003a40:	2002      	movs	r0, #2
 8003a42:	f7fe fb65 	bl	8002110 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003a46:	227f      	movs	r2, #127	; 0x7f
 8003a48:	211c      	movs	r1, #28
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	f7fe fb38 	bl	80020c0 <AUDIO_IO_Write>
 8003a50:	f240 127f 	movw	r2, #383	; 0x17f
 8003a54:	211d      	movs	r1, #29
 8003a56:	4620      	mov	r0, r4
 8003a58:	f7fe fb32 	bl	80020c0 <AUDIO_IO_Write>
 8003a5c:	22c0      	movs	r2, #192	; 0xc0
 8003a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7fe fb2c 	bl	80020c0 <AUDIO_IO_Write>
 8003a68:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003a6c:	f240 4101 	movw	r1, #1025	; 0x401
 8003a70:	4620      	mov	r0, r4
 8003a72:	f7fe fb25 	bl	80020c0 <AUDIO_IO_Write>
 8003a76:	22c0      	movs	r2, #192	; 0xc0
 8003a78:	f240 4104 	movw	r1, #1028	; 0x404
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7fe fb1f 	bl	80020c0 <AUDIO_IO_Write>
 8003a82:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003a86:	f240 4105 	movw	r1, #1029	; 0x405
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7fe fb18 	bl	80020c0 <AUDIO_IO_Write>
}
 8003a90:	2000      	movs	r0, #0
 8003a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a94:	20001994 	.word	0x20001994

08003a98 <wm8994_SetOutputMode>:
  switch (Output) 
 8003a98:	2901      	cmp	r1, #1
{
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	b2c4      	uxtb	r4, r0
  switch (Output) 
 8003a9e:	d00f      	beq.n	8003ac0 <wm8994_SetOutputMode+0x28>
 8003aa0:	2903      	cmp	r1, #3
 8003aa2:	d12d      	bne.n	8003b00 <wm8994_SetOutputMode+0x68>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003aa4:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003aa8:	2105      	movs	r1, #5
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f7fe fb08 	bl	80020c0 <AUDIO_IO_Write>
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f240 6101 	movw	r1, #1537	; 0x601
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f7fe fb02 	bl	80020c0 <AUDIO_IO_Write>
 8003abc:	2201      	movs	r2, #1
 8003abe:	e00c      	b.n	8003ada <wm8994_SetOutputMode+0x42>
 8003ac0:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003ac4:	2105      	movs	r1, #5
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7fe fafa 	bl	80020c0 <AUDIO_IO_Write>
 8003acc:	2200      	movs	r2, #0
 8003ace:	f240 6101 	movw	r1, #1537	; 0x601
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7fe faf4 	bl	80020c0 <AUDIO_IO_Write>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f240 6102 	movw	r1, #1538	; 0x602
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7fe faee 	bl	80020c0 <AUDIO_IO_Write>
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f240 6104 	movw	r1, #1540	; 0x604
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7fe fae8 	bl	80020c0 <AUDIO_IO_Write>
 8003af0:	2202      	movs	r2, #2
 8003af2:	4620      	mov	r0, r4
 8003af4:	f240 6105 	movw	r1, #1541	; 0x605
 8003af8:	f7fe fae2 	bl	80020c0 <AUDIO_IO_Write>
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003b00:	f240 3203 	movw	r2, #771	; 0x303
 8003b04:	2105      	movs	r1, #5
 8003b06:	4620      	mov	r0, r4
 8003b08:	f7fe fada 	bl	80020c0 <AUDIO_IO_Write>
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f240 6101 	movw	r1, #1537	; 0x601
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7fe fad4 	bl	80020c0 <AUDIO_IO_Write>
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f240 6102 	movw	r1, #1538	; 0x602
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7fe face 	bl	80020c0 <AUDIO_IO_Write>
 8003b24:	2200      	movs	r2, #0
 8003b26:	f240 6104 	movw	r1, #1540	; 0x604
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7fe fac8 	bl	80020c0 <AUDIO_IO_Write>
 8003b30:	2200      	movs	r2, #0
 8003b32:	e7de      	b.n	8003af2 <wm8994_SetOutputMode+0x5a>

08003b34 <wm8994_SetFrequency>:
  switch (AudioFreq)
 8003b34:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8003b38:	b2c0      	uxtb	r0, r0
{
 8003b3a:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8003b3c:	d01d      	beq.n	8003b7a <wm8994_SetFrequency+0x46>
 8003b3e:	d808      	bhi.n	8003b52 <wm8994_SetFrequency+0x1e>
 8003b40:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8003b44:	d012      	beq.n	8003b6c <wm8994_SetFrequency+0x38>
 8003b46:	f642 3311 	movw	r3, #11025	; 0x2b11
 8003b4a:	4299      	cmp	r1, r3
 8003b4c:	d019      	beq.n	8003b82 <wm8994_SetFrequency+0x4e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003b4e:	2283      	movs	r2, #131	; 0x83
 8003b50:	e00d      	b.n	8003b6e <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 8003b52:	f64a 4344 	movw	r3, #44100	; 0xac44
 8003b56:	4299      	cmp	r1, r3
 8003b58:	d015      	beq.n	8003b86 <wm8994_SetFrequency+0x52>
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <wm8994_SetFrequency+0x58>)
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d00e      	beq.n	8003b7e <wm8994_SetFrequency+0x4a>
 8003b60:	f245 6322 	movw	r3, #22050	; 0x5622
 8003b64:	4299      	cmp	r1, r3
 8003b66:	d1f2      	bne.n	8003b4e <wm8994_SetFrequency+0x1a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003b68:	2243      	movs	r2, #67	; 0x43
 8003b6a:	e000      	b.n	8003b6e <wm8994_SetFrequency+0x3a>
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b72:	f7fe faa5 	bl	80020c0 <AUDIO_IO_Write>
}
 8003b76:	2000      	movs	r0, #0
 8003b78:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003b7a:	2233      	movs	r2, #51	; 0x33
 8003b7c:	e7f7      	b.n	8003b6e <wm8994_SetFrequency+0x3a>
 8003b7e:	22a3      	movs	r2, #163	; 0xa3
 8003b80:	e7f5      	b.n	8003b6e <wm8994_SetFrequency+0x3a>
 8003b82:	2213      	movs	r2, #19
 8003b84:	e7f3      	b.n	8003b6e <wm8994_SetFrequency+0x3a>
 8003b86:	2273      	movs	r2, #115	; 0x73
 8003b88:	e7f1      	b.n	8003b6e <wm8994_SetFrequency+0x3a>
 8003b8a:	bf00      	nop
 8003b8c:	00017700 	.word	0x00017700

08003b90 <wm8994_Reset>:
 8003b90:	2200      	movs	r2, #0
 8003b92:	b2c0      	uxtb	r0, r0
{
 8003b94:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003b96:	4611      	mov	r1, r2
 8003b98:	f7fe fa92 	bl	80020c0 <AUDIO_IO_Write>
  outputEnabled = 0;
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <wm8994_Reset+0x14>)
 8003ba0:	6018      	str	r0, [r3, #0]
}
 8003ba2:	bd08      	pop	{r3, pc}
 8003ba4:	20001994 	.word	0x20001994

08003ba8 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8003ba8:	f7fe ba88 	b.w	80020bc <AUDIO_IO_DeInit>

08003bac <wm8994_ReadID>:
{
 8003bac:	b510      	push	{r4, lr}
 8003bae:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8003bb0:	f7fe fa7e 	bl	80020b0 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	b2e0      	uxtb	r0, r4
 8003bb8:	f7fe fa94 	bl	80020e4 <AUDIO_IO_Read>
}
 8003bbc:	bd10      	pop	{r4, pc}
	...

08003bc0 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <wm8994_SetMute+0x40>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
{
 8003bc4:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 8003bc6:	b183      	cbz	r3, 8003bea <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8003bc8:	2901      	cmp	r1, #1
 8003bca:	b2c4      	uxtb	r4, r0
 8003bcc:	d10f      	bne.n	8003bee <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7fe fa72 	bl	80020c0 <AUDIO_IO_Write>
 8003bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be0:	f240 4122 	movw	r1, #1058	; 0x422
 8003be4:	4620      	mov	r0, r4
 8003be6:	f7fe fa6b 	bl	80020c0 <AUDIO_IO_Write>
}
 8003bea:	2000      	movs	r0, #0
 8003bec:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7fe fa63 	bl	80020c0 <AUDIO_IO_Write>
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	e7f0      	b.n	8003be0 <wm8994_SetMute+0x20>
 8003bfe:	bf00      	nop
 8003c00:	20001994 	.word	0x20001994

08003c04 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003c04:	2100      	movs	r1, #0
 8003c06:	f7ff bfdb 	b.w	8003bc0 <wm8994_SetMute>

08003c0a <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	f7ff bfd8 	b.w	8003bc0 <wm8994_SetMute>

08003c10 <wm8994_Pause>:
{  
 8003c10:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c12:	2101      	movs	r1, #1
{  
 8003c14:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c16:	f7ff ffd3 	bl	8003bc0 <wm8994_SetMute>
 8003c1a:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	b2e8      	uxtb	r0, r5
 8003c20:	2102      	movs	r1, #2
 8003c22:	f7fe fa4d 	bl	80020c0 <AUDIO_IO_Write>
}
 8003c26:	4620      	mov	r0, r4
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
	...

08003c2c <wm8994_Stop>:
{
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8003c2e:	4e19      	ldr	r6, [pc, #100]	; (8003c94 <wm8994_Stop+0x68>)
{
 8003c30:	4604      	mov	r4, r0
 8003c32:	460f      	mov	r7, r1
  if (outputEnabled != 0)
 8003c34:	6835      	ldr	r5, [r6, #0]
 8003c36:	b355      	cbz	r5, 8003c8e <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c38:	2101      	movs	r1, #1
 8003c3a:	f7ff ffc1 	bl	8003bc0 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003c3e:	2f02      	cmp	r7, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003c40:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003c42:	d024      	beq.n	8003c8e <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003c44:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f7fe fa36 	bl	80020c0 <AUDIO_IO_Write>
 8003c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c58:	f240 4122 	movw	r1, #1058	; 0x422
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7fe fa2f 	bl	80020c0 <AUDIO_IO_Write>
 8003c62:	2200      	movs	r2, #0
 8003c64:	212d      	movs	r1, #45	; 0x2d
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7fe fa2a 	bl	80020c0 <AUDIO_IO_Write>
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	212e      	movs	r1, #46	; 0x2e
 8003c70:	4620      	mov	r0, r4
 8003c72:	f7fe fa25 	bl	80020c0 <AUDIO_IO_Write>
 8003c76:	2200      	movs	r2, #0
 8003c78:	2105      	movs	r1, #5
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f7fe fa20 	bl	80020c0 <AUDIO_IO_Write>
 8003c80:	2200      	movs	r2, #0
 8003c82:	4620      	mov	r0, r4
 8003c84:	4611      	mov	r1, r2
 8003c86:	f7fe fa1b 	bl	80020c0 <AUDIO_IO_Write>
      outputEnabled = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	6033      	str	r3, [r6, #0]
}
 8003c8e:	4628      	mov	r0, r5
 8003c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20001994 	.word	0x20001994

08003c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c9e:	e003      	b.n	8003ca8 <LoopCopyDataInit>

08003ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ca6:	3104      	adds	r1, #4

08003ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cb0:	d3f6      	bcc.n	8003ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cb4:	e002      	b.n	8003cbc <LoopFillZerobss>

08003cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cb8:	f842 3b04 	str.w	r3, [r2], #4

08003cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cc0:	d3f9      	bcc.n	8003cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cc2:	f000 f813 	bl	8003cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc6:	f00a fa71 	bl	800e1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cca:	f009 fed1 	bl	800da70 <main>
  bx  lr    
 8003cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cd0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003cd4:	08055a5c 	.word	0x08055a5c
  ldr  r0, =_sdata
 8003cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cdc:	200011fc 	.word	0x200011fc
  ldr  r2, =_sbss
 8003ce0:	20001200 	.word	0x20001200
  ldr  r3, = _ebss
 8003ce4:	20045264 	.word	0x20045264

08003ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce8:	e7fe      	b.n	8003ce8 <ADC_IRQHandler>
	...

08003cec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cec:	490f      	ldr	r1, [pc, #60]	; (8003d2c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cee:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <SystemInit+0x44>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003d06:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003d0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d12:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d14:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <SystemInit+0x48>)
 8003d16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d20:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d26:	608b      	str	r3, [r1, #8]
#endif
}
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	24003010 	.word	0x24003010

08003d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003d3c:	f001 fb7c 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8003d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d44:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d48:	f000 f878 	bl	8003e3c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4621      	mov	r1, r4
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	f000 f834 	bl	8003dc0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003d58:	2000      	movs	r0, #0
 8003d5a:	bd10      	pop	{r4, pc}

08003d5c <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d5e:	2003      	movs	r0, #3
{
 8003d60:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d68:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d6a:	f000 f817 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d6e:	200f      	movs	r0, #15
 8003d70:	f7ff ffe2 	bl	8003d38 <HAL_InitTick>
  HAL_MspInit();
 8003d74:	f001 f82c 	bl	8004dd0 <HAL_MspInit>
}
 8003d78:	2000      	movs	r0, #0
 8003d7a:	bd08      	pop	{r3, pc}
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003d80:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <HAL_IncTick+0xc>)
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	6013      	str	r3, [r2, #0]
}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20001998 	.word	0x20001998

08003d90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d90:	4b01      	ldr	r3, [pc, #4]	; (8003d98 <HAL_GetTick+0x8>)
 8003d92:	6818      	ldr	r0, [r3, #0]
}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20001998 	.word	0x20001998

08003d9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003d9e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003da2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003db6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003db8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003dba:	4770      	bx	lr
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc6:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dca:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dce:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd4:	2d04      	cmp	r5, #4
 8003dd6:	bf28      	it	cs
 8003dd8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dda:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de0:	bf8c      	ite	hi
 8003de2:	3c03      	subhi	r4, #3
 8003de4:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) < 0)
 8003de6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	ea21 0303 	bic.w	r3, r1, r3
 8003dec:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	fa06 f404 	lsl.w	r4, r6, r4
 8003df4:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	ea43 0304 	orr.w	r3, r3, r4
 8003dfc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003e00:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) < 0)
 8003e02:	da04      	bge.n	8003e0e <HAL_NVIC_SetPriority+0x4e>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e04:	f000 000f 	and.w	r0, r0, #15
 8003e08:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <HAL_NVIC_SetPriority+0x60>)
 8003e0a:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e0c:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e12:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e16:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8003e1a:	e7f7      	b.n	8003e0c <HAL_NVIC_SetPriority+0x4c>
 8003e1c:	e000ed00 	.word	0xe000ed00
 8003e20:	e000ed14 	.word	0xe000ed14

08003e24 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003e24:	0942      	lsrs	r2, r0, #5
 8003e26:	2301      	movs	r3, #1
 8003e28:	f000 001f 	and.w	r0, r0, #31
 8003e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <HAL_NVIC_EnableIRQ+0x14>)
 8003e32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e36:	4770      	bx	lr
 8003e38:	e000e100 	.word	0xe000e100

08003e3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e3c:	3801      	subs	r0, #1
 8003e3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e42:	d20a      	bcs.n	8003e5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	21f0      	movs	r1, #240	; 0xf0
 8003e48:	4a06      	ldr	r2, [pc, #24]	; (8003e64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4a:	6058      	str	r0, [r3, #4]
 // NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  NVIC_SetPriority (-1, (1UL << 4) - 1UL);
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e4c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e010 	.word	0xe000e010
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 8003e68:	6803      	ldr	r3, [r0, #0]
 8003e6a:	2118      	movs	r1, #24
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e72:	3a10      	subs	r2, #16
 8003e74:	f023 0303 	bic.w	r3, r3, #3
 8003e78:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e7c:	4904      	ldr	r1, [pc, #16]	; (8003e90 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3)
 8003e7e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e80:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 8003e82:	bf88      	it	hi
 8003e84:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e86:	6541      	str	r1, [r0, #84]	; 0x54
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
 8003e88:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
 8003e8a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	08050b0a 	.word	0x08050b0a

08003e94 <HAL_DMA_Init>:
{ 
 8003e94:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003e96:	4604      	mov	r4, r0
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d03b      	beq.n	8003f14 <HAL_DMA_Init+0x80>
  tmp = hdma->Instance->CR;
 8003e9c:	6821      	ldr	r1, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e9e:	2302      	movs	r3, #2
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003ea0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ea2:	4d1d      	ldr	r5, [pc, #116]	; (8003f18 <HAL_DMA_Init+0x84>)
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ea8:	2804      	cmp	r0, #4
  tmp = hdma->Instance->CR;
 8003eaa:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eac:	ea05 0503 	and.w	r5, r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003eb4:	ea43 0302 	orr.w	r3, r3, r2
 8003eb8:	68e2      	ldr	r2, [r4, #12]
 8003eba:	ea43 0302 	orr.w	r3, r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	6922      	ldr	r2, [r4, #16]
 8003ec0:	ea43 0302 	orr.w	r3, r3, r2
 8003ec4:	6962      	ldr	r2, [r4, #20]
 8003ec6:	ea43 0302 	orr.w	r3, r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	69a2      	ldr	r2, [r4, #24]
 8003ecc:	ea43 0302 	orr.w	r3, r3, r2
 8003ed0:	69e2      	ldr	r2, [r4, #28]
 8003ed2:	ea43 0302 	orr.w	r3, r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed6:	6a22      	ldr	r2, [r4, #32]
 8003ed8:	ea43 0302 	orr.w	r3, r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003edc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee0:	bf02      	ittt	eq
 8003ee2:	e9d4 250b 	ldrdeq	r2, r5, [r4, #44]	; 0x2c
 8003ee6:	432a      	orreq	r2, r5
 8003ee8:	4313      	orreq	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eea:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8003eec:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003eee:	694b      	ldr	r3, [r1, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8003ef0:	bf08      	it	eq
 8003ef2:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003ef8:	ea43 0300 	orr.w	r3, r3, r0
  DMA_CalcBaseAndBitshift(hdma);
 8003efc:	4620      	mov	r0, r4
    tmp |= hdma->Init.FIFOThreshold;
 8003efe:	bf08      	it	eq
 8003f00:	4313      	orreq	r3, r2
  hdma->Instance->FCR = tmp;
 8003f02:	614b      	str	r3, [r1, #20]
  DMA_CalcBaseAndBitshift(hdma);
 8003f04:	f7ff ffb0 	bl	8003e68 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
 8003f16:	e7fc      	b.n	8003f12 <HAL_DMA_Init+0x7e>
 8003f18:	f010803f 	.word	0xf010803f

08003f1c <HAL_DMA_DeInit>:
{
 8003f1c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003f1e:	4605      	mov	r5, r0
 8003f20:	b1e8      	cbz	r0, 8003f5e <HAL_DMA_DeInit+0x42>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f22:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d019      	beq.n	8003f5e <HAL_DMA_DeInit+0x42>
  __HAL_DMA_DISABLE(hdma);
 8003f2a:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0;
 8003f2c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8003f36:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0;
 8003f38:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0;
 8003f3a:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0;
 8003f3c:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0;
 8003f3e:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0;
 8003f40:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 8003f42:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f44:	f7ff ff90 	bl	8003e68 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3F << hdma->StreamIndex;
 8003f48:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8003f4a:	233f      	movs	r3, #63	; 0x3f
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
 8003f50:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f52:	64ec      	str	r4, [r5, #76]	; 0x4c
  __HAL_UNLOCK(hdma);
 8003f54:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003f58:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8003f5c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f5e:	2001      	movs	r0, #1
 8003f60:	e7fc      	b.n	8003f5c <HAL_DMA_DeInit+0x40>

08003f62 <HAL_DMA_Start_IT>:
{
 8003f62:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8003f64:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003f68:	2c01      	cmp	r4, #1
 8003f6a:	f04f 0402 	mov.w	r4, #2
 8003f6e:	d024      	beq.n	8003fba <HAL_DMA_Start_IT+0x58>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f70:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8003f74:	2501      	movs	r5, #1
  __HAL_DMA_DISABLE(hdma);
 8003f76:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdma);
 8003f78:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003f7c:	6825      	ldr	r5, [r4, #0]
 8003f7e:	f025 0501 	bic.w	r5, r5, #1
 8003f82:	6025      	str	r5, [r4, #0]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003f8a:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003f8c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f8e:	6883      	ldr	r3, [r0, #8]
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d10f      	bne.n	8003fb4 <HAL_DMA_Start_IT+0x52>
    hdma->Instance->PAR = DstAddress;
 8003f94:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003f96:	60e1      	str	r1, [r4, #12]
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 8003f98:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8003f9a:	2000      	movs	r0, #0
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
 8003f9c:	f043 031e 	orr.w	r3, r3, #30
 8003fa0:	6023      	str	r3, [r4, #0]
  hdma->Instance->FCR |= DMA_IT_FE;
 8003fa2:	6963      	ldr	r3, [r4, #20]
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	6163      	str	r3, [r4, #20]
  __HAL_DMA_ENABLE(hdma);
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6023      	str	r3, [r4, #0]
} 
 8003fb2:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->PAR = SrcAddress;
 8003fb4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fb6:	60e2      	str	r2, [r4, #12]
 8003fb8:	e7ee      	b.n	8003f98 <HAL_DMA_Start_IT+0x36>
  __HAL_LOCK(hdma);
 8003fba:	4620      	mov	r0, r4
 8003fbc:	e7f9      	b.n	8003fb2 <HAL_DMA_Start_IT+0x50>

08003fbe <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 8003fbe:	6802      	ldr	r2, [r0, #0]
{
 8003fc0:	b538      	push	{r3, r4, r5, lr}
  __HAL_DMA_DISABLE(hdma);
 8003fc2:	6813      	ldr	r3, [r2, #0]
{
 8003fc4:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003fcc:	f7ff fee0 	bl	8003d90 <HAL_GetTick>
 8003fd0:	4605      	mov	r5, r0
  while((hdma->Instance->CR & DMA_SxCR_EN) != 0)
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	f010 0001 	ands.w	r0, r0, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_DMA_Abort+0x2a>
  hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma);
 8003fde:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003fe6:	e00f      	b.n	8004008 <HAL_DMA_Abort+0x4a>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe8:	f7ff fed2 	bl	8003d90 <HAL_GetTick>
 8003fec:	1b40      	subs	r0, r0, r5
 8003fee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ff2:	d9ee      	bls.n	8003fd2 <HAL_DMA_Abort+0x14>
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003ff4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ff6:	2003      	movs	r0, #3
      hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003ff8:	f043 0320 	orr.w	r3, r3, #32
 8003ffc:	64e3      	str	r3, [r4, #76]	; 0x4c
      __HAL_UNLOCK(hdma);
 8003ffe:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004000:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004004:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8004008:	bd38      	pop	{r3, r4, r5, pc}
	...

0800400c <HAL_DMA_IRQHandler>:
{
 800400c:	b570      	push	{r4, r5, r6, lr}
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800400e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8004010:	2308      	movs	r3, #8
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004012:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
 8004014:	4604      	mov	r4, r0
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004016:	408b      	lsls	r3, r1
 8004018:	682a      	ldr	r2, [r5, #0]
 800401a:	421a      	tst	r2, r3
 800401c:	d015      	beq.n	800404a <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800401e:	6802      	ldr	r2, [r0, #0]
 8004020:	6811      	ldr	r1, [r2, #0]
 8004022:	074e      	lsls	r6, r1, #29
 8004024:	d511      	bpl.n	800404a <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8004026:	6811      	ldr	r1, [r2, #0]
 8004028:	f021 0104 	bic.w	r1, r1, #4
 800402c:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800402e:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004030:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	64c3      	str	r3, [r0, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8004038:	2304      	movs	r3, #4
 800403a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      __HAL_UNLOCK(hdma); 
 800403e:	2300      	movs	r3, #0
 8004040:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8004044:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004046:	b103      	cbz	r3, 800404a <HAL_DMA_IRQHandler+0x3e>
        hdma->XferErrorCallback(hdma);
 8004048:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800404a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_DMA_IRQHandler+0x15c>)
 800404e:	682a      	ldr	r2, [r5, #0]
 8004050:	408b      	lsls	r3, r1
 8004052:	421a      	tst	r2, r3
 8004054:	d016      	beq.n	8004084 <HAL_DMA_IRQHandler+0x78>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	6951      	ldr	r1, [r2, #20]
 800405a:	0609      	lsls	r1, r1, #24
 800405c:	d512      	bpl.n	8004084 <HAL_DMA_IRQHandler+0x78>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
 800405e:	6951      	ldr	r1, [r2, #20]
 8004060:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004064:	6151      	str	r1, [r2, #20]
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004066:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004068:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 8004070:	2304      	movs	r3, #4
 8004072:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004076:	2300      	movs	r3, #0
 8004078:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800407c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800407e:	b10b      	cbz	r3, 8004084 <HAL_DMA_IRQHandler+0x78>
        hdma->XferErrorCallback(hdma);
 8004080:	4620      	mov	r0, r4
 8004082:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004084:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_DMA_IRQHandler+0x160>)
 8004088:	682a      	ldr	r2, [r5, #0]
 800408a:	408b      	lsls	r3, r1
 800408c:	421a      	tst	r2, r3
 800408e:	d016      	beq.n	80040be <HAL_DMA_IRQHandler+0xb2>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	6811      	ldr	r1, [r2, #0]
 8004094:	078e      	lsls	r6, r1, #30
 8004096:	d512      	bpl.n	80040be <HAL_DMA_IRQHandler+0xb2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
 8004098:	6811      	ldr	r1, [r2, #0]
 800409a:	f021 0102 	bic.w	r1, r1, #2
 800409e:	6011      	str	r1, [r2, #0]
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040a0:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
 80040aa:	2304      	movs	r3, #4
 80040ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80040b0:	2300      	movs	r3, #0
 80040b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80040b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040b8:	b10b      	cbz	r3, 80040be <HAL_DMA_IRQHandler+0xb2>
        hdma->XferErrorCallback(hdma);
 80040ba:	4620      	mov	r0, r4
 80040bc:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80040c0:	2210      	movs	r2, #16
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	408a      	lsls	r2, r1
 80040c6:	4213      	tst	r3, r2
 80040c8:	d016      	beq.n	80040f8 <HAL_DMA_IRQHandler+0xec>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	0708      	lsls	r0, r1, #28
 80040d0:	d512      	bpl.n	80040f8 <HAL_DMA_IRQHandler+0xec>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	0349      	lsls	r1, r1, #13
 80040d6:	d526      	bpl.n	8004126 <HAL_DMA_IRQHandler+0x11a>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040d8:	60aa      	str	r2, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	0312      	lsls	r2, r2, #12
 80040de:	d401      	bmi.n	80040e4 <HAL_DMA_IRQHandler+0xd8>
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 80040e0:	2331      	movs	r3, #49	; 0x31
 80040e2:	e003      	b.n	80040ec <HAL_DMA_IRQHandler+0xe0>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	031e      	lsls	r6, r3, #12
 80040e8:	d502      	bpl.n	80040f0 <HAL_DMA_IRQHandler+0xe4>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
 80040ea:	2341      	movs	r3, #65	; 0x41
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
 80040ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferHalfCpltCallback != NULL)
 80040f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f2:	b10b      	cbz	r3, 80040f8 <HAL_DMA_IRQHandler+0xec>
        hdma->XferHalfCpltCallback(hdma);
 80040f4:	4620      	mov	r0, r4
 80040f6:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040f8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80040fa:	2220      	movs	r2, #32
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	408a      	lsls	r2, r1
 8004100:	4213      	tst	r3, r2
 8004102:	d02f      	beq.n	8004164 <HAL_DMA_IRQHandler+0x158>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	06c9      	lsls	r1, r1, #27
 800410a:	d52b      	bpl.n	8004164 <HAL_DMA_IRQHandler+0x158>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	034e      	lsls	r6, r1, #13
 8004110:	d517      	bpl.n	8004142 <HAL_DMA_IRQHandler+0x136>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004112:	60aa      	str	r2, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	0315      	lsls	r5, r2, #12
 8004118:	d40e      	bmi.n	8004138 <HAL_DMA_IRQHandler+0x12c>
          if(hdma->XferM1CpltCallback != NULL)
 800411a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800411c:	b313      	cbz	r3, 8004164 <HAL_DMA_IRQHandler+0x158>
          hdma->XferCpltCallback(hdma);
 800411e:	4620      	mov	r0, r4
}
 8004120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          hdma->XferCpltCallback(hdma);
 8004124:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	05c8      	lsls	r0, r1, #23
 800412a:	d403      	bmi.n	8004134 <HAL_DMA_IRQHandler+0x128>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800412c:	6819      	ldr	r1, [r3, #0]
 800412e:	f021 0108 	bic.w	r1, r1, #8
 8004132:	6019      	str	r1, [r3, #0]
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004134:	60aa      	str	r2, [r5, #8]
 8004136:	e7d3      	b.n	80040e0 <HAL_DMA_IRQHandler+0xd4>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	0318      	lsls	r0, r3, #12
 800413c:	d512      	bpl.n	8004164 <HAL_DMA_IRQHandler+0x158>
        if(hdma->XferCpltCallback != NULL)
 800413e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004140:	e7ec      	b.n	800411c <HAL_DMA_IRQHandler+0x110>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	05c9      	lsls	r1, r1, #23
 8004146:	d403      	bmi.n	8004150 <HAL_DMA_IRQHandler+0x144>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	f021 0110 	bic.w	r1, r1, #16
 800414e:	6019      	str	r1, [r3, #0]
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004150:	60aa      	str	r2, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8004152:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004154:	64e3      	str	r3, [r4, #76]	; 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
 8004156:	2311      	movs	r3, #17
 8004158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);      
 800415c:	2300      	movs	r3, #0
 800415e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004162:	e7ec      	b.n	800413e <HAL_DMA_IRQHandler+0x132>
}
 8004164:	bd70      	pop	{r4, r5, r6, pc}
 8004166:	bf00      	nop
 8004168:	00800001 	.word	0x00800001
 800416c:	00800004 	.word	0x00800004

08004170 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8004170:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp4 = 0;
  
  tmp = Width << 16;
  
  /* Configure DMA2D data size */
  hdma2d->Instance->NLR = (Height | tmp);
 8004172:	9d04      	ldr	r5, [sp, #16]
 8004174:	6804      	ldr	r4, [r0, #0]
 8004176:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800417a:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  hdma2d->Instance->OMAR = DstAddress;
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800417c:	6843      	ldr	r3, [r0, #4]
  hdma2d->Instance->OMAR = DstAddress;
 800417e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004180:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004184:	d130      	bne.n	80041e8 <DMA2D_SetConfig+0x78>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
    
    /* Prepare the value to be wrote to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_ARGB8888)
 8004186:	6886      	ldr	r6, [r0, #8]
 8004188:	b11e      	cbz	r6, 8004192 <DMA2D_SetConfig+0x22>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_RGB888)
 800418a:	2e01      	cmp	r6, #1
 800418c:	d103      	bne.n	8004196 <DMA2D_SetConfig+0x26>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 800418e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    hdma2d->Instance->OCOLR = tmp;
 8004192:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    hdma2d->Instance->FGMAR = pdata;
  }
}
 8004194:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_RGB565)
 8004196:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004198:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800419c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80041a0:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_RGB565)
 80041a2:	d107      	bne.n	80041b4 <DMA2D_SetConfig+0x44>
      tmp2 = (tmp2 >> 19);
 80041a4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10);
 80041a6:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80041a8:	02c9      	lsls	r1, r1, #11
 80041aa:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80041ae:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 80041b2:	e7ee      	b.n	8004192 <DMA2D_SetConfig+0x22>
    else if (hdma2d->Init.ColorMode == DMA2D_ARGB1555)
 80041b4:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80041b6:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_ARGB1555)
 80041ba:	d10a      	bne.n	80041d2 <DMA2D_SetConfig+0x62>
      tmp2 = (tmp2 >> 19);
 80041bc:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11);
 80041be:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80041c0:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31);
 80041c2:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 80041c4:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 80041c8:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 80041cc:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 80041d0:	e7df      	b.n	8004192 <DMA2D_SetConfig+0x22>
      tmp2 = (tmp2 >> 20);
 80041d2:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12);
 80041d4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80041d6:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28);
 80041d8:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 80041da:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80041de:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 80041e2:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 80041e6:	e7d4      	b.n	8004192 <DMA2D_SetConfig+0x22>
    hdma2d->Instance->FGMAR = pdata;
 80041e8:	60e1      	str	r1, [r4, #12]
}
 80041ea:	e7d3      	b.n	8004194 <DMA2D_SetConfig+0x24>

080041ec <HAL_DMA2D_MspInit>:
}
 80041ec:	4770      	bx	lr

080041ee <HAL_DMA2D_Init>:
{ 
 80041ee:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 80041f0:	4604      	mov	r4, r0
 80041f2:	b330      	cbz	r0, 8004242 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80041f4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80041f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041fc:	b91b      	cbnz	r3, 8004206 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80041fe:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8004202:	f7ff fff3 	bl	80041ec <HAL_DMA2D_MspInit>
  tmp = hdma2d->Instance->CR;
 8004206:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8004208:	2302      	movs	r3, #2
  tmp |= hdma2d->Init.Mode;
 800420a:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800420c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800420e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  tmp = hdma2d->Instance->CR;
 8004212:	6813      	ldr	r3, [r2, #0]
  tmp &= (uint32_t)~DMA2D_CR_MODE;
 8004214:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  tmp |= hdma2d->Init.Mode;
 8004218:	430b      	orrs	r3, r1
  tmp |= hdma2d->Init.ColorMode;
 800421a:	68a1      	ldr	r1, [r4, #8]
  hdma2d->Instance->CR = tmp;
 800421c:	6013      	str	r3, [r2, #0]
  tmp = hdma2d->Instance->OPFCCR;
 800421e:	6b53      	ldr	r3, [r2, #52]	; 0x34
  tmp &= (uint32_t)~DMA2D_OPFCCR_CM;
 8004220:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma2d->Init.ColorMode;
 8004224:	430b      	orrs	r3, r1
  tmp |= hdma2d->Init.OutputOffset;
 8004226:	68e1      	ldr	r1, [r4, #12]
  hdma2d->Instance->OPFCCR = tmp;
 8004228:	6353      	str	r3, [r2, #52]	; 0x34
  tmp = hdma2d->Instance->OOR;
 800422a:	6c13      	ldr	r3, [r2, #64]	; 0x40
  tmp &= (uint32_t)~DMA2D_OOR_LO;
 800422c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004230:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  tmp |= hdma2d->Init.OutputOffset;
 8004234:	430b      	orrs	r3, r1
  hdma2d->Instance->OOR = tmp;
 8004236:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004238:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800423a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800423c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8004240:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8004242:	2001      	movs	r0, #1
 8004244:	e7fc      	b.n	8004240 <HAL_DMA2D_Init+0x52>

08004246 <HAL_DMA2D_Start>:
{
 8004246:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004248:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 800424c:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 800424e:	2c01      	cmp	r4, #1
 8004250:	f04f 0402 	mov.w	r4, #2
 8004254:	d015      	beq.n	8004282 <HAL_DMA2D_Start+0x3c>
 8004256:	2601      	movs	r6, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004258:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800425c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  __HAL_DMA2D_DISABLE(hdma2d);
 8004260:	6806      	ldr	r6, [r0, #0]
 8004262:	6834      	ldr	r4, [r6, #0]
 8004264:	f024 0401 	bic.w	r4, r4, #1
 8004268:	6034      	str	r4, [r6, #0]
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800426a:	9c06      	ldr	r4, [sp, #24]
 800426c:	9400      	str	r4, [sp, #0]
 800426e:	f7ff ff7f 	bl	8004170 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004272:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8004274:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	b002      	add	sp, #8
 8004280:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8004282:	4620      	mov	r0, r4
 8004284:	e7fb      	b.n	800427e <HAL_DMA2D_Start+0x38>

08004286 <HAL_DMA2D_PollForTransfer>:
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 8004286:	6803      	ldr	r3, [r0, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	07db      	lsls	r3, r3, #31
{
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	4604      	mov	r4, r0
 8004290:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0)
 8004292:	d416      	bmi.n	80042c2 <HAL_DMA2D_PollForTransfer+0x3c>
  if((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != 0)
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	069e      	lsls	r6, r3, #26
 800429a:	d506      	bpl.n	80042aa <HAL_DMA2D_PollForTransfer+0x24>
    tickstart = HAL_GetTick();
 800429c:	f7ff fd78 	bl	8003d90 <HAL_GetTick>
 80042a0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	06d2      	lsls	r2, r2, #27
 80042a8:	d538      	bpl.n	800431c <HAL_DMA2D_PollForTransfer+0x96>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma2d);
 80042ae:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80042b0:	609a      	str	r2, [r3, #8]
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);  
 80042b2:	2210      	movs	r2, #16
 80042b4:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042b6:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 80042b8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80042c0:	e017      	b.n	80042f2 <HAL_DMA2D_PollForTransfer+0x6c>
   tickstart = HAL_GetTick();
 80042c2:	f7ff fd65 	bl	8003d90 <HAL_GetTick>
 80042c6:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	0792      	lsls	r2, r2, #30
 80042ce:	d4e1      	bmi.n	8004294 <HAL_DMA2D_PollForTransfer+0xe>
      tmp  = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042d0:	6859      	ldr	r1, [r3, #4]
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 80042d2:	685a      	ldr	r2, [r3, #4]
      if((tmp != RESET) || (tmp1 != RESET))
 80042d4:	0688      	lsls	r0, r1, #26
      tmp1 = __HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TE);
 80042d6:	f002 0201 	and.w	r2, r2, #1
      if((tmp != RESET) || (tmp1 != RESET))
 80042da:	d400      	bmi.n	80042de <HAL_DMA2D_PollForTransfer+0x58>
 80042dc:	b152      	cbz	r2, 80042f4 <HAL_DMA2D_PollForTransfer+0x6e>
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042de:	2220      	movs	r2, #32
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80042e0:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042e2:	609a      	str	r2, [r3, #8]
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80042e4:	6098      	str	r0, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80042e6:	2304      	movs	r3, #4
 80042e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80042ec:	2300      	movs	r3, #0
 80042ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 80042f4:	1c69      	adds	r1, r5, #1
 80042f6:	d0e8      	beq.n	80042ca <HAL_DMA2D_PollForTransfer+0x44>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80042f8:	b955      	cbnz	r5, 8004310 <HAL_DMA2D_PollForTransfer+0x8a>
          __HAL_UNLOCK(hdma2d);
 80042fa:	2300      	movs	r3, #0
 80042fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004302:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004304:	f043 0320 	orr.w	r3, r3, #32
 8004308:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800430a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 800430e:	e7f0      	b.n	80042f2 <HAL_DMA2D_PollForTransfer+0x6c>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004310:	f7ff fd3e 	bl	8003d90 <HAL_GetTick>
 8004314:	1b80      	subs	r0, r0, r6
 8004316:	42a8      	cmp	r0, r5
 8004318:	d9d6      	bls.n	80042c8 <HAL_DMA2D_PollForTransfer+0x42>
 800431a:	e7ee      	b.n	80042fa <HAL_DMA2D_PollForTransfer+0x74>
      if((__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CAE) != RESET))
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	0710      	lsls	r0, r2, #28
 8004320:	d506      	bpl.n	8004330 <HAL_DMA2D_PollForTransfer+0xaa>
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004322:	2208      	movs	r2, #8
        return HAL_ERROR;      
 8004324:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004326:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004328:	2304      	movs	r3, #4
 800432a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        return HAL_ERROR;      
 800432e:	e7e0      	b.n	80042f2 <HAL_DMA2D_PollForTransfer+0x6c>
      if(Timeout != HAL_MAX_DELAY)
 8004330:	1c69      	adds	r1, r5, #1
 8004332:	d0b7      	beq.n	80042a4 <HAL_DMA2D_PollForTransfer+0x1e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004334:	2d00      	cmp	r5, #0
 8004336:	d0e3      	beq.n	8004300 <HAL_DMA2D_PollForTransfer+0x7a>
 8004338:	f7ff fd2a 	bl	8003d90 <HAL_GetTick>
 800433c:	1b80      	subs	r0, r0, r6
 800433e:	42a8      	cmp	r0, r5
 8004340:	d9af      	bls.n	80042a2 <HAL_DMA2D_PollForTransfer+0x1c>
 8004342:	e7dd      	b.n	8004300 <HAL_DMA2D_PollForTransfer+0x7a>

08004344 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8004344:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004348:	2b01      	cmp	r3, #1
 800434a:	f04f 0302 	mov.w	r3, #2
{ 
 800434e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8004350:	d030      	beq.n	80043b4 <HAL_DMA2D_ConfigLayer+0x70>
 8004352:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY; 
 8004354:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8004358:	4c2b      	ldr	r4, [pc, #172]	; (8004408 <HAL_DMA2D_ConfigLayer+0xc4>)
  __HAL_LOCK(hdma2d);
 800435a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 800435e:	6803      	ldr	r3, [r0, #0]
  if(LayerIdx == 0)
 8004360:	bb51      	cbnz	r1, 80043b8 <HAL_DMA2D_ConfigLayer+0x74>
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004362:	69c7      	ldr	r7, [r0, #28]
    tmp = hdma2d->Instance->BGPFCCR;
 8004364:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004366:	f1a7 0509 	sub.w	r5, r7, #9
 800436a:	6a02      	ldr	r2, [r0, #32]
    tmp &= (uint32_t)~(DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA); 
 800436c:	4021      	ands	r1, r4
 800436e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004370:	2d01      	cmp	r5, #1
 8004372:	ea4f 4202 	mov.w	r2, r2, lsl #16
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8004376:	bf96      	itet	ls
 8004378:	f004 467f 	andls.w	r6, r4, #4278190080	; 0xff000000
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 800437c:	ea42 6204 	orrhi.w	r2, r2, r4, lsl #24
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 8004380:	4332      	orrls	r2, r6
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 8004382:	2d01      	cmp	r5, #1
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 8004384:	ea42 0207 	orr.w	r2, r2, r7
 8004388:	ea42 0201 	orr.w	r2, r2, r1
    tmp |= pLayerCfg->InputOffset;
 800438c:	6981      	ldr	r1, [r0, #24]
    hdma2d->Instance->BGPFCCR = tmp; 
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
    tmp = hdma2d->Instance->BGOR;
 8004390:	699a      	ldr	r2, [r3, #24]
    tmp &= (uint32_t)~DMA2D_BGOR_LO; 
 8004392:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8004396:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    tmp |= pLayerCfg->InputOffset;
 800439a:	ea42 0201 	orr.w	r2, r2, r1
    hdma2d->Instance->BGOR = tmp;
 800439e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043a0:	d802      	bhi.n	80043a8 <HAL_DMA2D_ConfigLayer+0x64>
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 80043a2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
      hdma2d->Instance->BGCOLR = tmp;
 80043a6:	629c      	str	r4, [r3, #40]	; 0x28
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);  
 80043ae:	2300      	movs	r3, #0
 80043b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80043b4:	4618      	mov	r0, r3
}
 80043b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043b8:	0109      	lsls	r1, r1, #4
    tmp = hdma2d->Instance->FGPFCCR;
 80043ba:	69da      	ldr	r2, [r3, #28]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043bc:	1845      	adds	r5, r0, r1
    tmp &= (uint32_t)~(DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA); 
 80043be:	4014      	ands	r4, r2
    tmp |= pLayerCfg->InputOffset;
 80043c0:	4401      	add	r1, r0
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043c2:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 80043c6:	6a2a      	ldr	r2, [r5, #32]
 80043c8:	f1ac 0609 	sub.w	r6, ip, #9
 80043cc:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80043ce:	0412      	lsls	r2, r2, #16
    tmp |= pLayerCfg->InputOffset;
 80043d0:	6989      	ldr	r1, [r1, #24]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043d2:	2e01      	cmp	r6, #1
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80043d4:	bf96      	itet	ls
 80043d6:	f005 477f 	andls.w	r7, r5, #4278190080	; 0xff000000
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 80043da:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | ((pLayerCfg->InputAlpha) & 0xFF000000));
 80043de:	433a      	orrls	r2, r7
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043e0:	2e01      	cmp	r6, #1
      tmp |= (pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << 16) | (pLayerCfg->InputAlpha << 24));
 80043e2:	ea42 020c 	orr.w	r2, r2, ip
 80043e6:	ea42 0204 	orr.w	r2, r2, r4
    hdma2d->Instance->FGPFCCR = tmp; 
 80043ea:	61da      	str	r2, [r3, #28]
    tmp = hdma2d->Instance->FGOR;
 80043ec:	691a      	ldr	r2, [r3, #16]
    tmp &= (uint32_t)~DMA2D_FGOR_LO; 
 80043ee:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80043f2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    tmp |= pLayerCfg->InputOffset;
 80043f6:	ea42 0201 	orr.w	r2, r2, r1
    hdma2d->Instance->FGOR = tmp;
 80043fa:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == CM_A4) || (pLayerCfg->InputColorMode == CM_A8))
 80043fc:	d8d4      	bhi.n	80043a8 <HAL_DMA2D_ConfigLayer+0x64>
      tmp = ((pLayerCfg->InputAlpha) & 0x00FFFFFF);
 80043fe:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
      hdma2d->Instance->FGCOLR = tmp;
 8004402:	621d      	str	r5, [r3, #32]
 8004404:	e7d0      	b.n	80043a8 <HAL_DMA2D_ConfigLayer+0x64>
 8004406:	bf00      	nop
 8004408:	00fcfff0 	.word	0x00fcfff0

0800440c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004410:	680b      	ldr	r3, [r1, #0]
{
 8004412:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004414:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80045e0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004418:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800441a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800441c:	4a6e      	ldr	r2, [pc, #440]	; (80045d8 <HAL_GPIO_Init+0x1cc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800441e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80045e4 <HAL_GPIO_Init+0x1d8>
    ioposition = ((uint32_t)0x01) << position;
 8004422:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004426:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8004428:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800442c:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8004430:	45b4      	cmp	ip, r6
 8004432:	f040 80b7 	bne.w	80045a4 <HAL_GPIO_Init+0x198>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004436:	684c      	ldr	r4, [r1, #4]
 8004438:	f024 0710 	bic.w	r7, r4, #16
 800443c:	2f02      	cmp	r7, #2
 800443e:	d116      	bne.n	800446e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8004440:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004444:	f003 0b07 	and.w	fp, r3, #7
 8004448:	f04f 0e0f 	mov.w	lr, #15
 800444c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004450:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004454:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004458:	fa0e fe0b 	lsl.w	lr, lr, fp
 800445c:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004460:	690d      	ldr	r5, [r1, #16]
 8004462:	fa05 f50b 	lsl.w	r5, r5, fp
 8004466:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800446a:	f8ca 5020 	str.w	r5, [sl, #32]
 800446e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004472:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8004474:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004478:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800447c:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004480:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004482:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004486:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004488:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800448a:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800448e:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8004492:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004496:	d811      	bhi.n	80044bc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8004498:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800449a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800449e:	68cf      	ldr	r7, [r1, #12]
 80044a0:	fa07 fe0a 	lsl.w	lr, r7, sl
 80044a4:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 80044a8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80044aa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80044b0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80044b4:	409f      	lsls	r7, r3
 80044b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80044ba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80044bc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044be:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044c0:	688f      	ldr	r7, [r1, #8]
 80044c2:	fa07 f70a 	lsl.w	r7, r7, sl
 80044c6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80044c8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ca:	00e5      	lsls	r5, r4, #3
 80044cc:	d56a      	bpl.n	80045a4 <HAL_GPIO_Init+0x198>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ce:	f04f 0b00 	mov.w	fp, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044d2:	f003 0e03 	and.w	lr, r3, #3
 80044d6:	f04f 0c0f 	mov.w	ip, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044da:	4d40      	ldr	r5, [pc, #256]	; (80045dc <HAL_GPIO_Init+0x1d0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044dc:	f8cd b00c 	str.w	fp, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044e0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044e8:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044ea:	fa0c fc0e 	lsl.w	ip, ip, lr
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ee:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80044f2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80044f6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80044fa:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80044fe:	9703      	str	r7, [sp, #12]
 8004500:	9f03      	ldr	r7, [sp, #12]
 8004502:	f023 0703 	bic.w	r7, r3, #3
 8004506:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800450a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2];
 800450e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004512:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004516:	d04c      	beq.n	80045b2 <HAL_GPIO_Init+0x1a6>
 8004518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800451c:	42a8      	cmp	r0, r5
 800451e:	d04a      	beq.n	80045b6 <HAL_GPIO_Init+0x1aa>
 8004520:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004524:	42a8      	cmp	r0, r5
 8004526:	d048      	beq.n	80045ba <HAL_GPIO_Init+0x1ae>
 8004528:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800452c:	42a8      	cmp	r0, r5
 800452e:	d046      	beq.n	80045be <HAL_GPIO_Init+0x1b2>
 8004530:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004534:	42a8      	cmp	r0, r5
 8004536:	d044      	beq.n	80045c2 <HAL_GPIO_Init+0x1b6>
 8004538:	4548      	cmp	r0, r9
 800453a:	d044      	beq.n	80045c6 <HAL_GPIO_Init+0x1ba>
 800453c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004540:	42a8      	cmp	r0, r5
 8004542:	d042      	beq.n	80045ca <HAL_GPIO_Init+0x1be>
 8004544:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004548:	42a8      	cmp	r0, r5
 800454a:	d040      	beq.n	80045ce <HAL_GPIO_Init+0x1c2>
 800454c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004550:	42a8      	cmp	r0, r5
 8004552:	d03e      	beq.n	80045d2 <HAL_GPIO_Init+0x1c6>
 8004554:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004558:	42a8      	cmp	r0, r5
 800455a:	bf14      	ite	ne
 800455c:	250a      	movne	r5, #10
 800455e:	2509      	moveq	r5, #9
 8004560:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004564:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004568:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800456c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800456e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8004572:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004574:	bf0c      	ite	eq
 8004576:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004578:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800457a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800457e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004580:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004582:	bf0c      	ite	eq
 8004584:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004586:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004588:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800458c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800458e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004590:	bf0c      	ite	eq
 8004592:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004594:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004596:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8004598:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800459a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800459c:	bf54      	ite	pl
 800459e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80045a0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80045a2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045a4:	3301      	adds	r3, #1
 80045a6:	2b10      	cmp	r3, #16
 80045a8:	f47f af3b 	bne.w	8004422 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80045ac:	b005      	add	sp, #20
 80045ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045b2:	465d      	mov	r5, fp
 80045b4:	e7d4      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045b6:	2501      	movs	r5, #1
 80045b8:	e7d2      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045ba:	2502      	movs	r5, #2
 80045bc:	e7d0      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045be:	2503      	movs	r5, #3
 80045c0:	e7ce      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045c2:	2504      	movs	r5, #4
 80045c4:	e7cc      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045c6:	2505      	movs	r5, #5
 80045c8:	e7ca      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045ca:	2506      	movs	r5, #6
 80045cc:	e7c8      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045ce:	2507      	movs	r5, #7
 80045d0:	e7c6      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045d2:	2508      	movs	r5, #8
 80045d4:	e7c4      	b.n	8004560 <HAL_GPIO_Init+0x154>
 80045d6:	bf00      	nop
 80045d8:	40013c00 	.word	0x40013c00
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40021400 	.word	0x40021400

080045e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045e8:	6903      	ldr	r3, [r0, #16]
 80045ea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80045ec:	bf14      	ite	ne
 80045ee:	2001      	movne	r0, #1
 80045f0:	2000      	moveq	r0, #0
 80045f2:	4770      	bx	lr

080045f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045f4:	b10a      	cbz	r2, 80045fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045f6:	6181      	str	r1, [r0, #24]
  }
}
 80045f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045fa:	0409      	lsls	r1, r1, #16
 80045fc:	e7fb      	b.n	80045f6 <HAL_GPIO_WritePin+0x2>

080045fe <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80045fe:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
  
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8004600:	6805      	ldr	r5, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004602:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004606:	9803      	ldr	r0, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8004608:	686c      	ldr	r4, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800460a:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800460c:	f024 747f 	bic.w	r4, r4, #66846720	; 0x3fc0000
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8004614:	f424 3459 	bic.w	r4, r4, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004618:	430b      	orrs	r3, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800461a:	f424 747f 	bic.w	r4, r4, #1020	; 0x3fc
 800461e:	f024 0403 	bic.w	r4, r4, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004622:	4323      	orrs	r3, r4
    (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8004624:	606b      	str	r3, [r5, #4]
}  
 8004626:	bd30      	pop	{r4, r5, pc}

08004628 <I2C_IsAcknowledgeFailed>:
{
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800462e:	f7ff fbaf 	bl	8003d90 <HAL_GetTick>
 8004632:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	6998      	ldr	r0, [r3, #24]
 8004638:	f010 0010 	ands.w	r0, r0, #16
 800463c:	d110      	bne.n	8004660 <I2C_IsAcknowledgeFailed+0x38>
}
 800463e:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8004640:	1c68      	adds	r0, r5, #1
 8004642:	d00e      	beq.n	8004662 <I2C_IsAcknowledgeFailed+0x3a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004644:	b125      	cbz	r5, 8004650 <I2C_IsAcknowledgeFailed+0x28>
 8004646:	f7ff fba3 	bl	8003d90 <HAL_GetTick>
 800464a:	1b80      	subs	r0, r0, r6
 800464c:	42a8      	cmp	r0, r5
 800464e:	d907      	bls.n	8004660 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State= HAL_I2C_STATE_READY;
 8004650:	2301      	movs	r3, #1
          return HAL_TIMEOUT;
 8004652:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 8004654:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800465e:	e7ee      	b.n	800463e <I2C_IsAcknowledgeFailed+0x16>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	0691      	lsls	r1, r2, #26
 8004666:	d5eb      	bpl.n	8004640 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004668:	2210      	movs	r2, #16
 800466a:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466c:	2220      	movs	r2, #32
 800466e:	61da      	str	r2, [r3, #28]
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	07d2      	lsls	r2, r2, #31
 8004674:	d401      	bmi.n	800467a <I2C_IsAcknowledgeFailed+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004676:	2201      	movs	r2, #1
 8004678:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800467a:	685a      	ldr	r2, [r3, #4]
    hi2c->State= HAL_I2C_STATE_READY;
 800467c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800467e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004682:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004686:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004690:	2304      	movs	r3, #4
 8004692:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_UNLOCK(hi2c);
 8004694:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 8004696:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800469a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800469e:	e7ce      	b.n	800463e <I2C_IsAcknowledgeFailed+0x16>

080046a0 <I2C_WaitOnFlagUntilTimeout>:
{  
 80046a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a4:	4690      	mov	r8, r2
 80046a6:	4604      	mov	r4, r0
 80046a8:	460e      	mov	r6, r1
 80046aa:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80046ac:	f7ff fb70 	bl	8003d90 <HAL_GetTick>
 80046b0:	4607      	mov	r7, r0
  if(Status == RESET)
 80046b2:	f1b8 0f00 	cmp.w	r8, #0
 80046b6:	d01d      	beq.n	80046f4 <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	6993      	ldr	r3, [r2, #24]
 80046bc:	ea36 0303 	bics.w	r3, r6, r3
 80046c0:	d11d      	bne.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 80046c2:	1c6b      	adds	r3, r5, #1
 80046c4:	d0f9      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80046c6:	b16d      	cbz	r5, 80046e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046c8:	f7ff fb62 	bl	8003d90 <HAL_GetTick>
 80046cc:	1bc0      	subs	r0, r0, r7
 80046ce:	42a8      	cmp	r0, r5
 80046d0:	d9f2      	bls.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x18>
 80046d2:	e007      	b.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 80046d4:	1c69      	adds	r1, r5, #1
 80046d6:	d00e      	beq.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80046d8:	b125      	cbz	r5, 80046e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046da:	f7ff fb59 	bl	8003d90 <HAL_GetTick>
 80046de:	1bc0      	subs	r0, r0, r7
 80046e0:	42a8      	cmp	r0, r5
 80046e2:	d907      	bls.n	80046f4 <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 80046e4:	2301      	movs	r3, #1
          return HAL_TIMEOUT;
 80046e6:	2003      	movs	r0, #3
          hi2c->State= HAL_I2C_STATE_READY;
 80046e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 80046ec:	2300      	movs	r3, #0
 80046ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 80046f2:	e005      	b.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046f4:	6822      	ldr	r2, [r4, #0]
 80046f6:	6993      	ldr	r3, [r2, #24]
 80046f8:	ea36 0303 	bics.w	r3, r6, r3
 80046fc:	d1ea      	bne.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 80046fe:	2000      	movs	r0, #0
}
 8004700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004704 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8004704:	b570      	push	{r4, r5, r6, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800470a:	f7ff fb41 	bl	8003d90 <HAL_GetTick>
 800470e:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	069b      	lsls	r3, r3, #26
 8004716:	d501      	bpl.n	800471c <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 8004718:	2000      	movs	r0, #0
 800471a:	e010      	b.n	800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800471c:	4629      	mov	r1, r5
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff ff82 	bl	8004628 <I2C_IsAcknowledgeFailed>
 8004724:	b990      	cbnz	r0, 800474c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004726:	b95d      	cbnz	r5, 8004740 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 800472a:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800472c:	f043 0320 	orr.w	r3, r3, #32
 8004730:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8004732:	2301      	movs	r3, #1
 8004734:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 8004738:	2300      	movs	r3, #0
 800473a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800473e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004740:	f7ff fb26 	bl	8003d90 <HAL_GetTick>
 8004744:	1b80      	subs	r0, r0, r6
 8004746:	42a8      	cmp	r0, r5
 8004748:	d9e2      	bls.n	8004710 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800474a:	e7ed      	b.n	8004728 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 800474c:	2001      	movs	r0, #1
 800474e:	e7f6      	b.n	800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>

08004750 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8004750:	b570      	push	{r4, r5, r6, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8004756:	f7ff fb1b 	bl	8003d90 <HAL_GetTick>
 800475a:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	079b      	lsls	r3, r3, #30
 8004762:	d501      	bpl.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 8004764:	2000      	movs	r0, #0
 8004766:	e012      	b.n	800478e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8004768:	4629      	mov	r1, r5
 800476a:	4620      	mov	r0, r4
 800476c:	f7ff ff5c 	bl	8004628 <I2C_IsAcknowledgeFailed>
 8004770:	b9a0      	cbnz	r0, 800479c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(Timeout != HAL_MAX_DELAY)
 8004772:	1c6a      	adds	r2, r5, #1
 8004774:	d0f2      	beq.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004776:	b95d      	cbnz	r5, 8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 800477a:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8004782:	2301      	movs	r3, #1
 8004784:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800478e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004790:	f7ff fafe 	bl	8003d90 <HAL_GetTick>
 8004794:	1b80      	subs	r0, r0, r6
 8004796:	42a8      	cmp	r0, r5
 8004798:	d9e0      	bls.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800479a:	e7ed      	b.n	8004778 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
 800479e:	e7f6      	b.n	800478e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>

080047a0 <I2C_RequestMemoryWrite>:
{
 80047a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047a2:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 80047a8:	4604      	mov	r4, r0
 80047aa:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	b2f2      	uxtb	r2, r6
 80047b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047b4:	f7ff ff23 	bl	80045fe <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80047b8:	9906      	ldr	r1, [sp, #24]
 80047ba:	4620      	mov	r0, r4
 80047bc:	f7ff ffc8 	bl	8004750 <I2C_WaitOnTXISFlagUntilTimeout>
 80047c0:	b128      	cbz	r0, 80047ce <I2C_RequestMemoryWrite+0x2e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d10f      	bne.n	80047e8 <I2C_RequestMemoryWrite+0x48>
      return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
}
 80047ca:	b002      	add	sp, #8
 80047cc:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ce:	2e01      	cmp	r6, #1
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	d10b      	bne.n	80047ec <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 80047d4:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80047d6:	2200      	movs	r2, #0
 80047d8:	2180      	movs	r1, #128	; 0x80
 80047da:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 80047dc:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80047de:	9b06      	ldr	r3, [sp, #24]
 80047e0:	f7ff ff5e 	bl	80046a0 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d0f0      	beq.n	80047ca <I2C_RequestMemoryWrite+0x2a>
      return HAL_TIMEOUT;
 80047e8:	2003      	movs	r0, #3
 80047ea:	e7ee      	b.n	80047ca <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 80047ec:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80047ee:	9906      	ldr	r1, [sp, #24]
 80047f0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80047f4:	f7ff ffac 	bl	8004750 <I2C_WaitOnTXISFlagUntilTimeout>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1e2      	bne.n	80047c2 <I2C_RequestMemoryWrite+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	e7e9      	b.n	80047d4 <I2C_RequestMemoryWrite+0x34>

08004800 <I2C_RequestMemoryRead>:
{
 8004800:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004802:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8004808:	4604      	mov	r4, r0
 800480a:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	b2f2      	uxtb	r2, r6
 8004810:	2300      	movs	r3, #0
 8004812:	f7ff fef4 	bl	80045fe <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004816:	9906      	ldr	r1, [sp, #24]
 8004818:	4620      	mov	r0, r4
 800481a:	f7ff ff99 	bl	8004750 <I2C_WaitOnTXISFlagUntilTimeout>
 800481e:	b128      	cbz	r0, 800482c <I2C_RequestMemoryRead+0x2c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004822:	2b04      	cmp	r3, #4
 8004824:	d10f      	bne.n	8004846 <I2C_RequestMemoryRead+0x46>
      return HAL_ERROR;
 8004826:	2001      	movs	r0, #1
}
 8004828:	b002      	add	sp, #8
 800482a:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800482c:	2e01      	cmp	r6, #1
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	d10b      	bne.n	800484a <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004832:	b2ed      	uxtb	r5, r5
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8004834:	2200      	movs	r2, #0
 8004836:	2140      	movs	r1, #64	; 0x40
 8004838:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 800483a:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800483c:	9b06      	ldr	r3, [sp, #24]
 800483e:	f7ff ff2f 	bl	80046a0 <I2C_WaitOnFlagUntilTimeout>
 8004842:	2800      	cmp	r0, #0
 8004844:	d0f0      	beq.n	8004828 <I2C_RequestMemoryRead+0x28>
      return HAL_TIMEOUT;
 8004846:	2003      	movs	r0, #3
 8004848:	e7ee      	b.n	8004828 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 800484a:	0a2a      	lsrs	r2, r5, #8
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800484c:	9906      	ldr	r1, [sp, #24]
 800484e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004852:	f7ff ff7d 	bl	8004750 <I2C_WaitOnTXISFlagUntilTimeout>
 8004856:	2800      	cmp	r0, #0
 8004858:	d1e2      	bne.n	8004820 <I2C_RequestMemoryRead+0x20>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	e7e9      	b.n	8004832 <I2C_RequestMemoryRead+0x32>

0800485e <HAL_I2C_MspInit>:
}
 800485e:	4770      	bx	lr

08004860 <HAL_I2C_Init>:
{ 
 8004860:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 8004862:	4604      	mov	r4, r0
 8004864:	2800      	cmp	r0, #0
 8004866:	d044      	beq.n	80048f2 <HAL_I2C_Init+0x92>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8004868:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800486c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004870:	b91b      	cbnz	r3, 800487a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004872:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_I2C_MspInit(hi2c);
 8004876:	f7ff fff2 	bl	800485e <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004890:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004898:	609a      	str	r2, [r3, #8]
 800489a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800489e:	b312      	cbz	r2, 80048e6 <HAL_I2C_Init+0x86>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a0:	2901      	cmp	r1, #1
 80048a2:	d11d      	bne.n	80048e0 <HAL_I2C_Init+0x80>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048a8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048aa:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ac:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80048b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80048b8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80048bc:	430a      	orrs	r2, r1
 80048be:	69a1      	ldr	r1, [r4, #24]
 80048c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048c6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 80048da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80048de:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048e4:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048e6:	2902      	cmp	r1, #2
 80048e8:	d1df      	bne.n	80048aa <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ee:	605a      	str	r2, [r3, #4]
 80048f0:	e7db      	b.n	80048aa <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80048f2:	2001      	movs	r0, #1
 80048f4:	e7f3      	b.n	80048de <HAL_I2C_Init+0x7e>

080048f6 <HAL_I2C_MspDeInit>:
 80048f6:	4770      	bx	lr

080048f8 <HAL_I2C_DeInit>:
{
 80048f8:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80048fa:	4604      	mov	r4, r0
 80048fc:	b180      	cbz	r0, 8004920 <HAL_I2C_DeInit+0x28>
  __HAL_I2C_DISABLE(hi2c);
 80048fe:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004900:	2302      	movs	r3, #2
 8004902:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800490e:	f7ff fff2 	bl	80048f6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004912:	2000      	movs	r0, #0
 8004914:	63a0      	str	r0, [r4, #56]	; 0x38
  __HAL_UNLOCK(hi2c);
 8004916:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800491a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800491e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004920:	2001      	movs	r0, #1
 8004922:	e7fc      	b.n	800491e <HAL_I2C_DeInit+0x26>

08004924 <HAL_I2C_Mem_Write>:
{
 8004924:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004928:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800492c:	4604      	mov	r4, r0
 800492e:	4689      	mov	r9, r1
 8004930:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004934:	b2ed      	uxtb	r5, r5
{
 8004936:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800493a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800493e:	2d01      	cmp	r5, #1
 8004940:	f040 8084 	bne.w	8004a4c <HAL_I2C_Mem_Write+0x128>
    if((pData == NULL) || (Size == 0)) 
 8004944:	f1b8 0f00 	cmp.w	r8, #0
 8004948:	d103      	bne.n	8004952 <HAL_I2C_Mem_Write+0x2e>
      return  HAL_ERROR;                                    
 800494a:	2001      	movs	r0, #1
}
 800494c:	b002      	add	sp, #8
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((pData == NULL) || (Size == 0)) 
 8004952:	2e00      	cmp	r6, #0
 8004954:	d0f9      	beq.n	800494a <HAL_I2C_Mem_Write+0x26>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004956:	6807      	ldr	r7, [r0, #0]
 8004958:	69bf      	ldr	r7, [r7, #24]
 800495a:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800495e:	d175      	bne.n	8004a4c <HAL_I2C_Mem_Write+0x128>
    __HAL_LOCK(hi2c);
 8004960:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8004964:	f1bc 0f01 	cmp.w	ip, #1
 8004968:	d070      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x128>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800496a:	f04f 0c52 	mov.w	ip, #82	; 0x52
    __HAL_LOCK(hi2c);
 800496e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8004972:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004976:	6387      	str	r7, [r0, #56]	; 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004978:	f8cd a000 	str.w	sl, [sp]
 800497c:	f7ff ff10 	bl	80047a0 <I2C_RequestMemoryWrite>
 8004980:	b130      	cbz	r0, 8004990 <HAL_I2C_Mem_Write+0x6c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 8004984:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004988:	2b04      	cmp	r3, #4
 800498a:	d0de      	beq.n	800494a <HAL_I2C_Mem_Write+0x26>
          return HAL_TIMEOUT;
 800498c:	2003      	movs	r0, #3
 800498e:	e7dd      	b.n	800494c <HAL_I2C_Mem_Write+0x28>
    if(Size > 255)
 8004990:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004992:	9000      	str	r0, [sp, #0]
    if(Size > 255)
 8004994:	d910      	bls.n	80049b8 <HAL_I2C_Mem_Write+0x94>
      Sizetmp = 255;
 8004996:	25ff      	movs	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800499c:	22ff      	movs	r2, #255	; 0xff
 800499e:	4649      	mov	r1, r9
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7ff fe2c 	bl	80045fe <I2C_TransferConfig>
 80049a6:	f108 38ff 	add.w	r8, r8, #4294967295
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80049aa:	4651      	mov	r1, sl
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff fecf 	bl	8004750 <I2C_WaitOnTXISFlagUntilTimeout>
 80049b2:	b150      	cbz	r0, 80049ca <HAL_I2C_Mem_Write+0xa6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049b6:	e7e7      	b.n	8004988 <HAL_I2C_Mem_Write+0x64>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049bc:	b2f2      	uxtb	r2, r6
 80049be:	4649      	mov	r1, r9
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7ff fe1c 	bl	80045fe <I2C_TransferConfig>
      Sizetmp = Size;
 80049c6:	4635      	mov	r5, r6
 80049c8:	e7ed      	b.n	80049a6 <HAL_I2C_Mem_Write+0x82>
      hi2c->Instance->TXDR = (*pData++);
 80049ca:	6823      	ldr	r3, [r4, #0]
      Size--;
 80049cc:	3e01      	subs	r6, #1
      hi2c->Instance->TXDR = (*pData++);
 80049ce:	f818 2f01 	ldrb.w	r2, [r8, #1]!
      if((Sizetmp == 0)&&(Size!=0))
 80049d2:	3d01      	subs	r5, #1
      Size--;
 80049d4:	b2b6      	uxth	r6, r6
      hi2c->Instance->TXDR = (*pData++);
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
      if((Sizetmp == 0)&&(Size!=0))
 80049d8:	d11d      	bne.n	8004a16 <HAL_I2C_Mem_Write+0xf2>
 80049da:	b1f6      	cbz	r6, 8004a1a <HAL_I2C_Mem_Write+0xf6>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80049dc:	4653      	mov	r3, sl
 80049de:	462a      	mov	r2, r5
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7ff fe5c 	bl	80046a0 <I2C_WaitOnFlagUntilTimeout>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d1cf      	bne.n	800498c <HAL_I2C_Mem_Write+0x68>
        if(Size > 255)
 80049ec:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049ee:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 80049f0:	d908      	bls.n	8004a04 <HAL_I2C_Mem_Write+0xe0>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f6:	22ff      	movs	r2, #255	; 0xff
 80049f8:	4649      	mov	r1, r9
 80049fa:	4620      	mov	r0, r4
 80049fc:	f7ff fdff 	bl	80045fe <I2C_TransferConfig>
          Sizetmp = 255;
 8004a00:	25ff      	movs	r5, #255	; 0xff
 8004a02:	e7d2      	b.n	80049aa <HAL_I2C_Mem_Write+0x86>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a08:	b2f2      	uxtb	r2, r6
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f7ff fdf6 	bl	80045fe <I2C_TransferConfig>
          Sizetmp = Size;
 8004a12:	4635      	mov	r5, r6
 8004a14:	e7c9      	b.n	80049aa <HAL_I2C_Mem_Write+0x86>
    }while(Size > 0);
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	d1c7      	bne.n	80049aa <HAL_I2C_Mem_Write+0x86>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8004a1a:	2119      	movs	r1, #25
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7ff fe71 	bl	8004704 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d1c6      	bne.n	80049b4 <HAL_I2C_Mem_Write+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004a32:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004a36:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8004a40:	2301      	movs	r3, #1
    __HAL_UNLOCK(hi2c);
 8004a42:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8004a46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_OK;
 8004a4a:	e77f      	b.n	800494c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	e77d      	b.n	800494c <HAL_I2C_Mem_Write+0x28>

08004a50 <HAL_I2C_Mem_Read>:
{
 8004a50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004a54:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 8004a58:	4604      	mov	r4, r0
 8004a5a:	4689      	mov	r9, r1
 8004a5c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004a60:	b2ed      	uxtb	r5, r5
{
 8004a62:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8004a66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004a6a:	2d01      	cmp	r5, #1
 8004a6c:	f040 8088 	bne.w	8004b80 <HAL_I2C_Mem_Read+0x130>
    if((pData == NULL) || (Size == 0)) 
 8004a70:	f1b8 0f00 	cmp.w	r8, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_I2C_Mem_Read+0x2e>
      return  HAL_ERROR;                                    
 8004a76:	2001      	movs	r0, #1
}
 8004a78:	b002      	add	sp, #8
 8004a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((pData == NULL) || (Size == 0)) 
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	d0f9      	beq.n	8004a76 <HAL_I2C_Mem_Read+0x26>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004a82:	6807      	ldr	r7, [r0, #0]
 8004a84:	69bf      	ldr	r7, [r7, #24]
 8004a86:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 8004a8a:	d179      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x130>
    __HAL_LOCK(hi2c);
 8004a8c:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8004a90:	f1bc 0f01 	cmp.w	ip, #1
 8004a94:	d074      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x130>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004a96:	f04f 0c62 	mov.w	ip, #98	; 0x62
    __HAL_LOCK(hi2c);
 8004a9a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8004a9e:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa2:	6387      	str	r7, [r0, #56]	; 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8004aa4:	f8cd a000 	str.w	sl, [sp]
 8004aa8:	f7ff feaa 	bl	8004800 <I2C_RequestMemoryRead>
 8004aac:	b130      	cbz	r0, 8004abc <HAL_I2C_Mem_Read+0x6c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        __HAL_UNLOCK(hi2c);
 8004ab0:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d0de      	beq.n	8004a76 <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 8004ab8:	2003      	movs	r0, #3
 8004aba:	e7dd      	b.n	8004a78 <HAL_I2C_Mem_Read+0x28>
 8004abc:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    if(Size > 255)
 8004ac0:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ac2:	9300      	str	r3, [sp, #0]
    if(Size > 255)
 8004ac4:	d92e      	bls.n	8004b24 <HAL_I2C_Mem_Read+0xd4>
      Sizetmp = 255;
 8004ac6:	25ff      	movs	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	4649      	mov	r1, r9
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7ff fd94 	bl	80045fe <I2C_TransferConfig>
 8004ad6:	f108 38ff 	add.w	r8, r8, #4294967295
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8004ada:	4653      	mov	r3, sl
 8004adc:	2200      	movs	r2, #0
 8004ade:	2104      	movs	r1, #4
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff fddd 	bl	80046a0 <I2C_WaitOnFlagUntilTimeout>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d1e6      	bne.n	8004ab8 <HAL_I2C_Mem_Read+0x68>
      (*pData++) = hi2c->Instance->RXDR;
 8004aea:	6823      	ldr	r3, [r4, #0]
      Size--;   
 8004aec:	3e01      	subs	r6, #1
      if((Sizetmp == 0)&&(Size!=0))
 8004aee:	3d01      	subs	r5, #1
      (*pData++) = hi2c->Instance->RXDR;
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      Size--;   
 8004af2:	b2b6      	uxth	r6, r6
      (*pData++) = hi2c->Instance->RXDR;
 8004af4:	f808 3f01 	strb.w	r3, [r8, #1]!
      if((Sizetmp == 0)&&(Size!=0))
 8004af8:	d126      	bne.n	8004b48 <HAL_I2C_Mem_Read+0xf8>
 8004afa:	b33e      	cbz	r6, 8004b4c <HAL_I2C_Mem_Read+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004afc:	4653      	mov	r3, sl
 8004afe:	462a      	mov	r2, r5
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff fdcc 	bl	80046a0 <I2C_WaitOnFlagUntilTimeout>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d1d5      	bne.n	8004ab8 <HAL_I2C_Mem_Read+0x68>
        if(Size > 255)
 8004b0c:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b0e:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 8004b10:	d911      	bls.n	8004b36 <HAL_I2C_Mem_Read+0xe6>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f7ff fd6f 	bl	80045fe <I2C_TransferConfig>
          Sizetmp = 255;
 8004b20:	25ff      	movs	r5, #255	; 0xff
 8004b22:	e7da      	b.n	8004ada <HAL_I2C_Mem_Read+0x8a>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b28:	b2f2      	uxtb	r2, r6
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7ff fd66 	bl	80045fe <I2C_TransferConfig>
      Sizetmp = Size;
 8004b32:	4635      	mov	r5, r6
 8004b34:	e7cf      	b.n	8004ad6 <HAL_I2C_Mem_Read+0x86>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b3a:	b2f2      	uxtb	r2, r6
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff fd5d 	bl	80045fe <I2C_TransferConfig>
          Sizetmp = Size;
 8004b44:	4635      	mov	r5, r6
 8004b46:	e7c8      	b.n	8004ada <HAL_I2C_Mem_Read+0x8a>
    }while(Size > 0);
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	d1c6      	bne.n	8004ada <HAL_I2C_Mem_Read+0x8a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8004b4c:	2119      	movs	r1, #25
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f7ff fdd8 	bl	8004704 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b54:	b108      	cbz	r0, 8004b5a <HAL_I2C_Mem_Read+0x10a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b58:	e7ac      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004b66:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004b6a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	2301      	movs	r3, #1
    __HAL_UNLOCK(hi2c);
 8004b76:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_OK;
 8004b7e:	e77b      	b.n	8004a78 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8004b80:	2002      	movs	r0, #2
 8004b82:	e779      	b.n	8004a78 <HAL_I2C_Mem_Read+0x28>

08004b84 <HAL_I2C_GetState>:
  return hi2c->State;
 8004b84:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8004b88:	4770      	bx	lr

08004b8a <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b8a:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004b8c:	f8d1 c000 	ldr.w	ip, [r1]
{
 8004b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b94:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004b96:	6804      	ldr	r4, [r0, #0]
 8004b98:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004b9a:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b9e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004ba0:	68e5      	ldr	r5, [r4, #12]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004ba2:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8004ba6:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004baa:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004bac:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bb0:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004bb4:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bb6:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004bb8:	68e0      	ldr	r0, [r4, #12]
 8004bba:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004bbe:	4430      	add	r0, r6
 8004bc0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004bc4:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004bc6:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004bc8:	68e0      	ldr	r0, [r4, #12]
 8004bca:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004bce:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004bd0:	6898      	ldr	r0, [r3, #8]
 8004bd2:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004bd6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004bd8:	6888      	ldr	r0, [r1, #8]
 8004bda:	68e6      	ldr	r6, [r4, #12]
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004be2:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004be4:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004be6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004bea:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004bec:	6918      	ldr	r0, [r3, #16]
 8004bee:	f020 0007 	bic.w	r0, r0, #7
 8004bf2:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004bf4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004bf6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8004bf8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8004bfc:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004c00:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8004c04:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8004c08:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004c0c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004c10:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8004c14:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c16:	6958      	ldr	r0, [r3, #20]
 8004c18:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004c1c:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c1e:	6948      	ldr	r0, [r1, #20]
 8004c20:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c22:	69d8      	ldr	r0, [r3, #28]
 8004c24:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004c28:	f020 0007 	bic.w	r0, r0, #7
 8004c2c:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c2e:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8004c32:	4305      	orrs	r5, r0
 8004c34:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c36:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c38:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c3a:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c3e:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c40:	b31e      	cbz	r6, 8004c8a <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c42:	2e01      	cmp	r6, #1
 8004c44:	d023      	beq.n	8004c8e <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c46:	1eb0      	subs	r0, r6, #2
 8004c48:	2802      	cmp	r0, #2
 8004c4a:	d922      	bls.n	8004c92 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c4c:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8004c4e:	bf0c      	ite	eq
 8004c50:	2002      	moveq	r0, #2
 8004c52:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c54:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004c56:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c5a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8004c5e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004c60:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c62:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004c64:	4345      	muls	r5, r0
 8004c66:	4378      	muls	r0, r7
 8004c68:	3003      	adds	r0, #3
 8004c6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004c6e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c72:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004c76:	f020 0007 	bic.w	r0, r0, #7
 8004c7a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c7c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c7e:	58a3      	ldr	r3, [r4, r2]
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	50a3      	str	r3, [r4, r2]
}
 8004c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8004c8a:	2004      	movs	r0, #4
 8004c8c:	e7e2      	b.n	8004c54 <LTDC_SetConfig+0xca>
    tmp = 3;
 8004c8e:	2003      	movs	r0, #3
 8004c90:	e7e0      	b.n	8004c54 <LTDC_SetConfig+0xca>
    tmp = 2;
 8004c92:	2002      	movs	r0, #2
 8004c94:	e7de      	b.n	8004c54 <LTDC_SetConfig+0xca>

08004c96 <HAL_LTDC_MspInit>:
}
 8004c96:	4770      	bx	lr

08004c98 <HAL_LTDC_Init>:
{
 8004c98:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d067      	beq.n	8004d70 <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004ca0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004ca4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ca8:	b91b      	cbnz	r3, 8004cb2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004caa:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004cae:	f7ff fff2 	bl	8004c96 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004cc0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cc2:	6999      	ldr	r1, [r3, #24]
 8004cc4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004cc8:	4302      	orrs	r2, r0
 8004cca:	68e0      	ldr	r0, [r4, #12]
 8004ccc:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004cce:	6920      	ldr	r0, [r4, #16]
 8004cd0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8004cd2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cd4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004cd6:	4927      	ldr	r1, [pc, #156]	; (8004d74 <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004cd8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	400a      	ands	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004ce6:	69a0      	ldr	r0, [r4, #24]
 8004ce8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8004cea:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004cec:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	400a      	ands	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004cfa:	6a20      	ldr	r0, [r4, #32]
 8004cfc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8004cfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d00:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	400a      	ands	r2, r1
 8004d06:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004d0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d10:	4302      	orrs	r2, r0
 8004d12:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	4011      	ands	r1, r2
 8004d18:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8004d1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d24:	430a      	orrs	r2, r1
 8004d26:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004d2a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d2e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8004d32:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d36:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d3a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004d44:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004d48:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4e:	f042 0204 	orr.w	r2, r2, #4
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d56:	f042 0202 	orr.w	r2, r2, #2
 8004d5a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d64:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004d66:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d6a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004d70:	2001      	movs	r0, #1
 8004d72:	e7fc      	b.n	8004d6e <HAL_LTDC_Init+0xd6>
 8004d74:	f000f800 	.word	0xf000f800

08004d78 <HAL_LTDC_ConfigLayer>:
{   
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8004d7a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 8004d7e:	4606      	mov	r6, r0
 8004d80:	468c      	mov	ip, r1
 8004d82:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	f04f 0002 	mov.w	r0, #2
 8004d8a:	d01d      	beq.n	8004dc8 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004d8c:	2434      	movs	r4, #52	; 0x34
 8004d8e:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d90:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8004d94:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004d96:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004d9a:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004d9e:	3438      	adds	r4, #56	; 0x38
 8004da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dac:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004dae:	4630      	mov	r0, r6
 8004db0:	4672      	mov	r2, lr
 8004db2:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8004db4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004db6:	f7ff fee8 	bl	8004b8a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004dba:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004dbc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004dbe:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004dc0:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004dc4:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dca <HAL_LTDC_GetState>:
  return hltdc->State;
 8004dca:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_MspInit>:
  * @retval None
  */
void HAL_MspInit(void)
{
 
}
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dd4:	2300      	movs	r3, #0
{
 8004dd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ddc:	4c19      	ldr	r4, [pc, #100]	; (8004e44 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004df8:	f7fe ffca 	bl	8003d90 <HAL_GetTick>
 8004dfc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dfe:	6863      	ldr	r3, [r4, #4]
 8004e00:	03da      	lsls	r2, r3, #15
 8004e02:	d50c      	bpl.n	8004e1e <HAL_PWREx_EnableOverDrive+0x4a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e0c:	f7fe ffc0 	bl	8003d90 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e10:	4c0c      	ldr	r4, [pc, #48]	; (8004e44 <HAL_PWREx_EnableOverDrive+0x70>)
  tickstart = HAL_GetTick();
 8004e12:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	039b      	lsls	r3, r3, #14
 8004e18:	d50a      	bpl.n	8004e30 <HAL_PWREx_EnableOverDrive+0x5c>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e006      	b.n	8004e2c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e1e:	f7fe ffb7 	bl	8003d90 <HAL_GetTick>
 8004e22:	1b40      	subs	r0, r0, r5
 8004e24:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004e28:	d9e9      	bls.n	8004dfe <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
 8004e2a:	2003      	movs	r0, #3
}
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e30:	f7fe ffae 	bl	8003d90 <HAL_GetTick>
 8004e34:	1b40      	subs	r0, r0, r5
 8004e36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004e3a:	d9eb      	bls.n	8004e14 <HAL_PWREx_EnableOverDrive+0x40>
 8004e3c:	e7f5      	b.n	8004e2a <HAL_PWREx_EnableOverDrive+0x56>
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40007000 	.word	0x40007000

08004e48 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e48:	6803      	ldr	r3, [r0, #0]
{
 8004e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4c:	07de      	lsls	r6, r3, #31
{
 8004e4e:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e50:	d458      	bmi.n	8004f04 <HAL_RCC_OscConfig+0xbc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	079c      	lsls	r4, r3, #30
 8004e56:	f100 80c7 	bmi.w	8004fe8 <HAL_RCC_OscConfig+0x1a0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	071a      	lsls	r2, r3, #28
 8004e5e:	f100 8115 	bmi.w	800508c <HAL_RCC_OscConfig+0x244>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	075b      	lsls	r3, r3, #29
 8004e66:	d547      	bpl.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e68:	2300      	movs	r3, #0
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e6a:	4ca5      	ldr	r4, [pc, #660]	; (8005100 <HAL_RCC_OscConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	4ba5      	ldr	r3, [pc, #660]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8004e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	9301      	str	r3, [sp, #4]
 8004e80:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	6023      	str	r3, [r4, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e8a:	f7fe ff81 	bl	8003d90 <HAL_GetTick>
 8004e8e:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	05d9      	lsls	r1, r3, #23
 8004e94:	f140 811f 	bpl.w	80050d6 <HAL_RCC_OscConfig+0x28e>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8004e98:	4c9a      	ldr	r4, [pc, #616]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8004e9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6723      	str	r3, [r4, #112]	; 0x70
 8004ea6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	6723      	str	r3, [r4, #112]	; 0x70
 8004eae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	6723      	str	r3, [r4, #112]	; 0x70
    tickstart = HAL_GetTick();
 8004eb6:	f7fe ff6b 	bl	8003d90 <HAL_GetTick>
 8004eba:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ebe:	079a      	lsls	r2, r3, #30
 8004ec0:	f100 8110 	bmi.w	80050e4 <HAL_RCC_OscConfig+0x29c>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	6723      	str	r3, [r4, #112]	; 0x70
 8004ecc:	68ab      	ldr	r3, [r5, #8]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	f040 810f 	bne.w	80050f2 <HAL_RCC_OscConfig+0x2aa>
 8004ed4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	6723      	str	r3, [r4, #112]	; 0x70
 8004edc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fe ff54 	bl	8003d90 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	4c86      	ldr	r4, [pc, #536]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
      tickstart = HAL_GetTick();
 8004eea:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ef2:	079b      	lsls	r3, r3, #30
 8004ef4:	f140 8123 	bpl.w	800513e <HAL_RCC_OscConfig+0x2f6>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef8:	69aa      	ldr	r2, [r5, #24]
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	f040 8126 	bne.w	800514c <HAL_RCC_OscConfig+0x304>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
 8004f02:	e015      	b.n	8004f30 <HAL_RCC_OscConfig+0xe8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f04:	4b7f      	ldr	r3, [pc, #508]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	f002 020c 	and.w	r2, r2, #12
 8004f0c:	2a04      	cmp	r2, #4
 8004f0e:	d007      	beq.n	8004f20 <HAL_RCC_OscConfig+0xd8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	f002 020c 	and.w	r2, r2, #12
 8004f16:	2a08      	cmp	r2, #8
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0xec>
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0258      	lsls	r0, r3, #9
 8004f1e:	d509      	bpl.n	8004f34 <HAL_RCC_OscConfig+0xec>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f20:	4b78      	ldr	r3, [pc, #480]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	0399      	lsls	r1, r3, #14
 8004f26:	d594      	bpl.n	8004e52 <HAL_RCC_OscConfig+0xa>
 8004f28:	686b      	ldr	r3, [r5, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d191      	bne.n	8004e52 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8004f2e:	2001      	movs	r0, #1
}
 8004f30:	b003      	add	sp, #12
 8004f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8004f34:	4c73      	ldr	r4, [pc, #460]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8004f4e:	f7fe ff1f 	bl	8003d90 <HAL_GetTick>
 8004f52:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	039a      	lsls	r2, r3, #14
 8004f58:	d41e      	bmi.n	8004f98 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	686b      	ldr	r3, [r5, #4]
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f68:	d11e      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x160>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004f7a:	f7fe ff09 	bl	8003d90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	4c61      	ldr	r4, [pc, #388]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8004f80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	039b      	lsls	r3, r3, #14
 8004f86:	f53f af64 	bmi.w	8004e52 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f8a:	f7fe ff01 	bl	8003d90 <HAL_GetTick>
 8004f8e:	1b80      	subs	r0, r0, r6
 8004f90:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004f94:	d9f5      	bls.n	8004f82 <HAL_RCC_OscConfig+0x13a>
 8004f96:	e005      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f98:	f7fe fefa 	bl	8003d90 <HAL_GetTick>
 8004f9c:	1b80      	subs	r0, r0, r6
 8004f9e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004fa2:	d9d7      	bls.n	8004f54 <HAL_RCC_OscConfig+0x10c>
          return HAL_TIMEOUT;
 8004fa4:	2003      	movs	r0, #3
 8004fa6:	e7c3      	b.n	8004f30 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fac:	d103      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x16e>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fb4:	e7dc      	b.n	8004f70 <HAL_RCC_OscConfig+0x128>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	6822      	ldr	r2, [r4, #0]
 8004fc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fc4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1d7      	bne.n	8004f7a <HAL_RCC_OscConfig+0x132>
        tickstart = HAL_GetTick();
 8004fca:	f7fe fee1 	bl	8003d90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fce:	4c4d      	ldr	r4, [pc, #308]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
        tickstart = HAL_GetTick();
 8004fd0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	039f      	lsls	r7, r3, #14
 8004fd6:	f57f af3c 	bpl.w	8004e52 <HAL_RCC_OscConfig+0xa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fda:	f7fe fed9 	bl	8003d90 <HAL_GetTick>
 8004fde:	1b80      	subs	r0, r0, r6
 8004fe0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004fe4:	d9f5      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x18a>
 8004fe6:	e7dd      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fe8:	4b46      	ldr	r3, [pc, #280]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	f012 0f0c 	tst.w	r2, #12
 8004ff0:	d007      	beq.n	8005002 <HAL_RCC_OscConfig+0x1ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	f002 020c 	and.w	r2, r2, #12
 8004ff8:	2a08      	cmp	r2, #8
 8004ffa:	d116      	bne.n	800502a <HAL_RCC_OscConfig+0x1e2>
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	025e      	lsls	r6, r3, #9
 8005000:	d413      	bmi.n	800502a <HAL_RCC_OscConfig+0x1e2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005002:	4b40      	ldr	r3, [pc, #256]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	0794      	lsls	r4, r2, #30
 8005008:	d502      	bpl.n	8005010 <HAL_RCC_OscConfig+0x1c8>
 800500a:	68ea      	ldr	r2, [r5, #12]
 800500c:	2a01      	cmp	r2, #1
 800500e:	d18e      	bne.n	8004f2e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005010:	6818      	ldr	r0, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	22f8      	movs	r2, #248	; 0xf8
 8005014:	fa92 f2a2 	rbit	r2, r2
 8005018:	fab2 f182 	clz	r1, r2
 800501c:	692a      	ldr	r2, [r5, #16]
 800501e:	408a      	lsls	r2, r1
 8005020:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005028:	e717      	b.n	8004e5a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800502a:	68eb      	ldr	r3, [r5, #12]
 800502c:	4c35      	ldr	r4, [pc, #212]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 800502e:	b1e3      	cbz	r3, 800506a <HAL_RCC_OscConfig+0x222>
        __HAL_RCC_HSI_ENABLE();
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005038:	f7fe feaa 	bl	8003d90 <HAL_GetTick>
 800503c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	0798      	lsls	r0, r3, #30
 8005042:	d50c      	bpl.n	800505e <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	6821      	ldr	r1, [r4, #0]
 8005046:	23f8      	movs	r3, #248	; 0xf8
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	fab3 f283 	clz	r2, r3
 8005050:	692b      	ldr	r3, [r5, #16]
 8005052:	4093      	lsls	r3, r2
 8005054:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8005058:	4313      	orrs	r3, r2
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	e6fd      	b.n	8004e5a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800505e:	f7fe fe97 	bl	8003d90 <HAL_GetTick>
 8005062:	1b80      	subs	r0, r0, r6
 8005064:	2864      	cmp	r0, #100	; 0x64
 8005066:	d9ea      	bls.n	800503e <HAL_RCC_OscConfig+0x1f6>
 8005068:	e79c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005072:	f7fe fe8d 	bl	8003d90 <HAL_GetTick>
 8005076:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	0799      	lsls	r1, r3, #30
 800507c:	f57f aeed 	bpl.w	8004e5a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005080:	f7fe fe86 	bl	8003d90 <HAL_GetTick>
 8005084:	1b80      	subs	r0, r0, r6
 8005086:	2864      	cmp	r0, #100	; 0x64
 8005088:	d9f6      	bls.n	8005078 <HAL_RCC_OscConfig+0x230>
 800508a:	e78b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800508c:	696b      	ldr	r3, [r5, #20]
 800508e:	4c1d      	ldr	r4, [pc, #116]	; (8005104 <HAL_RCC_OscConfig+0x2bc>)
 8005090:	b183      	cbz	r3, 80050b4 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_LSI_ENABLE();
 8005092:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 800509a:	f7fe fe79 	bl	8003d90 <HAL_GetTick>
 800509e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80050a2:	079f      	lsls	r7, r3, #30
 80050a4:	f53f aedd 	bmi.w	8004e62 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fe fe72 	bl	8003d90 <HAL_GetTick>
 80050ac:	1b80      	subs	r0, r0, r6
 80050ae:	2864      	cmp	r0, #100	; 0x64
 80050b0:	d9f6      	bls.n	80050a0 <HAL_RCC_OscConfig+0x258>
 80050b2:	e777      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_LSI_DISABLE();
 80050b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 80050bc:	f7fe fe68 	bl	8003d90 <HAL_GetTick>
 80050c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80050c4:	0798      	lsls	r0, r3, #30
 80050c6:	f57f aecc 	bpl.w	8004e62 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ca:	f7fe fe61 	bl	8003d90 <HAL_GetTick>
 80050ce:	1b80      	subs	r0, r0, r6
 80050d0:	2864      	cmp	r0, #100	; 0x64
 80050d2:	d9f6      	bls.n	80050c2 <HAL_RCC_OscConfig+0x27a>
 80050d4:	e766      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fe fe5b 	bl	8003d90 <HAL_GetTick>
 80050da:	1b80      	subs	r0, r0, r6
 80050dc:	2864      	cmp	r0, #100	; 0x64
 80050de:	f67f aed7 	bls.w	8004e90 <HAL_RCC_OscConfig+0x48>
 80050e2:	e75f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e4:	f7fe fe54 	bl	8003d90 <HAL_GetTick>
 80050e8:	1b80      	subs	r0, r0, r6
 80050ea:	42b8      	cmp	r0, r7
 80050ec:	f67f aee6 	bls.w	8004ebc <HAL_RCC_OscConfig+0x74>
 80050f0:	e758      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d108      	bne.n	8005108 <HAL_RCC_OscConfig+0x2c0>
 80050f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	e6ed      	b.n	8004eda <HAL_RCC_OscConfig+0x92>
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000
 8005104:	40023800 	.word	0x40023800
 8005108:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800510a:	f022 0204 	bic.w	r2, r2, #4
 800510e:	6722      	str	r2, [r4, #112]	; 0x70
 8005110:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005118:	2b00      	cmp	r3, #0
 800511a:	f47f aee3 	bne.w	8004ee4 <HAL_RCC_OscConfig+0x9c>
      tickstart = HAL_GetTick();
 800511e:	f7fe fe37 	bl	8003d90 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005122:	4c39      	ldr	r4, [pc, #228]	; (8005208 <HAL_RCC_OscConfig+0x3c0>)
      tickstart = HAL_GetTick();
 8005124:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005126:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800512c:	0798      	lsls	r0, r3, #30
 800512e:	f57f aee3 	bpl.w	8004ef8 <HAL_RCC_OscConfig+0xb0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fe fe2d 	bl	8003d90 <HAL_GetTick>
 8005136:	1b80      	subs	r0, r0, r6
 8005138:	42b8      	cmp	r0, r7
 800513a:	d9f6      	bls.n	800512a <HAL_RCC_OscConfig+0x2e2>
 800513c:	e732      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fe fe27 	bl	8003d90 <HAL_GetTick>
 8005142:	1b80      	subs	r0, r0, r6
 8005144:	42b8      	cmp	r0, r7
 8005146:	f67f aed3 	bls.w	8004ef0 <HAL_RCC_OscConfig+0xa8>
 800514a:	e72b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800514c:	4c2e      	ldr	r4, [pc, #184]	; (8005208 <HAL_RCC_OscConfig+0x3c0>)
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b08      	cmp	r3, #8
 8005156:	f43f aeea 	beq.w	8004f2e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 800515a:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800515c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800515e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005162:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005164:	d142      	bne.n	80051ec <HAL_RCC_OscConfig+0x3a4>
        tickstart = HAL_GetTick();
 8005166:	f7fe fe13 	bl	8003d90 <HAL_GetTick>
 800516a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	0199      	lsls	r1, r3, #6
 8005170:	d436      	bmi.n	80051e0 <HAL_RCC_OscConfig+0x398>
 8005172:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8005176:	fa96 f6a6 	rbit	r6, r6
 800517a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800517e:	fab6 f686 	clz	r6, r6
 8005182:	fa92 f2a2 	rbit	r2, r2
 8005186:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800518a:	fab2 f082 	clz	r0, r2
 800518e:	fa91 f1a1 	rbit	r1, r1
 8005192:	e9d5 2307 	ldrd	r2, r3, [r5, #28]
 8005196:	fab1 f181 	clz	r1, r1
 800519a:	4313      	orrs	r3, r2
 800519c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800519e:	fa02 f606 	lsl.w	r6, r2, r6
 80051a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80051a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051a8:	0852      	lsrs	r2, r2, #1
 80051aa:	4333      	orrs	r3, r6
 80051ac:	3a01      	subs	r2, #1
 80051ae:	4082      	lsls	r2, r0
 80051b0:	4313      	orrs	r3, r2
 80051b2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80051b4:	fa02 f101 	lsl.w	r1, r2, r1
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80051c4:	f7fe fde4 	bl	8003d90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	4c0f      	ldr	r4, [pc, #60]	; (8005208 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80051ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	019a      	lsls	r2, r3, #6
 80051d0:	f53f ae96 	bmi.w	8004f00 <HAL_RCC_OscConfig+0xb8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fe fddc 	bl	8003d90 <HAL_GetTick>
 80051d8:	1b40      	subs	r0, r0, r5
 80051da:	2864      	cmp	r0, #100	; 0x64
 80051dc:	d9f6      	bls.n	80051cc <HAL_RCC_OscConfig+0x384>
 80051de:	e6e1      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fe fdd6 	bl	8003d90 <HAL_GetTick>
 80051e4:	1b80      	subs	r0, r0, r6
 80051e6:	2864      	cmp	r0, #100	; 0x64
 80051e8:	d9c0      	bls.n	800516c <HAL_RCC_OscConfig+0x324>
 80051ea:	e6db      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 80051ec:	f7fe fdd0 	bl	8003d90 <HAL_GetTick>
 80051f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	019b      	lsls	r3, r3, #6
 80051f6:	f57f ae83 	bpl.w	8004f00 <HAL_RCC_OscConfig+0xb8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fa:	f7fe fdc9 	bl	8003d90 <HAL_GetTick>
 80051fe:	1b40      	subs	r0, r0, r5
 8005200:	2864      	cmp	r0, #100	; 0x64
 8005202:	d9f6      	bls.n	80051f2 <HAL_RCC_OscConfig+0x3aa>
 8005204:	e6ce      	b.n	8004fa4 <HAL_RCC_OscConfig+0x15c>
 8005206:	bf00      	nop
 8005208:	40023800 	.word	0x40023800

0800520c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800520c:	4a6b      	ldr	r2, [pc, #428]	; (80053bc <HAL_RCC_ClockConfig+0x1b0>)
 800520e:	6813      	ldr	r3, [r2, #0]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	428b      	cmp	r3, r1
{
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800521e:	d26c      	bcs.n	80052fa <HAL_RCC_ClockConfig+0xee>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005220:	6813      	ldr	r3, [r2, #0]
 8005222:	f023 030f 	bic.w	r3, r3, #15
 8005226:	430b      	orrs	r3, r1
 8005228:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	428b      	cmp	r3, r1
 8005232:	d002      	beq.n	800523a <HAL_RCC_ClockConfig+0x2e>
    {
      return HAL_ERROR;
 8005234:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8005236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523a:	6802      	ldr	r2, [r0, #0]
 800523c:	0796      	lsls	r6, r2, #30
 800523e:	d506      	bpl.n	800524e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	495f      	ldr	r1, [pc, #380]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005242:	6880      	ldr	r0, [r0, #8]
 8005244:	688b      	ldr	r3, [r1, #8]
 8005246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800524a:	4303      	orrs	r3, r0
 800524c:	608b      	str	r3, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	07d5      	lsls	r5, r2, #31
 8005250:	d412      	bmi.n	8005278 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	0750      	lsls	r0, r2, #29
 8005256:	f100 80a9 	bmi.w	80053ac <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	0713      	lsls	r3, r2, #28
 800525c:	d507      	bpl.n	800526e <HAL_RCC_ClockConfig+0x62>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800525e:	4a58      	ldr	r2, [pc, #352]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005260:	6921      	ldr	r1, [r4, #16]
 8005262:	6893      	ldr	r3, [r2, #8]
 8005264:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005268:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800526c:	6093      	str	r3, [r2, #8]
  HAL_InitTick (TICK_INT_PRIORITY);
 800526e:	200f      	movs	r0, #15
 8005270:	f7fe fd62 	bl	8003d38 <HAL_InitTick>
  return HAL_OK;
 8005274:	2000      	movs	r0, #0
 8005276:	e7de      	b.n	8005236 <HAL_RCC_ClockConfig+0x2a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
 800527c:	2901      	cmp	r1, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005280:	d11c      	bne.n	80052bc <HAL_RCC_ClockConfig+0xb0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005286:	d0d5      	beq.n	8005234 <HAL_RCC_ClockConfig+0x28>
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005288:	689a      	ldr	r2, [r3, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528a:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800528e:	4e4c      	ldr	r6, [pc, #304]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005290:	f022 0203 	bic.w	r2, r2, #3
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
      tickstart = HAL_GetTick();
 8005298:	f7fe fd7a 	bl	8003d90 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800529c:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 800529e:	4605      	mov	r5, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d113      	bne.n	80052cc <HAL_RCC_ClockConfig+0xc0>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052a4:	68b3      	ldr	r3, [r6, #8]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d0d1      	beq.n	8005252 <HAL_RCC_ClockConfig+0x46>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ae:	f7fe fd6f 	bl	8003d90 <HAL_GetTick>
 80052b2:	1b40      	subs	r0, r0, r5
 80052b4:	42b8      	cmp	r0, r7
 80052b6:	d9f5      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x98>
            return HAL_TIMEOUT;
 80052b8:	2003      	movs	r0, #3
 80052ba:	e7bc      	b.n	8005236 <HAL_RCC_ClockConfig+0x2a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052bc:	2902      	cmp	r1, #2
 80052be:	d102      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80052c4:	e7df      	b.n	8005286 <HAL_RCC_ClockConfig+0x7a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c6:	f012 0f02 	tst.w	r2, #2
 80052ca:	e7dc      	b.n	8005286 <HAL_RCC_ClockConfig+0x7a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d10f      	bne.n	80052f0 <HAL_RCC_ClockConfig+0xe4>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d0:	68b3      	ldr	r3, [r6, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d0bb      	beq.n	8005252 <HAL_RCC_ClockConfig+0x46>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052da:	f7fe fd59 	bl	8003d90 <HAL_GetTick>
 80052de:	1b40      	subs	r0, r0, r5
 80052e0:	42b8      	cmp	r0, r7
 80052e2:	d9f5      	bls.n	80052d0 <HAL_RCC_ClockConfig+0xc4>
 80052e4:	e7e8      	b.n	80052b8 <HAL_RCC_ClockConfig+0xac>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e6:	f7fe fd53 	bl	8003d90 <HAL_GetTick>
 80052ea:	1b40      	subs	r0, r0, r5
 80052ec:	42b8      	cmp	r0, r7
 80052ee:	d8e3      	bhi.n	80052b8 <HAL_RCC_ClockConfig+0xac>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80052f0:	68b3      	ldr	r3, [r6, #8]
 80052f2:	f013 0f0c 	tst.w	r3, #12
 80052f6:	d1f6      	bne.n	80052e6 <HAL_RCC_ClockConfig+0xda>
 80052f8:	e7ab      	b.n	8005252 <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fa:	6802      	ldr	r2, [r0, #0]
 80052fc:	0791      	lsls	r1, r2, #30
 80052fe:	d506      	bpl.n	800530e <HAL_RCC_ClockConfig+0x102>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005300:	492f      	ldr	r1, [pc, #188]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
 8005302:	6880      	ldr	r0, [r0, #8]
 8005304:	688b      	ldr	r3, [r1, #8]
 8005306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530a:	4303      	orrs	r3, r0
 800530c:	608b      	str	r3, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530e:	07d2      	lsls	r2, r2, #31
 8005310:	d40b      	bmi.n	800532a <HAL_RCC_ClockConfig+0x11e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <HAL_RCC_ClockConfig+0x1b0>)
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	f023 030f 	bic.w	r3, r3, #15
 800531a:	432b      	orrs	r3, r5
 800531c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800531e:	6813      	ldr	r3, [r2, #0]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	42ab      	cmp	r3, r5
 8005326:	d185      	bne.n	8005234 <HAL_RCC_ClockConfig+0x28>
 8005328:	e793      	b.n	8005252 <HAL_RCC_ClockConfig+0x46>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532a:	6861      	ldr	r1, [r4, #4]
 800532c:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
 800532e:	2901      	cmp	r1, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005330:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	d11c      	bne.n	800536e <HAL_RCC_ClockConfig+0x162>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005334:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005338:	f43f af7c 	beq.w	8005234 <HAL_RCC_ClockConfig+0x28>
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533c:	689a      	ldr	r2, [r3, #8]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005342:	4f1f      	ldr	r7, [pc, #124]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005344:	f022 0203 	bic.w	r2, r2, #3
 8005348:	430a      	orrs	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
      tickstart = HAL_GetTick();
 800534c:	f7fe fd20 	bl	8003d90 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005350:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8005352:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005354:	2b01      	cmp	r3, #1
 8005356:	d112      	bne.n	800537e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 030c 	and.w	r3, r3, #12
 800535e:	2b04      	cmp	r3, #4
 8005360:	d0d7      	beq.n	8005312 <HAL_RCC_ClockConfig+0x106>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005362:	f7fe fd15 	bl	8003d90 <HAL_GetTick>
 8005366:	1b80      	subs	r0, r0, r6
 8005368:	4540      	cmp	r0, r8
 800536a:	d9f5      	bls.n	8005358 <HAL_RCC_ClockConfig+0x14c>
 800536c:	e7a4      	b.n	80052b8 <HAL_RCC_ClockConfig+0xac>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800536e:	2902      	cmp	r1, #2
 8005370:	d102      	bne.n	8005378 <HAL_RCC_ClockConfig+0x16c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005372:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005376:	e7df      	b.n	8005338 <HAL_RCC_ClockConfig+0x12c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005378:	f012 0f02 	tst.w	r2, #2
 800537c:	e7dc      	b.n	8005338 <HAL_RCC_ClockConfig+0x12c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800537e:	2b02      	cmp	r3, #2
 8005380:	d10f      	bne.n	80053a2 <HAL_RCC_ClockConfig+0x196>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d0c2      	beq.n	8005312 <HAL_RCC_ClockConfig+0x106>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538c:	f7fe fd00 	bl	8003d90 <HAL_GetTick>
 8005390:	1b80      	subs	r0, r0, r6
 8005392:	4540      	cmp	r0, r8
 8005394:	d9f5      	bls.n	8005382 <HAL_RCC_ClockConfig+0x176>
 8005396:	e78f      	b.n	80052b8 <HAL_RCC_ClockConfig+0xac>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005398:	f7fe fcfa 	bl	8003d90 <HAL_GetTick>
 800539c:	1b80      	subs	r0, r0, r6
 800539e:	4540      	cmp	r0, r8
 80053a0:	d88a      	bhi.n	80052b8 <HAL_RCC_ClockConfig+0xac>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f013 0f0c 	tst.w	r3, #12
 80053a8:	d1f6      	bne.n	8005398 <HAL_RCC_ClockConfig+0x18c>
 80053aa:	e7b2      	b.n	8005312 <HAL_RCC_ClockConfig+0x106>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ac:	4904      	ldr	r1, [pc, #16]	; (80053c0 <HAL_RCC_ClockConfig+0x1b4>)
 80053ae:	68e0      	ldr	r0, [r4, #12]
 80053b0:	688b      	ldr	r3, [r1, #8]
 80053b2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80053b6:	4303      	orrs	r3, r0
 80053b8:	608b      	str	r3, [r1, #8]
 80053ba:	e74e      	b.n	800525a <HAL_RCC_ClockConfig+0x4e>
 80053bc:	40023c00 	.word	0x40023c00
 80053c0:	40023800 	.word	0x40023800

080053c4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_RCC_GetSysClockFreq+0x68>)
 80053c6:	6893      	ldr	r3, [r2, #8]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b04      	cmp	r3, #4
{
 80053ce:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d0:	d003      	beq.n	80053da <HAL_RCC_GetSysClockFreq+0x16>
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d003      	beq.n	80053de <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d6:	4816      	ldr	r0, [pc, #88]	; (8005430 <HAL_RCC_GetSysClockFreq+0x6c>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80053d8:	e000      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80053da:	4816      	ldr	r0, [pc, #88]	; (8005434 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80053dc:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053de:	6851      	ldr	r1, [r2, #4]
 80053e0:	f647 74c0 	movw	r4, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053e4:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80053ee:	6853      	ldr	r3, [r2, #4]
 80053f0:	fa94 f0a4 	rbit	r0, r4
 80053f4:	fab0 f080 	clz	r0, r0
 80053f8:	ea03 0304 	and.w	r3, r3, r4
 80053fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005400:	fa23 f300 	lsr.w	r3, r3, r0
 8005404:	bf14      	ite	ne
 8005406:	480b      	ldrne	r0, [pc, #44]	; (8005434 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005408:	4809      	ldreq	r0, [pc, #36]	; (8005430 <HAL_RCC_GetSysClockFreq+0x6c>)
 800540a:	fbb0 f0f1 	udiv	r0, r0, r1
 800540e:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCC_GetSysClockFreq+0x68>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	fa92 f2a2 	rbit	r2, r2
 8005418:	fab2 f282 	clz	r2, r2
 800541c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005420:	40d3      	lsrs	r3, r2
 8005422:	3301      	adds	r3, #1
 8005424:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005426:	fbb0 f0f3 	udiv	r0, r0, r3
 800542a:	e7d7      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x18>
 800542c:	40023800 	.word	0x40023800
 8005430:	00f42400 	.word	0x00f42400
 8005434:	017d7840 	.word	0x017d7840

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800543a:	f7ff ffc3 	bl	80053c4 <HAL_RCC_GetSysClockFreq>
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <HAL_RCC_GetHCLKFreq+0x28>)
 8005440:	22f0      	movs	r2, #240	; 0xf0
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	fa92 f2a2 	rbit	r2, r2
 8005448:	fab2 f282 	clz	r2, r2
 800544c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005450:	40d3      	lsrs	r3, r2
 8005452:	4a04      	ldr	r2, [pc, #16]	; (8005464 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005454:	5cd3      	ldrb	r3, [r2, r3]
 8005456:	40d8      	lsrs	r0, r3
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_RCC_GetHCLKFreq+0x30>)
 800545a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800545c:	bd08      	pop	{r3, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	08050b12 	.word	0x08050b12
 8005468:	2000009c 	.word	0x2000009c

0800546c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800546c:	6803      	ldr	r3, [r0, #0]
{
 800546e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005472:	f013 0601 	ands.w	r6, r3, #1
{
 8005476:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005478:	d00b      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800547a:	4ab9      	ldr	r2, [pc, #740]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800547c:	6891      	ldr	r1, [r2, #8]
 800547e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005482:	6091      	str	r1, [r2, #8]
 8005484:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005486:	6891      	ldr	r1, [r2, #8]
 8005488:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800548a:	fab6 f686 	clz	r6, r6
 800548e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005490:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005492:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8005496:	d012      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005498:	49b1      	ldr	r1, [pc, #708]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800549a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800549c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1; 
 80054a8:	bf08      	it	eq
 80054aa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ac:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054b0:	bf16      	itet	ne
 80054b2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80054b6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054b8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ba:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054be:	02d9      	lsls	r1, r3, #11
 80054c0:	d510      	bpl.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054c2:	48a7      	ldr	r0, [pc, #668]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054c6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054ca:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80054d2:	ea42 0201 	orr.w	r2, r2, r1
 80054d6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054da:	f000 8213 	beq.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80054de:	2900      	cmp	r1, #0
 80054e0:	bf08      	it	eq
 80054e2:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80054e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80054e8:	bf18      	it	ne
 80054ea:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ec:	069a      	lsls	r2, r3, #26
 80054ee:	d543      	bpl.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054f0:	2300      	movs	r3, #0
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054f2:	4f9c      	ldr	r7, [pc, #624]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	4b9a      	ldr	r3, [pc, #616]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005510:	603b      	str	r3, [r7, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005512:	f7fe fc3d 	bl	8003d90 <HAL_GetTick>
 8005516:	4680      	mov	r8, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	05db      	lsls	r3, r3, #23
 800551c:	f140 81f4 	bpl.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x49c>
      {
        return HAL_TIMEOUT;
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005520:	4f8f      	ldr	r7, [pc, #572]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005522:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005526:	4053      	eors	r3, r2
 8005528:	f413 7f40 	tst.w	r3, #768	; 0x300
 800552c:	d024      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800552e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005532:	f422 7140 	bic.w	r1, r2, #768	; 0x300
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8005536:	0790      	lsls	r0, r2, #30
      __HAL_RCC_BACKUPRESET_FORCE();
 8005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553c:	673b      	str	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800553e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005544:	673b      	str	r3, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005546:	6739      	str	r1, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8005548:	f100 81e9 	bmi.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 800554c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800554e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005552:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005556:	4a82      	ldr	r2, [pc, #520]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005558:	f040 81f1 	bne.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800555c:	6891      	ldr	r1, [r2, #8]
 800555e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005562:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005566:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800556a:	4301      	orrs	r1, r0
 800556c:	6091      	str	r1, [r2, #8]
 800556e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005572:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005574:	430b      	orrs	r3, r1
 8005576:	6713      	str	r3, [r2, #112]	; 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	06da      	lsls	r2, r3, #27
 800557c:	d50c      	bpl.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800557e:	4a78      	ldr	r2, [pc, #480]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005580:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005584:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005588:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800558c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005590:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005592:	4301      	orrs	r1, r0
 8005594:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005598:	045f      	lsls	r7, r3, #17
 800559a:	d508      	bpl.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800559c:	4970      	ldr	r1, [pc, #448]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800559e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80055a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80055a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80055a8:	4302      	orrs	r2, r0
 80055aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ae:	0418      	lsls	r0, r3, #16
 80055b0:	d508      	bpl.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055b2:	496b      	ldr	r1, [pc, #428]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055b4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80055b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80055ba:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80055be:	4302      	orrs	r2, r0
 80055c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c4:	03d9      	lsls	r1, r3, #15
 80055c6:	d508      	bpl.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055c8:	4965      	ldr	r1, [pc, #404]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80055cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80055d0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80055d4:	4302      	orrs	r2, r0
 80055d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055da:	039a      	lsls	r2, r3, #14
 80055dc:	d508      	bpl.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055de:	4960      	ldr	r1, [pc, #384]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055e0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80055e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80055e6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80055ea:	4302      	orrs	r2, r0
 80055ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055f0:	065f      	lsls	r7, r3, #25
 80055f2:	d508      	bpl.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f4:	495a      	ldr	r1, [pc, #360]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80055f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80055fc:	f022 0203 	bic.w	r2, r2, #3
 8005600:	4302      	orrs	r2, r0
 8005602:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005606:	0618      	lsls	r0, r3, #24
 8005608:	d508      	bpl.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800560a:	4955      	ldr	r1, [pc, #340]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800560e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005612:	f022 020c 	bic.w	r2, r2, #12
 8005616:	4302      	orrs	r2, r0
 8005618:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800561c:	05d9      	lsls	r1, r3, #23
 800561e:	d508      	bpl.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005620:	494f      	ldr	r1, [pc, #316]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005622:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005624:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005628:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800562c:	4302      	orrs	r2, r0
 800562e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005632:	059a      	lsls	r2, r3, #22
 8005634:	d508      	bpl.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005636:	494a      	ldr	r1, [pc, #296]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005638:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800563a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800563e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005642:	4302      	orrs	r2, r0
 8005644:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005648:	055f      	lsls	r7, r3, #21
 800564a:	d508      	bpl.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800564c:	4944      	ldr	r1, [pc, #272]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005650:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005654:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005658:	4302      	orrs	r2, r0
 800565a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800565e:	0518      	lsls	r0, r3, #20
 8005660:	d508      	bpl.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005662:	493f      	ldr	r1, [pc, #252]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005666:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800566a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800566e:	4302      	orrs	r2, r0
 8005670:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005674:	04d9      	lsls	r1, r3, #19
 8005676:	d508      	bpl.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005678:	4939      	ldr	r1, [pc, #228]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800567a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800567c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005680:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005684:	4302      	orrs	r2, r0
 8005686:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800568a:	049a      	lsls	r2, r3, #18
 800568c:	d508      	bpl.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800568e:	4934      	ldr	r1, [pc, #208]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005690:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005692:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005696:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800569a:	4302      	orrs	r2, r0
 800569c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056a0:	025f      	lsls	r7, r3, #9
 80056a2:	d508      	bpl.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056a4:	492e      	ldr	r1, [pc, #184]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056a6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80056a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80056ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80056b0:	4302      	orrs	r2, r0
 80056b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056b6:	0298      	lsls	r0, r3, #10
 80056b8:	d50c      	bpl.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056ba:	4829      	ldr	r0, [pc, #164]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056bc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80056be:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80056c2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056c6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 80056ca:	bf08      	it	eq
 80056cc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056ce:	430a      	orrs	r2, r1
 80056d0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 80056d4:	f013 0f08 	tst.w	r3, #8
 80056d8:	bf18      	it	ne
 80056da:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056dc:	0359      	lsls	r1, r3, #13
 80056de:	d508      	bpl.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056e0:	491f      	ldr	r1, [pc, #124]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056e2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80056e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80056e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056ec:	4302      	orrs	r2, r0
 80056ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	d509      	bpl.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056f6:	491a      	ldr	r1, [pc, #104]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80056fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005700:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005704:	4302      	orrs	r2, r0
 8005706:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800570a:	2e01      	cmp	r6, #1
 800570c:	f000 811e 	beq.w	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005714:	f000 811a 	beq.w	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005718:	2d01      	cmp	r5, #1
 800571a:	f040 80f1 	bne.w	8005900 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800571e:	4d10      	ldr	r5, [pc, #64]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005726:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fe fb32 	bl	8003d90 <HAL_GetTick>
 800572c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800572e:	682b      	ldr	r3, [r5, #0]
 8005730:	009f      	lsls	r7, r3, #2
 8005732:	f100 822a 	bmi.w	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x71e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005736:	6821      	ldr	r1, [r4, #0]
 8005738:	030e      	lsls	r6, r1, #12
 800573a:	d501      	bpl.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800573c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800573e:	b123      	cbz	r3, 800574a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005740:	02cd      	lsls	r5, r1, #11
 8005742:	d54d      	bpl.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d14a      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800574a:	4d05      	ldr	r5, [pc, #20]	; (8005760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800574c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8005750:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 8005754:	fa9c feac 	rbit	lr, ip
 8005758:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800575c:	e004      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	40007000 	.word	0x40007000
 8005768:	fabe fe8e 	clz	lr, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800576c:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8005770:	fa96 f7a6 	rbit	r7, r6
 8005774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005778:	fab7 f787 	clz	r7, r7
 800577c:	fa93 f3a3 	rbit	r3, r3
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005780:	fab3 f983 	clz	r9, r3
 8005784:	fa9c fcac 	rbit	ip, ip
 8005788:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 800578c:	fabc fc8c 	clz	ip, ip
 8005790:	fa98 f8a8 	rbit	r8, r8
 8005794:	fab8 f888 	clz	r8, r8
 8005798:	fa96 f6a6 	rbit	r6, r6
 800579c:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800579e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80057a2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057a6:	fab6 f686 	clz	r6, r6
 80057aa:	fa03 f909 	lsl.w	r9, r3, r9
 80057ae:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80057b0:	fa20 f00e 	lsr.w	r0, r0, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80057b4:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057b6:	fa03 f808 	lsl.w	r8, r3, r8
 80057ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80057be:	40b2      	lsls	r2, r6
 80057c0:	ea49 0308 	orr.w	r3, r9, r8
 80057c4:	4303      	orrs	r3, r0
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057cc:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80057d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80057d2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80057d6:	3a01      	subs	r2, #1
 80057d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80057dc:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057e0:	0288      	lsls	r0, r1, #10
 80057e2:	d53e      	bpl.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80057e4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80057e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ea:	d13a      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80057ec:	4d56      	ldr	r5, [pc, #344]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80057ee:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 80057f2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 80057f6:	fa9c feac 	rbit	lr, ip
 80057fa:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80057fe:	fabe fe8e 	clz	lr, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005802:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8005806:	fa96 f7a6 	rbit	r7, r6
 800580a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800580e:	fab7 f787 	clz	r7, r7
 8005812:	fa93 f3a3 	rbit	r3, r3
 8005816:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800581a:	fab3 f983 	clz	r9, r3
 800581e:	fa98 f8a8 	rbit	r8, r8
 8005822:	fab8 f888 	clz	r8, r8
 8005826:	fa9c fcac 	rbit	ip, ip
 800582a:	fabc fc8c 	clz	ip, ip
 800582e:	fa96 f6a6 	rbit	r6, r6
 8005832:	6963      	ldr	r3, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005834:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005838:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800583c:	fab6 f686 	clz	r6, r6
 8005840:	fa03 f909 	lsl.w	r9, r3, r9
 8005844:	6a23      	ldr	r3, [r4, #32]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005846:	fa20 f00e 	lsr.w	r0, r0, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 800584a:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800584c:	fa03 f808 	lsl.w	r8, r3, r8
 8005850:	fa00 f00c 	lsl.w	r0, r0, ip
 8005854:	40b2      	lsls	r2, r6
 8005856:	ea49 0308 	orr.w	r3, r9, r8
 800585a:	4303      	orrs	r3, r0
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005862:	070a      	lsls	r2, r1, #28
 8005864:	d540      	bpl.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005866:	4838      	ldr	r0, [pc, #224]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8005868:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 800586c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005870:	fa95 f6a5 	rbit	r6, r5
 8005874:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8005878:	fab6 f686 	clz	r6, r6
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800587c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8005880:	fa9c f8ac 	rbit	r8, ip
 8005884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005888:	fab8 f888 	clz	r8, r8
 800588c:	fa93 f3a3 	rbit	r3, r3
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005890:	fab3 f783 	clz	r7, r3
 8005894:	fa9c fcac 	rbit	ip, ip
 8005898:	fabc fc8c 	clz	ip, ip
 800589c:	fa95 f5a5 	rbit	r5, r5
 80058a0:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 80058a4:	fab5 f585 	clz	r5, r5
 80058a8:	fa9e feae 	rbit	lr, lr
 80058ac:	6963      	ldr	r3, [r4, #20]
 80058ae:	fabe fe8e 	clz	lr, lr
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80058b2:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80058b6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ba:	40bb      	lsls	r3, r7
 80058bc:	69e7      	ldr	r7, [r4, #28]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80058be:	fa21 f108 	lsr.w	r1, r1, r8
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80058c2:	40f2      	lsrs	r2, r6
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058c4:	fa07 f70e 	lsl.w	r7, r7, lr
 80058c8:	fa01 f10c 	lsl.w	r1, r1, ip
 80058cc:	40aa      	lsls	r2, r5
 80058ce:	433b      	orrs	r3, r7
 80058d0:	430b      	orrs	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058d8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80058dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058e8:	4c17      	ldr	r4, [pc, #92]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f2:	f7fe fa4d 	bl	8003d90 <HAL_GetTick>
 80058f6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	f140 814c 	bpl.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x72c>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005900:	2000      	movs	r0, #0
 8005902:	e009      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      plli2sused = 1; 
 8005904:	2601      	movs	r6, #1
 8005906:	e5ed      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005908:	f7fe fa42 	bl	8003d90 <HAL_GetTick>
 800590c:	eba0 0008 	sub.w	r0, r0, r8
 8005910:	2864      	cmp	r0, #100	; 0x64
 8005912:	f67f ae01 	bls.w	8005518 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005916:	2003      	movs	r0, #3
}
 8005918:	b002      	add	sp, #8
 800591a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 800591e:	f7fe fa37 	bl	8003d90 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005922:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005926:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800592a:	0799      	lsls	r1, r3, #30
 800592c:	f53f ae0e 	bmi.w	800554c <HAL_RCCEx_PeriphCLKConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005930:	f7fe fa2e 	bl	8003d90 <HAL_GetTick>
 8005934:	eba0 0008 	sub.w	r0, r0, r8
 8005938:	4548      	cmp	r0, r9
 800593a:	d9f5      	bls.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800593c:	e7eb      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 800593e:	6891      	ldr	r1, [r2, #8]
 8005940:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005944:	e612      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800
    __HAL_RCC_PLLI2S_DISABLE();  
 800594c:	4e96      	ldr	r6, [pc, #600]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800594e:	6833      	ldr	r3, [r6, #0]
 8005950:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005954:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005956:	f7fe fa1b 	bl	8003d90 <HAL_GetTick>
 800595a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	f100 810c 	bmi.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x710>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	07d7      	lsls	r7, r2, #31
 8005968:	d53c      	bpl.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
 800596a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800596c:	bbd3      	cbnz	r3, 80059e4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800596e:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8005972:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8005976:	fa9e f8ae 	rbit	r8, lr
 800597a:	f04f 6770 	mov.w	r7, #251658240	; 0xf000000
 800597e:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005982:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8005986:	fa97 fca7 	rbit	ip, r7
 800598a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800598e:	fabc fc8c 	clz	ip, ip
 8005992:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005996:	fab3 fa83 	clz	sl, r3
 800599a:	fa9e feae 	rbit	lr, lr
 800599e:	fabe fe8e 	clz	lr, lr
 80059a2:	fa97 f7a7 	rbit	r7, r7
 80059a6:	f04f 49e0 	mov.w	r9, #1879048192	; 0x70000000
 80059aa:	fab7 f787 	clz	r7, r7
 80059ae:	fa99 f9a9 	rbit	r9, r9
 80059b2:	6863      	ldr	r3, [r4, #4]
 80059b4:	fab9 f989 	clz	r9, r9
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80059b8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80059bc:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059c0:	fa03 fa0a 	lsl.w	sl, r3, sl
 80059c4:	68a3      	ldr	r3, [r4, #8]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80059c6:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80059ca:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059ce:	fa03 f909 	lsl.w	r9, r3, r9
 80059d2:	fa00 f00e 	lsl.w	r0, r0, lr
 80059d6:	40b9      	lsls	r1, r7
 80059d8:	ea4a 0309 	orr.w	r3, sl, r9
 80059dc:	4303      	orrs	r3, r0
 80059de:	430b      	orrs	r3, r1
 80059e0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059e4:	0316      	lsls	r6, r2, #12
 80059e6:	d503      	bpl.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80059e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ee:	d005      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x590>
 80059f0:	02d0      	lsls	r0, r2, #11
 80059f2:	d548      	bpl.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80059f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fa:	d144      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80059fc:	4e6a      	ldr	r6, [pc, #424]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80059fe:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 8005a02:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8005a06:	fa9e f8ae 	rbit	r8, lr
 8005a0a:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 8005a0e:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a12:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8005a16:	fa97 fca7 	rbit	ip, r7
 8005a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a1e:	fabc fc8c 	clz	ip, ip
 8005a22:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a26:	fab3 fa83 	clz	sl, r3
 8005a2a:	fa9e feae 	rbit	lr, lr
 8005a2e:	f04f 6970 	mov.w	r9, #251658240	; 0xf000000
 8005a32:	fabe fe8e 	clz	lr, lr
 8005a36:	fa99 f9a9 	rbit	r9, r9
 8005a3a:	fab9 f989 	clz	r9, r9
 8005a3e:	fa97 f7a7 	rbit	r7, r7
 8005a42:	6863      	ldr	r3, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a44:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a48:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a4c:	fab7 f787 	clz	r7, r7
 8005a50:	fa03 fa0a 	lsl.w	sl, r3, sl
 8005a54:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005a56:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a5a:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a5e:	fa03 f909 	lsl.w	r9, r3, r9
 8005a62:	fa00 f00e 	lsl.w	r0, r0, lr
 8005a66:	40b9      	lsls	r1, r7
 8005a68:	ea4a 0309 	orr.w	r3, sl, r9
 8005a6c:	4303      	orrs	r3, r0
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005a74:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8005a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a7a:	f021 011f 	bic.w	r1, r1, #31
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	430b      	orrs	r3, r1
 8005a82:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a86:	01d1      	lsls	r1, r2, #7
 8005a88:	d53b      	bpl.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x696>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005a8a:	4e47      	ldr	r6, [pc, #284]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005a8c:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 8005a90:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
 8005a94:	fa9e f8ae 	rbit	r8, lr
 8005a98:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 8005a9c:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005aa0:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 8005aa4:	fa97 fca7 	rbit	ip, r7
 8005aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005aac:	fabc fc8c 	clz	ip, ip
 8005ab0:	fa93 f3a3 	rbit	r3, r3
 8005ab4:	f44f 3940 	mov.w	r9, #196608	; 0x30000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ab8:	fab3 fa83 	clz	sl, r3
 8005abc:	fa99 f9a9 	rbit	r9, r9
 8005ac0:	fab9 f989 	clz	r9, r9
 8005ac4:	fa9e feae 	rbit	lr, lr
 8005ac8:	fabe fe8e 	clz	lr, lr
 8005acc:	fa97 f7a7 	rbit	r7, r7
 8005ad0:	6863      	ldr	r3, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005ad2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005ad6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ada:	fab7 f787 	clz	r7, r7
 8005ade:	fa03 fa0a 	lsl.w	sl, r3, sl
 8005ae2:	6923      	ldr	r3, [r4, #16]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005ae4:	fa20 f008 	lsr.w	r0, r0, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005ae8:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005aec:	fa03 f909 	lsl.w	r9, r3, r9
 8005af0:	fa00 f00e 	lsl.w	r0, r0, lr
 8005af4:	40b9      	lsls	r1, r7
 8005af6:	ea4a 0309 	orr.w	r3, sl, r9
 8005afa:	4303      	orrs	r3, r0
 8005afc:	430b      	orrs	r3, r1
 8005afe:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b02:	0192      	lsls	r2, r2, #6
 8005b04:	d528      	bpl.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8005b06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b0a:	fa93 f3a3 	rbit	r3, r3
 8005b0e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b12:	fab3 f683 	clz	r6, r3
 8005b16:	fa90 f0a0 	rbit	r0, r0
 8005b1a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005b1e:	fab0 f080 	clz	r0, r0
 8005b22:	fa91 f1a1 	rbit	r1, r1
 8005b26:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8005b2a:	fab1 f181 	clz	r1, r1
 8005b2e:	fa92 f2a2 	rbit	r2, r2
 8005b32:	6863      	ldr	r3, [r4, #4]
 8005b34:	fab2 f282 	clz	r2, r2
 8005b38:	40b3      	lsls	r3, r6
 8005b3a:	6926      	ldr	r6, [r4, #16]
 8005b3c:	fa06 f000 	lsl.w	r0, r6, r0
 8005b40:	4303      	orrs	r3, r0
 8005b42:	68e0      	ldr	r0, [r4, #12]
 8005b44:	fa00 f101 	lsl.w	r1, r0, r1
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	68a1      	ldr	r1, [r4, #8]
 8005b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b50:	4313      	orrs	r3, r2
 8005b52:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005b54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005b58:	4e13      	ldr	r6, [pc, #76]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005b5a:	6833      	ldr	r3, [r6, #0]
 8005b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b60:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005b62:	f7fe f915 	bl	8003d90 <HAL_GetTick>
 8005b66:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b68:	6833      	ldr	r3, [r6, #0]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	f53f add4 	bmi.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b70:	f7fe f90e 	bl	8003d90 <HAL_GetTick>
 8005b74:	1bc0      	subs	r0, r0, r7
 8005b76:	2864      	cmp	r0, #100	; 0x64
 8005b78:	d9f6      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 8005b7a:	e6cc      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b7c:	f7fe f908 	bl	8003d90 <HAL_GetTick>
 8005b80:	1bc0      	subs	r0, r0, r7
 8005b82:	2864      	cmp	r0, #100	; 0x64
 8005b84:	f67f aeea 	bls.w	800595c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005b88:	e6c5      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b8a:	f7fe f901 	bl	8003d90 <HAL_GetTick>
 8005b8e:	1b80      	subs	r0, r0, r6
 8005b90:	2864      	cmp	r0, #100	; 0x64
 8005b92:	f67f adcc 	bls.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005b96:	e6be      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b98:	f7fe f8fa 	bl	8003d90 <HAL_GetTick>
 8005b9c:	1b40      	subs	r0, r0, r5
 8005b9e:	2864      	cmp	r0, #100	; 0x64
 8005ba0:	f67f aeaa 	bls.w	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005ba4:	e6b7      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800

08005bac <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg = 0;
  
  /* Set all possible values for the extended clock type parameter------------*/ 
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005bac:	4b74      	ldr	r3, [pc, #464]	; (8005d80 <HAL_RCCEx_GetPeriphCLKConfig+0x1d4>)
 8005bae:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;

  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005bb0:	4b74      	ldr	r3, [pc, #464]	; (8005d84 <HAL_RCCEx_GetPeriphCLKConfig+0x1d8>)
{
 8005bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005bb4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005bb8:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8005bbc:	fa97 f1a7 	rbit	r1, r7
 8005bc0:	fab1 f181 	clz	r1, r1
 8005bc4:	403a      	ands	r2, r7
 8005bc6:	40ca      	lsrs	r2, r1
 8005bc8:	6042      	str	r2, [r0, #4]
 8005bca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005bce:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005bd2:	fa92 f4a2 	rbit	r4, r2
 8005bd6:	fab4 f484 	clz	r4, r4
 8005bda:	4011      	ands	r1, r2
 8005bdc:	40e1      	lsrs	r1, r4
 8005bde:	f04f 6470 	mov.w	r4, #251658240	; 0xf000000
 8005be2:	6101      	str	r1, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005be4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005be8:	fa94 f5a4 	rbit	r5, r4
 8005bec:	fab5 f585 	clz	r5, r5
 8005bf0:	4021      	ands	r1, r4
 8005bf2:	40e9      	lsrs	r1, r5
 8005bf4:	60c1      	str	r1, [r0, #12]
 8005bf6:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005bfa:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8005bfe:	fa91 f5a1 	rbit	r5, r1
 8005c02:	fab5 f585 	clz	r5, r5
 8005c06:	400e      	ands	r6, r1
 8005c08:	40ee      	lsrs	r6, r5
 8005c0a:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005c0c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005c10:	fa97 f6a7 	rbit	r6, r7
 8005c14:	fab6 f686 	clz	r6, r6
 8005c18:	403d      	ands	r5, r7
 8005c1a:	40f5      	lsrs	r5, r6
 8005c1c:	6145      	str	r5, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005c1e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005c22:	fa92 f6a2 	rbit	r6, r2
 8005c26:	fab6 f686 	clz	r6, r6
 8005c2a:	4015      	ands	r5, r2
 8005c2c:	40f5      	lsrs	r5, r6
 8005c2e:	6205      	str	r5, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005c30:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005c34:	fa94 f4a4 	rbit	r4, r4
 8005c38:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
 8005c3c:	fab4 f484 	clz	r4, r4
 8005c40:	fa25 f404 	lsr.w	r4, r5, r4
 8005c44:	6184      	str	r4, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005c46:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005c4a:	fa91 f1a1 	rbit	r1, r1
 8005c4e:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
 8005c52:	fab1 f181 	clz	r1, r1
 8005c56:	fa24 f101 	lsr.w	r1, r4, r1
 8005c5a:	241f      	movs	r4, #31
 8005c5c:	61c1      	str	r1, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8005c5e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005c62:	fa94 f4a4 	rbit	r4, r4
 8005c66:	fab4 f484 	clz	r4, r4
 8005c6a:	f001 011f 	and.w	r1, r1, #31
 8005c6e:	40e1      	lsrs	r1, r4
 8005c70:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8005c74:	6241      	str	r1, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8005c76:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005c7a:	fa94 f4a4 	rbit	r4, r4
 8005c7e:	fab4 f484 	clz	r4, r4
 8005c82:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 8005c86:	40e1      	lsrs	r1, r4
 8005c88:	6281      	str	r1, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8005c8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005c8e:	fa92 f2a2 	rbit	r2, r2
 8005c92:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8005c96:	fab2 f282 	clz	r2, r2
 8005c9a:	fa21 f202 	lsr.w	r2, r1, r2
 8005c9e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005ca0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ca4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005ca8:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005caa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005cae:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005cb2:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005cba:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005cbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cc0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005cc4:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005cc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cca:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005cce:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005cd0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cd4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005cd8:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005cda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cde:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005ce2:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005ce4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ce8:	f002 0203 	and.w	r2, r2, #3
 8005cec:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005cee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cf2:	f002 020c 	and.w	r2, r2, #12
 8005cf6:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005cf8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005cfc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005d00:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005d02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d06:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005d0a:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005d0c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d10:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005d14:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005d16:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d1a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005d1e:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005d20:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d24:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005d28:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005d2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d2e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005d32:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005d34:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d38:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8005d3c:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005d3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d42:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005d46:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005d48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d4c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005d50:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005d52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005d56:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005d5a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005d5e:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005d60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005d62:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005d66:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d72:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005d76:	bf18      	it	ne
 8005d78:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005d7c:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d80:	00fffff1 	.word	0x00fffff1
 8005d84:	40023800 	.word	0x40023800

08005d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d88:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005d8c:	d124      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005d8e:	4b2c      	ldr	r3, [pc, #176]	; (8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005d94:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8005d98:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005d9c:	d045      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8005d9e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;   
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8005da2:	d04a      	beq.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
 8005da4:	b332      	cbz	r2, 8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
    default :
      {
        break;
      }
    }
  }
 8005da6:	2000      	movs	r0, #0
 8005da8:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005daa:	4b26      	ldr	r3, [pc, #152]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005dac:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005dae:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005db2:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005db6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8005dba:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005dbe:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005dc0:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005dc4:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005dc8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8005dd2:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8005dd6:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005dd8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8005ddc:	d1e3      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
    saiclocksource = RCC->DCKCFGR1;   
 8005dde:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005de0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005de4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8005de8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005dec:	d01d      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8005dee:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005df2:	e7d6      	b.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005df4:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005df6:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005df8:	0252      	lsls	r2, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005dfa:	4a11      	ldr	r2, [pc, #68]	; (8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dfc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005e00:	bf54      	ite	pl
 8005e02:	4b11      	ldrpl	r3, [pc, #68]	; (8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e04:	4b0f      	ldrmi	r3, [pc, #60]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005e06:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e0a:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005e0e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8005e12:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005e16:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005e18:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005e1c:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005e20:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005e24:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8005e28:	e7d2      	b.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e2a:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e2c:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e2e:	0253      	lsls	r3, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e30:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e34:	d4b9      	bmi.n	8005daa <HAL_RCCEx_GetPeriphCLKFreq+0x22>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e36:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005e38:	e7b8      	b.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x24>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e3a:	4804      	ldr	r0, [pc, #16]	; (8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
  
  return frequency;
}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40023800 	.word	0x40023800
 8005e44:	017d7840 	.word	0x017d7840
 8005e48:	00f42400 	.word	0x00f42400
 8005e4c:	00bb8000 	.word	0x00bb8000

08005e50 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR; 
  
  if(mode == SAI_MODE_IT)
 8005e50:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) && 
 8005e52:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005e54:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR; 
 8005e56:	bf0c      	ite	eq
 8005e58:	2309      	moveq	r3, #9
 8005e5a:	2301      	movne	r3, #1
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) && 
 8005e5c:	2908      	cmp	r1, #8
 8005e5e:	d105      	bne.n	8005e6c <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e60:	f022 0102 	bic.w	r1, r2, #2
 8005e64:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 8005e66:	bf08      	it	eq
 8005e68:	f043 0310 	orreq.w	r3, r3, #16
  }
  
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e6c:	3a02      	subs	r2, #2
 8005e6e:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005e70:	bf94      	ite	ls
 8005e72:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005e76:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8005e7a:	4770      	bx	lr

08005e7c <SAI_Disable>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None.
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005e80:	f7fd ff86 	bl	8003d90 <HAL_GetTick>
 8005e84:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_SAI_DISABLE(hsai);
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	6813      	ldr	r3, [r2, #0]
 8005e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8e:	6013      	str	r3, [r2, #0]
  while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET)
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8005e98:	d00b      	beq.n	8005eb2 <SAI_Disable+0x36>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > SAI_TIMEOUT_VALUE)
 8005e9a:	f7fd ff79 	bl	8003d90 <HAL_GetTick>
 8005e9e:	1b40      	subs	r0, r0, r5
 8005ea0:	280a      	cmp	r0, #10
 8005ea2:	d9f5      	bls.n	8005e90 <SAI_Disable+0x14>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005ea4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      
      return HAL_TIMEOUT;
 8005ea8:	2003      	movs	r0, #3
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    }
  }
  return status;
}
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}

08005eb4 <HAL_SAI_MspInit>:
}
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_SAI_Init>:
{ 
 8005eb8:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 8005eba:	4604      	mov	r4, r0
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f000 808c 	beq.w	8005fda <HAL_SAI_Init+0x122>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005ec2:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8005ec6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005eca:	b91b      	cbnz	r3, 8005ed4 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8005ecc:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8005ed0:	f7ff fff0 	bl	8005eb4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005ed4:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8005ed6:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8005ed8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8005edc:	f7ff ffce 	bl	8005e7c <SAI_Disable>
  SAI_BlockSynchroConfig(hsai);
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 f9b3 	bl	800624c <SAI_BlockSynchroConfig>
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005ee6:	69e3      	ldr	r3, [r4, #28]
 8005ee8:	b183      	cbz	r3, 8005f0c <HAL_SAI_Init+0x54>
  freq = SAI_GetInputClock(hsai);
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 f9ce 	bl	800628c <SAI_GetInputClock>
    tmpclock = (((freq * 10) / ((hsai->Init.AudioFrequency) * 512)));
 8005ef0:	220a      	movs	r2, #10
 8005ef2:	69e3      	ldr	r3, [r4, #28]
 8005ef4:	4350      	muls	r0, r2
 8005ef6:	025b      	lsls	r3, r3, #9
 8005ef8:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpclock / 10;
 8005efc:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpclock % 10) > 8) 
 8005f00:	fb02 0213 	mls	r2, r2, r3, r0
 8005f04:	2a09      	cmp	r2, #9
      hsai->Init.Mckdiv+= 1;
 8005f06:	bf08      	it	eq
 8005f08:	3301      	addeq	r3, #1
 8005f0a:	6223      	str	r3, [r4, #32]
  switch(hsai->Init.Synchro)
 8005f0c:	68a3      	ldr	r3, [r4, #8]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d004      	beq.n	8005f1c <HAL_SAI_Init+0x64>
 8005f12:	d301      	bcc.n	8005f18 <HAL_SAI_Init+0x60>
 8005f14:	2b03      	cmp	r3, #3
 8005f16:	d95d      	bls.n	8005fd4 <HAL_SAI_Init+0x11c>
  uint32_t syncen_bits = 0;
 8005f18:	2100      	movs	r1, #0
 8005f1a:	e001      	b.n	8005f20 <HAL_SAI_Init+0x68>
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	4b2f      	ldr	r3, [pc, #188]	; (8005fe0 <HAL_SAI_Init+0x128>)
 8005f24:	6810      	ldr	r0, [r2, #0]
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f26:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005f28:	4003      	ands	r3, r0
 8005f2a:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f2c:	6863      	ldr	r3, [r4, #4]
 8005f2e:	6810      	ldr	r0, [r2, #0]
 8005f30:	432b      	orrs	r3, r5
 8005f32:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005f34:	432b      	orrs	r3, r5
 8005f36:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005f38:	432b      	orrs	r3, r5
 8005f3a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005f3c:	432b      	orrs	r3, r5
 8005f3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f40:	432b      	orrs	r3, r5
 8005f42:	6925      	ldr	r5, [r4, #16]
 8005f44:	432b      	orrs	r3, r5
 8005f46:	6965      	ldr	r5, [r4, #20]
 8005f48:	432b      	orrs	r3, r5
 8005f4a:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));  
 8005f4c:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f4e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f58:	6853      	ldr	r3, [r2, #4]
 8005f5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005f5e:	f023 030f 	bic.w	r3, r3, #15
 8005f62:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f64:	69a3      	ldr	r3, [r4, #24]
 8005f66:	6851      	ldr	r1, [r2, #4]
 8005f68:	4303      	orrs	r3, r0
 8005f6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f6c:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1)  | 
 8005f6e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <HAL_SAI_Init+0x12c>)
 8005f76:	6891      	ldr	r1, [r2, #8]
 8005f78:	400b      	ands	r3, r1
 8005f7a:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1)  | 
 8005f7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005f7e:	6891      	ldr	r1, [r2, #8]
 8005f80:	4303      	orrs	r3, r0
 8005f82:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005f84:	4303      	orrs	r3, r0
 8005f86:	430b      	orrs	r3, r1
 8005f88:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f8a:	3901      	subs	r1, #1
 8005f8c:	430b      	orrs	r3, r1
                            ((hsai->FrameInit.ActiveFrameLength - 1) << 8));  
 8005f8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f90:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1)  | 
 8005f92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f96:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005f98:	68d3      	ldr	r3, [r2, #12]
 8005f9a:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005f9e:	f023 030f 	bic.w	r3, r3, #15
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	0c1b      	lsrs	r3, r3, #16
 8005fa6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005fa8:	68d1      	ldr	r1, [r2, #12]
 8005faa:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8005fae:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005fb0:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005fb2:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);           
 8005fb4:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005fb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);           
 8005fba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005fbc:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005fbe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005fc2:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 8005fc4:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005fc6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8005fca:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8005fce:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
      break;
 8005fd8:	e7a2      	b.n	8005f20 <HAL_SAI_Init+0x68>
    return HAL_ERROR;
 8005fda:	2001      	movs	r0, #1
 8005fdc:	e7f9      	b.n	8005fd2 <HAL_SAI_Init+0x11a>
 8005fde:	bf00      	nop
 8005fe0:	ff05c010 	.word	0xff05c010
 8005fe4:	fff88000 	.word	0xfff88000

08005fe8 <HAL_SAI_MspDeInit>:
 8005fe8:	4770      	bx	lr

08005fea <HAL_SAI_DeInit>:
{
 8005fea:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 8005fec:	4605      	mov	r5, r0
 8005fee:	b1d0      	cbz	r0, 8006026 <HAL_SAI_DeInit+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005ff0:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8005ff2:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFF;
 8005ff4:	f04f 32ff 	mov.w	r2, #4294967295
  hsai->State = HAL_SAI_STATE_BUSY;
 8005ff8:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 8005ffc:	6803      	ldr	r3, [r0, #0]
 8005ffe:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFF;
 8006000:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8006002:	f7ff ff3b 	bl	8005e7c <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006006:	682a      	ldr	r2, [r5, #0]
  HAL_SAI_MspDeInit(hsai);
 8006008:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800600a:	6853      	ldr	r3, [r2, #4]
 800600c:	f043 0308 	orr.w	r3, r3, #8
 8006010:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8006012:	f7ff ffe9 	bl	8005fe8 <HAL_SAI_MspDeInit>
  return HAL_OK;
 8006016:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006018:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800601c:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 8006020:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
 8006024:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006026:	2001      	movs	r0, #1
 8006028:	e7fc      	b.n	8006024 <HAL_SAI_DeInit+0x3a>

0800602a <HAL_SAI_DMAStop>:
  __HAL_LOCK(hsai);
 800602a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800602e:	2b01      	cmp	r3, #1
{
 8006030:	b510      	push	{r4, lr}
 8006032:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8006034:	d020      	beq.n	8006078 <HAL_SAI_DMAStop+0x4e>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006036:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8006038:	2301      	movs	r3, #1
 800603a:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800603e:	6813      	ldr	r3, [r2, #0]
  if(hsai->hdmatx != NULL)
 8006040:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006042:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006046:	6013      	str	r3, [r2, #0]
  if(hsai->hdmatx != NULL)
 8006048:	b958      	cbnz	r0, 8006062 <HAL_SAI_DMAStop+0x38>
  if(hsai->hdmarx != NULL)
 800604a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800604c:	b978      	cbnz	r0, 800606e <HAL_SAI_DMAStop+0x44>
  SAI_Disable(hsai);
 800604e:	4620      	mov	r0, r4
 8006050:	f7ff ff14 	bl	8005e7c <SAI_Disable>
  hsai->State = HAL_SAI_STATE_READY;
 8006054:	2301      	movs	r3, #1
  __HAL_UNLOCK(hsai);
 8006056:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 8006058:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 800605c:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
 8006060:	e004      	b.n	800606c <HAL_SAI_DMAStop+0x42>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8006062:	f7fd ffac 	bl	8003fbe <HAL_DMA_Abort>
 8006066:	2800      	cmp	r0, #0
 8006068:	d0ef      	beq.n	800604a <HAL_SAI_DMAStop+0x20>
      return HAL_ERROR;
 800606a:	2001      	movs	r0, #1
}
 800606c:	bd10      	pop	{r4, pc}
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800606e:	f7fd ffa6 	bl	8003fbe <HAL_DMA_Abort>
 8006072:	2800      	cmp	r0, #0
 8006074:	d0eb      	beq.n	800604e <HAL_SAI_DMAStop+0x24>
 8006076:	e7f8      	b.n	800606a <HAL_SAI_DMAStop+0x40>
  __HAL_LOCK(hsai);
 8006078:	2002      	movs	r0, #2
 800607a:	e7f7      	b.n	800606c <HAL_SAI_DMAStop+0x42>

0800607c <HAL_SAI_Transmit_DMA>:
{
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	4613      	mov	r3, r2
  if((pData == NULL) || (Size == 0)) 
 8006082:	2900      	cmp	r1, #0
 8006084:	d039      	beq.n	80060fa <HAL_SAI_Transmit_DMA+0x7e>
 8006086:	2a00      	cmp	r2, #0
 8006088:	d037      	beq.n	80060fa <HAL_SAI_Transmit_DMA+0x7e>
  if(hsai->State == HAL_SAI_STATE_READY)
 800608a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	2a01      	cmp	r2, #1
 8006092:	d134      	bne.n	80060fe <HAL_SAI_Transmit_DMA+0x82>
    __HAL_LOCK(hsai);
 8006094:	f894 507c 	ldrb.w	r5, [r4, #124]	; 0x7c
 8006098:	2d01      	cmp	r5, #1
 800609a:	d030      	beq.n	80060fe <HAL_SAI_Transmit_DMA+0x82>
 800609c:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060a0:	2200      	movs	r2, #0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80060a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060a4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80060a8:	2212      	movs	r2, #18
    hsai->XferSize = Size;
 80060aa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80060ae:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80060b2:	4a14      	ldr	r2, [pc, #80]	; (8006104 <HAL_SAI_Transmit_DMA+0x88>)
    hsai->XferCount = Size;
 80060b4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 80060b8:	6661      	str	r1, [r4, #100]	; 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80060ba:	6402      	str	r2, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80060bc:	4a12      	ldr	r2, [pc, #72]	; (8006108 <HAL_SAI_Transmit_DMA+0x8c>)
 80060be:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80060c0:	4a12      	ldr	r2, [pc, #72]	; (800610c <HAL_SAI_Transmit_DMA+0x90>)
 80060c2:	6482      	str	r2, [r0, #72]	; 0x48
    HAL_DMA_Start_IT(hsai->hdmatx, *(uint32_t*)tmp, (uint32_t)&hsai->Instance->DR, hsai->XferSize);
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	321c      	adds	r2, #28
 80060c8:	f7fd ff4b 	bl	8003f62 <HAL_DMA_Start_IT>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80060cc:	6825      	ldr	r5, [r4, #0]
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	03db      	lsls	r3, r3, #15
 80060d2:	d403      	bmi.n	80060dc <HAL_SAI_Transmit_DMA+0x60>
      __HAL_SAI_ENABLE(hsai);
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060da:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80060dc:	2100      	movs	r1, #0
 80060de:	4620      	mov	r0, r4
 80060e0:	f7ff feb6 	bl	8005e50 <SAI_InterruptFlag>
 80060e4:	692b      	ldr	r3, [r5, #16]
 80060e6:	4318      	orrs	r0, r3
 80060e8:	6128      	str	r0, [r5, #16]
    __HAL_UNLOCK(hsai);
 80060ea:	2000      	movs	r0, #0
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f2:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 80060f4:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 80060f8:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 80060fa:	2001      	movs	r0, #1
 80060fc:	e7fc      	b.n	80060f8 <HAL_SAI_Transmit_DMA+0x7c>
    return HAL_BUSY;
 80060fe:	2002      	movs	r0, #2
 8006100:	e7fa      	b.n	80060f8 <HAL_SAI_Transmit_DMA+0x7c>
 8006102:	bf00      	nop
 8006104:	080061dd 	.word	0x080061dd
 8006108:	080061a5 	.word	0x080061a5
 800610c:	08006229 	.word	0x08006229

08006110 <HAL_SAI_Receive_DMA>:
{
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4613      	mov	r3, r2
 8006114:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8006116:	460a      	mov	r2, r1
 8006118:	2900      	cmp	r1, #0
 800611a:	d039      	beq.n	8006190 <HAL_SAI_Receive_DMA+0x80>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d037      	beq.n	8006190 <HAL_SAI_Receive_DMA+0x80>
  if(hsai->State == HAL_SAI_STATE_READY)
 8006120:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
 8006124:	b2c0      	uxtb	r0, r0
 8006126:	2801      	cmp	r0, #1
 8006128:	d134      	bne.n	8006194 <HAL_SAI_Receive_DMA+0x84>
    __HAL_LOCK(hsai);
 800612a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
 800612e:	2901      	cmp	r1, #1
 8006130:	d030      	beq.n	8006194 <HAL_SAI_Receive_DMA+0x84>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;    
 8006132:	2100      	movs	r1, #0
    __HAL_LOCK(hsai);
 8006134:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006138:	6f20      	ldr	r0, [r4, #112]	; 0x70
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;    
 800613a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800613e:	2122      	movs	r1, #34	; 0x22
    hsai->XferSize = Size;
 8006140:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006144:	f884 107d 	strb.w	r1, [r4, #125]	; 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006148:	4913      	ldr	r1, [pc, #76]	; (8006198 <HAL_SAI_Receive_DMA+0x88>)
    hsai->XferCount = Size;
 800614a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 800614e:	6662      	str	r2, [r4, #100]	; 0x64
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006150:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006152:	4912      	ldr	r1, [pc, #72]	; (800619c <HAL_SAI_Receive_DMA+0x8c>)
 8006154:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006156:	4912      	ldr	r1, [pc, #72]	; (80061a0 <HAL_SAI_Receive_DMA+0x90>)
 8006158:	6481      	str	r1, [r0, #72]	; 0x48
    HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, *(uint32_t*)tmp, hsai->XferSize);
 800615a:	6821      	ldr	r1, [r4, #0]
 800615c:	311c      	adds	r1, #28
 800615e:	f7fd ff00 	bl	8003f62 <HAL_DMA_Start_IT>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	03db      	lsls	r3, r3, #15
 8006168:	d403      	bmi.n	8006172 <HAL_SAI_Receive_DMA+0x62>
      __HAL_SAI_ENABLE(hsai);
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006170:	602b      	str	r3, [r5, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006172:	2100      	movs	r1, #0
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fe6b 	bl	8005e50 <SAI_InterruptFlag>
 800617a:	692b      	ldr	r3, [r5, #16]
 800617c:	4318      	orrs	r0, r3
 800617e:	6128      	str	r0, [r5, #16]
    __HAL_UNLOCK(hsai);
 8006180:	2000      	movs	r0, #0
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8006182:	682b      	ldr	r3, [r5, #0]
 8006184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006188:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hsai);
 800618a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800618e:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 8006190:	2001      	movs	r0, #1
 8006192:	e7fc      	b.n	800618e <HAL_SAI_Receive_DMA+0x7e>
    return HAL_BUSY;
 8006194:	2002      	movs	r0, #2
 8006196:	e7fa      	b.n	800618e <HAL_SAI_Receive_DMA+0x7e>
 8006198:	0800621f 	.word	0x0800621f
 800619c:	080061e7 	.word	0x080061e7
 80061a0:	08006229 	.word	0x08006229

080061a4 <SAI_DMATxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)   
{
 80061a4:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
  
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80061a6:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 80061a8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 80061b0:	d110      	bne.n	80061d4 <SAI_DMATxCplt+0x30>
  { 
    hsai->XferCount = 0;
    
    /* Disable SAI Tx DMA Request */  
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80061b2:	6825      	ldr	r5, [r4, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061b4:	4620      	mov	r0, r4
    hsai->XferCount = 0;
 80061b6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061c0:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061c2:	f7ff fe45 	bl	8005e50 <SAI_InterruptFlag>
 80061c6:	692b      	ldr	r3, [r5, #16]
 80061c8:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State= HAL_SAI_STATE_READY;
 80061cc:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061ce:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 80061d0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7fc f8b1 	bl	800233c <HAL_SAI_TxCpltCallback>
}
 80061da:	bd38      	pop	{r3, r4, r5, pc}

080061dc <SAI_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061dc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_TxHalfCpltCallback(hsai);
 80061de:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80061e0:	f7fc f8b0 	bl	8002344 <HAL_SAI_TxHalfCpltCallback>
}
 80061e4:	bd08      	pop	{r3, pc}

080061e6 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)   
{
 80061e6:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80061e8:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 80061f2:	d110      	bne.n	8006216 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80061f4:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
    
    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80061f6:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061fe:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8006200:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006204:	f7ff fe24 	bl	8005e50 <SAI_InterruptFlag>
 8006208:	692b      	ldr	r3, [r5, #16]
 800620a:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State = HAL_SAI_STATE_READY;
 800620e:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006210:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8006212:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai); 
 8006216:	4620      	mov	r0, r4
 8006218:	f7fc f98a 	bl	8002530 <HAL_SAI_RxCpltCallback>
}
 800621c:	bd38      	pop	{r3, r4, r5, pc}

0800621e <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800621e:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai); 
 8006220:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006222:	f7fc f989 	bl	8002538 <HAL_SAI_RxHalfCpltCallback>
}
 8006226:	bd08      	pop	{r3, pc}

08006228 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006228:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800622a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
  /* Stop the DMA transfer */
  HAL_SAI_DMAStop(hsai);
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff fefc 	bl	800602a <HAL_SAI_DMAStop>
  
  /* Set the SAI state ready to be able to start again the process */
  hsai->State= HAL_SAI_STATE_READY;
 8006232:	2301      	movs	r3, #1
  HAL_SAI_ErrorCallback(hsai);
 8006234:	4620      	mov	r0, r4
  hsai->State= HAL_SAI_STATE_READY;
 8006236:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  HAL_SAI_ErrorCallback(hsai);
 800623a:	f7fc f983 	bl	8002544 <HAL_SAI_ErrorCallback>
  
  hsai->XferCount = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
}
 8006244:	bd10      	pop	{r4, pc}

08006246 <HAL_SAI_GetState>:
  return hsai->State;
 8006246:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 800624a:	4770      	bx	lr

0800624c <SAI_BlockSynchroConfig>:
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
 
  /* This setting must be done with both audio block (A & B) disabled     */
  switch(hsai->Init.SynchroExt)
 800624c:	68c3      	ldr	r3, [r0, #12]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d012      	beq.n	8006278 <SAI_BlockSynchroConfig+0x2c>
 8006252:	2b02      	cmp	r3, #2
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8006254:	bf0c      	ite	eq
 8006256:	2320      	moveq	r3, #32
 8006258:	2300      	movne	r3, #0
  default:
    tmpregisterGCR = 0;
    break;
  }
    
  if((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800625a:	6882      	ldr	r2, [r0, #8]
  {
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
  }
  
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800625c:	4908      	ldr	r1, [pc, #32]	; (8006280 <SAI_BlockSynchroConfig+0x34>)
  if((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800625e:	2a03      	cmp	r2, #3
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006260:	6802      	ldr	r2, [r0, #0]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006262:	bf08      	it	eq
 8006264:	f043 0301 	orreq.w	r3, r3, #1
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006268:	428a      	cmp	r2, r1
 800626a:	d002      	beq.n	8006272 <SAI_BlockSynchroConfig+0x26>
 800626c:	3120      	adds	r1, #32
 800626e:	428a      	cmp	r2, r1
 8006270:	d104      	bne.n	800627c <SAI_BlockSynchroConfig+0x30>
  {
    SAI1->GCR = tmpregisterGCR;
 8006272:	4a04      	ldr	r2, [pc, #16]	; (8006284 <SAI_BlockSynchroConfig+0x38>)
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8006274:	6013      	str	r3, [r2, #0]
  }
}
 8006276:	4770      	bx	lr
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006278:	2310      	movs	r3, #16
 800627a:	e7ee      	b.n	800625a <SAI_BlockSynchroConfig+0xe>
    SAI2->GCR = tmpregisterGCR;
 800627c:	4a02      	ldr	r2, [pc, #8]	; (8006288 <SAI_BlockSynchroConfig+0x3c>)
 800627e:	e7f9      	b.n	8006274 <SAI_BlockSynchroConfig+0x28>
 8006280:	40015804 	.word	0x40015804
 8006284:	40015800 	.word	0x40015800
 8006288:	40015c00 	.word	0x40015c00

0800628c <SAI_GetInputClock>:
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)   
{
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0;

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800628c:	6803      	ldr	r3, [r0, #0]
 800628e:	4a06      	ldr	r2, [pc, #24]	; (80062a8 <SAI_GetInputClock+0x1c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d002      	beq.n	800629a <SAI_GetInputClock+0xe>
 8006294:	3220      	adds	r2, #32
 8006296:	4293      	cmp	r3, r2
 8006298:	d103      	bne.n	80062a2 <SAI_GetInputClock+0x16>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800629a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2); 
 800629e:	f7ff bd73 	b.w	8005d88 <HAL_RCCEx_GetPeriphCLKFreq>
 80062a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80062a6:	e7fa      	b.n	800629e <SAI_GetInputClock+0x12>
 80062a8:	40015804 	.word	0x40015804

080062ac <SD_CmdResp2Error>:
  */
static HAL_SD_ErrorTypedef SD_CmdResp2Error(SD_HandleTypeDef *hsd)
{
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 80062ac:	6803      	ldr	r3, [r0, #0]
 80062ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b0:	f012 0f45 	tst.w	r2, #69	; 0x45
 80062b4:	d0fb      	beq.n	80062ae <SD_CmdResp2Error+0x2>
  {
  }
    
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 80062b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b8:	0752      	lsls	r2, r2, #29
 80062ba:	d503      	bpl.n	80062c4 <SD_CmdResp2Error+0x18>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80062bc:	2204      	movs	r2, #4
    
    return errorstate;
 80062be:	2003      	movs	r0, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80062c2:	4770      	bx	lr
  }
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 80062c4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062c6:	f010 0001 	ands.w	r0, r0, #1
 80062ca:	d002      	beq.n	80062d2 <SD_CmdResp2Error+0x26>
  {
    errorstate = SD_CMD_CRC_FAIL;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 80062cc:	2001      	movs	r0, #1
 80062ce:	6398      	str	r0, [r3, #56]	; 0x38
    
    return errorstate;
 80062d0:	4770      	bx	lr
  {
    /* No error flag set */
  }  
  
  /* Clear all the static flags */
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return errorstate;
}
 80062d8:	4770      	bx	lr
	...

080062dc <SD_IsCardProgramming>:
{
  SDMMC_CmdInitTypeDef sdmmc_cmdinitstructure;
  HAL_SD_ErrorTypedef errorstate = SD_OK;
  __IO uint32_t responseR1 = 0;
  
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80062dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
  __IO uint32_t responseR1 = 0;
 80062de:	2200      	movs	r2, #0
{
 80062e0:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80062e2:	041b      	lsls	r3, r3, #16
{
 80062e4:	b086      	sub	sp, #24
 80062e6:	460e      	mov	r6, r1
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SEND_STATUS;
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80062e8:	210d      	movs	r1, #13
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80062ea:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80062ec:	2340      	movs	r3, #64	; 0x40
{
 80062ee:	4605      	mov	r5, r0
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80062f0:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t responseR1 = 0;
 80062f2:	9200      	str	r2, [sp, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80062f4:	9204      	str	r2, [sp, #16]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80062f6:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80062fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80062fe:	a901      	add	r1, sp, #4
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006300:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006302:	f001 f81f 	bl	8007344 <SDMMC_SendCommand>
  
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006306:	6828      	ldr	r0, [r5, #0]
 8006308:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800630a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800630e:	d0fb      	beq.n	8006308 <SD_IsCardProgramming+0x2c>
  {
  }
  
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006310:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006312:	075b      	lsls	r3, r3, #29
 8006314:	d504      	bpl.n	8006320 <SD_IsCardProgramming+0x44>
  {
    errorstate = SD_CMD_RSP_TIMEOUT;
    
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006316:	2304      	movs	r3, #4
 8006318:	6383      	str	r3, [r0, #56]	; 0x38
    
    return errorstate;
 800631a:	2003      	movs	r0, #3
  {
    return(SD_AKE_SEQ_ERROR);
  }
  
  return errorstate;
}   
 800631c:	b006      	add	sp, #24
 800631e:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006320:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006322:	f014 0401 	ands.w	r4, r4, #1
 8006326:	d003      	beq.n	8006330 <SD_IsCardProgramming+0x54>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006328:	2301      	movs	r3, #1
 800632a:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800632c:	4618      	mov	r0, r3
 800632e:	e7f5      	b.n	800631c <SD_IsCardProgramming+0x40>
  if((uint32_t)SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD_SEND_STATUS)
 8006330:	f001 f81b 	bl	800736a <SDMMC_GetCommandResponse>
 8006334:	280d      	cmp	r0, #13
 8006336:	d001      	beq.n	800633c <SD_IsCardProgramming+0x60>
    return errorstate;
 8006338:	2010      	movs	r0, #16
 800633a:	e7ef      	b.n	800631c <SD_IsCardProgramming+0x40>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800633c:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006340:	6828      	ldr	r0, [r5, #0]
  responseR1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006342:	4621      	mov	r1, r4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006344:	6383      	str	r3, [r0, #56]	; 0x38
  responseR1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006346:	f001 f813 	bl	8007370 <SDMMC_GetResponse>
 800634a:	9000      	str	r0, [sp, #0]
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 800634c:	9b00      	ldr	r3, [sp, #0]
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 800634e:	4833      	ldr	r0, [pc, #204]	; (800641c <SD_IsCardProgramming+0x140>)
  *pStatus = (uint8_t)((responseR1 >> 9) & 0x0000000F);
 8006350:	f3c3 2343 	ubfx	r3, r3, #9, #4
 8006354:	7033      	strb	r3, [r6, #0]
  if((responseR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	4018      	ands	r0, r3
 800635a:	2800      	cmp	r0, #0
 800635c:	d0de      	beq.n	800631c <SD_IsCardProgramming+0x40>
  if((responseR1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 800635e:	9b00      	ldr	r3, [sp, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	db39      	blt.n	80063d8 <SD_IsCardProgramming+0xfc>
  if((responseR1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	005d      	lsls	r5, r3, #1
 8006368:	d438      	bmi.n	80063dc <SD_IsCardProgramming+0x100>
  if((responseR1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 800636a:	9b00      	ldr	r3, [sp, #0]
 800636c:	009c      	lsls	r4, r3, #2
 800636e:	d437      	bmi.n	80063e0 <SD_IsCardProgramming+0x104>
  if((responseR1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 8006370:	9b00      	ldr	r3, [sp, #0]
 8006372:	00d9      	lsls	r1, r3, #3
 8006374:	d436      	bmi.n	80063e4 <SD_IsCardProgramming+0x108>
  if((responseR1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8006376:	9b00      	ldr	r3, [sp, #0]
 8006378:	011a      	lsls	r2, r3, #4
 800637a:	d435      	bmi.n	80063e8 <SD_IsCardProgramming+0x10c>
  if((responseR1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 800637c:	9b00      	ldr	r3, [sp, #0]
 800637e:	015b      	lsls	r3, r3, #5
 8006380:	d434      	bmi.n	80063ec <SD_IsCardProgramming+0x110>
  if((responseR1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8006382:	9b00      	ldr	r3, [sp, #0]
 8006384:	01de      	lsls	r6, r3, #7
 8006386:	d433      	bmi.n	80063f0 <SD_IsCardProgramming+0x114>
  if((responseR1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	021d      	lsls	r5, r3, #8
 800638c:	d432      	bmi.n	80063f4 <SD_IsCardProgramming+0x118>
  if((responseR1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 800638e:	9b00      	ldr	r3, [sp, #0]
 8006390:	025c      	lsls	r4, r3, #9
 8006392:	d4d1      	bmi.n	8006338 <SD_IsCardProgramming+0x5c>
  if((responseR1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8006394:	9b00      	ldr	r3, [sp, #0]
 8006396:	0299      	lsls	r1, r3, #10
 8006398:	d42e      	bmi.n	80063f8 <SD_IsCardProgramming+0x11c>
  if((responseR1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	02da      	lsls	r2, r3, #11
 800639e:	d42d      	bmi.n	80063fc <SD_IsCardProgramming+0x120>
  if((responseR1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 80063a0:	9b00      	ldr	r3, [sp, #0]
 80063a2:	031b      	lsls	r3, r3, #12
 80063a4:	d42c      	bmi.n	8006400 <SD_IsCardProgramming+0x124>
  if((responseR1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80063a6:	9b00      	ldr	r3, [sp, #0]
 80063a8:	035e      	lsls	r6, r3, #13
 80063aa:	d42b      	bmi.n	8006404 <SD_IsCardProgramming+0x128>
  if((responseR1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80063ac:	9b00      	ldr	r3, [sp, #0]
 80063ae:	039d      	lsls	r5, r3, #14
 80063b0:	d42a      	bmi.n	8006408 <SD_IsCardProgramming+0x12c>
  if((responseR1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 80063b2:	9b00      	ldr	r3, [sp, #0]
 80063b4:	03dc      	lsls	r4, r3, #15
 80063b6:	d429      	bmi.n	800640c <SD_IsCardProgramming+0x130>
  if((responseR1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	0419      	lsls	r1, r3, #16
 80063bc:	d428      	bmi.n	8006410 <SD_IsCardProgramming+0x134>
  if((responseR1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 80063be:	9b00      	ldr	r3, [sp, #0]
 80063c0:	045a      	lsls	r2, r3, #17
 80063c2:	d427      	bmi.n	8006414 <SD_IsCardProgramming+0x138>
  if((responseR1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	049b      	lsls	r3, r3, #18
 80063c8:	d426      	bmi.n	8006418 <SD_IsCardProgramming+0x13c>
  if((responseR1 & SD_OCR_AKE_SEQ_ERROR) == SD_OCR_AKE_SEQ_ERROR)
 80063ca:	9b00      	ldr	r3, [sp, #0]
    return(SD_AKE_SEQ_ERROR);
 80063cc:	f013 0f08 	tst.w	r3, #8
 80063d0:	bf0c      	ite	eq
 80063d2:	2000      	moveq	r0, #0
 80063d4:	201a      	movne	r0, #26
 80063d6:	e7a1      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_ADDR_OUT_OF_RANGE);
 80063d8:	201c      	movs	r0, #28
 80063da:	e79f      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_ADDR_MISALIGNED);
 80063dc:	2009      	movs	r0, #9
 80063de:	e79d      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_BLOCK_LEN_ERR);
 80063e0:	200a      	movs	r0, #10
 80063e2:	e79b      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_ERASE_SEQ_ERR);
 80063e4:	200b      	movs	r0, #11
 80063e6:	e799      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_BAD_ERASE_PARAM);
 80063e8:	200c      	movs	r0, #12
 80063ea:	e797      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_WRITE_PROT_VIOLATION);
 80063ec:	200d      	movs	r0, #13
 80063ee:	e795      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_LOCK_UNLOCK_FAILED);
 80063f0:	200e      	movs	r0, #14
 80063f2:	e793      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_COM_CRC_FAILED);
 80063f4:	200f      	movs	r0, #15
 80063f6:	e791      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_CARD_ECC_FAILED);
 80063f8:	2011      	movs	r0, #17
 80063fa:	e78f      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_CC_ERROR);
 80063fc:	2012      	movs	r0, #18
 80063fe:	e78d      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006400:	2013      	movs	r0, #19
 8006402:	e78b      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_STREAM_READ_UNDERRUN);
 8006404:	2014      	movs	r0, #20
 8006406:	e789      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_STREAM_WRITE_OVERRUN);
 8006408:	2015      	movs	r0, #21
 800640a:	e787      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_CID_CSD_OVERWRITE);
 800640c:	2016      	movs	r0, #22
 800640e:	e785      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_WP_ERASE_SKIP);
 8006410:	2017      	movs	r0, #23
 8006412:	e783      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_CARD_ECC_DISABLED);
 8006414:	2018      	movs	r0, #24
 8006416:	e781      	b.n	800631c <SD_IsCardProgramming+0x40>
    return(SD_ERASE_RESET);
 8006418:	2019      	movs	r0, #25
 800641a:	e77f      	b.n	800631c <SD_IsCardProgramming+0x40>
 800641c:	fdffe008 	.word	0xfdffe008

08006420 <SD_CmdResp1Error>:
{
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4605      	mov	r5, r0
 8006424:	460e      	mov	r6, r1
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006426:	6800      	ldr	r0, [r0, #0]
 8006428:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800642a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800642e:	d0fb      	beq.n	8006428 <SD_CmdResp1Error+0x8>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006430:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006432:	075b      	lsls	r3, r3, #29
 8006434:	d503      	bpl.n	800643e <SD_CmdResp1Error+0x1e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006436:	2304      	movs	r3, #4
 8006438:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 800643a:	2003      	movs	r0, #3
}
 800643c:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 800643e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006440:	f014 0401 	ands.w	r4, r4, #1
 8006444:	d003      	beq.n	800644e <SD_CmdResp1Error+0x2e>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006446:	2301      	movs	r3, #1
 8006448:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 800644a:	4618      	mov	r0, r3
 800644c:	e7f6      	b.n	800643c <SD_CmdResp1Error+0x1c>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 800644e:	f000 ff8c 	bl	800736a <SDMMC_GetCommandResponse>
 8006452:	42b0      	cmp	r0, r6
 8006454:	d001      	beq.n	800645a <SD_CmdResp1Error+0x3a>
    return errorstate;
 8006456:	2010      	movs	r0, #16
 8006458:	e7f0      	b.n	800643c <SD_CmdResp1Error+0x1c>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800645a:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800645e:	6828      	ldr	r0, [r5, #0]
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006460:	4621      	mov	r1, r4
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006462:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006464:	f000 ff84 	bl	8007370 <SDMMC_GetResponse>
  if((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8006468:	4b27      	ldr	r3, [pc, #156]	; (8006508 <SD_CmdResp1Error+0xe8>)
 800646a:	4003      	ands	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0ec      	beq.n	800644a <SD_CmdResp1Error+0x2a>
  if((response_r1 & SD_OCR_ADDR_OUT_OF_RANGE) == SD_OCR_ADDR_OUT_OF_RANGE)
 8006470:	2800      	cmp	r0, #0
 8006472:	db27      	blt.n	80064c4 <SD_CmdResp1Error+0xa4>
  if((response_r1 & SD_OCR_ADDR_MISALIGNED) == SD_OCR_ADDR_MISALIGNED)
 8006474:	0045      	lsls	r5, r0, #1
 8006476:	d427      	bmi.n	80064c8 <SD_CmdResp1Error+0xa8>
  if((response_r1 & SD_OCR_BLOCK_LEN_ERR) == SD_OCR_BLOCK_LEN_ERR)
 8006478:	0084      	lsls	r4, r0, #2
 800647a:	d427      	bmi.n	80064cc <SD_CmdResp1Error+0xac>
  if((response_r1 & SD_OCR_ERASE_SEQ_ERR) == SD_OCR_ERASE_SEQ_ERR)
 800647c:	00c1      	lsls	r1, r0, #3
 800647e:	d427      	bmi.n	80064d0 <SD_CmdResp1Error+0xb0>
  if((response_r1 & SD_OCR_BAD_ERASE_PARAM) == SD_OCR_BAD_ERASE_PARAM)
 8006480:	0102      	lsls	r2, r0, #4
 8006482:	d427      	bmi.n	80064d4 <SD_CmdResp1Error+0xb4>
  if((response_r1 & SD_OCR_WRITE_PROT_VIOLATION) == SD_OCR_WRITE_PROT_VIOLATION)
 8006484:	0143      	lsls	r3, r0, #5
 8006486:	d427      	bmi.n	80064d8 <SD_CmdResp1Error+0xb8>
  if((response_r1 & SD_OCR_LOCK_UNLOCK_FAILED) == SD_OCR_LOCK_UNLOCK_FAILED)
 8006488:	01c6      	lsls	r6, r0, #7
 800648a:	d427      	bmi.n	80064dc <SD_CmdResp1Error+0xbc>
  if((response_r1 & SD_OCR_COM_CRC_FAILED) == SD_OCR_COM_CRC_FAILED)
 800648c:	0205      	lsls	r5, r0, #8
 800648e:	d427      	bmi.n	80064e0 <SD_CmdResp1Error+0xc0>
  if((response_r1 & SD_OCR_ILLEGAL_CMD) == SD_OCR_ILLEGAL_CMD)
 8006490:	0244      	lsls	r4, r0, #9
 8006492:	d4e0      	bmi.n	8006456 <SD_CmdResp1Error+0x36>
  if((response_r1 & SD_OCR_CARD_ECC_FAILED) == SD_OCR_CARD_ECC_FAILED)
 8006494:	0281      	lsls	r1, r0, #10
 8006496:	d425      	bmi.n	80064e4 <SD_CmdResp1Error+0xc4>
  if((response_r1 & SD_OCR_CC_ERROR) == SD_OCR_CC_ERROR)
 8006498:	02c2      	lsls	r2, r0, #11
 800649a:	d425      	bmi.n	80064e8 <SD_CmdResp1Error+0xc8>
  if((response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR) == SD_OCR_GENERAL_UNKNOWN_ERROR)
 800649c:	0303      	lsls	r3, r0, #12
 800649e:	d425      	bmi.n	80064ec <SD_CmdResp1Error+0xcc>
  if((response_r1 & SD_OCR_STREAM_READ_UNDERRUN) == SD_OCR_STREAM_READ_UNDERRUN)
 80064a0:	0346      	lsls	r6, r0, #13
 80064a2:	d425      	bmi.n	80064f0 <SD_CmdResp1Error+0xd0>
  if((response_r1 & SD_OCR_STREAM_WRITE_OVERRUN) == SD_OCR_STREAM_WRITE_OVERRUN)
 80064a4:	0385      	lsls	r5, r0, #14
 80064a6:	d425      	bmi.n	80064f4 <SD_CmdResp1Error+0xd4>
  if((response_r1 & SD_OCR_CID_CSD_OVERWRITE) == SD_OCR_CID_CSD_OVERWRITE)
 80064a8:	03c4      	lsls	r4, r0, #15
 80064aa:	d425      	bmi.n	80064f8 <SD_CmdResp1Error+0xd8>
  if((response_r1 & SD_OCR_WP_ERASE_SKIP) == SD_OCR_WP_ERASE_SKIP)
 80064ac:	0401      	lsls	r1, r0, #16
 80064ae:	d425      	bmi.n	80064fc <SD_CmdResp1Error+0xdc>
  if((response_r1 & SD_OCR_CARD_ECC_DISABLED) == SD_OCR_CARD_ECC_DISABLED)
 80064b0:	0442      	lsls	r2, r0, #17
 80064b2:	d425      	bmi.n	8006500 <SD_CmdResp1Error+0xe0>
  if((response_r1 & SD_OCR_ERASE_RESET) == SD_OCR_ERASE_RESET)
 80064b4:	0483      	lsls	r3, r0, #18
 80064b6:	d425      	bmi.n	8006504 <SD_CmdResp1Error+0xe4>
    return(SD_AKE_SEQ_ERROR);
 80064b8:	f010 0f08 	tst.w	r0, #8
 80064bc:	bf0c      	ite	eq
 80064be:	2000      	moveq	r0, #0
 80064c0:	201a      	movne	r0, #26
 80064c2:	e7bb      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_ADDR_OUT_OF_RANGE);
 80064c4:	201c      	movs	r0, #28
 80064c6:	e7b9      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_ADDR_MISALIGNED);
 80064c8:	2009      	movs	r0, #9
 80064ca:	e7b7      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_BLOCK_LEN_ERR);
 80064cc:	200a      	movs	r0, #10
 80064ce:	e7b5      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_ERASE_SEQ_ERR);
 80064d0:	200b      	movs	r0, #11
 80064d2:	e7b3      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_BAD_ERASE_PARAM);
 80064d4:	200c      	movs	r0, #12
 80064d6:	e7b1      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_WRITE_PROT_VIOLATION);
 80064d8:	200d      	movs	r0, #13
 80064da:	e7af      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_LOCK_UNLOCK_FAILED);
 80064dc:	200e      	movs	r0, #14
 80064de:	e7ad      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_COM_CRC_FAILED);
 80064e0:	200f      	movs	r0, #15
 80064e2:	e7ab      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_CARD_ECC_FAILED);
 80064e4:	2011      	movs	r0, #17
 80064e6:	e7a9      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_CC_ERROR);
 80064e8:	2012      	movs	r0, #18
 80064ea:	e7a7      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_GENERAL_UNKNOWN_ERROR);
 80064ec:	2013      	movs	r0, #19
 80064ee:	e7a5      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_STREAM_READ_UNDERRUN);
 80064f0:	2014      	movs	r0, #20
 80064f2:	e7a3      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_STREAM_WRITE_OVERRUN);
 80064f4:	2015      	movs	r0, #21
 80064f6:	e7a1      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_CID_CSD_OVERWRITE);
 80064f8:	2016      	movs	r0, #22
 80064fa:	e79f      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_WP_ERASE_SKIP);
 80064fc:	2017      	movs	r0, #23
 80064fe:	e79d      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_CARD_ECC_DISABLED);
 8006500:	2018      	movs	r0, #24
 8006502:	e79b      	b.n	800643c <SD_CmdResp1Error+0x1c>
    return(SD_ERASE_RESET);
 8006504:	2019      	movs	r0, #25
 8006506:	e799      	b.n	800643c <SD_CmdResp1Error+0x1c>
 8006508:	fdffe008 	.word	0xfdffe008

0800650c <SD_FindSCR>:
{
 800650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tempscr[2] = {0, 0};
 8006510:	2300      	movs	r3, #0
{
 8006512:	b08e      	sub	sp, #56	; 0x38
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006514:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 8006516:	2410      	movs	r4, #16
{
 8006518:	4606      	mov	r6, r0
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800651a:	2708      	movs	r7, #8
{
 800651c:	460d      	mov	r5, r1
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	a903      	add	r1, sp, #12
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006522:	e9cd 2305 	strd	r2, r3, [sp, #20]
  uint32_t tempscr[2] = {0, 0};
 8006526:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 800652a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SET_BLOCKLEN;
 800652e:	e9cd 7403 	strd	r7, r4, [sp, #12]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006532:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006534:	f000 ff06 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006538:	4621      	mov	r1, r4
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ff70 	bl	8006420 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006540:	4604      	mov	r4, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	d138      	bne.n	80065b8 <SD_FindSCR+0xac>
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006546:	6a73      	ldr	r3, [r6, #36]	; 0x24
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006548:	2437      	movs	r4, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800654a:	a903      	add	r1, sp, #12
 800654c:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 800654e:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006550:	9404      	str	r4, [sp, #16]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)((hsd->RCA) << 16);
 8006552:	9303      	str	r3, [sp, #12]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006554:	f000 fef6 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006558:	4621      	mov	r1, r4
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff ff60 	bl	8006420 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006560:	4604      	mov	r4, r0
 8006562:	bb48      	cbnz	r0, 80065b8 <SD_FindSCR+0xac>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006564:	f04f 33ff 	mov.w	r3, #4294967295
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006568:	2230      	movs	r2, #48	; 0x30
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800656a:	900c      	str	r0, [sp, #48]	; 0x30
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800656c:	a908      	add	r1, sp, #32
 800656e:	6830      	ldr	r0, [r6, #0]
  sdmmc_datainitstructure.DataLength    = 8;
 8006570:	e9cd 3708 	strd	r3, r7, [sp, #32]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006574:	2302      	movs	r3, #2
 8006576:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800657a:	2301      	movs	r3, #1
 800657c:	930d      	str	r3, [sp, #52]	; 0x34
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 800657e:	f000 ff01 	bl	8007384 <SDMMC_DataConfig>
  sdmmc_cmdinitstructure.Argument         = 0;
 8006582:	9403      	str	r4, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 8006584:	2433      	movs	r4, #51	; 0x33
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006586:	a903      	add	r1, sp, #12
 8006588:	6830      	ldr	r0, [r6, #0]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_SEND_SCR;
 800658a:	9404      	str	r4, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800658c:	f000 feda 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SD_APP_SEND_SCR);
 8006590:	4621      	mov	r1, r4
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ff44 	bl	8006420 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8006598:	4604      	mov	r4, r0
 800659a:	b968      	cbnz	r0, 80065b8 <SD_FindSCR+0xac>
 800659c:	466f      	mov	r7, sp
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800659e:	f240 482a 	movw	r8, #1066	; 0x42a
 80065a2:	6830      	ldr	r0, [r6, #0]
 80065a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065a6:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80065aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80065ac:	d008      	beq.n	80065c0 <SD_FindSCR+0xb4>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80065ae:	0719      	lsls	r1, r3, #28
 80065b0:	d50d      	bpl.n	80065ce <SD_FindSCR+0xc2>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80065b2:	2308      	movs	r3, #8
    return errorstate;
 80065b4:	2404      	movs	r4, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80065b6:	6383      	str	r3, [r0, #56]	; 0x38
}
 80065b8:	4620      	mov	r0, r4
 80065ba:	b00e      	add	sp, #56	; 0x38
 80065bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	d5ef      	bpl.n	80065a4 <SD_FindSCR+0x98>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80065c4:	f000 feae 	bl	8007324 <SDMMC_ReadFIFO>
 80065c8:	f847 0f04 	str.w	r0, [r7, #4]!
 80065cc:	e7e9      	b.n	80065a2 <SD_FindSCR+0x96>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80065ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065d0:	079a      	lsls	r2, r3, #30
 80065d2:	d502      	bpl.n	80065da <SD_FindSCR+0xce>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80065d4:	2402      	movs	r4, #2
 80065d6:	6384      	str	r4, [r0, #56]	; 0x38
    return errorstate;
 80065d8:	e7ee      	b.n	80065b8 <SD_FindSCR+0xac>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80065da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80065dc:	069b      	lsls	r3, r3, #26
 80065de:	d503      	bpl.n	80065e8 <SD_FindSCR+0xdc>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80065e0:	2320      	movs	r3, #32
    return errorstate;
 80065e2:	2406      	movs	r4, #6
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80065e4:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 80065e6:	e7e7      	b.n	80065b8 <SD_FindSCR+0xac>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80065ec:	6383      	str	r3, [r0, #56]	; 0x38
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	ba1b      	rev	r3, r3
  *(pSCR + 1) = ((tempscr[0] & SD_0TO7BITS) << 24)  | ((tempscr[0] & SD_8TO15BITS) << 8) |\
 80065f2:	606b      	str	r3, [r5, #4]
 80065f4:	9b02      	ldr	r3, [sp, #8]
 80065f6:	ba1b      	rev	r3, r3
  *(pSCR) = ((tempscr[1] & SD_0TO7BITS) << 24)  | ((tempscr[1] & SD_8TO15BITS) << 8) |\
 80065f8:	602b      	str	r3, [r5, #0]
  return errorstate;
 80065fa:	e7dd      	b.n	80065b8 <SD_FindSCR+0xac>

080065fc <HAL_SD_MspInit>:
}
 80065fc:	4770      	bx	lr

080065fe <HAL_SD_Get_CardInfo>:
{
 80065fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006602:	6a06      	ldr	r6, [r0, #32]
{
 8006604:	4604      	mov	r4, r0
  pCardInfo->CardType = (uint8_t)(hsd->CardType);
 8006606:	f881 6056 	strb.w	r6, [r1, #86]	; 0x56
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 800660a:	2e01      	cmp	r6, #1
  pCardInfo->RCA      = (uint16_t)(hsd->RCA);
 800660c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800660e:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
  tmp = (hsd->CSD[0] & 0xFF000000) >> 24;
 8006612:	6a83      	ldr	r3, [r0, #40]	; 0x28
  pCardInfo->SD_csd.CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006614:	ea4f 7293 	mov.w	r2, r3, lsr #30
 8006618:	700a      	strb	r2, [r1, #0]
  pCardInfo->SD_csd.SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800661a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800661e:	704a      	strb	r2, [r1, #1]
  pCardInfo->SD_csd.Reserved1      = tmp & 0x03;
 8006620:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8006624:	708a      	strb	r2, [r1, #2]
  pCardInfo->SD_csd.TAAC = (uint8_t)tmp;
 8006626:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800662a:	70ca      	strb	r2, [r1, #3]
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 800662c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006630:	b2db      	uxtb	r3, r3
  pCardInfo->SD_csd.NSAC = (uint8_t)tmp;
 8006632:	710a      	strb	r2, [r1, #4]
  pCardInfo->SD_csd.MaxBusClkFrec = (uint8_t)tmp;
 8006634:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000) >> 24;
 8006636:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006638:	ea4f 6312 	mov.w	r3, r2, lsr #24
  pCardInfo->SD_csd.CardComdClasses = (uint16_t)(tmp << 4);
 800663c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006640:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8006642:	f3c2 5303 	ubfx	r3, r2, #20, #4
 8006646:	88c8      	ldrh	r0, [r1, #6]
 8006648:	ea43 0300 	orr.w	r3, r3, r0
 800664c:	80cb      	strh	r3, [r1, #6]
  pCardInfo->SD_csd.RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800664e:	f3c2 4303 	ubfx	r3, r2, #16, #4
 8006652:	720b      	strb	r3, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00) >> 8;
 8006654:	f3c2 2307 	ubfx	r3, r2, #8, #8
  pCardInfo->SD_csd.PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006658:	ea4f 10d3 	mov.w	r0, r3, lsr #7
 800665c:	7248      	strb	r0, [r1, #9]
  pCardInfo->SD_csd.WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800665e:	f3c3 1080 	ubfx	r0, r3, #6, #1
 8006662:	7288      	strb	r0, [r1, #10]
  pCardInfo->SD_csd.RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006664:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8006668:	72c8      	strb	r0, [r1, #11]
  pCardInfo->SD_csd.DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800666a:	f3c3 1000 	ubfx	r0, r3, #4, #1
 800666e:	7308      	strb	r0, [r1, #12]
  pCardInfo->SD_csd.Reserved2       = 0; /*!< Reserved */
 8006670:	f04f 0000 	mov.w	r0, #0
 8006674:	7348      	strb	r0, [r1, #13]
 8006676:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0))
 8006678:	f200 80da 	bhi.w	8006830 <HAL_SD_Get_CardInfo+0x232>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800667c:	029b      	lsls	r3, r3, #10
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 800667e:	f3c5 36c0 	ubfx	r6, r5, #15, #1
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8006682:	0092      	lsls	r2, r2, #2
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8006684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 8006688:	f402 727f 	and.w	r2, r2, #1020	; 0x3fc
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 800668c:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp) << 2;
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	431a      	orrs	r2, r3
 8006692:	610a      	str	r2, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8006694:	690b      	ldr	r3, [r1, #16]
 8006696:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800669a:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800669c:	f3c5 63c2 	ubfx	r3, r5, #27, #3
 80066a0:	750b      	strb	r3, [r1, #20]
    pCardInfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 80066a2:	f3c5 6302 	ubfx	r3, r5, #24, #3
 80066a6:	754b      	strb	r3, [r1, #21]
    pCardInfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80066a8:	f3c5 5342 	ubfx	r3, r5, #21, #3
 80066ac:	758b      	strb	r3, [r1, #22]
    pCardInfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80066ae:	f3c5 4382 	ubfx	r3, r5, #18, #3
 80066b2:	75cb      	strb	r3, [r1, #23]
    pCardInfo->SD_csd.DeviceSizeMul      = (tmp & 0x03) << 1;
 80066b4:	0beb      	lsrs	r3, r5, #15
 80066b6:	f003 0306 	and.w	r3, r3, #6
 80066ba:	760b      	strb	r3, [r1, #24]
 80066bc:	f3c5 2307 	ubfx	r3, r5, #8, #8
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80066c0:	7e0a      	ldrb	r2, [r1, #24]
 80066c2:	4332      	orrs	r2, r6
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80066c4:	2601      	movs	r6, #1
    pCardInfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 80066c6:	760a      	strb	r2, [r1, #24]
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80066c8:	f8d1 c010 	ldr.w	ip, [r1, #16]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80066cc:	7e0f      	ldrb	r7, [r1, #24]
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80066ce:	7a0a      	ldrb	r2, [r1, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80066d0:	3702      	adds	r7, #2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80066d2:	fa06 f202 	lsl.w	r2, r6, r2
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80066d6:	40be      	lsls	r6, r7
    pCardInfo->CardBlockSize = 1 << (pCardInfo->SD_csd.RdBlockLen);
 80066d8:	650a      	str	r2, [r1, #80]	; 0x50
    pCardInfo->CardCapacity *= (1 << (pCardInfo->SD_csd.DeviceSizeMul + 2));
 80066da:	ea4f 79e6 	mov.w	r9, r6, asr #31
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80066de:	fba6 6702 	umull	r6, r7, r6, r2
 80066e2:	fb02 7709 	mla	r7, r2, r9, r7
    pCardInfo->CardCapacity  = (pCardInfo->SD_csd.DeviceSize + 1) ;
 80066e6:	f10c 0201 	add.w	r2, ip, #1
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80066ea:	fba6 8902 	umull	r8, r9, r6, r2
 80066ee:	fb02 9907 	mla	r9, r2, r7, r9
 80066f2:	e9c1 8912 	strd	r8, r9, [r1, #72]	; 0x48
  pCardInfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 80066f6:	f3c3 1280 	ubfx	r2, r3, #6, #1
 80066fa:	764a      	strb	r2, [r1, #25]
  pCardInfo->SD_csd.EraseGrMul  = (tmp & 0x3F) << 1;
 80066fc:	005a      	lsls	r2, r3, #1
 80066fe:	f002 027e 	and.w	r2, r2, #126	; 0x7e
 8006702:	768a      	strb	r2, [r1, #26]
  pCardInfo->SD_csd.EraseGrMul     |= (tmp & 0x80) >> 7;
 8006704:	f3c5 12c0 	ubfx	r2, r5, #7, #1
 8006708:	7e8b      	ldrb	r3, [r1, #26]
 800670a:	4313      	orrs	r3, r2
 800670c:	768b      	strb	r3, [r1, #26]
  pCardInfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 800670e:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8006712:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000) >> 24);
 8006714:	6b63      	ldr	r3, [r4, #52]	; 0x34
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006716:	0fda      	lsrs	r2, r3, #31
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006718:	f3c3 5581 	ubfx	r5, r3, #22, #2
  pCardInfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 800671c:	770a      	strb	r2, [r1, #28]
  pCardInfo->SD_csd.ManDeflECC        = (tmp & 0x60) >> 5;
 800671e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8006722:	774a      	strb	r2, [r1, #29]
  pCardInfo->SD_csd.WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006724:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006728:	778a      	strb	r2, [r1, #30]
  pCardInfo->SD_csd.MaxWrBlockLen     = (tmp & 0x03) << 2;
 800672a:	0d9a      	lsrs	r2, r3, #22
 800672c:	f002 020c 	and.w	r2, r2, #12
 8006730:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006732:	7fca      	ldrb	r2, [r1, #31]
 8006734:	432a      	orrs	r2, r5
  pCardInfo->SD_csd.Reserved4 = 1;
 8006736:	2501      	movs	r5, #1
  pCardInfo->SD_csd.MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006738:	77ca      	strb	r2, [r1, #31]
  pCardInfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800673a:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800673e:	f881 2020 	strb.w	r2, [r1, #32]
  pCardInfo->SD_csd.Reserved3           = 0;
 8006742:	2200      	movs	r2, #0
 8006744:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCardInfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8006748:	f3c3 4200 	ubfx	r2, r3, #16, #1
 800674c:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCardInfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8006750:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006754:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCardInfo->SD_csd.CopyFlag         = (tmp & 0x40) >> 6;
 8006758:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800675c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCardInfo->SD_csd.PermWrProtect    = (tmp & 0x20) >> 5;
 8006760:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8006764:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCardInfo->SD_csd.TempWrProtect    = (tmp & 0x10) >> 4;
 8006768:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800676c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCardInfo->SD_csd.FileFormat       = (tmp & 0x0C) >> 2;
 8006770:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8006774:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006778:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 800677c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_csd.ECC              = (tmp & 0x03);
 8006780:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCardInfo->SD_csd.CSD_CRC   = (tmp & 0xFE) >> 1;
 8006784:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCardInfo->SD_csd.Reserved4 = 1;
 8006788:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
  tmp = (uint8_t)((hsd->CID[0] & 0xFF000000) >> 24);
 800678c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800678e:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ManufacturerID = tmp;
 8006790:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
  pCardInfo->SD_cid.OEM_AppliID = tmp << 8;
 8006794:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006798:	0212      	lsls	r2, r2, #8
 800679a:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.OEM_AppliID |= tmp;
 800679c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80067a0:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	4332      	orrs	r2, r6
 80067a6:	85ca      	strh	r2, [r1, #46]	; 0x2e
  pCardInfo->SD_cid.ProdName1 = tmp << 24;
 80067a8:	630b      	str	r3, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80067aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80067ac:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  tmp = (uint8_t)((hsd->CID[1] & 0xFF000000) >> 24);
 80067ae:	0e1e      	lsrs	r6, r3, #24
  pCardInfo->SD_cid.ProdName1 |= tmp << 16;
 80067b0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80067b4:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp << 8;
 80067b6:	0a1a      	lsrs	r2, r3, #8
 80067b8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80067ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80067be:	4332      	orrs	r2, r6
 80067c0:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80067c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80067c6:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  tmp = (uint8_t)(hsd->CID[1] & 0x000000FF);
 80067c8:	b2db      	uxtb	r3, r3
  pCardInfo->SD_cid.ProdName1 |= tmp;
 80067ca:	4332      	orrs	r2, r6
 80067cc:	630a      	str	r2, [r1, #48]	; 0x30
  pCardInfo->SD_cid.ProdName2 = tmp;
 80067ce:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
  tmp = (uint8_t)((hsd->CID[2] & 0xFF000000) >> 24);
 80067d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d4:	0e1a      	lsrs	r2, r3, #24
  pCardInfo->SD_cid.ProdRev = tmp;
 80067d6:	f881 2035 	strb.w	r2, [r1, #53]	; 0x35
  tmp = (uint8_t)((hsd->CID[2] & 0x00FF0000) >> 16);
 80067da:	0c1a      	lsrs	r2, r3, #16
 80067dc:	0612      	lsls	r2, r2, #24
  pCardInfo->SD_cid.ProdSN = tmp << 24;
 80067de:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 80067e0:	021a      	lsls	r2, r3, #8
 80067e2:	6b8e      	ldr	r6, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 80067e4:	021b      	lsls	r3, r3, #8
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 80067e6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 80067ea:	b29b      	uxth	r3, r3
  pCardInfo->SD_cid.ProdSN |= tmp << 16;
 80067ec:	4332      	orrs	r2, r6
 80067ee:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.ProdSN |= tmp << 8;
 80067f0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80067f2:	4313      	orrs	r3, r2
 80067f4:	638b      	str	r3, [r1, #56]	; 0x38
  tmp = (uint8_t)((hsd->CID[3] & 0xFF000000) >> 24);
 80067f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  pCardInfo->SD_cid.ProdSN |= tmp;
 80067f8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 80067fa:	f3c3 5403 	ubfx	r4, r3, #20, #4
  pCardInfo->SD_cid.ProdSN |= tmp;
 80067fe:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8006802:	638a      	str	r2, [r1, #56]	; 0x38
  pCardInfo->SD_cid.Reserved1   |= (tmp & 0xF0) >> 4;
 8006804:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8006808:	4322      	orrs	r2, r4
 800680a:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
  pCardInfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 800680e:	0a1a      	lsrs	r2, r3, #8
 8006810:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8006814:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006816:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800681a:	8fcc      	ldrh	r4, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 800681c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCardInfo->SD_cid.ManufactDate |= tmp;
 8006820:	4322      	orrs	r2, r4
 8006822:	87ca      	strh	r2, [r1, #62]	; 0x3e
  pCardInfo->SD_cid.CID_CRC   = (tmp & 0xFE) >> 1;
 8006824:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
  pCardInfo->SD_cid.Reserved2 = 1;
 8006828:	f881 5041 	strb.w	r5, [r1, #65]	; 0x41
}
 800682c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006830:	2e02      	cmp	r6, #2
 8006832:	d121      	bne.n	8006878 <HAL_SD_Get_CardInfo+0x27a>
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8006834:	0412      	lsls	r2, r2, #16
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8006836:	2700      	movs	r7, #0
    pCardInfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8006838:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800683c:	610a      	str	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000) >> 24);
 800683e:	0e2a      	lsrs	r2, r5, #24
    pCardInfo->SD_csd.DeviceSize |= (tmp << 8);
 8006840:	690b      	ldr	r3, [r1, #16]
 8006842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006846:	610b      	str	r3, [r1, #16]
    pCardInfo->SD_csd.DeviceSize |= (tmp);
 8006848:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800684c:	690a      	ldr	r2, [r1, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	610b      	str	r3, [r1, #16]
 8006852:	f3c5 2307 	ubfx	r3, r5, #8, #8
    pCardInfo->CardCapacity = (uint64_t)(((uint64_t)pCardInfo->SD_csd.DeviceSize + 1) * 512 * 1024);
 8006856:	690e      	ldr	r6, [r1, #16]
 8006858:	f116 0801 	adds.w	r8, r6, #1
 800685c:	f147 0900 	adc.w	r9, r7, #0
 8006860:	ea4f 46c8 	mov.w	r6, r8, lsl #19
 8006864:	ea4f 42c9 	mov.w	r2, r9, lsl #19
 8006868:	ea42 3258 	orr.w	r2, r2, r8, lsr #13
 800686c:	e9c1 6212 	strd	r6, r2, [r1, #72]	; 0x48
    pCardInfo->CardBlockSize = 512;
 8006870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006874:	650a      	str	r2, [r1, #80]	; 0x50
 8006876:	e73e      	b.n	80066f6 <HAL_SD_Get_CardInfo+0xf8>
    errorstate = SD_ERROR;
 8006878:	2029      	movs	r0, #41	; 0x29
 800687a:	e73c      	b.n	80066f6 <HAL_SD_Get_CardInfo+0xf8>

0800687c <HAL_SD_Init>:
{ 
 800687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006880:	2500      	movs	r5, #0
{ 
 8006882:	b091      	sub	sp, #68	; 0x44
 8006884:	4604      	mov	r4, r0
 8006886:	460e      	mov	r6, r1
  hsd->Lock = HAL_UNLOCKED;
 8006888:	7705      	strb	r5, [r0, #28]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK;
 800688a:	f88d 5012 	strb.w	r5, [sp, #18]
  HAL_SD_MspInit(hsd);
 800688e:	f7ff feb5 	bl	80065fc <HAL_SD_MspInit>
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006892:	2376      	movs	r3, #118	; 0x76
  tmpinit.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006894:	950e      	str	r5, [sp, #56]	; 0x38
  tmpinit.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006896:	930f      	str	r3, [sp, #60]	; 0x3c
  SDMMC_Init(hsd->Instance, tmpinit);
 8006898:	ab10      	add	r3, sp, #64	; 0x40
  tmpinit.BusWide             = SDMMC_BUS_WIDE_1B;
 800689a:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, tmpinit);
 800689e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80068a2:	ab0a      	add	r3, sp, #40	; 0x28
 80068a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  tmpinit.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80068a8:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
  SDMMC_Init(hsd->Instance, tmpinit);
 80068ac:	6820      	ldr	r0, [r4, #0]
 80068ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b0:	f000 fd1c 	bl	80072ec <SDMMC_Init>
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80068b4:	6820      	ldr	r0, [r4, #0]
  __IO HAL_SD_ErrorTypedef errorstate = SD_OK; 
 80068b6:	f88d 5013 	strb.w	r5, [sp, #19]
  __HAL_SD_SDMMC_DISABLE(hsd); 
 80068ba:	6843      	ldr	r3, [r0, #4]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 80068c2:	f000 fd37 	bl	8007334 <SDMMC_PowerState_ON>
  HAL_Delay(1);
 80068c6:	2001      	movs	r0, #1
 80068c8:	f007 f8c0 	bl	800da4c <HAL_Delay>
  __HAL_SD_SDMMC_ENABLE(hsd);
 80068cc:	6820      	ldr	r0, [r4, #0]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068ce:	a905      	add	r1, sp, #20
  __HAL_SD_SDMMC_ENABLE(hsd);
 80068d0:	6843      	ldr	r3, [r0, #4]
 80068d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d6:	6043      	str	r3, [r0, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80068d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_GO_IDLE_STATE;
 80068dc:	e9cd 5505 	strd	r5, r5, [sp, #20]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80068e0:	9309      	str	r3, [sp, #36]	; 0x24
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80068e2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80068e6:	f000 fd2d 	bl	8007344 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 80068ea:	6820      	ldr	r0, [r4, #0]
 80068ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80068f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 80068f6:	b123      	cbz	r3, 8006902 <HAL_SD_Init+0x86>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068f8:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80068fc:	6383      	str	r3, [r0, #56]	; 0x38
  return errorstate;
 80068fe:	2300      	movs	r3, #0
 8006900:	e005      	b.n	800690e <HAL_SD_Init+0x92>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006902:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while((timeout > 0) && (!tmp))
 8006904:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDSENT);
 8006906:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  while((timeout > 0) && (!tmp))
 800690a:	d1f4      	bne.n	80068f6 <HAL_SD_Init+0x7a>
    return errorstate;
 800690c:	2303      	movs	r3, #3
  errorstate = SD_CmdError(hsd);
 800690e:	f88d 3013 	strb.w	r3, [sp, #19]
  if(errorstate != SD_OK)
 8006912:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006916:	b18b      	cbz	r3, 800693c <HAL_SD_Init+0xc0>
  return errorstate;
 8006918:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800691c:	b2db      	uxtb	r3, r3
  errorstate = SD_PowerON(hsd); 
 800691e:	f88d 3012 	strb.w	r3, [sp, #18]
  if(errorstate != SD_OK)     
 8006922:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006926:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80ae 	beq.w	8006a8c <HAL_SD_Init+0x210>
  return errorstate;
 8006930:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8006934:	b2c0      	uxtb	r0, r0
}
 8006936:	b011      	add	sp, #68	; 0x44
 8006938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 800693c:	2308      	movs	r3, #8
 800693e:	f44f 77d5 	mov.w	r7, #426	; 0x1aa
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006942:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.CmdIndex         = SD_SDMMC_SEND_IF_COND;
 8006944:	e9cd 7305 	strd	r7, r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	9307      	str	r3, [sp, #28]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 800694c:	f000 fcfa 	bl	8007344 <SDMMC_SendCommand>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8006950:	6820      	ldr	r0, [r4, #0]
  uint32_t timeout = SDMMC_CMD0TIMEOUT, tmp;
 8006952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT); 
 8006956:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006958:	f013 0f45 	tst.w	r3, #69	; 0x45
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
  while((!tmp) && (timeout > 0))
 8006962:	b90b      	cbnz	r3, 8006968 <HAL_SD_Init+0xec>
 8006964:	2a00      	cmp	r2, #0
 8006966:	d174      	bne.n	8006a52 <HAL_SD_Init+0x1d6>
  tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT); 
 8006968:	6b43      	ldr	r3, [r0, #52]	; 0x34
  if((timeout == 0) || tmp)
 800696a:	b112      	cbz	r2, 8006972 <HAL_SD_Init+0xf6>
 800696c:	f013 0304 	ands.w	r3, r3, #4
 8006970:	d077      	beq.n	8006a62 <HAL_SD_Init+0x1e6>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006972:	2304      	movs	r3, #4
 8006974:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006976:	2303      	movs	r3, #3
  errorstate = SD_CmdResp7Error(hsd);
 8006978:	f88d 3013 	strb.w	r3, [sp, #19]
 800697c:	2300      	movs	r3, #0
  if (errorstate == SD_OK)
 800697e:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8006982:	2a00      	cmp	r2, #0
 8006984:	d175      	bne.n	8006a72 <HAL_SD_Init+0x1f6>
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 8006986:	2201      	movs	r2, #1
    sdtype        = SD_HIGH_CAPACITY;
 8006988:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    hsd->CardType = STD_CAPACITY_SD_CARD_V2_0; 
 800698c:	6222      	str	r2, [r4, #32]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 800698e:	2537      	movs	r5, #55	; 0x37
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006990:	a905      	add	r1, sp, #20
  sdmmc_cmdinitstructure.Argument         = 0;
 8006992:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_CMD;
 8006994:	9506      	str	r5, [sp, #24]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006996:	f000 fcd5 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 800699a:	4629      	mov	r1, r5
 800699c:	4620      	mov	r0, r4
 800699e:	f7ff fd3f 	bl	8006420 <SD_CmdResp1Error>
 80069a2:	f88d 0013 	strb.w	r0, [sp, #19]
  if(errorstate == SD_OK)
 80069a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80069aa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1b2      	bne.n	8006918 <HAL_SD_Init+0x9c>
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80069b2:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
      sdmmc_cmdinitstructure.Argument         = 0;
 80069b6:	46a8      	mov	r8, r5
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80069b8:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80069bc:	f04f 0b37 	mov.w	fp, #55	; 0x37
 80069c0:	f04f 0a40 	mov.w	sl, #64	; 0x40
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80069c4:	f44f 6980 	mov.w	r9, #1024	; 0x400
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069c8:	a905      	add	r1, sp, #20
 80069ca:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = 0;
 80069cc:	f8cd 8014 	str.w	r8, [sp, #20]
      sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 80069d0:	f8cd 8020 	str.w	r8, [sp, #32]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80069d4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80069d8:	e9cd ba06 	strd	fp, sl, [sp, #24]
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069dc:	f000 fcb2 	bl	8007344 <SDMMC_SendCommand>
      errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 80069e0:	4659      	mov	r1, fp
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff fd1c 	bl	8006420 <SD_CmdResp1Error>
 80069e8:	f88d 0013 	strb.w	r0, [sp, #19]
      if(errorstate != SD_OK)
 80069ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80069f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d18f      	bne.n	8006918 <HAL_SD_Init+0x9c>
      sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_SD_APP_OP_COND;
 80069f8:	2329      	movs	r3, #41	; 0x29
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80069fa:	a905      	add	r1, sp, #20
 80069fc:	6820      	ldr	r0, [r4, #0]
      sdmmc_cmdinitstructure.Argument         = SD_VOLTAGE_WINDOW_SD | sdtype;
 80069fe:	9705      	str	r7, [sp, #20]
      sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006a00:	e9cd 3a06 	strd	r3, sl, [sp, #24]
      sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006a04:	e9cd 2908 	strd	r2, r9, [sp, #32]
      SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006a08:	f000 fc9c 	bl	8007344 <SDMMC_SendCommand>
  while (!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a10:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006a14:	d0fb      	beq.n	8006a0e <HAL_SD_Init+0x192>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006a16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a18:	f013 0304 	ands.w	r3, r3, #4
 8006a1c:	d02b      	beq.n	8006a76 <HAL_SD_Init+0x1fa>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006a1e:	2304      	movs	r3, #4
 8006a20:	6383      	str	r3, [r0, #56]	; 0x38
    return errorstate;
 8006a22:	2303      	movs	r3, #3
      errorstate = SD_CmdResp3Error(hsd);
 8006a24:	f88d 3013 	strb.w	r3, [sp, #19]
      if(errorstate != SD_OK)
 8006a28:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006a2c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f47f af71 	bne.w	8006918 <HAL_SD_Init+0x9c>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a36:	f000 fc9b 	bl	8007370 <SDMMC_GetResponse>
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006a3a:	2800      	cmp	r0, #0
      count++;
 8006a3c:	f105 0501 	add.w	r5, r5, #1
 8006a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    while((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8006a44:	db1b      	blt.n	8006a7e <HAL_SD_Init+0x202>
 8006a46:	429d      	cmp	r5, r3
 8006a48:	d1b8      	bne.n	80069bc <HAL_SD_Init+0x140>
      errorstate = SD_INVALID_VOLTRANGE;
 8006a4a:	231b      	movs	r3, #27
 8006a4c:	f88d 3013 	strb.w	r3, [sp, #19]
 8006a50:	e762      	b.n	8006918 <HAL_SD_Init+0x9c>
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8006a52:	6b43      	ldr	r3, [r0, #52]	; 0x34
    timeout--;
 8006a54:	3a01      	subs	r2, #1
    tmp = __HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT);
 8006a56:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006a5a:	bf14      	ite	ne
 8006a5c:	2301      	movne	r3, #1
 8006a5e:	2300      	moveq	r3, #0
 8006a60:	e77f      	b.n	8006962 <HAL_SD_Init+0xe6>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CMDREND))
 8006a62:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006a64:	0655      	lsls	r5, r2, #25
 8006a66:	d502      	bpl.n	8006a6e <HAL_SD_Init+0x1f2>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CMDREND);
 8006a68:	2240      	movs	r2, #64	; 0x40
 8006a6a:	6382      	str	r2, [r0, #56]	; 0x38
 8006a6c:	e784      	b.n	8006978 <HAL_SD_Init+0xfc>
  return errorstate;
 8006a6e:	2329      	movs	r3, #41	; 0x29
 8006a70:	e782      	b.n	8006978 <HAL_SD_Init+0xfc>
  uint32_t sdtype = SD_STD_CAPACITY;
 8006a72:	461f      	mov	r7, r3
 8006a74:	e78b      	b.n	800698e <HAL_SD_Init+0x112>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a7a:	6382      	str	r2, [r0, #56]	; 0x38
 8006a7c:	e7d2      	b.n	8006a24 <HAL_SD_Init+0x1a8>
    if(count >= SD_MAX_VOLT_TRIAL)
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	d0e3      	beq.n	8006a4a <HAL_SD_Init+0x1ce>
    if((response & SD_HIGH_CAPACITY) == SD_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a82:	0040      	lsls	r0, r0, #1
      hsd->CardType = HIGH_CAPACITY_SD_CARD;
 8006a84:	bf44      	itt	mi
 8006a86:	2302      	movmi	r3, #2
 8006a88:	6223      	strmi	r3, [r4, #32]
 8006a8a:	e745      	b.n	8006918 <HAL_SD_Init+0x9c>
  if(SDMMC_GetPowerState(hsd->Instance) == 0) /* Power off */
 8006a8c:	6820      	ldr	r0, [r4, #0]
 8006a8e:	f000 fc55 	bl	800733c <SDMMC_GetPowerState>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f000 80c2 	beq.w	8006c1c <HAL_SD_Init+0x3a0>
  if(hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006a98:	6a23      	ldr	r3, [r4, #32]
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d026      	beq.n	8006aec <HAL_SD_Init+0x270>
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	23c0      	movs	r3, #192	; 0xc0
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006aa2:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Argument         = 0;
 8006aa4:	9505      	str	r5, [sp, #20]
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aa6:	9508      	str	r5, [sp, #32]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006aa8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ab0:	a905      	add	r1, sp, #20
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006ab4:	f000 fc46 	bl	8007344 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7ff fbf7 	bl	80062ac <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006abe:	4605      	mov	r5, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d155      	bne.n	8006b70 <HAL_SD_Init+0x2f4>
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	6820      	ldr	r0, [r4, #0]
 8006ac8:	f000 fc52 	bl	8007370 <SDMMC_GetResponse>
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006acc:	2104      	movs	r1, #4
    hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ace:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ad0:	6820      	ldr	r0, [r4, #0]
 8006ad2:	f000 fc4d 	bl	8007370 <SDMMC_GetResponse>
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ad6:	2108      	movs	r1, #8
    hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ad8:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	f000 fc48 	bl	8007370 <SDMMC_GetResponse>
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ae0:	210c      	movs	r1, #12
    hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ae2:	6420      	str	r0, [r4, #64]	; 0x40
    hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	f000 fc43 	bl	8007370 <SDMMC_GetResponse>
 8006aea:	6460      	str	r0, [r4, #68]	; 0x44
  if((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1)    || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006aec:	6a23      	ldr	r3, [r4, #32]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d92b      	bls.n	8006b4a <HAL_SD_Init+0x2ce>
 8006af2:	2b06      	cmp	r3, #6
 8006af4:	d029      	beq.n	8006b4a <HAL_SD_Init+0x2ce>
  uint16_t sd_rca = 1;
 8006af6:	2001      	movs	r0, #1
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006af8:	6a23      	ldr	r3, [r4, #32]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	f000 8092 	beq.w	8006c24 <HAL_SD_Init+0x3a8>
    hsd->RCA = sd_rca;
 8006b00:	6260      	str	r0, [r4, #36]	; 0x24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006b02:	0400      	lsls	r0, r0, #16
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006b04:	2209      	movs	r2, #9
 8006b06:	23c0      	movs	r3, #192	; 0xc0
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006b08:	9005      	str	r0, [sp, #20]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b0a:	a905      	add	r1, sp, #20
 8006b0c:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_LONG;
 8006b0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b12:	f000 fc17 	bl	8007344 <SDMMC_SendCommand>
    errorstate = SD_CmdResp2Error(hsd);
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7ff fbc8 	bl	80062ac <SD_CmdResp2Error>
    if(errorstate != SD_OK)
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	bb38      	cbnz	r0, 8006b70 <HAL_SD_Init+0x2f4>
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b20:	4601      	mov	r1, r0
 8006b22:	6820      	ldr	r0, [r4, #0]
 8006b24:	f000 fc24 	bl	8007370 <SDMMC_GetResponse>
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b28:	2104      	movs	r1, #4
    hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b2a:	62a0      	str	r0, [r4, #40]	; 0x28
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	f000 fc1f 	bl	8007370 <SDMMC_GetResponse>
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b32:	2108      	movs	r1, #8
    hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b34:	62e0      	str	r0, [r4, #44]	; 0x2c
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	f000 fc1a 	bl	8007370 <SDMMC_GetResponse>
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b3c:	210c      	movs	r1, #12
    hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b3e:	6320      	str	r0, [r4, #48]	; 0x30
    hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	f000 fc15 	bl	8007370 <SDMMC_GetResponse>
 8006b46:	6360      	str	r0, [r4, #52]	; 0x34
 8006b48:	e012      	b.n	8006b70 <HAL_SD_Init+0x2f4>
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	2340      	movs	r3, #64	; 0x40
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b4e:	a905      	add	r1, sp, #20
 8006b50:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006b52:	e9cd 2306 	strd	r2, r3, [sp, #24]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b56:	f000 fbf5 	bl	8007344 <SDMMC_SendCommand>
  while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT))
 8006b5a:	6820      	ldr	r0, [r4, #0]
 8006b5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b5e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8006b62:	d0fb      	beq.n	8006b5c <HAL_SD_Init+0x2e0>
  if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CTIMEOUT))
 8006b64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b66:	075b      	lsls	r3, r3, #29
 8006b68:	d536      	bpl.n	8006bd8 <HAL_SD_Init+0x35c>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006b6a:	2304      	movs	r3, #4
    return errorstate;
 8006b6c:	2503      	movs	r5, #3
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CTIMEOUT);
 8006b6e:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SD_Initialize_Cards(hsd);
 8006b70:	f88d 5012 	strb.w	r5, [sp, #18]
  if (errorstate != SD_OK)
 8006b74:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f47f aed9 	bne.w	8006930 <HAL_SD_Init+0xb4>
  errorstate = HAL_SD_Get_CardInfo(hsd, SDCardInfo);
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4620      	mov	r0, r4
 8006b82:	f7ff fd3c 	bl	80065fe <HAL_SD_Get_CardInfo>
 8006b86:	f88d 0012 	strb.w	r0, [sp, #18]
  if (errorstate == SD_OK)
 8006b8a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006b8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b92:	b9ab      	cbnz	r3, 8006bc0 <HAL_SD_Init+0x344>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006b94:	f8b6 3054 	ldrh.w	r3, [r6, #84]	; 0x54
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006b98:	2507      	movs	r5, #7
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006b9a:	a905      	add	r1, sp, #20
 8006b9c:	6820      	ldr	r0, [r4, #0]
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006b9e:	041b      	lsls	r3, r3, #16
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ba0:	9208      	str	r2, [sp, #32]
  sdmmc_cmdinitstructure.Argument         = (uint32_t)addr;
 8006ba2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006ba4:	2340      	movs	r3, #64	; 0x40
 8006ba6:	e9cd 5306 	strd	r5, r3, [sp, #24]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bae:	9309      	str	r3, [sp, #36]	; 0x24
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006bb0:	f000 fbc8 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEL_DESEL_CARD);
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f7ff fc32 	bl	8006420 <SD_CmdResp1Error>
    errorstate = SD_Select_Deselect(hsd, (uint32_t)(((uint32_t)SDCardInfo->RCA) << 16));
 8006bbc:	f88d 0012 	strb.w	r0, [sp, #18]
  SDMMC_Init(hsd->Instance, hsd->Init);   
 8006bc0:	f104 0310 	add.w	r3, r4, #16
 8006bc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006bc8:	1d23      	adds	r3, r4, #4
 8006bca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006bce:	6820      	ldr	r0, [r4, #0]
 8006bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bd2:	f000 fb8b 	bl	80072ec <SDMMC_Init>
 8006bd6:	e6ab      	b.n	8006930 <HAL_SD_Init+0xb4>
  else if(__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_CCRCFAIL))
 8006bd8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006bda:	f015 0501 	ands.w	r5, r5, #1
 8006bde:	d002      	beq.n	8006be6 <HAL_SD_Init+0x36a>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_CCRCFAIL);
 8006be0:	2501      	movs	r5, #1
 8006be2:	6385      	str	r5, [r0, #56]	; 0x38
 8006be4:	e7c4      	b.n	8006b70 <HAL_SD_Init+0x2f4>
  if(SDMMC_GetCommandResponse(hsd->Instance) != SD_CMD)
 8006be6:	f000 fbc0 	bl	800736a <SDMMC_GetCommandResponse>
 8006bea:	2803      	cmp	r0, #3
 8006bec:	d001      	beq.n	8006bf2 <HAL_SD_Init+0x376>
    return errorstate;
 8006bee:	2510      	movs	r5, #16
 8006bf0:	e7be      	b.n	8006b70 <HAL_SD_Init+0x2f4>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bf8:	4629      	mov	r1, r5
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bfa:	6383      	str	r3, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bfc:	f000 fbb8 	bl	8007370 <SDMMC_GetResponse>
  if((response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)) == SD_ALLZERO)
 8006c00:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8006c04:	d101      	bne.n	8006c0a <HAL_SD_Init+0x38e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006c06:	0c00      	lsrs	r0, r0, #16
 8006c08:	e776      	b.n	8006af8 <HAL_SD_Init+0x27c>
  if((response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR) == SD_R6_GENERAL_UNKNOWN_ERROR)
 8006c0a:	0487      	lsls	r7, r0, #18
 8006c0c:	d408      	bmi.n	8006c20 <HAL_SD_Init+0x3a4>
  if((response_r1 & SD_R6_ILLEGAL_CMD) == SD_R6_ILLEGAL_CMD)
 8006c0e:	0445      	lsls	r5, r0, #17
 8006c10:	d4ed      	bmi.n	8006bee <HAL_SD_Init+0x372>
  if((response_r1 & SD_R6_COM_CRC_FAILED) == SD_R6_COM_CRC_FAILED)
 8006c12:	0401      	lsls	r1, r0, #16
 8006c14:	f57f af6f 	bpl.w	8006af6 <HAL_SD_Init+0x27a>
    return(SD_COM_CRC_FAILED);
 8006c18:	250f      	movs	r5, #15
 8006c1a:	e7a9      	b.n	8006b70 <HAL_SD_Init+0x2f4>
    return errorstate;
 8006c1c:	2525      	movs	r5, #37	; 0x25
 8006c1e:	e7a7      	b.n	8006b70 <HAL_SD_Init+0x2f4>
    return(SD_GENERAL_UNKNOWN_ERROR);
 8006c20:	2513      	movs	r5, #19
 8006c22:	e7a5      	b.n	8006b70 <HAL_SD_Init+0x2f4>
  if (hsd->CardType != SECURE_DIGITAL_IO_CARD)
 8006c24:	2500      	movs	r5, #0
 8006c26:	e7a3      	b.n	8006b70 <HAL_SD_Init+0x2f4>

08006c28 <HAL_SD_WideBusOperation_Config>:
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006c28:	6a03      	ldr	r3, [r0, #32]
 8006c2a:	2b03      	cmp	r3, #3
{
 8006c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c2e:	4605      	mov	r5, r0
 8006c30:	b08d      	sub	sp, #52	; 0x34
 8006c32:	460e      	mov	r6, r1
  if (hsd->CardType == MULTIMEDIA_CARD)
 8006c34:	f000 8089 	beq.w	8006d4a <HAL_SD_WideBusOperation_Config+0x122>
  else if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	f200 8084 	bhi.w	8006d46 <HAL_SD_WideBusOperation_Config+0x11e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c3e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006c42:	f000 8082 	beq.w	8006d4a <HAL_SD_WideBusOperation_Config+0x122>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c46:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006c4a:	d152      	bne.n	8006cf2 <HAL_SD_WideBusOperation_Config+0xca>
  uint32_t scr[2] = {0, 0};
 8006c4c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006c4e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006c50:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006c54:	f000 fb8c 	bl	8007370 <SDMMC_GetResponse>
 8006c58:	0180      	lsls	r0, r0, #6
 8006c5a:	d503      	bpl.n	8006c64 <HAL_SD_WideBusOperation_Config+0x3c>
    return errorstate;
 8006c5c:	240e      	movs	r4, #14
}
 8006c5e:	4620      	mov	r0, r4
 8006c60:	b00d      	add	sp, #52	; 0x34
 8006c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SD_FindSCR(hsd, scr);
 8006c64:	a904      	add	r1, sp, #16
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7ff fc50 	bl	800650c <SD_FindSCR>
  if(errorstate != SD_OK)
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d1f5      	bne.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
  if((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	0359      	lsls	r1, r3, #13
 8006c76:	d401      	bmi.n	8006c7c <HAL_SD_WideBusOperation_Config+0x54>
    return errorstate;
 8006c78:	2425      	movs	r4, #37	; 0x25
 8006c7a:	e7f0      	b.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006c7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006c7e:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c80:	9009      	str	r0, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c82:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006c84:	041b      	lsls	r3, r3, #16
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c86:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006c88:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	e9cd 7307 	strd	r7, r3, [sp, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c94:	930a      	str	r3, [sp, #40]	; 0x28
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006c96:	f000 fb55 	bl	8007344 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f7ff fbbf 	bl	8006420 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d1da      	bne.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
    sdmmc_cmdinitstructure.Argument         = 2;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006cac:	2406      	movs	r4, #6
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cae:	a906      	add	r1, sp, #24
 8006cb0:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_APP_SD_SET_BUSWIDTH;
 8006cb2:	9407      	str	r4, [sp, #28]
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006cb4:	f000 fb46 	bl	8007344 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_SD_SET_BUSWIDTH);
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7ff fbb0 	bl	8006420 <SD_CmdResp1Error>
 8006cc0:	4604      	mov	r4, r0
    if (errorstate == SD_OK)
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d1cb      	bne.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
      tmpinit.ClockEdge           = hsd->Init.ClockEdge;
 8006cc6:	686b      	ldr	r3, [r5, #4]
 8006cc8:	9306      	str	r3, [sp, #24]
      tmpinit.ClockBypass         = hsd->Init.ClockBypass;
 8006cca:	68ab      	ldr	r3, [r5, #8]
 8006ccc:	9307      	str	r3, [sp, #28]
      tmpinit.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cce:	68eb      	ldr	r3, [r5, #12]
      tmpinit.BusWide             = WideMode;
 8006cd0:	e9cd 3608 	strd	r3, r6, [sp, #32]
      tmpinit.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cd4:	696b      	ldr	r3, [r5, #20]
 8006cd6:	930a      	str	r3, [sp, #40]	; 0x28
      tmpinit.ClockDiv            = hsd->Init.ClockDiv;
 8006cd8:	69ab      	ldr	r3, [r5, #24]
 8006cda:	930b      	str	r3, [sp, #44]	; 0x2c
      SDMMC_Init(hsd->Instance, tmpinit);
 8006cdc:	ab0c      	add	r3, sp, #48	; 0x30
 8006cde:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006ce2:	ab06      	add	r3, sp, #24
 8006ce4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006ce8:	6828      	ldr	r0, [r5, #0]
 8006cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cec:	f000 fafe 	bl	80072ec <SDMMC_Init>
 8006cf0:	e7b5      	b.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006cf2:	bb61      	cbnz	r1, 8006d4e <HAL_SD_WideBusOperation_Config+0x126>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006cf4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8006cf6:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SD_CARD_LOCKED) == SD_CARD_LOCKED)
 8006cfa:	f000 fb39 	bl	8007370 <SDMMC_GetResponse>
 8006cfe:	0182      	lsls	r2, r0, #6
 8006d00:	d4ac      	bmi.n	8006c5c <HAL_SD_WideBusOperation_Config+0x34>
  errorstate = SD_FindSCR(hsd, scr);
 8006d02:	a904      	add	r1, sp, #16
 8006d04:	4628      	mov	r0, r5
 8006d06:	f7ff fc01 	bl	800650c <SD_FindSCR>
  if(errorstate != SD_OK)
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1a6      	bne.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
  if((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 8006d10:	9b05      	ldr	r3, [sp, #20]
 8006d12:	03db      	lsls	r3, r3, #15
 8006d14:	d5b0      	bpl.n	8006c78 <HAL_SD_WideBusOperation_Config+0x50>
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d18:	2737      	movs	r7, #55	; 0x37
    sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d1a:	9009      	str	r0, [sp, #36]	; 0x24
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d1c:	a906      	add	r1, sp, #24
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006d1e:	041b      	lsls	r3, r3, #16
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d20:	6828      	ldr	r0, [r5, #0]
    sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 8006d22:	9306      	str	r3, [sp, #24]
    sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	e9cd 7307 	strd	r7, r3, [sp, #28]
    sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2e:	930a      	str	r3, [sp, #40]	; 0x28
    SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d30:	f000 fb08 	bl	8007344 <SDMMC_SendCommand>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_APP_CMD);
 8006d34:	4639      	mov	r1, r7
 8006d36:	4628      	mov	r0, r5
 8006d38:	f7ff fb72 	bl	8006420 <SD_CmdResp1Error>
    if(errorstate != SD_OK)
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d18d      	bne.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
    sdmmc_cmdinitstructure.Argument         = 0;
 8006d42:	9006      	str	r0, [sp, #24]
 8006d44:	e7b2      	b.n	8006cac <HAL_SD_WideBusOperation_Config+0x84>
  HAL_SD_ErrorTypedef errorstate = SD_OK;
 8006d46:	2400      	movs	r4, #0
 8006d48:	e789      	b.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
    return errorstate;
 8006d4a:	2427      	movs	r4, #39	; 0x27
 8006d4c:	e787      	b.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>
      errorstate = SD_INVALID_PARAMETER;
 8006d4e:	2426      	movs	r4, #38	; 0x26
 8006d50:	e785      	b.n	8006c5e <HAL_SD_WideBusOperation_Config+0x36>

08006d52 <HAL_SD_StopTransfer>:
{
 8006d52:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d54:	2240      	movs	r2, #64	; 0x40
{
 8006d56:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	250c      	movs	r5, #12
{
 8006d5c:	4604      	mov	r4, r0
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d5e:	a901      	add	r1, sp, #4
 8006d60:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d62:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinitstructure.CmdIndex         = SD_CMD_STOP_TRANSMISSION;
 8006d66:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d6e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d70:	f000 fae8 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_STOP_TRANSMISSION);
 8006d74:	4629      	mov	r1, r5
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff fb52 	bl	8006420 <SD_CmdResp1Error>
}
 8006d7c:	b007      	add	sp, #28
 8006d7e:	bd30      	pop	{r4, r5, pc}

08006d80 <HAL_SD_ReadBlocks>:
{
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	4604      	mov	r4, r0
 8006d86:	4615      	mov	r5, r2
  hsd->Instance->DCTRL = 0;
 8006d88:	6800      	ldr	r0, [r0, #0]
 8006d8a:	2200      	movs	r2, #0
{
 8006d8c:	b08c      	sub	sp, #48	; 0x30
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006d8e:	2710      	movs	r7, #16
  hsd->Instance->DCTRL = 0;
 8006d90:	62c2      	str	r2, [r0, #44]	; 0x2c
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006d92:	f04f 0c00 	mov.w	ip, #0
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006d96:	6a22      	ldr	r2, [r4, #32]
{
 8006d98:	460e      	mov	r6, r1
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006d9a:	a901      	add	r1, sp, #4
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006d9c:	2a02      	cmp	r2, #2
    ReadAddr /= 512;
 8006d9e:	bf04      	itt	eq
 8006da0:	0a6d      	lsreq	r5, r5, #9
 8006da2:	ea45 55c3 	orreq.w	r5, r5, r3, lsl #23
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006da6:	f04f 0340 	mov.w	r3, #64	; 0x40
{
 8006daa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006dae:	e9cd 7302 	strd	r7, r3, [sp, #8]
    BlockSize = 512;
 8006db2:	bf08      	it	eq
 8006db4:	f44f 7800 	moveq.w	r8, #512	; 0x200
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.Argument         = (uint32_t) BlockSize;
 8006dbc:	f8cd 8004 	str.w	r8, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006dc0:	e9cd c304 	strd	ip, r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006dc4:	f000 fabe 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006dc8:	4639      	mov	r1, r7
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff fb28 	bl	8006420 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	f040 8088 	bne.w	8006ee8 <HAL_SD_ReadBlocks+0x168>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006dd8:	f04f 33ff 	mov.w	r3, #4294967295
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ddc:	2090      	movs	r0, #144	; 0x90
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006dde:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006de0:	970a      	str	r7, [sp, #40]	; 0x28
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006de2:	9306      	str	r3, [sp, #24]
  sdmmc_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8006de4:	fb09 f308 	mul.w	r3, r9, r8
 8006de8:	9307      	str	r3, [sp, #28]
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006dea:	2302      	movs	r3, #2
 8006dec:	e9cd 0308 	strd	r0, r3, [sp, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006df0:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006df2:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006df4:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006df6:	f000 fac5 	bl	8007384 <SDMMC_DataConfig>
  if(NumberOfBlocks > 1)
 8006dfa:	f1b9 0f01 	cmp.w	r9, #1
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006dfe:	a901      	add	r1, sp, #4
 8006e00:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_MULT_BLOCK;
 8006e02:	bf8c      	ite	hi
 8006e04:	2312      	movhi	r3, #18
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_READ_SINGLE_BLOCK;    
 8006e06:	2311      	movls	r3, #17
  sdmmc_cmdinitstructure.Argument         = (uint32_t)ReadAddr;
 8006e08:	e9cd 5301 	strd	r5, r3, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006e0c:	f000 fa9a 	bl	8007344 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006e10:	f1b9 0f01 	cmp.w	r9, #1
 8006e14:	d930      	bls.n	8006e78 <HAL_SD_ReadBlocks+0xf8>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_MULT_BLOCK);
 8006e16:	2112      	movs	r1, #18
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff fb01 	bl	8006420 <SD_CmdResp1Error>
    if (errorstate != SD_OK)
 8006e1e:	b180      	cbz	r0, 8006e42 <HAL_SD_ReadBlocks+0xc2>
}
 8006e20:	b00c      	add	sp, #48	; 0x30
 8006e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e28:	0411      	lsls	r1, r2, #16
 8006e2a:	d50b      	bpl.n	8006e44 <HAL_SD_ReadBlocks+0xc4>
 8006e2c:	1f35      	subs	r5, r6, #4
 8006e2e:	f106 081c 	add.w	r8, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8006e32:	6820      	ldr	r0, [r4, #0]
 8006e34:	f000 fa76 	bl	8007324 <SDMMC_ReadFIFO>
 8006e38:	f845 0f04 	str.w	r0, [r5, #4]!
        for (count = 0; count < 8; count++)
 8006e3c:	4545      	cmp	r5, r8
 8006e3e:	d1f8      	bne.n	8006e32 <HAL_SD_ReadBlocks+0xb2>
        tempbuff += 8;
 8006e40:	3620      	adds	r6, #32
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e46:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8006e4a:	d0ec      	beq.n	8006e26 <HAL_SD_ReadBlocks+0xa6>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1))
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	05dd      	lsls	r5, r3, #23
 8006e52:	d509      	bpl.n	8006e68 <HAL_SD_ReadBlocks+0xe8>
 8006e54:	f1b9 0f01 	cmp.w	r9, #1
 8006e58:	d906      	bls.n	8006e68 <HAL_SD_ReadBlocks+0xe8>
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) ||\
 8006e5a:	6a23      	ldr	r3, [r4, #32]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d803      	bhi.n	8006e68 <HAL_SD_ReadBlocks+0xe8>
      errorstate = HAL_SD_StopTransfer(hsd);
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff ff76 	bl	8006d52 <HAL_SD_StopTransfer>
 8006e66:	4607      	mov	r7, r0
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6c:	0710      	lsls	r0, r2, #28
 8006e6e:	d51f      	bpl.n	8006eb0 <HAL_SD_ReadBlocks+0x130>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006e70:	2208      	movs	r2, #8
    return errorstate;
 8006e72:	2004      	movs	r0, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006e76:	e7d3      	b.n	8006e20 <HAL_SD_ReadBlocks+0xa0>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_READ_SINGLE_BLOCK); 
 8006e78:	2111      	movs	r1, #17
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f7ff fad0 	bl	8006420 <SD_CmdResp1Error>
    if (errorstate != SD_OK)
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d1cd      	bne.n	8006e20 <HAL_SD_ReadBlocks+0xa0>
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006e84:	f240 482a 	movw	r8, #1066	; 0x42a
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8c:	ea12 0f08 	tst.w	r2, r8
 8006e90:	d1dc      	bne.n	8006e4c <HAL_SD_ReadBlocks+0xcc>
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e94:	0412      	lsls	r2, r2, #16
 8006e96:	d5f8      	bpl.n	8006e8a <HAL_SD_ReadBlocks+0x10a>
 8006e98:	1f35      	subs	r5, r6, #4
 8006e9a:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8006e9e:	6820      	ldr	r0, [r4, #0]
 8006ea0:	f000 fa40 	bl	8007324 <SDMMC_ReadFIFO>
 8006ea4:	f845 0f04 	str.w	r0, [r5, #4]!
        for (count = 0; count < 8; count++)
 8006ea8:	45aa      	cmp	sl, r5
 8006eaa:	d1f8      	bne.n	8006e9e <HAL_SD_ReadBlocks+0x11e>
        tempbuff += 8;
 8006eac:	3620      	adds	r6, #32
 8006eae:	e7eb      	b.n	8006e88 <HAL_SD_ReadBlocks+0x108>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb2:	0791      	lsls	r1, r2, #30
 8006eb4:	d502      	bpl.n	8006ebc <HAL_SD_ReadBlocks+0x13c>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006eb6:	2002      	movs	r0, #2
 8006eb8:	6398      	str	r0, [r3, #56]	; 0x38
    return errorstate;
 8006eba:	e7b1      	b.n	8006e20 <HAL_SD_ReadBlocks+0xa0>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006ebc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8006ebe:	f015 0520 	ands.w	r5, r5, #32
 8006ec2:	d00a      	beq.n	8006eda <HAL_SD_ReadBlocks+0x15a>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006ec4:	2220      	movs	r2, #32
    return errorstate;
 8006ec6:	2006      	movs	r0, #6
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006eca:	e7a9      	b.n	8006e20 <HAL_SD_ReadBlocks+0xa0>
  while ((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (count > 0))
 8006ecc:	1c6b      	adds	r3, r5, #1
 8006ece:	d008      	beq.n	8006ee2 <HAL_SD_ReadBlocks+0x162>
    *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8006ed0:	f000 fa28 	bl	8007324 <SDMMC_ReadFIFO>
 8006ed4:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 8006ed8:	3501      	adds	r5, #1
  while ((__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (count > 0))
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ede:	029a      	lsls	r2, r3, #10
 8006ee0:	d4f4      	bmi.n	8006ecc <HAL_SD_ReadBlocks+0x14c>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee2:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8006ee6:	6383      	str	r3, [r0, #56]	; 0x38
 8006ee8:	4638      	mov	r0, r7
 8006eea:	e799      	b.n	8006e20 <HAL_SD_ReadBlocks+0xa0>

08006eec <HAL_SD_WriteBlocks>:
{
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	b08d      	sub	sp, #52	; 0x34
 8006ef4:	4616      	mov	r6, r2
  hsd->Instance->DCTRL = 0;
 8006ef6:	6800      	ldr	r0, [r0, #0]
  uint8_t cardstate  = 0;
 8006ef8:	2200      	movs	r2, #0
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006efa:	f04f 0910 	mov.w	r9, #16
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006efe:	f04f 0c00 	mov.w	ip, #0
{
 8006f02:	460d      	mov	r5, r1
  uint8_t cardstate  = 0;
 8006f04:	f88d 2003 	strb.w	r2, [sp, #3]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f08:	a901      	add	r1, sp, #4
  hsd->Instance->DCTRL = 0;
 8006f0a:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (hsd->CardType == HIGH_CAPACITY_SD_CARD)
 8006f0c:	6a22      	ldr	r2, [r4, #32]
 8006f0e:	2a02      	cmp	r2, #2
    WriteAddr /= 512;
 8006f10:	bf04      	itt	eq
 8006f12:	0a76      	lsreq	r6, r6, #9
 8006f14:	ea46 56c3 	orreq.w	r6, r6, r3, lsl #23
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006f18:	f04f 0340 	mov.w	r3, #64	; 0x40
{
 8006f1c:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 8006f20:	e9cd 9302 	strd	r9, r3, [sp, #8]
    BlockSize = 512;
 8006f24:	bf08      	it	eq
 8006f26:	f44f 7700 	moveq.w	r7, #512	; 0x200
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinitstructure.Argument         = (uint32_t)BlockSize;
 8006f2e:	9701      	str	r7, [sp, #4]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 8006f30:	e9cd c304 	strd	ip, r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f34:	f000 fa06 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SET_BLOCKLEN);
 8006f38:	4649      	mov	r1, r9
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7ff fa70 	bl	8006420 <SD_CmdResp1Error>
  if (errorstate != SD_OK)
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d162      	bne.n	800700a <HAL_SD_WriteBlocks+0x11e>
  if(NumberOfBlocks > 1)
 8006f44:	f1b8 0f01 	cmp.w	r8, #1
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f48:	a901      	add	r1, sp, #4
 8006f4a:	6820      	ldr	r0, [r4, #0]
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
 8006f4c:	bf8c      	ite	hi
 8006f4e:	2319      	movhi	r3, #25
    sdmmc_cmdinitstructure.CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
 8006f50:	2318      	movls	r3, #24
  sdmmc_cmdinitstructure.Argument         = (uint32_t)WriteAddr;
 8006f52:	e9cd 6301 	strd	r6, r3, [sp, #4]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 8006f56:	f000 f9f5 	bl	8007344 <SDMMC_SendCommand>
  if(NumberOfBlocks > 1)
 8006f5a:	f1b8 0f01 	cmp.w	r8, #1
 8006f5e:	d917      	bls.n	8006f90 <HAL_SD_WriteBlocks+0xa4>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_MULT_BLOCK);
 8006f60:	2119      	movs	r1, #25
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff fa5c 	bl	8006420 <SD_CmdResp1Error>
 8006f68:	4606      	mov	r6, r0
  if (errorstate != SD_OK)
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d14d      	bne.n	800700a <HAL_SD_WriteBlocks+0x11e>
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 8006f6e:	fb08 f707 	mul.w	r7, r8, r7
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f76:	900a      	str	r0, [sp, #40]	; 0x28
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006f78:	a906      	add	r1, sp, #24
  sdmmc_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8006f7a:	e9cd 3706 	strd	r3, r7, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f7e:	2390      	movs	r3, #144	; 0x90
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f80:	e9cd 3008 	strd	r3, r0, [sp, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006f84:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006f86:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006f88:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006f8a:	f000 f9fb 	bl	8007384 <SDMMC_DataConfig>
 8006f8e:	e02c      	b.n	8006fea <HAL_SD_WriteBlocks+0xfe>
    errorstate = SD_CmdResp1Error(hsd, SD_CMD_WRITE_SINGLE_BLOCK);
 8006f90:	2118      	movs	r1, #24
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fa44 	bl	8006420 <SD_CmdResp1Error>
 8006f98:	4606      	mov	r6, r0
  if (errorstate != SD_OK)
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d135      	bne.n	800700a <HAL_SD_WriteBlocks+0x11e>
  sdmmc_datainitstructure.DataTimeOut   = SD_DATATIMEOUT;
 8006f9e:	f04f 33ff 	mov.w	r3, #4294967295
  totalnumberofbytes = NumberOfBlocks * BlockSize;
 8006fa2:	fb08 f707 	mul.w	r7, r8, r7
  sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fa6:	900a      	str	r0, [sp, #40]	; 0x28
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006fa8:	a906      	add	r1, sp, #24
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006faa:	f240 4a1a 	movw	sl, #1050	; 0x41a
  sdmmc_datainitstructure.DataLength    = NumberOfBlocks * BlockSize;
 8006fae:	e9cd 3706 	strd	r3, r7, [sp, #24]
  sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006fb2:	2390      	movs	r3, #144	; 0x90
  sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006fb4:	e9cd 3008 	strd	r3, r0, [sp, #32]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006fb8:	2301      	movs	r3, #1
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006fba:	6820      	ldr	r0, [r4, #0]
  sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8006fbc:	930b      	str	r3, [sp, #44]	; 0x2c
  SDMMC_DataConfig(hsd->Instance, &sdmmc_datainitstructure);
 8006fbe:	f000 f9e1 	bl	8007384 <SDMMC_DataConfig>
 8006fc2:	e049      	b.n	8007058 <HAL_SD_WriteBlocks+0x16c>
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc6:	0451      	lsls	r1, r2, #17
 8006fc8:	d510      	bpl.n	8006fec <HAL_SD_WriteBlocks+0x100>
        if ((totalnumberofbytes - bytestransferred) < 32)
 8006fca:	1bba      	subs	r2, r7, r6
 8006fcc:	2a1f      	cmp	r2, #31
 8006fce:	d824      	bhi.n	800701a <HAL_SD_WriteBlocks+0x12e>
 8006fd0:	0893      	lsrs	r3, r2, #2
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8006fd2:	0792      	lsls	r2, r2, #30
 8006fd4:	bf18      	it	ne
 8006fd6:	3301      	addne	r3, #1
 8006fd8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8006fdc:	eb05 090a 	add.w	r9, r5, sl
          for (count = 0; count < restwords; count++)
 8006fe0:	454d      	cmp	r5, r9
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	d114      	bne.n	8007010 <HAL_SD_WriteBlocks+0x124>
 8006fe6:	4456      	add	r6, sl
    BlockSize = 512;
 8006fe8:	464d      	mov	r5, r9
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fee:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8006ff2:	d0e7      	beq.n	8006fc4 <HAL_SD_WriteBlocks+0xd8>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1))
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	05d8      	lsls	r0, r3, #23
 8006ffa:	d443      	bmi.n	8007084 <HAL_SD_WriteBlocks+0x198>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007000:	0710      	lsls	r0, r2, #28
 8007002:	d549      	bpl.n	8007098 <HAL_SD_WriteBlocks+0x1ac>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007004:	2208      	movs	r2, #8
    return errorstate;
 8007006:	2004      	movs	r0, #4
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
}
 800700a:	b00d      	add	sp, #52	; 0x34
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007010:	4629      	mov	r1, r5
            tempbuff++;
 8007012:	3504      	adds	r5, #4
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007014:	f000 f989 	bl	800732a <SDMMC_WriteFIFO>
 8007018:	e7e2      	b.n	8006fe0 <HAL_SD_WriteBlocks+0xf4>
 800701a:	f105 0920 	add.w	r9, r5, #32
            SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 800701e:	4629      	mov	r1, r5
 8007020:	3504      	adds	r5, #4
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	f000 f981 	bl	800732a <SDMMC_WriteFIFO>
          for (count = 0; count < 8; count++)
 8007028:	454d      	cmp	r5, r9
 800702a:	d1f8      	bne.n	800701e <HAL_SD_WriteBlocks+0x132>
          tempbuff += 8;
 800702c:	46a9      	mov	r9, r5
          bytestransferred += 32;
 800702e:	3620      	adds	r6, #32
 8007030:	e7da      	b.n	8006fe8 <HAL_SD_WriteBlocks+0xfc>
      if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007034:	0451      	lsls	r1, r2, #17
 8007036:	d510      	bpl.n	800705a <HAL_SD_WriteBlocks+0x16e>
        if ((totalnumberofbytes - bytestransferred) < 32)
 8007038:	1bba      	subs	r2, r7, r6
 800703a:	2a1f      	cmp	r2, #31
 800703c:	d817      	bhi.n	800706e <HAL_SD_WriteBlocks+0x182>
 800703e:	0893      	lsrs	r3, r2, #2
          restwords = ((totalnumberofbytes - bytestransferred) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : (( totalnumberofbytes -  bytestransferred) / 4 + 1);
 8007040:	0792      	lsls	r2, r2, #30
 8007042:	bf18      	it	ne
 8007044:	3301      	addne	r3, #1
 8007046:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800704a:	eb05 090b 	add.w	r9, r5, fp
          for (count = 0; count < restwords; count++)
 800704e:	454d      	cmp	r5, r9
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	d107      	bne.n	8007064 <HAL_SD_WriteBlocks+0x178>
 8007054:	445e      	add	r6, fp
  uint32_t totalnumberofbytes = 0, bytestransferred = 0, count = 0, restwords = 0;
 8007056:	464d      	mov	r5, r9
    while(!__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800705c:	ea12 0f0a 	tst.w	r2, sl
 8007060:	d0e7      	beq.n	8007032 <HAL_SD_WriteBlocks+0x146>
 8007062:	e7c7      	b.n	8006ff4 <HAL_SD_WriteBlocks+0x108>
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007064:	4629      	mov	r1, r5
            tempbuff++; 
 8007066:	3504      	adds	r5, #4
            SDMMC_WriteFIFO(hsd->Instance, tempbuff);
 8007068:	f000 f95f 	bl	800732a <SDMMC_WriteFIFO>
 800706c:	e7ef      	b.n	800704e <HAL_SD_WriteBlocks+0x162>
 800706e:	f105 0920 	add.w	r9, r5, #32
            SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007072:	4629      	mov	r1, r5
 8007074:	3504      	adds	r5, #4
 8007076:	6820      	ldr	r0, [r4, #0]
 8007078:	f000 f957 	bl	800732a <SDMMC_WriteFIFO>
          for (count = 0; count < 8; count++)
 800707c:	45a9      	cmp	r9, r5
 800707e:	d1f8      	bne.n	8007072 <HAL_SD_WriteBlocks+0x186>
          bytestransferred += 32;
 8007080:	3620      	adds	r6, #32
 8007082:	e7e8      	b.n	8007056 <HAL_SD_WriteBlocks+0x16a>
  if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1))
 8007084:	f1b8 0f01 	cmp.w	r8, #1
 8007088:	d9b8      	bls.n	8006ffc <HAL_SD_WriteBlocks+0x110>
    if ((hsd->CardType == STD_CAPACITY_SD_CARD_V1_1) || (hsd->CardType == STD_CAPACITY_SD_CARD_V2_0) ||\
 800708a:	6a23      	ldr	r3, [r4, #32]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d8b5      	bhi.n	8006ffc <HAL_SD_WriteBlocks+0x110>
      errorstate = HAL_SD_StopTransfer(hsd);
 8007090:	4620      	mov	r0, r4
 8007092:	f7ff fe5e 	bl	8006d52 <HAL_SD_StopTransfer>
 8007096:	e7b1      	b.n	8006ffc <HAL_SD_WriteBlocks+0x110>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800709a:	0791      	lsls	r1, r2, #30
 800709c:	d502      	bpl.n	80070a4 <HAL_SD_WriteBlocks+0x1b8>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800709e:	2002      	movs	r0, #2
 80070a0:	6398      	str	r0, [r3, #56]	; 0x38
    return errorstate;
 80070a2:	e7b2      	b.n	800700a <HAL_SD_WriteBlocks+0x11e>
  else if (__HAL_SD_SDMMC_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80070a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070a6:	06d2      	lsls	r2, r2, #27
 80070a8:	d503      	bpl.n	80070b2 <HAL_SD_WriteBlocks+0x1c6>
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 80070aa:	2210      	movs	r2, #16
    return errorstate;
 80070ac:	2005      	movs	r0, #5
    __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_FLAG_TXUNDERR);
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80070b0:	e7ab      	b.n	800700a <HAL_SD_WriteBlocks+0x11e>
  __HAL_SD_SDMMC_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38
    errorstate = SD_IsCardProgramming(hsd, &cardstate);
 80070b8:	f10d 0103 	add.w	r1, sp, #3
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff f90d 	bl	80062dc <SD_IsCardProgramming>
  while ((errorstate == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d1a1      	bne.n	800700a <HAL_SD_WriteBlocks+0x11e>
 80070c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070ca:	3b06      	subs	r3, #6
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d9f3      	bls.n	80070b8 <HAL_SD_WriteBlocks+0x1cc>
 80070d0:	e79b      	b.n	800700a <HAL_SD_WriteBlocks+0x11e>

080070d2 <HAL_SD_GetStatus>:
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80070d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80070d4:	2200      	movs	r2, #0
{
 80070d6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80070d8:	041b      	lsls	r3, r3, #16
{
 80070da:	b087      	sub	sp, #28
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80070dc:	250d      	movs	r5, #13
{
 80070de:	4604      	mov	r4, r0
  sdmmc_cmdinitstructure.Argument         = (uint32_t)(hsd->RCA << 16);
 80070e0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80070e2:	2340      	movs	r3, #64	; 0x40
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80070e4:	a901      	add	r1, sp, #4
 80070e6:	6800      	ldr	r0, [r0, #0]
  sdmmc_cmdinitstructure.Response         = SDMMC_RESPONSE_SHORT;
 80070e8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinitstructure.CPSM             = SDMMC_CPSM_ENABLE;
 80070ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  SDMMC_SendCommand(hsd->Instance, &sdmmc_cmdinitstructure);
 80070f4:	f000 f926 	bl	8007344 <SDMMC_SendCommand>
  errorstate = SD_CmdResp1Error(hsd, SD_CMD_SEND_STATUS);
 80070f8:	4629      	mov	r1, r5
 80070fa:	4620      	mov	r0, r4
 80070fc:	f7ff f990 	bl	8006420 <SD_CmdResp1Error>
  if(errorstate != SD_OK)
 8007100:	4601      	mov	r1, r0
 8007102:	b948      	cbnz	r0, 8007118 <HAL_SD_GetStatus+0x46>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	f000 f933 	bl	8007370 <SDMMC_GetResponse>
  if (cardstate == SD_CARD_TRANSFER)
 800710a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    return SD_TRANSFER_OK;
 800710e:	3804      	subs	r0, #4
 8007110:	bf18      	it	ne
 8007112:	2001      	movne	r0, #1
}
 8007114:	b007      	add	sp, #28
 8007116:	bd30      	pop	{r4, r5, pc}
    return SD_TRANSFER_ERROR;
 8007118:	2002      	movs	r0, #2
 800711a:	e7fb      	b.n	8007114 <HAL_SD_GetStatus+0x42>

0800711c <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800711c:	4770      	bx	lr

0800711e <HAL_SDRAM_Init>:
{   
 800711e:	b538      	push	{r3, r4, r5, lr}
 8007120:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8007122:	4604      	mov	r4, r0
 8007124:	b1c8      	cbz	r0, 800715a <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007126:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800712a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800712e:	b91b      	cbnz	r3, 8007138 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8007130:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8007134:	f7ff fff2 	bl	800711c <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007138:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800713a:	1d21      	adds	r1, r4, #4
 800713c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800713e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007142:	f000 f835 	bl	80071b0 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	4629      	mov	r1, r5
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	f000 f864 	bl	8007218 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007150:	2301      	movs	r3, #1
  return HAL_OK;
 8007152:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007154:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8007158:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800715a:	2001      	movs	r0, #1
 800715c:	e7fc      	b.n	8007158 <HAL_SDRAM_Init+0x3a>

0800715e <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800715e:	b538      	push	{r3, r4, r5, lr}
 8007160:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007162:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8007166:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007168:	b2c0      	uxtb	r0, r0
 800716a:	2802      	cmp	r0, #2
 800716c:	d00d      	beq.n	800718a <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800716e:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007170:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007172:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007176:	f000 f88e 	bl	8007296 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800717a:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800717c:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800717e:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007180:	bf0c      	ite	eq
 8007182:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007184:	2301      	movne	r3, #1
 8007186:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800718a:	bd38      	pop	{r3, r4, r5, pc}

0800718c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800718c:	b510      	push	{r4, lr}
 800718e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007190:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8007194:	b2c0      	uxtb	r0, r0
 8007196:	2802      	cmp	r0, #2
 8007198:	d009      	beq.n	80071ae <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800719a:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800719c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800719e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80071a2:	f000 f89d 	bl	80072e0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071a6:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80071a8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80071ae:	bd10      	pop	{r4, pc}

080071b0 <FMC_SDRAM_Init>:
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80071b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80071b6:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80071ba:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80071be:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80071c2:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80071c6:	6809      	ldr	r1, [r1, #0]
 80071c8:	4323      	orrs	r3, r4
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80071ca:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80071cc:	2901      	cmp	r1, #1
 80071ce:	4911      	ldr	r1, [pc, #68]	; (8007214 <FMC_SDRAM_Init+0x64>)
 80071d0:	d00f      	beq.n	80071f2 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071d2:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071d4:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071d6:	432a      	orrs	r2, r5
 80071d8:	ea42 0308 	orr.w	r3, r2, r8
 80071dc:	ea43 030e 	orr.w	r3, r3, lr
 80071e0:	ea43 030c 	orr.w	r3, r3, ip
 80071e4:	433b      	orrs	r3, r7
 80071e6:	4333      	orrs	r3, r6
 80071e8:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80071ea:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 80071ec:	2000      	movs	r0, #0
 80071ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071f2:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80071f4:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071f6:	400c      	ands	r4, r1
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071f8:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071fa:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80071fe:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007200:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007204:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007206:	ea42 020c 	orr.w	r2, r2, ip
 800720a:	433a      	orrs	r2, r7
 800720c:	4332      	orrs	r2, r6
 800720e:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007210:	6042      	str	r2, [r0, #4]
 8007212:	e7eb      	b.n	80071ec <FMC_SDRAM_Init+0x3c>
 8007214:	ffff8000 	.word	0xffff8000

08007218 <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007218:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800721a:	2a01      	cmp	r2, #1
{
 800721c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800721e:	f103 37ff 	add.w	r7, r3, #4294967295
 8007222:	684b      	ldr	r3, [r1, #4]
 8007224:	690e      	ldr	r6, [r1, #16]
 8007226:	f103 3cff 	add.w	ip, r3, #4294967295
 800722a:	688b      	ldr	r3, [r1, #8]
 800722c:	698d      	ldr	r5, [r1, #24]
 800722e:	f106 36ff 	add.w	r6, r6, #4294967295
 8007232:	68cc      	ldr	r4, [r1, #12]
 8007234:	f103 33ff 	add.w	r3, r3, #4294967295
 8007238:	6949      	ldr	r1, [r1, #20]
 800723a:	f105 35ff 	add.w	r5, r5, #4294967295
 800723e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007242:	f104 34ff 	add.w	r4, r4, #4294967295
 8007246:	f101 31ff 	add.w	r1, r1, #4294967295
 800724a:	ea4f 4606 	mov.w	r6, r6, lsl #16
 800724e:	ea4f 6505 	mov.w	r5, r5, lsl #24
 8007252:	ea4f 3404 	mov.w	r4, r4, lsl #12
 8007256:	ea4f 5101 	mov.w	r1, r1, lsl #20
 800725a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  if (Bank != FMC_SDRAM_BANK2) 
 800725e:	d00b      	beq.n	8007278 <FMC_SDRAM_Timing_Init+0x60>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007260:	433b      	orrs	r3, r7
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007262:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007264:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007266:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800726a:	432b      	orrs	r3, r5
 800726c:	4323      	orrs	r3, r4
 800726e:	430b      	orrs	r3, r1
 8007270:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007272:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
  }   
  
  return HAL_OK;
}
 8007274:	2000      	movs	r0, #0
 8007276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007278:	433b      	orrs	r3, r7
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK2];
 800727a:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800727c:	430c      	orrs	r4, r1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800727e:	4333      	orrs	r3, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007280:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007284:	432b      	orrs	r3, r5
 8007286:	4313      	orrs	r3, r2
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK1];
 8007288:	6882      	ldr	r2, [r0, #8]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800728a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
 800728e:	60c3      	str	r3, [r0, #12]
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007290:	4314      	orrs	r4, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
 8007292:	6084      	str	r4, [r0, #8]
 8007294:	e7ee      	b.n	8007274 <FMC_SDRAM_Timing_Init+0x5c>

08007296 <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 8007296:	2300      	movs	r3, #0
{
 8007298:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800729a:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0;
 800729c:	9301      	str	r3, [sp, #4]
{
 800729e:	4604      	mov	r4, r0
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072a0:	e9d1 3200 	ldrd	r3, r2, [r1]
 80072a4:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 80072a6:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072a8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80072ac:	688a      	ldr	r2, [r1, #8]
 80072ae:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80072b0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80072b4:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80072ba:	f7fc fd69 	bl	8003d90 <HAL_GetTick>
 80072be:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80072c0:	69a0      	ldr	r0, [r4, #24]
 80072c2:	f010 0020 	ands.w	r0, r0, #32
 80072c6:	d003      	beq.n	80072d0 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80072c8:	1c6b      	adds	r3, r5, #1
 80072ca:	d0f9      	beq.n	80072c0 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80072cc:	b915      	cbnz	r5, 80072d4 <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 80072ce:	2003      	movs	r0, #3
      }
    }     
  }
  
  return HAL_OK;  
}
 80072d0:	b002      	add	sp, #8
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80072d4:	f7fc fd5c 	bl	8003d90 <HAL_GetTick>
 80072d8:	1b80      	subs	r0, r0, r6
 80072da:	42a8      	cmp	r0, r5
 80072dc:	d9f0      	bls.n	80072c0 <FMC_SDRAM_SendCommand+0x2a>
 80072de:	e7f6      	b.n	80072ce <FMC_SDRAM_SendCommand+0x38>

080072e0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80072e0:	6943      	ldr	r3, [r0, #20]
 80072e2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80072e6:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80072e8:	2000      	movs	r0, #0
 80072ea:	4770      	bx	lr

080072ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80072ec:	b084      	sub	sp, #16
 80072ee:	b510      	push	{r4, lr}
 80072f0:	ac03      	add	r4, sp, #12
 80072f2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80072f6:	460b      	mov	r3, r1
 80072f8:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80072fa:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 80072fc:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80072fe:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007300:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8007304:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8007306:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007308:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 800730c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800730e:	9907      	ldr	r1, [sp, #28]
 8007310:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8007312:	9908      	ldr	r1, [sp, #32]
 8007314:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8007316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800731a:	4313      	orrs	r3, r2
}
 800731c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800731e:	6043      	str	r3, [r0, #4]
}
 8007320:	2000      	movs	r0, #0
 8007322:	4770      	bx	lr

08007324 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007324:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007328:	4770      	bx	lr

0800732a <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800732a:	680b      	ldr	r3, [r1, #0]
 800732c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 8007330:	2000      	movs	r0, #0
 8007332:	4770      	bx	lr

08007334 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007334:	2303      	movs	r3, #3
 8007336:	6003      	str	r3, [r0, #0]
  
  return HAL_OK; 
}
 8007338:	2000      	movs	r0, #0
 800733a:	4770      	bx	lr

0800733c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800733c:	6800      	ldr	r0, [r0, #0]
}
 800733e:	f000 0003 	and.w	r0, r0, #3
 8007342:	4770      	bx	lr

08007344 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007344:	680b      	ldr	r3, [r1, #0]
{
 8007346:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8007348:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800734a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800734c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007350:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007354:	4323      	orrs	r3, r4
                       Command->Response         |\
 8007356:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8007358:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800735a:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 800735e:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8007360:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007362:	4313      	orrs	r3, r2
 8007364:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8007366:	2000      	movs	r0, #0
 8007368:	bd10      	pop	{r4, pc}

0800736a <SDMMC_GetCommandResponse>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
  return (uint8_t)(SDMMCx->RESPCMD);
 800736a:	6900      	ldr	r0, [r0, #16]
}
 800736c:	b2c0      	uxtb	r0, r0
 800736e:	4770      	bx	lr

08007370 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007370:	3014      	adds	r0, #20
{
 8007372:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8007374:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007376:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8007378:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800737a:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 800737c:	9b01      	ldr	r3, [sp, #4]
 800737e:	6818      	ldr	r0, [r3, #0]
}  
 8007380:	b002      	add	sp, #8
 8007382:	4770      	bx	lr

08007384 <SDMMC_DataConfig>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007384:	680b      	ldr	r3, [r1, #0]
{
 8007386:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007388:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800738a:	684b      	ldr	r3, [r1, #4]
 800738c:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800738e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007390:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007394:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007398:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 800739a:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 800739c:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800739e:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80073a0:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073a2:	4313      	orrs	r3, r2
 80073a4:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 80073a6:	2000      	movs	r0, #0
 80073a8:	bd10      	pop	{r4, pc}
	...

080073ac <initalize_constants>:


#include "constants.h"

void initalize_constants(void) {
    ND = 58;      // Data symbols
 80073ac:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <initalize_constants+0x3c>)
 80073ae:	223a      	movs	r2, #58	; 0x3a
 80073b0:	601a      	str	r2, [r3, #0]
    NS = 21;      // Sync symbols (3 @ Costas 7x7)
 80073b2:	2215      	movs	r2, #21
 80073b4:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <initalize_constants+0x40>)
 80073b6:	601a      	str	r2, [r3, #0]
   // int NN = NS + ND;   // Total channel symbols (79)
    NN = 79;   // Total channel symbols (79)
 80073b8:	224f      	movs	r2, #79	; 0x4f
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <initalize_constants+0x44>)
 80073bc:	601a      	str	r2, [r3, #0]
    // Define the LDPC sizes
    N = 174;      // Number of bits in the encoded message
 80073be:	22ae      	movs	r2, #174	; 0xae
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <initalize_constants+0x48>)
 80073c2:	601a      	str	r2, [r3, #0]
    K = 91;       // Number of payload bits
 80073c4:	225b      	movs	r2, #91	; 0x5b
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <initalize_constants+0x4c>)
 80073c8:	601a      	str	r2, [r3, #0]
   // int M = N - K;    // Number of checksum bits
    M = 83;
 80073ca:	2253      	movs	r2, #83	; 0x53
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <initalize_constants+0x50>)
 80073ce:	601a      	str	r2, [r3, #0]
   // int K_BYTES = (K + 7) / 8;    // Number of whole bytes needed to store K bits
    K_BYTES = 12;
 80073d0:	220c      	movs	r2, #12
 80073d2:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <initalize_constants+0x54>)
 80073d4:	601a      	str	r2, [r3, #0]

    // Define CRC parameters
    CRC_POLYNOMIAL = 0x2757;  // CRC-14 polynomial without the leading (MSB) 1
 80073d6:	f242 7257 	movw	r2, #10071	; 0x2757
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <initalize_constants+0x58>)
 80073dc:	801a      	strh	r2, [r3, #0]
    CRC_WIDTH = 14;
 80073de:	220e      	movs	r2, #14
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <initalize_constants+0x5c>)
 80073e2:	601a      	str	r2, [r3, #0]

}
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	20001a80 	.word	0x20001a80
 80073ec:	20001ae4 	.word	0x20001ae4
 80073f0:	20001a88 	.word	0x20001a88
 80073f4:	20001a7c 	.word	0x20001a7c
 80073f8:	20001a84 	.word	0x20001a84
 80073fc:	20001ae0 	.word	0x20001ae0
 8007400:	20001ae8 	.word	0x20001ae8
 8007404:	20001aec 	.word	0x20001aec
 8007408:	20001adc 	.word	0x20001adc

0800740c <find_sync>:



// Localize top N candidates in frequency and time according to their sync strength (looking at Costas symbols)
// We treat and organize the candidate list as a min-heap (empty initially).
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4692      	mov	sl, r2
 8007412:	f06f 021b 	mvn.w	r2, #27
 8007416:	b091      	sub	sp, #68	; 0x44
    int heap_size = 0;
   // int x = 500;
    // Here we allow time offsets that exceed signal boundaries, as long as we still have all data bits.
    // I.e. we can afford to skip the first 7 or the last 7 Costas symbols, as long as we track how many
    // sync symbols we included in the score, so the score is averaged.
    for (int alt = 0; alt < 4; ++alt) {
 8007418:	2500      	movs	r5, #0
 800741a:	fb02 020a 	mla	r2, r2, sl, r0
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 800741e:	930d      	str	r3, [sp, #52]	; 0x34
    int heap_size = 0;
 8007420:	4628      	mov	r0, r5
 8007422:	9204      	str	r2, [sp, #16]
 8007424:	ea4f 028a 	mov.w	r2, sl, lsl #2
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 8007428:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800742a:	9205      	str	r2, [sp, #20]
 800742c:	2290      	movs	r2, #144	; 0x90
 800742e:	9106      	str	r1, [sp, #24]
 8007430:	fb02 f20a 	mul.w	r2, r2, sl
 8007434:	920c      	str	r2, [sp, #48]	; 0x30
   // int alt = 0;
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
            for (int freq_offset = ft8_min_bin; freq_offset < num_bins - 8; ++freq_offset) {
 8007436:	f1aa 0208 	sub.w	r2, sl, #8
 800743a:	920e      	str	r2, [sp, #56]	; 0x38
                if (score < min_score) continue;

                // If the heap is full AND the current candidate is better than
                // the worst in the heap, we remove the worst and make space
                if (heap_size == num_candidates && score > heap[0].score) {
                    heap[0] = heap[heap_size - 1];
 800743c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800743e:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8007442:	3a01      	subs	r2, #1
 8007444:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007448:	9207      	str	r2, [sp, #28]
                // If there's free space in the heap, we add the current candidate
                if (heap_size < num_candidates) {
                    heap[heap_size].score = score;
                    heap[heap_size].time_offset = time_offset;
                    heap[heap_size].freq_offset = freq_offset;
                    heap[heap_size].time_sub = alt / 2;
 800744a:	f3c5 0247 	ubfx	r2, r5, #1, #8
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 800744e:	f06f 0b06 	mvn.w	fp, #6
                    heap[heap_size].time_sub = alt / 2;
 8007452:	9208      	str	r2, [sp, #32]
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	9203      	str	r2, [sp, #12]
 8007458:	2265      	movs	r2, #101	; 0x65
 800745a:	9202      	str	r2, [sp, #8]
                    heap[heap_size].freq_sub = alt % 2;
 800745c:	f005 0201 	and.w	r2, r5, #1
 8007460:	920f      	str	r2, [sp, #60]	; 0x3c
 8007462:	e0db      	b.n	800761c <find_sync+0x210>
                        if (time_offset + k + m < 0) continue;
 8007464:	eb11 0806 	adds.w	r8, r1, r6
 8007468:	d423      	bmi.n	80074b2 <find_sync+0xa6>
                        if (time_offset + k + m >= num_blocks) break;
 800746a:	9f06      	ldr	r7, [sp, #24]
 800746c:	4547      	cmp	r7, r8
 800746e:	dd25      	ble.n	80074bc <find_sync+0xb0>
                        score += 8 * p8[sync_map[k]] -
 8007470:	9f0d      	ldr	r7, [sp, #52]	; 0x34
                        ++num_symbols;
 8007472:	3401      	adds	r4, #1
                                     p8[0] - p8[1] - p8[2] - p8[3] -
 8007474:	f892 8000 	ldrb.w	r8, [r2]
                        score += 8 * p8[sync_map[k]] -
 8007478:	5c7f      	ldrb	r7, [r7, r1]
 800747a:	5dd7      	ldrb	r7, [r2, r7]
 800747c:	ebc8 08c7 	rsb	r8, r8, r7, lsl #3
                                     p8[0] - p8[1] - p8[2] - p8[3] -
 8007480:	7857      	ldrb	r7, [r2, #1]
 8007482:	eba8 0807 	sub.w	r8, r8, r7
 8007486:	7897      	ldrb	r7, [r2, #2]
 8007488:	eba8 0707 	sub.w	r7, r8, r7
 800748c:	f892 8003 	ldrb.w	r8, [r2, #3]
 8007490:	eba7 0708 	sub.w	r7, r7, r8
                                     p8[4] - p8[5] - p8[6] - p8[7];
 8007494:	f892 8004 	ldrb.w	r8, [r2, #4]
                                     p8[0] - p8[1] - p8[2] - p8[3] -
 8007498:	eba7 0808 	sub.w	r8, r7, r8
                                     p8[4] - p8[5] - p8[6] - p8[7];
 800749c:	7957      	ldrb	r7, [r2, #5]
 800749e:	eba8 0807 	sub.w	r8, r8, r7
 80074a2:	7997      	ldrb	r7, [r2, #6]
 80074a4:	eba8 0707 	sub.w	r7, r8, r7
 80074a8:	f892 8007 	ldrb.w	r8, [r2, #7]
 80074ac:	eba7 0708 	sub.w	r7, r7, r8
                        score += 8 * p8[sync_map[k]] -
 80074b0:	44bc      	add	ip, r7
                    for (int k = 0; k < 7; ++k) {
 80074b2:	3101      	adds	r1, #1
 80074b4:	9f05      	ldr	r7, [sp, #20]
 80074b6:	2907      	cmp	r1, #7
 80074b8:	443a      	add	r2, r7
 80074ba:	d1d3      	bne.n	8007464 <find_sync+0x58>
 80074bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074be:	3624      	adds	r6, #36	; 0x24
 80074c0:	4496      	add	lr, r2
                for (int m = 0; m <= 72; m += 36) {
 80074c2:	9a02      	ldr	r2, [sp, #8]
 80074c4:	4296      	cmp	r6, r2
 80074c6:	d002      	beq.n	80074ce <find_sync+0xc2>
int find_sync(const uint8_t *power, int num_blocks, int num_bins, const uint8_t *sync_map, int num_candidates, Candidate *heap, int min_score) {
 80074c8:	4672      	mov	r2, lr
                    for (int k = 0; k < 7; ++k) {
 80074ca:	2100      	movs	r1, #0
 80074cc:	e7ca      	b.n	8007464 <find_sync+0x58>
                score /= num_symbols;
 80074ce:	fb9c f4f4 	sdiv	r4, ip, r4
                if (score < min_score) continue;
 80074d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074d4:	4294      	cmp	r4, r2
 80074d6:	db5f      	blt.n	8007598 <find_sync+0x18c>
                if (heap_size == num_candidates && score > heap[0].score) {
 80074d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074da:	4290      	cmp	r0, r2
 80074dc:	d14b      	bne.n	8007576 <find_sync+0x16a>
 80074de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80074e2:	42a2      	cmp	r2, r4
 80074e4:	da58      	bge.n	8007598 <find_sync+0x18c>
                    heap[0] = heap[heap_size - 1];
 80074e6:	9a07      	ldr	r2, [sp, #28]
}


static void heapify_down(Candidate *heap, int heap_size) {
    // heapify from the root down
    int current = 0;
 80074e8:	2000      	movs	r0, #0
                    --heap_size;
 80074ea:	9901      	ldr	r1, [sp, #4]
                    heap[0] = heap[heap_size - 1];
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	9a07      	ldr	r2, [sp, #28]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	605a      	str	r2, [r3, #4]
    while (true) {
        int largest = current;
        int left = 2 * current + 1;
 80074f6:	0046      	lsls	r6, r0, #1
        int right = left + 1;

        if (left < heap_size && heap[left].score < heap[largest].score) {
 80074f8:	9f01      	ldr	r7, [sp, #4]
        int left = 2 * current + 1;
 80074fa:	1c72      	adds	r2, r6, #1
        int right = left + 1;
 80074fc:	3602      	adds	r6, #2
        if (left < heap_size && heap[left].score < heap[largest].score) {
 80074fe:	4297      	cmp	r7, r2
 8007500:	f340 809d 	ble.w	800763e <find_sync+0x232>
 8007504:	f933 c032 	ldrsh.w	ip, [r3, r2, lsl #3]
 8007508:	f933 7030 	ldrsh.w	r7, [r3, r0, lsl #3]
 800750c:	45bc      	cmp	ip, r7
 800750e:	f280 8096 	bge.w	800763e <find_sync+0x232>
            largest = left;
        }
        if (right < heap_size && heap[right].score < heap[largest].score) {
 8007512:	9f01      	ldr	r7, [sp, #4]
 8007514:	42b7      	cmp	r7, r6
 8007516:	dd06      	ble.n	8007526 <find_sync+0x11a>
 8007518:	f933 c036 	ldrsh.w	ip, [r3, r6, lsl #3]
 800751c:	f933 7032 	ldrsh.w	r7, [r3, r2, lsl #3]
 8007520:	45bc      	cmp	ip, r7
 8007522:	bfb8      	it	lt
 8007524:	4632      	movlt	r2, r6
            largest = right;
        }
        if (largest == current) {
 8007526:	4290      	cmp	r0, r2
 8007528:	d027      	beq.n	800757a <find_sync+0x16e>
            break;
        }

        Candidate tmp = heap[largest];
 800752a:	f933 6032 	ldrsh.w	r6, [r3, r2, lsl #3]
 800752e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
 8007532:	9609      	str	r6, [sp, #36]	; 0x24
 8007534:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 8007538:	f897 8006 	ldrb.w	r8, [r7, #6]
 800753c:	960a      	str	r6, [sp, #40]	; 0x28
 800753e:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 8007542:	f897 e007 	ldrb.w	lr, [r7, #7]
 8007546:	960b      	str	r6, [sp, #44]	; 0x2c
        heap[largest] = heap[current];
 8007548:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 800754c:	f8d6 c000 	ldr.w	ip, [r6]
 8007550:	f843 c032 	str.w	ip, [r3, r2, lsl #3]
 8007554:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8007558:	f8c7 c004 	str.w	ip, [r7, #4]
        heap[current] = tmp;
 800755c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800755e:	f823 7030 	strh.w	r7, [r3, r0, lsl #3]
 8007562:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007564:	f886 8006 	strb.w	r8, [r6, #6]
 8007568:	8070      	strh	r0, [r6, #2]
 800756a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800756c:	f886 e007 	strb.w	lr, [r6, #7]
 8007570:	80b0      	strh	r0, [r6, #4]
 8007572:	4610      	mov	r0, r2
 8007574:	e7bf      	b.n	80074f6 <find_sync+0xea>
                if (heap_size < num_candidates) {
 8007576:	da0f      	bge.n	8007598 <find_sync+0x18c>
 8007578:	4601      	mov	r1, r0
                    heap[heap_size].score = score;
 800757a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
                    heap[heap_size].time_sub = alt / 2;
 800757e:	9808      	ldr	r0, [sp, #32]
                    heap[heap_size].score = score;
 8007580:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
                    heap[heap_size].time_sub = alt / 2;
 8007584:	7190      	strb	r0, [r2, #6]
                    heap[heap_size].freq_sub = alt % 2;
 8007586:	980f      	ldr	r0, [sp, #60]	; 0x3c
                    heap[heap_size].time_offset = time_offset;
 8007588:	f8a2 b002 	strh.w	fp, [r2, #2]
                    heap[heap_size].freq_sub = alt % 2;
 800758c:	71d0      	strb	r0, [r2, #7]
                    ++heap_size;
 800758e:	1c48      	adds	r0, r1, #1
                    heap[heap_size].freq_offset = freq_offset;
 8007590:	f8a2 9004 	strh.w	r9, [r2, #4]


static void heapify_up(Candidate *heap, int heap_size) {
    // heapify from the last node up
    int current = heap_size - 1;
    while (current > 0) {
 8007594:	2900      	cmp	r1, #0
 8007596:	dc0b      	bgt.n	80075b0 <find_sync+0x1a4>
            for (int freq_offset = ft8_min_bin; freq_offset < num_bins - 8; ++freq_offset) {
 8007598:	f109 0901 	add.w	r9, r9, #1
 800759c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800759e:	454a      	cmp	r2, r9
 80075a0:	dd33      	ble.n	800760a <find_sync+0x1fe>
 80075a2:	9a03      	ldr	r2, [sp, #12]
                int num_symbols = 0;
 80075a4:	2400      	movs	r4, #0
 80075a6:	465e      	mov	r6, fp
 80075a8:	eb09 0e02 	add.w	lr, r9, r2
                int score = 0;
 80075ac:	46a4      	mov	ip, r4
 80075ae:	e78b      	b.n	80074c8 <find_sync+0xbc>
        int parent = (current - 1) / 2;
 80075b0:	1e4a      	subs	r2, r1, #1
        if (heap[current].score >= heap[parent].score) {
 80075b2:	f933 7031 	ldrsh.w	r7, [r3, r1, lsl #3]
 80075b6:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
        int parent = (current - 1) / 2;
 80075ba:	1052      	asrs	r2, r2, #1
        if (heap[current].score >= heap[parent].score) {
 80075bc:	f933 c032 	ldrsh.w	ip, [r3, r2, lsl #3]
 80075c0:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80075c4:	4567      	cmp	r7, ip
 80075c6:	dae7      	bge.n	8007598 <find_sync+0x18c>
            break;
        }

        Candidate tmp = heap[parent];
 80075c8:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
 80075cc:	f896 8006 	ldrb.w	r8, [r6, #6]
 80075d0:	9709      	str	r7, [sp, #36]	; 0x24
 80075d2:	f9b6 7004 	ldrsh.w	r7, [r6, #4]
 80075d6:	f896 e007 	ldrb.w	lr, [r6, #7]
 80075da:	970a      	str	r7, [sp, #40]	; 0x28
        heap[parent] = heap[current];
 80075dc:	6827      	ldr	r7, [r4, #0]
 80075de:	f843 7032 	str.w	r7, [r3, r2, lsl #3]
 80075e2:	6867      	ldr	r7, [r4, #4]
 80075e4:	6077      	str	r7, [r6, #4]
        heap[current] = tmp;
 80075e6:	f823 c031 	strh.w	ip, [r3, r1, lsl #3]
 80075ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ec:	f884 8006 	strb.w	r8, [r4, #6]
 80075f0:	8061      	strh	r1, [r4, #2]
 80075f2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075f4:	f884 e007 	strb.w	lr, [r4, #7]
 80075f8:	80a1      	strh	r1, [r4, #4]
        current = parent;
 80075fa:	4611      	mov	r1, r2
 80075fc:	e7ca      	b.n	8007594 <find_sync+0x188>
                    --heap_size;
 80075fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            for (int freq_offset = ft8_min_bin; freq_offset < num_bins - 8; ++freq_offset) {
 8007600:	f04f 0930 	mov.w	r9, #48	; 0x30
                    --heap_size;
 8007604:	3a01      	subs	r2, #1
 8007606:	9201      	str	r2, [sp, #4]
 8007608:	e7c8      	b.n	800759c <find_sync+0x190>
 800760a:	9a02      	ldr	r2, [sp, #8]
        for (int time_offset = -7; time_offset < num_blocks - NN + 7; ++time_offset) {  // NN=79
 800760c:	f10b 0b01 	add.w	fp, fp, #1
 8007610:	9905      	ldr	r1, [sp, #20]
 8007612:	3201      	adds	r2, #1
 8007614:	9202      	str	r2, [sp, #8]
 8007616:	9a03      	ldr	r2, [sp, #12]
 8007618:	440a      	add	r2, r1
 800761a:	9203      	str	r2, [sp, #12]
 800761c:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <find_sync+0x23c>)
 800761e:	9906      	ldr	r1, [sp, #24]
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	1a8a      	subs	r2, r1, r2
 8007624:	3206      	adds	r2, #6
 8007626:	455a      	cmp	r2, fp
 8007628:	dae9      	bge.n	80075fe <find_sync+0x1f2>
 800762a:	9a04      	ldr	r2, [sp, #16]
    for (int alt = 0; alt < 4; ++alt) {
 800762c:	3501      	adds	r5, #1
 800762e:	4452      	add	r2, sl
 8007630:	2d04      	cmp	r5, #4
 8007632:	9204      	str	r2, [sp, #16]
 8007634:	f47f af09 	bne.w	800744a <find_sync+0x3e>
}
 8007638:	b011      	add	sp, #68	; 0x44
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (right < heap_size && heap[right].score < heap[largest].score) {
 800763e:	9a01      	ldr	r2, [sp, #4]
 8007640:	42b2      	cmp	r2, r6
 8007642:	dd9a      	ble.n	800757a <find_sync+0x16e>
 8007644:	4602      	mov	r2, r0
 8007646:	e767      	b.n	8007518 <find_sync+0x10c>
 8007648:	20001a88 	.word	0x20001a88

0800764c <extract_likelihood>:
void extract_likelihood(const uint8_t *power, int num_bins, Candidate cand, const uint8_t *code_map, float *log174) {
 800764c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007650:	b08a      	sub	sp, #40	; 0x28
    for (int k = 0; k < ND; k += n_syms) {
 8007652:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8007828 <extract_likelihood+0x1dc>
void extract_likelihood(const uint8_t *power, int num_bins, Candidate cand, const uint8_t *code_map, float *log174) {
 8007656:	466c      	mov	r4, sp
 8007658:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800765c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800765e:	f10c 0807 	add.w	r8, ip, #7
    for (int k = 0; k < ND; k += n_syms) {
 8007662:	4635      	mov	r5, r6
void extract_likelihood(const uint8_t *power, int num_bins, Candidate cand, const uint8_t *code_map, float *log174) {
 8007664:	e884 000c 	stmia.w	r4, {r2, r3}
    int offset = (cand.time_offset * 4 + cand.time_sub * 2 + cand.freq_sub) * num_bins + cand.freq_offset;
 8007668:	f89d 4006 	ldrb.w	r4, [sp, #6]
    for (int k = 0; k < ND; k += n_syms) {
 800766c:	2200      	movs	r2, #0
    int offset = (cand.time_offset * 4 + cand.time_sub * 2 + cand.freq_sub) * num_bins + cand.freq_offset;
 800766e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8007672:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007676:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800767a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800767e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007682:	fb01 3404 	mla	r4, r1, r4, r3
    for (int k = 0; k < ND; k += n_syms) {
 8007686:	f8de 3000 	ldr.w	r3, [lr]
 800768a:	4293      	cmp	r3, r2
 800768c:	dc26      	bgt.n	80076dc <extract_likelihood+0x90>
    float inv_n = 1.0f / N;
 800768e:	4c64      	ldr	r4, [pc, #400]	; (8007820 <extract_likelihood+0x1d4>)
 8007690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float sum2  = 0;
 8007694:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8007824 <extract_likelihood+0x1d8>
    for (int i = 0; i < N; ++i) {
 8007698:	2100      	movs	r1, #0
    float inv_n = 1.0f / N;
 800769a:	6820      	ldr	r0, [r4, #0]
    for (int i = 0; i < N; ++i) {
 800769c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    float inv_n = 1.0f / N;
 800769e:	ee07 0a90 	vmov	s15, r0
 80076a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    float sum   = 0;
 80076aa:	eef0 7a40 	vmov.f32	s15, s0
    for (int i = 0; i < N; ++i) {
 80076ae:	4288      	cmp	r0, r1
 80076b0:	f300 80a5 	bgt.w	80077fe <extract_likelihood+0x1b2>
    float variance = (sum2 - sum * sum * inv_n) * inv_n;
 80076b4:	ee67 7ae7 	vnmul.f32	s15, s15, s15
 80076b8:	eea7 0aa6 	vfma.f32	s0, s15, s13
    float norm_factor = sqrtf(16.0f / variance);
 80076bc:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    float variance = (sum2 - sum * sum * inv_n) * inv_n;
 80076c0:	ee20 0a26 	vmul.f32	s0, s0, s13
    float norm_factor = sqrtf(16.0f / variance);
 80076c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80076c8:	f007 fc08 	bl	800eedc <sqrtf>
    for (int i = 0; i < N; ++i) {
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	429a      	cmp	r2, r3
 80076d2:	f300 809c 	bgt.w	800780e <extract_likelihood+0x1c2>
}
 80076d6:	b00a      	add	sp, #40	; 0x28
 80076d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        int sym_idx = (k < ND / 2) ? (k + 7) : (k + 14);
 80076dc:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 80076e0:	f10c 37ff 	add.w	r7, ip, #4294967295
 80076e4:	f10d 0908 	add.w	r9, sp, #8
 80076e8:	bfb4      	ite	lt
 80076ea:	1dd3      	addlt	r3, r2, #7
 80076ec:	f102 030e 	addge.w	r3, r2, #14
        const uint8_t *ps = power + (offset + sym_idx * 4 * num_bins);
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	fb01 4303 	mla	r3, r1, r3, r4

// Cleaned up code for the simple case of n_syms==1
    float s2[8];

    for (int j = 0; j < 8; ++j) {
        s2[j] = (float)power[code_map[j]];
 80076f6:	4403      	add	r3, r0
 80076f8:	f817 af01 	ldrb.w	sl, [r7, #1]!
 80076fc:	f813 a00a 	ldrb.w	sl, [r3, sl]
    for (int j = 0; j < 8; ++j) {
 8007700:	45b8      	cmp	r8, r7
        s2[j] = (float)power[code_map[j]];
 8007702:	ee07 aa90 	vmov	s15, sl
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	ece9 7a01 	vstmia	r9!, {s15}
    for (int j = 0; j < 8; ++j) {
 800770e:	d1f3      	bne.n	80076f8 <extract_likelihood+0xac>
        //s2[j] = (float)work_fft_power[offset+code_map[j]];
    }

    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007710:	ed9d 6a06 	vldr	s12, [sp, #24]
    for (int k = 0; k < ND; k += n_syms) {
 8007714:	3201      	adds	r2, #1
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007716:	eddd 5a07 	vldr	s11, [sp, #28]
 800771a:	350c      	adds	r5, #12
 800771c:	eddd 4a08 	vldr	s9, [sp, #32]
    return (a >= b) ? a : b;
 8007720:	eeb4 6ae5 	vcmpe.f32	s12, s11
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007724:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 8007728:	ed9d 7a02 	vldr	s14, [sp, #8]
 800772c:	eddd 7a03 	vldr	s15, [sp, #12]
    return (a >= b) ? a : b;
 8007730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007734:	ed9d 4a04 	vldr	s8, [sp, #16]
    return (a >= b) ? a : b;
 8007738:	eef4 4ae3 	vcmpe.f32	s9, s7
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 800773c:	ed9d 3a05 	vldr	s6, [sp, #20]
    return (a >= b) ? a : b;
 8007740:	fe66 2a25 	vselge.f32	s5, s12, s11
 8007744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007748:	fe24 2aa3 	vselge.f32	s4, s9, s7
 800774c:	eef4 2ac2 	vcmpe.f32	s5, s4
 8007750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007758:	fe62 1a82 	vselge.f32	s3, s5, s4
 800775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007760:	eeb4 4ac3 	vcmpe.f32	s8, s6
 8007764:	fe27 5a27 	vselge.f32	s10, s14, s15
 8007768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776c:	fe64 6a03 	vselge.f32	s13, s8, s6
 8007770:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8007774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007778:	eeb4 2ae6 	vcmpe.f32	s4, s13
 800777c:	fe25 1a26 	vselge.f32	s2, s10, s13
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 8007780:	ee71 1ac1 	vsub.f32	s3, s3, s2
    return (a >= b) ? a : b;
 8007784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007788:	eef4 2ac5 	vcmpe.f32	s5, s10
    log174[bit_idx + 0] = max4(s2[4], s2[5], s2[6], s2[7]) - max4(s2[0], s2[1], s2[2], s2[3]);
 800778c:	ed45 1a03 	vstr	s3, [r5, #-12]
    return (a >= b) ? a : b;
 8007790:	bf88      	it	hi
 8007792:	eef0 6a42 	vmovhi.f32	s13, s4
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800779e:	bf88      	it	hi
 80077a0:	eeb0 5a62 	vmovhi.f32	s10, s5
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	eef4 5ae3 	vcmpe.f32	s11, s7
    log174[bit_idx + 1] = max4(s2[2], s2[3], s2[6], s2[7]) - max4(s2[0], s2[1], s2[4], s2[5]);
 80077ac:	ee76 6ac5 	vsub.f32	s13, s13, s10
    return (a >= b) ? a : b;
 80077b0:	fe67 7a83 	vselge.f32	s15, s15, s6
 80077b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    log174[bit_idx + 1] = max4(s2[2], s2[3], s2[6], s2[7]) - max4(s2[0], s2[1], s2[4], s2[5]);
 80077b8:	ed45 6a02 	vstr	s13, [r5, #-8]
    return (a >= b) ? a : b;
 80077bc:	fe65 5aa3 	vselge.f32	s11, s11, s7
 80077c0:	eef4 5ae7 	vcmpe.f32	s11, s15
 80077c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c8:	eeb4 7ac4 	vcmpe.f32	s14, s8
 80077cc:	bf88      	it	hi
 80077ce:	eef0 7a65 	vmovhi.f32	s15, s11
 80077d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d6:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80077da:	fe27 7a04 	vselge.f32	s14, s14, s8
 80077de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e2:	fe26 6a24 	vselge.f32	s12, s12, s9
 80077e6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80077ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ee:	bf88      	it	hi
 80077f0:	eeb0 7a46 	vmovhi.f32	s14, s12
    log174[bit_idx + 2] = max4(s2[1], s2[3], s2[5], s2[7]) - max4(s2[0], s2[2], s2[4], s2[6]);
 80077f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077f8:	ed45 7a01 	vstr	s15, [r5, #-4]
 80077fc:	e743      	b.n	8007686 <extract_likelihood+0x3a>
        sum  += log174[i];
 80077fe:	ecb3 7a01 	vldmia	r3!, {s14}
    for (int i = 0; i < N; ++i) {
 8007802:	3101      	adds	r1, #1
        sum  += log174[i];
 8007804:	ee77 7a87 	vadd.f32	s15, s15, s14
        sum2 += log174[i] * log174[i];
 8007808:	eea7 0a07 	vfma.f32	s0, s14, s14
 800780c:	e74f      	b.n	80076ae <extract_likelihood+0x62>
        log174[i] *= norm_factor;
 800780e:	edd6 7a00 	vldr	s15, [r6]
    for (int i = 0; i < N; ++i) {
 8007812:	3301      	adds	r3, #1
        log174[i] *= norm_factor;
 8007814:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007818:	ece6 7a01 	vstmia	r6!, {s15}
 800781c:	e758      	b.n	80076d0 <extract_likelihood+0x84>
 800781e:	bf00      	nop
 8007820:	20001a7c 	.word	0x20001a7c
 8007824:	00000000 	.word	0x00000000
 8007828:	20001a80 	.word	0x20001a80

0800782c <parity8>:



// Returns 1 if an odd number of bits are set in x, zero otherwise
uint8_t parity8(uint8_t x) {
    x ^= x >> 4;    // a b c d ae bf cg dh
 800782c:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
    x ^= x >> 2;    // a b ac bd cae dbf aecg bfdh
 8007830:	ea80 0090 	eor.w	r0, r0, r0, lsr #2
    x ^= x >> 1;    // a ab bac acbd bdcae caedbf aecgbfdh
 8007834:	ea80 0050 	eor.w	r0, r0, r0, lsr #1
    return (x) & 1;
}
 8007838:	f000 0001 	and.w	r0, r0, #1
 800783c:	4770      	bx	lr
	...

08007840 <encode174>:
// The code is a (174,91) regular ldpc code with column weight 3.
// The code was generated using the PEG algorithm.
// Arguments:
// [IN] message   - array of 91 bits stored as 12 bytes (MSB first)
// [OUT] codeword - array of 174 bits stored as 22 bytes (MSB first)
void encode174(const uint8_t *message, uint8_t *codeword) {
 8007840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	4c28      	ldr	r4, [pc, #160]	; (80078e8 <encode174+0xa8>)
 8007846:	4606      	mov	r6, r0
    //     printf("%02x ", message[i]);
    // }
    // printf("\n");

    // Fill the codeword with message and zeros, as we will only update binary ones later
    for (int j = 0; j < (7 + N) / 8; ++j) {
 8007848:	2200      	movs	r2, #0
 800784a:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80078f0 <encode174+0xb0>
 800784e:	2508      	movs	r5, #8
 8007850:	4627      	mov	r7, r4
 8007852:	f8dc 0000 	ldr.w	r0, [ip]
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	3007      	adds	r0, #7
 800785a:	fb90 f0f5 	sdiv	r0, r0, r5
 800785e:	4290      	cmp	r0, r2
 8007860:	dc1d      	bgt.n	800789e <encode174+0x5e>
        codeword[j] = (j < K_BYTES) ? message[j] : 0;
    }

    uint8_t col_mask = (0x80 >> (K % 8));   // bitmask of current byte
 8007862:	4a22      	ldr	r2, [pc, #136]	; (80078ec <encode174+0xac>)
    uint8_t col_idx = K_BYTES - 1;          // index into byte array
 8007864:	3b01      	subs	r3, #1
 8007866:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80078f4 <encode174+0xb4>

    // Compute the first part of itmp (1:M) and store the result in codeword
    for (int i = 0; i < M; ++i) { // do i=1,M
 800786a:	f04f 0800 	mov.w	r8, #0
    uint8_t col_mask = (0x80 >> (K % 8));   // bitmask of current byte
 800786e:	6812      	ldr	r2, [r2, #0]
    uint8_t col_idx = K_BYTES - 1;          // index into byte array
 8007870:	b2db      	uxtb	r3, r3
    for (int i = 0; i < M; ++i) { // do i=1,M
 8007872:	f8df a084 	ldr.w	sl, [pc, #132]	; 80078f8 <encode174+0xb8>
    uint8_t col_mask = (0x80 >> (K % 8));   // bitmask of current byte
 8007876:	4250      	negs	r0, r2
 8007878:	f002 0207 	and.w	r2, r2, #7
 800787c:	f000 0007 	and.w	r0, r0, #7
 8007880:	bf58      	it	pl
 8007882:	4242      	negpl	r2, r0
 8007884:	2080      	movs	r0, #128	; 0x80
 8007886:	fa40 f202 	asr.w	r2, r0, r2
 800788a:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < M; ++i) { // do i=1,M
 800788c:	f8da 0000 	ldr.w	r0, [sl]
 8007890:	4540      	cmp	r0, r8
 8007892:	dd27      	ble.n	80078e4 <encode174+0xa4>
        // Fast implementation of bitwise multiplication and parity checking
        // Normally nsum would contain the result of dot product between message and kGenerator[i],
        // but we only compute the sum modulo 2.
        uint8_t nsum = 0;
        for (int j = 0; j < K_BYTES; ++j) {
 8007894:	2400      	movs	r4, #0
 8007896:	f8d7 b000 	ldr.w	fp, [r7]
        uint8_t nsum = 0;
 800789a:	4625      	mov	r5, r4
 800789c:	e011      	b.n	80078c2 <encode174+0x82>
        codeword[j] = (j < K_BYTES) ? message[j] : 0;
 800789e:	429a      	cmp	r2, r3
 80078a0:	bfb4      	ite	lt
 80078a2:	5cb3      	ldrblt	r3, [r6, r2]
 80078a4:	2300      	movge	r3, #0
 80078a6:	548b      	strb	r3, [r1, r2]
    for (int j = 0; j < (7 + N) / 8; ++j) {
 80078a8:	3201      	adds	r2, #1
 80078aa:	e7d2      	b.n	8007852 <encode174+0x12>
            uint8_t bits = message[j] & kGenerator[i][j];    // bitwise AND (bitwise multiplication)
 80078ac:	f816 c004 	ldrb.w	ip, [r6, r4]
 80078b0:	f819 0004 	ldrb.w	r0, [r9, r4]
        for (int j = 0; j < K_BYTES; ++j) {
 80078b4:	3401      	adds	r4, #1
            nsum ^= parity8(bits);                  // bitwise XOR (addition modulo 2)
 80078b6:	ea0c 0000 	and.w	r0, ip, r0
 80078ba:	f7ff ffb7 	bl	800782c <parity8>
 80078be:	4045      	eors	r5, r0
 80078c0:	b2ed      	uxtb	r5, r5
        for (int j = 0; j < K_BYTES; ++j) {
 80078c2:	45a3      	cmp	fp, r4
 80078c4:	dcf2      	bgt.n	80078ac <encode174+0x6c>
        }
        // Check if we need to set a bit in codeword
        if (nsum % 2) { // pchecks(i)=mod(nsum,2)
 80078c6:	07e8      	lsls	r0, r5, #31
    for (int i = 0; i < M; ++i) { // do i=1,M
 80078c8:	f108 0801 	add.w	r8, r8, #1
 80078cc:	f109 090c 	add.w	r9, r9, #12
            codeword[col_idx] |= col_mask;
 80078d0:	bf42      	ittt	mi
 80078d2:	5cc8      	ldrbmi	r0, [r1, r3]
 80078d4:	4310      	orrmi	r0, r2
 80078d6:	54c8      	strbmi	r0, [r1, r3]
        }

        col_mask >>= 1;
        if (col_mask == 0) {
 80078d8:	0852      	lsrs	r2, r2, #1
            col_mask = 0x80;
            ++col_idx;
 80078da:	bf02      	ittt	eq
 80078dc:	3301      	addeq	r3, #1
            col_mask = 0x80;
 80078de:	2280      	moveq	r2, #128	; 0x80
            ++col_idx;
 80078e0:	b2db      	uxtbeq	r3, r3
 80078e2:	e7d3      	b.n	800788c <encode174+0x4c>
    // printf("Result ");
    // for (int i = 0; i < (N + 7) / 8; ++i) {
    //     printf("%02x ", codeword[i]);
    // }
    // printf("\n");
}
 80078e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	20001ae8 	.word	0x20001ae8
 80078ec:	20001a84 	.word	0x20001a84
 80078f0:	20001a7c 	.word	0x20001a7c
 80078f4:	200005f0 	.word	0x200005f0
 80078f8:	20001ae0 	.word	0x20001ae0

080078fc <crc>:
// [IN] message  - byte sequence (MSB first)
// [IN] num_bits - number of bits in the sequence
uint16_t crc(uint8_t *message, int num_bits) {
    // Adapted from https://barrgroup.com/Embedded-Systems/How-To/CRC-Calculation-C-Code
    //constexpr uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 80078fc:	4b13      	ldr	r3, [pc, #76]	; (800794c <crc+0x50>)

    uint16_t remainder = 0;
    int idx_byte = 0;

    // Perform modulo-2 division, a bit at a time.
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 80078fe:	2200      	movs	r2, #0
uint16_t crc(uint8_t *message, int num_bits) {
 8007900:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 8007902:	681f      	ldr	r7, [r3, #0]
 8007904:	2401      	movs	r4, #1
    int idx_byte = 0;
 8007906:	4615      	mov	r5, r2
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 8007908:	1e7b      	subs	r3, r7, #1
        if (idx_bit % 8 == 0) {
            // Bring the next byte into the remainder.
            remainder ^= (message[idx_byte] << (CRC_WIDTH - 8));
 800790a:	f1a7 0e08 	sub.w	lr, r7, #8
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 800790e:	409c      	lsls	r4, r3
            ++idx_byte;
        }

        // Try to divide the current data bit.
        if (remainder & TOPBIT) {
            remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <crc+0x54>)
    uint16_t  TOPBIT = (1 << (CRC_WIDTH - 1));
 8007912:	b2a4      	uxth	r4, r4
            remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 8007914:	f9b3 c000 	ldrsh.w	ip, [r3]
    uint16_t remainder = 0;
 8007918:	4613      	mov	r3, r2
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 800791a:	428a      	cmp	r2, r1
 800791c:	db04      	blt.n	8007928 <crc+0x2c>
        else {
            remainder = (remainder << 1);
        }
    }
    // printf("CRC = %04xh\n", remainder & ((1 << CRC_WIDTH) - 1));
    return remainder & ((1 << CRC_WIDTH) - 1);
 800791e:	2001      	movs	r0, #1
 8007920:	40b8      	lsls	r0, r7
 8007922:	3801      	subs	r0, #1
}
 8007924:	4018      	ands	r0, r3
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (idx_bit % 8 == 0) {
 8007928:	0756      	lsls	r6, r2, #29
 800792a:	d105      	bne.n	8007938 <crc+0x3c>
            remainder ^= (message[idx_byte] << (CRC_WIDTH - 8));
 800792c:	5d46      	ldrb	r6, [r0, r5]
            ++idx_byte;
 800792e:	3501      	adds	r5, #1
            remainder ^= (message[idx_byte] << (CRC_WIDTH - 8));
 8007930:	fa06 f60e 	lsl.w	r6, r6, lr
 8007934:	4073      	eors	r3, r6
 8007936:	b29b      	uxth	r3, r3
        if (remainder & TOPBIT) {
 8007938:	4223      	tst	r3, r4
 800793a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    for (int idx_bit = 0; idx_bit < num_bits; ++idx_bit) {
 800793e:	f102 0201 	add.w	r2, r2, #1
            remainder = (remainder << 1) ^ CRC_POLYNOMIAL;
 8007942:	bf18      	it	ne
 8007944:	ea8c 0303 	eorne.w	r3, ip, r3
            remainder = (remainder << 1);
 8007948:	b29b      	uxth	r3, r3
 800794a:	e7e6      	b.n	800791a <crc+0x1e>
 800794c:	20001adc 	.word	0x20001adc
 8007950:	20001aec 	.word	0x20001aec

08007954 <genft8>:


// Generate FT8 tone sequence from payload data
// [IN] payload - 10 byte array consisting of 77 bit payload (MSB first)
// [OUT] itone  - array of NN (79) bytes to store the generated tones (encoded as 0..7)
void genft8(const uint8_t *payload, uint8_t *itone) {
 8007954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007956:	b08b      	sub	sp, #44	; 0x2c
 8007958:	460d      	mov	r5, r1
    uint8_t a91[12];    // Store 77 bits of payload + 14 bits CRC

    // Copy 77 bits of payload data
    for (int i = 0; i < 10; i++)
 800795a:	2300      	movs	r3, #0
        a91[i] = payload[i];
 800795c:	ae01      	add	r6, sp, #4
 800795e:	5cc2      	ldrb	r2, [r0, r3]
 8007960:	559a      	strb	r2, [r3, r6]
    for (int i = 0; i < 10; i++)
 8007962:	3301      	adds	r3, #1
 8007964:	2b0a      	cmp	r3, #10
 8007966:	d1fa      	bne.n	800795e <genft8+0xa>

    // Clear 3 bits after the payload to make 80 bits
    a91[9] &= 0xF8;
 8007968:	f89d 400d 	ldrb.w	r4, [sp, #13]
    a91[10] = 0;
 800796c:	2700      	movs	r7, #0
    a91[11] = 0;

    // Calculate CRC of 12 bytes = 96 bits, see WSJT-X code
    uint16_t checksum = crc(a91, 96 - 14);
 800796e:	2152      	movs	r1, #82	; 0x52
 8007970:	4630      	mov	r0, r6
    a91[9] &= 0xF8;
 8007972:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
    a91[10] = 0;
 8007976:	f8ad 700e 	strh.w	r7, [sp, #14]
    a91[9] &= 0xF8;
 800797a:	f88d 400d 	strb.w	r4, [sp, #13]
    uint16_t checksum = crc(a91, 96 - 14);
 800797e:	f7ff ffbd 	bl	80078fc <crc>

    // Store the CRC at the end of 77 bit message
    a91[9] |= (uint8_t)(checksum >> 11);
    a91[10] = (uint8_t)(checksum >> 3);
 8007982:	08c3      	lsrs	r3, r0, #3
    a91[11] = (uint8_t)(checksum << 5);

    // a87 contains 77 bits of payload + 14 bits of CRC
    uint8_t codeword[22];
    encode174(a91, codeword);
 8007984:	a904      	add	r1, sp, #16
    a91[9] |= (uint8_t)(checksum >> 11);
 8007986:	ea44 24d0 	orr.w	r4, r4, r0, lsr #11
    a91[11] = (uint8_t)(checksum << 5);
 800798a:	0140      	lsls	r0, r0, #5
    a91[10] = (uint8_t)(checksum >> 3);
 800798c:	f88d 300e 	strb.w	r3, [sp, #14]
    a91[9] |= (uint8_t)(checksum >> 11);
 8007990:	f88d 400d 	strb.w	r4, [sp, #13]
    a91[11] = (uint8_t)(checksum << 5);
 8007994:	f88d 000f 	strb.w	r0, [sp, #15]
    encode174(a91, codeword);
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff ff51 	bl	8007840 <encode174>
 800799e:	1e6b      	subs	r3, r5, #1

    // Message structure: S7 D29 S7 D29 S7
    for (int i = 0; i < 7; ++i) {
 80079a0:	463a      	mov	r2, r7
        itone[i]      = kCostas_map[i];
 80079a2:	4823      	ldr	r0, [pc, #140]	; (8007a30 <genft8+0xdc>)
 80079a4:	5c11      	ldrb	r1, [r2, r0]
    for (int i = 0; i < 7; ++i) {
 80079a6:	3201      	adds	r2, #1
 80079a8:	2a07      	cmp	r2, #7
        itone[i]      = kCostas_map[i];
 80079aa:	f803 1f01 	strb.w	r1, [r3, #1]!
        itone[36 + i] = kCostas_map[i];
 80079ae:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
        itone[72 + i] = kCostas_map[i];
 80079b2:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
    for (int i = 0; i < 7; ++i) {
 80079b6:	d1f5      	bne.n	80079a4 <genft8+0x50>

    int k = 7;          // Skip over the first set of Costas symbols

    uint8_t mask = 0x80;
    int i_byte = 0;
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079b8:	2000      	movs	r0, #0
    uint8_t mask = 0x80;
 80079ba:	2380      	movs	r3, #128	; 0x80
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079bc:	4e1d      	ldr	r6, [pc, #116]	; (8007a34 <genft8+0xe0>)
    int i_byte = 0;
 80079be:	4601      	mov	r1, r0
        if (codeword[i_byte] & mask) bits3 |= 2;
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
        if (codeword[i_byte] & mask) bits3 |= 1;
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }

        itone[k] = kGray_map[bits3];
 80079c0:	4f1d      	ldr	r7, [pc, #116]	; (8007a38 <genft8+0xe4>)
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079c2:	6834      	ldr	r4, [r6, #0]
 80079c4:	4284      	cmp	r4, r0
 80079c6:	dc01      	bgt.n	80079cc <genft8+0x78>
        ++k;
    }
}
 80079c8:	b00b      	add	sp, #44	; 0x2c
 80079ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079cc:	ac0a      	add	r4, sp, #40	; 0x28
        if (j == 29) {
 80079ce:	281d      	cmp	r0, #29
        if (codeword[i_byte] & mask) bits3 |= 2;
 80079d0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
    for (int j = 0; j < ND; ++j) { // do j=1,ND
 80079d4:	f100 0001 	add.w	r0, r0, #1
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079d8:	440c      	add	r4, r1
            k += 7;     // Skip over the second set of Costas symbols
 80079da:	bf08      	it	eq
 80079dc:	3207      	addeq	r2, #7
        if (codeword[i_byte] & mask) bits3 |= 4;
 80079de:	f814 4c18 	ldrb.w	r4, [r4, #-24]
        uint8_t bits3 = 0;
 80079e2:	4223      	tst	r3, r4
 80079e4:	bf14      	ite	ne
 80079e6:	2404      	movne	r4, #4
 80079e8:	2400      	moveq	r4, #0
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	bf04      	itt	eq
 80079ee:	3101      	addeq	r1, #1
 80079f0:	2380      	moveq	r3, #128	; 0x80
        if (codeword[i_byte] & mask) bits3 |= 2;
 80079f2:	448c      	add	ip, r1
 80079f4:	f81c cc18 	ldrb.w	ip, [ip, #-24]
 80079f8:	ea13 0f0c 	tst.w	r3, ip
        if (codeword[i_byte] & mask) bits3 |= 1;
 80079fc:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
        if (codeword[i_byte] & mask) bits3 |= 2;
 8007a00:	bf18      	it	ne
 8007a02:	f044 0402 	orrne.w	r4, r4, #2
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	bf04      	itt	eq
 8007a0a:	3101      	addeq	r1, #1
 8007a0c:	2380      	moveq	r3, #128	; 0x80
        if (codeword[i_byte] & mask) bits3 |= 1;
 8007a0e:	448c      	add	ip, r1
 8007a10:	f81c cc18 	ldrb.w	ip, [ip, #-24]
 8007a14:	ea13 0f0c 	tst.w	r3, ip
 8007a18:	bf18      	it	ne
 8007a1a:	f044 0401 	orrne.w	r4, r4, #1
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 8007a1e:	085b      	lsrs	r3, r3, #1
        itone[k] = kGray_map[bits3];
 8007a20:	5d3c      	ldrb	r4, [r7, r4]
        if (0 == (mask >>= 1)) { mask = 0x80; i_byte++; }
 8007a22:	bf04      	itt	eq
 8007a24:	3101      	addeq	r1, #1
 8007a26:	2380      	moveq	r3, #128	; 0x80
        itone[k] = kGray_map[bits3];
 8007a28:	54ac      	strb	r4, [r5, r2]
        ++k;
 8007a2a:	3201      	adds	r2, #1
 8007a2c:	e7c9      	b.n	80079c2 <genft8+0x6e>
 8007a2e:	bf00      	nop
 8007a30:	08050b2a 	.word	0x08050b2a
 8007a34:	20001a80 	.word	0x20001a80
 8007a38:	08050b22 	.word	0x08050b22

08007a3c <ldpc_check>:
// 0 means total success.
//
static int ldpc_check(uint8_t codeword[]) {
    int errors = 0;

    for (int j = 0; j < M; ++j) {
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <ldpc_check+0x40>)
 8007a3e:	2200      	movs	r2, #0
        uint8_t x = 0;
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a40:	f8df c040 	ldr.w	ip, [pc, #64]	; 8007a84 <ldpc_check+0x48>
    int errors = 0;
 8007a44:	4611      	mov	r1, r2
static int ldpc_check(uint8_t codeword[]) {
 8007a46:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int j = 0; j < M; ++j) {
 8007a48:	f8d3 e000 	ldr.w	lr, [r3]
 8007a4c:	4d0c      	ldr	r5, [pc, #48]	; (8007a80 <ldpc_check+0x44>)
 8007a4e:	4596      	cmp	lr, r2
 8007a50:	dd11      	ble.n	8007a76 <ldpc_check+0x3a>
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a52:	2300      	movs	r3, #0
 8007a54:	f812 700c 	ldrb.w	r7, [r2, ip]
        uint8_t x = 0;
 8007a58:	461c      	mov	r4, r3
 8007a5a:	e005      	b.n	8007a68 <ldpc_check+0x2c>
            x ^= codeword[kNm[j][i] - 1];
 8007a5c:	5cee      	ldrb	r6, [r5, r3]
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a5e:	3301      	adds	r3, #1
            x ^= codeword[kNm[j][i] - 1];
 8007a60:	4406      	add	r6, r0
 8007a62:	f816 6c01 	ldrb.w	r6, [r6, #-1]
 8007a66:	4074      	eors	r4, r6
        for (int i = 0; i < kNrw[j]; ++i) {
 8007a68:	429f      	cmp	r7, r3
 8007a6a:	dcf7      	bgt.n	8007a5c <ldpc_check+0x20>
        }
        if (x != 0) {
 8007a6c:	b104      	cbz	r4, 8007a70 <ldpc_check+0x34>
            ++errors;
 8007a6e:	3101      	adds	r1, #1
    for (int j = 0; j < M; ++j) {
 8007a70:	3201      	adds	r2, #1
 8007a72:	3507      	adds	r5, #7
 8007a74:	e7eb      	b.n	8007a4e <ldpc_check+0x12>
        }
    }
    return errors;
}
 8007a76:	4608      	mov	r0, r1
 8007a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	20001ae0 	.word	0x20001ae0
 8007a80:	200002fd 	.word	0x200002fd
 8007a84:	200000a0 	.word	0x200000a0

08007a88 <fast_tanh.part.0>:
        return -1.0f;
    }
    if (x > 4.97f) {
        return 1.0f;
    }
    float x2 = x * x;
 8007a88:	ee20 7a00 	vmul.f32	s14, s0, s0
    //float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
    //float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
    //float a = x * (10395.0f + x2 * (1260.0f + x2 * 21.0f));
    //float b = 10395.0f + x2 * (4725.0f + x2 * (210.0f + x2));
    float a = x * (945.0f + x2 * (105.0f + x2));
 8007a8c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007abc <fast_tanh.part.0+0x34>
 8007a90:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8007ac0 <fast_tanh.part.0+0x38>
 8007a94:	eeb0 6a67 	vmov.f32	s12, s15
 8007a98:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007a9c:	eea7 6a26 	vfma.f32	s12, s14, s13
    float b = 945.0f + x2 * (420.0f + x2 * 15.0f);
 8007aa0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8007ac4 <fast_tanh.part.0+0x3c>
    float a = x * (945.0f + x2 * (105.0f + x2));
 8007aa4:	ee26 0a00 	vmul.f32	s0, s12, s0
    float b = 945.0f + x2 * (420.0f + x2 * 15.0f);
 8007aa8:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 8007aac:	eee7 6a06 	vfma.f32	s13, s14, s12
 8007ab0:	eee7 7a26 	vfma.f32	s15, s14, s13
    return a / b;
}
 8007ab4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	446c4000 	.word	0x446c4000
 8007ac0:	42d20000 	.word	0x42d20000
 8007ac4:	43d20000 	.word	0x43d20000

08007ac8 <pack_bits>:
void pack_bits(const uint8_t plain[], int num_bits, uint8_t packed[]) {
 8007ac8:	b570      	push	{r4, r5, r6, lr}
    int num_bytes = (num_bits + 7) / 8;
 8007aca:	1dcb      	adds	r3, r1, #7
 8007acc:	2408      	movs	r4, #8
 8007ace:	2600      	movs	r6, #0
 8007ad0:	fb93 f3f4 	sdiv	r3, r3, r4
    for (int i = 0; i < num_bytes; ++i) {
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	1aa5      	subs	r5, r4, r2
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	dc06      	bgt.n	8007aea <pack_bits+0x22>
 8007adc:	4605      	mov	r5, r0
    int     byte_idx = 0;
 8007ade:	2400      	movs	r4, #0
            mask = 0x80;
 8007ae0:	2380      	movs	r3, #128	; 0x80
    for (int i = 0; i < num_bits; ++i) {
 8007ae2:	1a2e      	subs	r6, r5, r0
 8007ae4:	42b1      	cmp	r1, r6
 8007ae6:	dc03      	bgt.n	8007af0 <pack_bits+0x28>
}
 8007ae8:	bd70      	pop	{r4, r5, r6, pc}
        packed[i] = 0;
 8007aea:	f804 6b01 	strb.w	r6, [r4], #1
 8007aee:	e7f2      	b.n	8007ad6 <pack_bits+0xe>
        if (plain[i]) {
 8007af0:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007af4:	b116      	cbz	r6, 8007afc <pack_bits+0x34>
            packed[byte_idx] |= mask;
 8007af6:	5d16      	ldrb	r6, [r2, r4]
 8007af8:	431e      	orrs	r6, r3
 8007afa:	5516      	strb	r6, [r2, r4]
        if (!mask) {
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	d1f0      	bne.n	8007ae2 <pack_bits+0x1a>
            ++byte_idx;
 8007b00:	3401      	adds	r4, #1
 8007b02:	e7ed      	b.n	8007ae0 <pack_bits+0x18>

08007b04 <bp_decode>:
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	b08b      	sub	sp, #44	; 0x2c
    for (int i = 0; i < M; ++i) {
 8007b0a:	4cab      	ldr	r4, [pc, #684]	; (8007db8 <bp_decode+0x2b4>)
        for (int j = 0; j < kNrw[i]; ++j) {
 8007b0c:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 8007dc8 <bp_decode+0x2c4>
            toc[i][j] = codeword[kNm[i][j] - 1];
 8007b10:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	607b      	str	r3, [r7, #4]
    float tov[N][3];
 8007b18:	4ba8      	ldr	r3, [pc, #672]	; (8007dbc <bp_decode+0x2b8>)
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b1a:	6138      	str	r0, [r7, #16]
    float toc[M][7];
 8007b1c:	201c      	movs	r0, #28
    float tov[N][3];
 8007b1e:	681d      	ldr	r5, [r3, #0]
 8007b20:	230c      	movs	r3, #12
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b22:	60b9      	str	r1, [r7, #8]
    float tov[N][3];
 8007b24:	436b      	muls	r3, r5
void bp_decode(float codeword[], int max_iters, uint8_t plain[], int *ok) {
 8007b26:	623a      	str	r2, [r7, #32]
    float tov[N][3];
 8007b28:	330a      	adds	r3, #10
 8007b2a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b2c:	f023 0307 	bic.w	r3, r3, #7
 8007b30:	ebad 0d03 	sub.w	sp, sp, r3
    float toc[M][7];
 8007b34:	4ba2      	ldr	r3, [pc, #648]	; (8007dc0 <bp_decode+0x2bc>)
 8007b36:	f8d3 a000 	ldr.w	sl, [r3]
    float tov[N][3];
 8007b3a:	46e9      	mov	r9, sp
    float toc[M][7];
 8007b3c:	fb00 f30a 	mul.w	r3, r0, sl
 8007b40:	330a      	adds	r3, #10
 8007b42:	f023 0307 	bic.w	r3, r3, #7
 8007b46:	ebad 0d03 	sub.w	sp, sp, r3
    for (int i = 0; i < M; ++i) {
 8007b4a:	2300      	movs	r3, #0
    float toc[M][7];
 8007b4c:	46eb      	mov	fp, sp
    for (int i = 0; i < M; ++i) {
 8007b4e:	4553      	cmp	r3, sl
 8007b50:	da14      	bge.n	8007b7c <bp_decode+0x78>
 8007b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
        for (int j = 0; j < kNrw[i]; ++j) {
 8007b54:	2100      	movs	r1, #0
 8007b56:	f813 c00e 	ldrb.w	ip, [r3, lr]
 8007b5a:	fb02 b603 	mla	r6, r2, r3, fp
 8007b5e:	e008      	b.n	8007b72 <bp_decode+0x6e>
            toc[i][j] = codeword[kNm[i][j] - 1];
 8007b60:	5c62      	ldrb	r2, [r4, r1]
        for (int j = 0; j < kNrw[i]; ++j) {
 8007b62:	3101      	adds	r1, #1
            toc[i][j] = codeword[kNm[i][j] - 1];
 8007b64:	6938      	ldr	r0, [r7, #16]
 8007b66:	4442      	add	r2, r8
 8007b68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	f846 2b04 	str.w	r2, [r6], #4
        for (int j = 0; j < kNrw[i]; ++j) {
 8007b72:	458c      	cmp	ip, r1
 8007b74:	dcf4      	bgt.n	8007b60 <bp_decode+0x5c>
    for (int i = 0; i < M; ++i) {
 8007b76:	3301      	adds	r3, #1
 8007b78:	3407      	adds	r4, #7
 8007b7a:	e7e8      	b.n	8007b4e <bp_decode+0x4a>
 8007b7c:	464b      	mov	r3, r9
    for (int i = 0; i < N; ++i) {
 8007b7e:	2200      	movs	r2, #0
            tov[i][j] = 0;
 8007b80:	2100      	movs	r1, #0
    for (int i = 0; i < N; ++i) {
 8007b82:	42aa      	cmp	r2, r5
 8007b84:	f103 030c 	add.w	r3, r3, #12
 8007b88:	f280 810f 	bge.w	8007daa <bp_decode+0x2a6>
            tov[i][j] = 0;
 8007b8c:	f843 1c0c 	str.w	r1, [r3, #-12]
    for (int i = 0; i < N; ++i) {
 8007b90:	3201      	adds	r2, #1
            tov[i][j] = 0;
 8007b92:	f843 1c08 	str.w	r1, [r3, #-8]
 8007b96:	f843 1c04 	str.w	r1, [r3, #-4]
 8007b9a:	e7f2      	b.n	8007b82 <bp_decode+0x7e>
            zn[i] = codeword[i] + tov[i][0] + tov[i][1] + tov[i][2];
 8007b9c:	ecf0 7a01 	vldmia	r0!, {s15}
 8007ba0:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007ba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ba8:	ed13 7a02 	vldr	s14, [r3, #-8]
 8007bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bb0:	ed13 7a01 	vldr	s14, [r3, #-4]
 8007bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
            plain[i] = (zn[i] > 0) ? 1 : 0;
 8007bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
            zn[i] = codeword[i] + tov[i][0] + tov[i][1] + tov[i][2];
 8007bbc:	ece4 7a01 	vstmia	r4!, {s15}
            plain[i] = (zn[i] > 0) ? 1 : 0;
 8007bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc4:	bfcc      	ite	gt
 8007bc6:	2501      	movgt	r5, #1
 8007bc8:	2500      	movle	r5, #0
 8007bca:	f801 5b01 	strb.w	r5, [r1], #1
 8007bce:	e07d      	b.n	8007ccc <bp_decode+0x1c8>
                int ibj = kNm[i][j] - 1;
 8007bd0:	5d2b      	ldrb	r3, [r5, r4]
 8007bd2:	3b01      	subs	r3, #1
                toc[i][j] = zn[ibj];
 8007bd4:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8007bd8:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8007bdc:	6800      	ldr	r0, [r0, #0]
 8007bde:	6008      	str	r0, [r1, #0]
 8007be0:	4878      	ldr	r0, [pc, #480]	; (8007dc4 <bp_decode+0x2c0>)
 8007be2:	4406      	add	r6, r0
 8007be4:	200c      	movs	r0, #12
 8007be6:	4343      	muls	r3, r0
                for (int kk = 0; kk < 3; ++kk) {
 8007be8:	2000      	movs	r0, #0
                    if (kMn[ibj][kk] - 1 == i) {
 8007bea:	f816 c000 	ldrb.w	ip, [r6, r0]
 8007bee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007bf2:	4562      	cmp	r2, ip
 8007bf4:	d10a      	bne.n	8007c0c <bp_decode+0x108>
                        toc[i][j] -= tov[ibj][kk];
 8007bf6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bfa:	edd1 7a00 	vldr	s15, [r1]
 8007bfe:	44cc      	add	ip, r9
 8007c00:	ed9c 7a00 	vldr	s14, [ip]
 8007c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c08:	edc1 7a00 	vstr	s15, [r1]
                for (int kk = 0; kk < 3; ++kk) {
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	2803      	cmp	r0, #3
 8007c10:	d1eb      	bne.n	8007bea <bp_decode+0xe6>
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c12:	3401      	adds	r4, #1
 8007c14:	3104      	adds	r1, #4
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	dbd9      	blt.n	8007bd0 <bp_decode+0xcc>
        for (int i = 0; i < M; ++i) {
 8007c1c:	3201      	adds	r2, #1
 8007c1e:	3507      	adds	r5, #7
 8007c20:	e06c      	b.n	8007cfc <bp_decode+0x1f8>
                toc[i][j] = fast_tanh(-toc[i][j] / 2);
 8007c22:	ed93 0a00 	vldr	s0, [r3]
 8007c26:	ee20 0a64 	vnmul.f32	s0, s0, s9
    if (x < -4.97f) {
 8007c2a:	eeb4 0ae5 	vcmpe.f32	s0, s11
 8007c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c32:	d415      	bmi.n	8007c60 <bp_decode+0x15c>
    if (x > 4.97f) {
 8007c34:	eeb4 0ac5 	vcmpe.f32	s0, s10
 8007c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3c:	dc13      	bgt.n	8007c66 <bp_decode+0x162>
 8007c3e:	f7ff ff23 	bl	8007a88 <fast_tanh.part.0>
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c42:	3101      	adds	r1, #1
                toc[i][j] = fast_tanh(-toc[i][j] / 2);
 8007c44:	eca3 0a01 	vstmia	r3!, {s0}
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c48:	4281      	cmp	r1, r0
 8007c4a:	dbea      	blt.n	8007c22 <bp_decode+0x11e>
        for (int i = 0; i < M; ++i) {
 8007c4c:	3201      	adds	r2, #1
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	da10      	bge.n	8007c76 <bp_decode+0x172>
 8007c54:	231c      	movs	r3, #28
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c56:	5d10      	ldrb	r0, [r2, r4]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	fb03 b302 	mla	r3, r3, r2, fp
 8007c5e:	e7f3      	b.n	8007c48 <bp_decode+0x144>
        return -1.0f;
 8007c60:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007c64:	e7ed      	b.n	8007c42 <bp_decode+0x13e>
        return 1.0f;
 8007c66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007c6a:	e7ea      	b.n	8007c42 <bp_decode+0x13e>
        for (int i = 0; i < M; ++i) {
 8007c6c:	2200      	movs	r2, #0
            for (int j = 0; j < kNrw[i]; ++j) {
 8007c6e:	4c56      	ldr	r4, [pc, #344]	; (8007dc8 <bp_decode+0x2c4>)
                toc[i][j] = fast_tanh(-toc[i][j] / 2);
 8007c70:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8007c74:	e7eb      	b.n	8007c4e <bp_decode+0x14a>
 8007c76:	4c53      	ldr	r4, [pc, #332]	; (8007dc4 <bp_decode+0x2c0>)
        for (int i = 0; i < N; ++i) {
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f04f 0e0c 	mov.w	lr, #12
 8007c7e:	f04f 081c 	mov.w	r8, #28
    float x2 = x * x;
    //float a = x * (-15015.0f + x2 * (19250.0f + x2 * (-5943.0f + x2 * 256.0f)));
    //float b = (-15015.0f + x2 * (24255.0f + x2 * (-11025.0f + x2 * 1225.0f)));
    //float a = x * (-1155.0f + x2 * (1190.0f + x2 * -231.0f));
    //float b = (-1155.0f + x2 * (1575.0f + x2 * (-525.0f + x2 * 25.0f)));
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007c82:	ed9f 6a52 	vldr	s12, [pc, #328]	; 8007dcc <bp_decode+0x2c8>
 8007c86:	eddf 4a52 	vldr	s9, [pc, #328]	; 8007dd0 <bp_decode+0x2cc>
 8007c8a:	eddf 6a52 	vldr	s13, [pc, #328]	; 8007dd4 <bp_decode+0x2d0>
    float b = (945.0f + x2 * (-1050.0f + x2 * 225.0f));
 8007c8e:	ed9f 4a52 	vldr	s8, [pc, #328]	; 8007dd8 <bp_decode+0x2d4>
 8007c92:	eddf 3a52 	vldr	s7, [pc, #328]	; 8007ddc <bp_decode+0x2d8>
        for (int i = 0; i < N; ++i) {
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	db39      	blt.n	8007d10 <bp_decode+0x20c>
    for (int iter = 0; iter < max_iters; ++iter) {
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f8d7 d014 	ldr.w	sp, [r7, #20]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	4293      	cmp	r3, r2
 8007cac:	da76      	bge.n	8007d9c <bp_decode+0x298>
        float   zn[N];
 8007cae:	4a43      	ldr	r2, [pc, #268]	; (8007dbc <bp_decode+0x2b8>)
    for (int iter = 0; iter < max_iters; ++iter) {
 8007cb0:	f8c7 d014 	str.w	sp, [r7, #20]
        float   zn[N];
 8007cb4:	6813      	ldr	r3, [r2, #0]
 8007cb6:	6938      	ldr	r0, [r7, #16]
 8007cb8:	009b      	lsls	r3, r3, #2
        for (int i = 0; i < N; ++i) {
 8007cba:	6a39      	ldr	r1, [r7, #32]
        float   zn[N];
 8007cbc:	330a      	adds	r3, #10
 8007cbe:	f023 0307 	bic.w	r3, r3, #7
 8007cc2:	ebad 0d03 	sub.w	sp, sp, r3
        for (int i = 0; i < N; ++i) {
 8007cc6:	464b      	mov	r3, r9
        float   zn[N];
 8007cc8:	46e8      	mov	r8, sp
 8007cca:	4644      	mov	r4, r8
        for (int i = 0; i < N; ++i) {
 8007ccc:	6815      	ldr	r5, [r2, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	61fd      	str	r5, [r7, #28]
 8007cd2:	6a3d      	ldr	r5, [r7, #32]
 8007cd4:	69fe      	ldr	r6, [r7, #28]
 8007cd6:	1b4d      	subs	r5, r1, r5
 8007cd8:	42ae      	cmp	r6, r5
 8007cda:	f73f af5f 	bgt.w	8007b9c <bp_decode+0x98>
        int errors = ldpc_check(plain);
 8007cde:	6a38      	ldr	r0, [r7, #32]
 8007ce0:	f7ff feac 	bl	8007a3c <ldpc_check>
        if (errors < min_errors) {
 8007ce4:	4582      	cmp	sl, r0
 8007ce6:	dd02      	ble.n	8007cee <bp_decode+0x1ea>
            if (errors == 0) {
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d054      	beq.n	8007d96 <bp_decode+0x292>
 8007cec:	4682      	mov	sl, r0
        for (int i = 0; i < M; ++i) {
 8007cee:	4b34      	ldr	r3, [pc, #208]	; (8007dc0 <bp_decode+0x2bc>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4d31      	ldr	r5, [pc, #196]	; (8007db8 <bp_decode+0x2b4>)
 8007cf4:	f04f 0e1c 	mov.w	lr, #28
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	dab4      	bge.n	8007c6c <bp_decode+0x168>
            for (int j = 0; j < kNrw[i]; ++j) {
 8007d02:	4b31      	ldr	r3, [pc, #196]	; (8007dc8 <bp_decode+0x2c4>)
 8007d04:	fb0e b102 	mla	r1, lr, r2, fp
 8007d08:	2400      	movs	r4, #0
 8007d0a:	5cd3      	ldrb	r3, [r2, r3]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e782      	b.n	8007c16 <bp_decode+0x112>
 8007d10:	fb0e 9c02 	mla	ip, lr, r2, r9
            for (int j = 0; j < 3; ++j) {
 8007d14:	2000      	movs	r0, #0
                int ichk = kMn[i][j] - 1; // kMn(:,j) are the checks that include bit j
 8007d16:	5c23      	ldrb	r3, [r4, r0]
                float Tmn = 1.0f;
 8007d18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007d1c:	492a      	ldr	r1, [pc, #168]	; (8007dc8 <bp_decode+0x2c4>)
                int ichk = kMn[i][j] - 1; // kMn(:,j) are the checks that include bit j
 8007d1e:	3b01      	subs	r3, #1
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007d20:	5cc9      	ldrb	r1, [r1, r3]
 8007d22:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8007d26:	fb08 f303 	mul.w	r3, r8, r3
 8007d2a:	61b9      	str	r1, [r7, #24]
 8007d2c:	4922      	ldr	r1, [pc, #136]	; (8007db8 <bp_decode+0x2b4>)
 8007d2e:	440d      	add	r5, r1
 8007d30:	2100      	movs	r1, #0
 8007d32:	69be      	ldr	r6, [r7, #24]
 8007d34:	428e      	cmp	r6, r1
 8007d36:	dc1f      	bgt.n	8007d78 <bp_decode+0x274>
    float x2 = x * x;
 8007d38:	ee27 7aa7 	vmul.f32	s14, s15, s15
            for (int j = 0; j < 3; ++j) {
 8007d3c:	3001      	adds	r0, #1
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007d3e:	eeb0 3a64 	vmov.f32	s6, s9
 8007d42:	eef0 2a66 	vmov.f32	s5, s13
            for (int j = 0; j < 3; ++j) {
 8007d46:	2803      	cmp	r0, #3
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007d48:	eea7 3a06 	vfma.f32	s6, s14, s12
 8007d4c:	eee7 2a03 	vfma.f32	s5, s14, s6
    float b = (945.0f + x2 * (-1050.0f + x2 * 225.0f));
 8007d50:	eeb0 3a63 	vmov.f32	s6, s7
 8007d54:	eea7 3a04 	vfma.f32	s6, s14, s8
    float a = x * (945.0f + x2 * (-735.0f + x2 * 64.0f));
 8007d58:	ee67 7ae2 	vnmul.f32	s15, s15, s5
    float b = (945.0f + x2 * (-1050.0f + x2 * 225.0f));
 8007d5c:	eef0 2a66 	vmov.f32	s5, s13
 8007d60:	eee7 2a03 	vfma.f32	s5, s14, s6
    return a / b;
 8007d64:	ee87 7aa2 	vdiv.f32	s14, s15, s5
                tov[i][j] = 2 * fast_atanh(-Tmn);
 8007d68:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007d6c:	ecac 7a01 	vstmia	ip!, {s14}
            for (int j = 0; j < 3; ++j) {
 8007d70:	d1d1      	bne.n	8007d16 <bp_decode+0x212>
        for (int i = 0; i < N; ++i) {
 8007d72:	3201      	adds	r2, #1
 8007d74:	3403      	adds	r4, #3
 8007d76:	e78e      	b.n	8007c96 <bp_decode+0x192>
                    if (kNm[ichk][k] - 1 != i) {
 8007d78:	5c6e      	ldrb	r6, [r5, r1]
 8007d7a:	3e01      	subs	r6, #1
 8007d7c:	42b2      	cmp	r2, r6
                        Tmn *= toc[ichk][k];
 8007d7e:	bf18      	it	ne
 8007d80:	eb03 0681 	addne.w	r6, r3, r1, lsl #2
                for (int k = 0; k < kNrw[ichk]; ++k) {
 8007d84:	f101 0101 	add.w	r1, r1, #1
                        Tmn *= toc[ichk][k];
 8007d88:	bf1e      	ittt	ne
 8007d8a:	445e      	addne	r6, fp
 8007d8c:	ed96 7a00 	vldrne	s14, [r6]
 8007d90:	ee67 7a87 	vmulne.f32	s15, s15, s14
 8007d94:	e7cd      	b.n	8007d32 <bp_decode+0x22e>
        int errors = ldpc_check(plain);
 8007d96:	4682      	mov	sl, r0
 8007d98:	f8d7 d014 	ldr.w	sp, [r7, #20]
    *ok = min_errors;
 8007d9c:	687b      	ldr	r3, [r7, #4]
}
 8007d9e:	372c      	adds	r7, #44	; 0x2c
    *ok = min_errors;
 8007da0:	f8c3 a000 	str.w	sl, [r3]
}
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int iter = 0; iter < max_iters; ++iter) {
 8007daa:	2300      	movs	r3, #0
    if (x < -4.97f) {
 8007dac:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8007de0 <bp_decode+0x2dc>
    if (x > 4.97f) {
 8007db0:	ed9f 5a0c 	vldr	s10, [pc, #48]	; 8007de4 <bp_decode+0x2e0>
    for (int iter = 0; iter < max_iters; ++iter) {
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
 8007db6:	e776      	b.n	8007ca6 <bp_decode+0x1a2>
 8007db8:	200002fd 	.word	0x200002fd
 8007dbc:	20001a7c 	.word	0x20001a7c
 8007dc0:	20001ae0 	.word	0x20001ae0
 8007dc4:	200000f3 	.word	0x200000f3
 8007dc8:	200000a0 	.word	0x200000a0
 8007dcc:	42800000 	.word	0x42800000
 8007dd0:	c437c000 	.word	0xc437c000
 8007dd4:	446c4000 	.word	0x446c4000
 8007dd8:	43610000 	.word	0x43610000
 8007ddc:	c4834000 	.word	0xc4834000
 8007de0:	c09f0a3d 	.word	0xc09f0a3d
 8007de4:	409f0a3d 	.word	0x409f0a3d

08007de8 <pack28>:
const char A4[] = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";


// Pack a special token, a 22-bit hash code, or a valid base call
// into a 28-bit integer.
int32_t pack28(const char *callsign) {
 8007de8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    int32_t NTOKENS = 2063592L;
    int32_t MAX22   = 4194304L;

    // Check for special tokens first
    if (starts_with(callsign, "DE ")) return 0;
 8007dec:	4953      	ldr	r1, [pc, #332]	; (8007f3c <pack28+0x154>)
int32_t pack28(const char *callsign) {
 8007dee:	4605      	mov	r5, r0
    if (starts_with(callsign, "DE ")) return 0;
 8007df0:	f000 f9a3 	bl	800813a <starts_with>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f040 809a 	bne.w	8007f2e <pack28+0x146>
    if (starts_with(callsign, "QRZ ")) return 1;
 8007dfa:	4951      	ldr	r1, [pc, #324]	; (8007f40 <pack28+0x158>)
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 f99c 	bl	800813a <starts_with>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f040 8095 	bne.w	8007f32 <pack28+0x14a>
    if (starts_with(callsign, "CQ ")) return 2;
 8007e08:	494e      	ldr	r1, [pc, #312]	; (8007f44 <pack28+0x15c>)
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f000 f995 	bl	800813a <starts_with>
 8007e10:	4604      	mov	r4, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f040 808f 	bne.w	8007f36 <pack28+0x14e>

    if (starts_with(callsign, "CQ_")) {
 8007e18:	494b      	ldr	r1, [pc, #300]	; (8007f48 <pack28+0x160>)
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f000 f98d 	bl	800813a <starts_with>
    // TODO: Check for <...> callsign
    // if(text(1:1).eq.'<')then
    //   call save_hash_call(text,n10,n12,n22)   !Save callsign in hash table
    //   n28=NTOKENS + n22

    char c6[6] = {' ', ' ', ' ', ' ', ' ', ' '};
 8007e20:	4b4a      	ldr	r3, [pc, #296]	; (8007f4c <pack28+0x164>)
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	889b      	ldrh	r3, [r3, #4]
 8007e26:	9000      	str	r0, [sp, #0]
 8007e28:	f8ad 3004 	strh.w	r3, [sp, #4]

    int length = 0; // strlen(callsign);  // We will need it later
    while (callsign[length] != ' ' && callsign[length] != 0) {
 8007e2c:	5d2b      	ldrb	r3, [r5, r4]
 8007e2e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007e32:	d11f      	bne.n	8007e74 <pack28+0x8c>
        length++;
    }

    // Copy callsign to 6 character buffer
    if (starts_with(callsign, "3DA0") && length <= 7) {
 8007e34:	4946      	ldr	r1, [pc, #280]	; (8007f50 <pack28+0x168>)
 8007e36:	4628      	mov	r0, r5
 8007e38:	f000 f97f 	bl	800813a <starts_with>
 8007e3c:	b1e0      	cbz	r0, 8007e78 <pack28+0x90>
 8007e3e:	2c07      	cmp	r4, #7
 8007e40:	dc1a      	bgt.n	8007e78 <pack28+0x90>
        // Work-around for Swaziland prefix: 3DA0XYZ -> 3D0XYZ
        memcpy(c6, "3D0", 3);
 8007e42:	4b44      	ldr	r3, [pc, #272]	; (8007f54 <pack28+0x16c>)
        memcpy(c6 + 3, callsign + 4, length - 4);
 8007e44:	1d29      	adds	r1, r5, #4
 8007e46:	f10d 0003 	add.w	r0, sp, #3
        memcpy(c6, "3D0", 3);
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	789b      	ldrb	r3, [r3, #2]
 8007e4e:	f8ad 2000 	strh.w	r2, [sp]
        memcpy(c6 + 3, callsign + 4, length - 4);
 8007e52:	1f22      	subs	r2, r4, #4
        memcpy(c6, "3D0", 3);
 8007e54:	f88d 3002 	strb.w	r3, [sp, #2]
            // AB0XYZ
            memcpy(c6, callsign, length);
        }
        else if (is_digit(callsign[1]) && length <= 5) {
            // A0XYZ -> " A0XYZ"
            memcpy(c6 + 1, callsign, length);
 8007e58:	f006 fa05 	bl	800e266 <memcpy>
        }
    }

    // Check for standard callsign
    int i0, i1, i2, i3, i4, i5;
    if ((i0 = char_index(A1, c6[0])) >= 0 && (i1 = char_index(A2, c6[1])) >= 0 &&
 8007e5c:	f89d 1000 	ldrb.w	r1, [sp]
 8007e60:	483d      	ldr	r0, [pc, #244]	; (8007f58 <pack28+0x170>)
 8007e62:	f000 f980 	bl	8008166 <char_index>
 8007e66:	1e04      	subs	r4, r0, #0
 8007e68:	da2d      	bge.n	8007ec6 <pack28+0xde>
    // Treat this as a nonstandard callsign: compute its 22-bit hash
    // call save_hash_call(text,n10,n12,n22)   !Save callsign in hash table
    // n28=NTOKENS + n22

    // n28=iand(n28,ishft(1,28)-1)
    return -1;
 8007e6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e6e:	b002      	add	sp, #8
 8007e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        length++;
 8007e74:	3401      	adds	r4, #1
 8007e76:	e7d9      	b.n	8007e2c <pack28+0x44>
    else if (starts_with(callsign, "3X") && is_letter(callsign[2]) && length <= 7) {
 8007e78:	4938      	ldr	r1, [pc, #224]	; (8007f5c <pack28+0x174>)
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f000 f95d 	bl	800813a <starts_with>
 8007e80:	b168      	cbz	r0, 8007e9e <pack28+0xb6>
 8007e82:	78a8      	ldrb	r0, [r5, #2]
 8007e84:	f000 f948 	bl	8008118 <is_letter>
 8007e88:	b148      	cbz	r0, 8007e9e <pack28+0xb6>
 8007e8a:	2c07      	cmp	r4, #7
 8007e8c:	dc07      	bgt.n	8007e9e <pack28+0xb6>
        memcpy(c6, "Q", 1);
 8007e8e:	2351      	movs	r3, #81	; 0x51
        memcpy(c6 + 1, callsign + 2, length - 2);
 8007e90:	1ea2      	subs	r2, r4, #2
 8007e92:	1ca9      	adds	r1, r5, #2
        memcpy(c6, "Q", 1);
 8007e94:	f88d 3000 	strb.w	r3, [sp]
            memcpy(c6 + 1, callsign, length);
 8007e98:	f10d 0001 	add.w	r0, sp, #1
 8007e9c:	e7dc      	b.n	8007e58 <pack28+0x70>
        if (is_digit(callsign[2]) && length <= 6) {
 8007e9e:	78a8      	ldrb	r0, [r5, #2]
 8007ea0:	f000 f934 	bl	800810c <is_digit>
 8007ea4:	b128      	cbz	r0, 8007eb2 <pack28+0xca>
 8007ea6:	2c06      	cmp	r4, #6
 8007ea8:	dc03      	bgt.n	8007eb2 <pack28+0xca>
            memcpy(c6, callsign, length);
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	4668      	mov	r0, sp
 8007eb0:	e7d2      	b.n	8007e58 <pack28+0x70>
        else if (is_digit(callsign[1]) && length <= 5) {
 8007eb2:	7868      	ldrb	r0, [r5, #1]
 8007eb4:	f000 f92a 	bl	800810c <is_digit>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d0cf      	beq.n	8007e5c <pack28+0x74>
 8007ebc:	2c05      	cmp	r4, #5
 8007ebe:	dccd      	bgt.n	8007e5c <pack28+0x74>
            memcpy(c6 + 1, callsign, length);
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	e7e8      	b.n	8007e98 <pack28+0xb0>
    if ((i0 = char_index(A1, c6[0])) >= 0 && (i1 = char_index(A2, c6[1])) >= 0 &&
 8007ec6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8007eca:	4825      	ldr	r0, [pc, #148]	; (8007f60 <pack28+0x178>)
 8007ecc:	f000 f94b 	bl	8008166 <char_index>
 8007ed0:	f1b0 0800 	subs.w	r8, r0, #0
 8007ed4:	dbc9      	blt.n	8007e6a <pack28+0x82>
 8007ed6:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8007eda:	4822      	ldr	r0, [pc, #136]	; (8007f64 <pack28+0x17c>)
 8007edc:	f000 f943 	bl	8008166 <char_index>
 8007ee0:	1e07      	subs	r7, r0, #0
 8007ee2:	dbc2      	blt.n	8007e6a <pack28+0x82>
        (i2 = char_index(A3, c6[2])) >= 0 && (i3 = char_index(A4, c6[3])) >= 0 &&
 8007ee4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8007ee8:	481f      	ldr	r0, [pc, #124]	; (8007f68 <pack28+0x180>)
 8007eea:	f000 f93c 	bl	8008166 <char_index>
 8007eee:	1e06      	subs	r6, r0, #0
 8007ef0:	dbbb      	blt.n	8007e6a <pack28+0x82>
 8007ef2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8007ef6:	481c      	ldr	r0, [pc, #112]	; (8007f68 <pack28+0x180>)
 8007ef8:	f000 f935 	bl	8008166 <char_index>
 8007efc:	1e05      	subs	r5, r0, #0
 8007efe:	dbb4      	blt.n	8007e6a <pack28+0x82>
        (i4 = char_index(A4, c6[4])) >= 0 && (i5 = char_index(A4, c6[5])) >= 0)
 8007f00:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8007f04:	4818      	ldr	r0, [pc, #96]	; (8007f68 <pack28+0x180>)
 8007f06:	f000 f92e 	bl	8008166 <char_index>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	dbad      	blt.n	8007e6a <pack28+0x82>
        n28 = n28 * 36 + i1;
 8007f0e:	2324      	movs	r3, #36	; 0x24
        n28 = n28 * 27 + i3;
 8007f10:	221b      	movs	r2, #27
        n28 = n28 * 36 + i1;
 8007f12:	fb03 8304 	mla	r3, r3, r4, r8
        n28 = n28 * 10 + i2;
 8007f16:	240a      	movs	r4, #10
 8007f18:	fb04 7303 	mla	r3, r4, r3, r7
        n28 = n28 * 27 + i3;
 8007f1c:	fb02 6303 	mla	r3, r2, r3, r6
        n28 = n28 * 27 + i4;
 8007f20:	fb02 5303 	mla	r3, r2, r3, r5
        n28 = n28 * 27 + i5;
 8007f24:	fb02 0303 	mla	r3, r2, r3, r0
        return NTOKENS + MAX22 + n28;
 8007f28:	4810      	ldr	r0, [pc, #64]	; (8007f6c <pack28+0x184>)
 8007f2a:	4418      	add	r0, r3
 8007f2c:	e79f      	b.n	8007e6e <pack28+0x86>
    if (starts_with(callsign, "DE ")) return 0;
 8007f2e:	2000      	movs	r0, #0
 8007f30:	e79d      	b.n	8007e6e <pack28+0x86>
    if (starts_with(callsign, "QRZ ")) return 1;
 8007f32:	2001      	movs	r0, #1
 8007f34:	e79b      	b.n	8007e6e <pack28+0x86>
    if (starts_with(callsign, "CQ ")) return 2;
 8007f36:	2002      	movs	r0, #2
 8007f38:	e799      	b.n	8007e6e <pack28+0x86>
 8007f3a:	bf00      	nop
 8007f3c:	0805526c 	.word	0x0805526c
 8007f40:	08055270 	.word	0x08055270
 8007f44:	08055275 	.word	0x08055275
 8007f48:	08055279 	.word	0x08055279
 8007f4c:	08050b31 	.word	0x08050b31
 8007f50:	0805527d 	.word	0x0805527d
 8007f54:	08055282 	.word	0x08055282
 8007f58:	08050b37 	.word	0x08050b37
 8007f5c:	08055286 	.word	0x08055286
 8007f60:	08050b5d 	.word	0x08050b5d
 8007f64:	08050b82 	.word	0x08050b82
 8007f68:	08050b8d 	.word	0x08050b8d
 8007f6c:	005f7ce8 	.word	0x005f7ce8

08007f70 <packgrid>:

    return true;
}


uint16_t packgrid(const char *grid4) {
 8007f70:	b510      	push	{r4, lr}
    //constexpr uint16_t MAXGRID4 = 32400;
    uint16_t MAXGRID4 = 32400;

    if (grid4 == 0) {
 8007f72:	4604      	mov	r4, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d052      	beq.n	800801e <packgrid+0xae>
        // Two callsigns only, no report/grid
        return MAXGRID4 + 1;
    }

    // Take care of special cases
    if (equals(grid4, "RRR")) return MAXGRID4 + 2;
 8007f78:	492f      	ldr	r1, [pc, #188]	; (8008038 <packgrid+0xc8>)
 8007f7a:	f000 f8ed 	bl	8008158 <equals>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d150      	bne.n	8008024 <packgrid+0xb4>
    if (equals(grid4, "RR73")) return MAXGRID4 + 3;
 8007f82:	492e      	ldr	r1, [pc, #184]	; (800803c <packgrid+0xcc>)
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 f8e7 	bl	8008158 <equals>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d14d      	bne.n	800802a <packgrid+0xba>
    if (equals(grid4, "73")) return MAXGRID4 + 4;
 8007f8e:	492c      	ldr	r1, [pc, #176]	; (8008040 <packgrid+0xd0>)
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 f8e1 	bl	8008158 <equals>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d14a      	bne.n	8008030 <packgrid+0xc0>

    // Check for standard 4 letter grid
    if (in_range(grid4[0], 'A', 'R') &&
 8007f9a:	2252      	movs	r2, #82	; 0x52
 8007f9c:	2141      	movs	r1, #65	; 0x41
 8007f9e:	7820      	ldrb	r0, [r4, #0]
 8007fa0:	f000 f8c2 	bl	8008128 <in_range>
 8007fa4:	b328      	cbz	r0, 8007ff2 <packgrid+0x82>
        in_range(grid4[1], 'A', 'R') &&
 8007fa6:	2252      	movs	r2, #82	; 0x52
 8007fa8:	2141      	movs	r1, #65	; 0x41
 8007faa:	7860      	ldrb	r0, [r4, #1]
 8007fac:	f000 f8bc 	bl	8008128 <in_range>
    if (in_range(grid4[0], 'A', 'R') &&
 8007fb0:	b1f8      	cbz	r0, 8007ff2 <packgrid+0x82>
        is_digit(grid4[2]) && is_digit(grid4[3]))
 8007fb2:	78a0      	ldrb	r0, [r4, #2]
 8007fb4:	f000 f8aa 	bl	800810c <is_digit>
        in_range(grid4[1], 'A', 'R') &&
 8007fb8:	b1d8      	cbz	r0, 8007ff2 <packgrid+0x82>
        is_digit(grid4[2]) && is_digit(grid4[3]))
 8007fba:	78e0      	ldrb	r0, [r4, #3]
 8007fbc:	f000 f8a6 	bl	800810c <is_digit>
 8007fc0:	b1b8      	cbz	r0, 8007ff2 <packgrid+0x82>
    {
        //if (w(3).eq.'R ') ir=1
        uint16_t igrid4 = (grid4[0] - 'A');
 8007fc2:	7820      	ldrb	r0, [r4, #0]
        igrid4 = igrid4 * 18 + (grid4[1] - 'A');
 8007fc4:	7863      	ldrb	r3, [r4, #1]
        uint16_t igrid4 = (grid4[0] - 'A');
 8007fc6:	3841      	subs	r0, #65	; 0x41
        igrid4 = igrid4 * 18 + (grid4[1] - 'A');
 8007fc8:	3b41      	subs	r3, #65	; 0x41
 8007fca:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007fce:	0040      	lsls	r0, r0, #1
 8007fd0:	b280      	uxth	r0, r0
 8007fd2:	4418      	add	r0, r3
        igrid4 = igrid4 * 10 + (grid4[2] - '0');
 8007fd4:	78a3      	ldrb	r3, [r4, #2]
 8007fd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007fda:	3b30      	subs	r3, #48	; 0x30
 8007fdc:	0040      	lsls	r0, r0, #1
 8007fde:	b280      	uxth	r0, r0
 8007fe0:	4418      	add	r0, r3
        igrid4 = igrid4 * 10 + (grid4[3] - '0');
 8007fe2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8007fe6:	78e0      	ldrb	r0, [r4, #3]
 8007fe8:	3830      	subs	r0, #48	; 0x30
 8007fea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        return (MAXGRID4 + irpt) | 0x8000;  // ir = 1
    }
    else {
        int dd = dd_to_int(grid4, 3);
        uint16_t irpt = 35 + dd;
        return (MAXGRID4 + irpt);           // ir = 0
 8007fee:	b280      	uxth	r0, r0
    }

    return MAXGRID4 + 1;
}
 8007ff0:	bd10      	pop	{r4, pc}
    if (grid4[0] == 'R') {
 8007ff2:	7823      	ldrb	r3, [r4, #0]
        int dd = dd_to_int(grid4 + 1, 3);
 8007ff4:	2103      	movs	r1, #3
    if (grid4[0] == 'R') {
 8007ff6:	2b52      	cmp	r3, #82	; 0x52
 8007ff8:	d10a      	bne.n	8008010 <packgrid+0xa0>
        int dd = dd_to_int(grid4 + 1, 3);
 8007ffa:	1c60      	adds	r0, r4, #1
 8007ffc:	f000 f8c0 	bl	8008180 <dd_to_int>
        return (MAXGRID4 + irpt) | 0x8000;  // ir = 1
 8008000:	f500 40fd 	add.w	r0, r0, #32384	; 0x7e80
 8008004:	3033      	adds	r0, #51	; 0x33
 8008006:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800800a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800800e:	e7ee      	b.n	8007fee <packgrid+0x7e>
        int dd = dd_to_int(grid4, 3);
 8008010:	4620      	mov	r0, r4
 8008012:	f000 f8b5 	bl	8008180 <dd_to_int>
        return (MAXGRID4 + irpt);           // ir = 0
 8008016:	f500 40fd 	add.w	r0, r0, #32384	; 0x7e80
 800801a:	3033      	adds	r0, #51	; 0x33
 800801c:	e7e7      	b.n	8007fee <packgrid+0x7e>
        return MAXGRID4 + 1;
 800801e:	f647 6091 	movw	r0, #32401	; 0x7e91
 8008022:	e7e5      	b.n	8007ff0 <packgrid+0x80>
    if (equals(grid4, "RRR")) return MAXGRID4 + 2;
 8008024:	f647 6092 	movw	r0, #32402	; 0x7e92
 8008028:	e7e2      	b.n	8007ff0 <packgrid+0x80>
    if (equals(grid4, "RR73")) return MAXGRID4 + 3;
 800802a:	f647 6093 	movw	r0, #32403	; 0x7e93
 800802e:	e7df      	b.n	8007ff0 <packgrid+0x80>
    if (equals(grid4, "73")) return MAXGRID4 + 4;
 8008030:	f647 6094 	movw	r0, #32404	; 0x7e94
 8008034:	e7dc      	b.n	8007ff0 <packgrid+0x80>
 8008036:	bf00      	nop
 8008038:	08055289 	.word	0x08055289
 800803c:	0805528d 	.word	0x0805528d
 8008040:	0805528f 	.word	0x0805528f

08008044 <pack77_1>:

// Pack Type 1 (Standard 77-bit message) and Type 2 (ditto, with a "/P" call)
int pack77_1(const char *msg, uint8_t *b77) {
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	460c      	mov	r4, r1
    // Locate the first delimiter
    const char *s1 = strchr(msg, ' ');
 8008048:	2120      	movs	r1, #32
int pack77_1(const char *msg, uint8_t *b77) {
 800804a:	4606      	mov	r6, r0
    const char *s1 = strchr(msg, ' ');
 800804c:	f006 fa06 	bl	800e45c <strchr>
    if (s1 == 0) return -1;
 8008050:	b910      	cbnz	r0, 8008058 <pack77_1+0x14>
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
    b77[7] = (uint8_t)(n28b << 6) | (uint8_t)(igrid4 >> 10);
    b77[8] = (igrid4 >> 2);
    b77[9] = (uint8_t)(igrid4 << 6) | (uint8_t)(i3 << 3);

    return 0;
}
 8008056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const char *call2 = s1 + 1;     // 2nd call
 8008058:	1c45      	adds	r5, r0, #1
    int32_t n28a = pack28(call1);
 800805a:	4630      	mov	r0, r6
 800805c:	f7ff fec4 	bl	8007de8 <pack28>
 8008060:	4607      	mov	r7, r0
    int32_t n28b = pack28(call2);
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff fec0 	bl	8007de8 <pack28>
    if (n28a < 0 || n28b < 0) return -1;
 8008068:	2f00      	cmp	r7, #0
    int32_t n28b = pack28(call2);
 800806a:	4606      	mov	r6, r0
    if (n28a < 0 || n28b < 0) return -1;
 800806c:	dbf1      	blt.n	8008052 <pack77_1+0xe>
 800806e:	2800      	cmp	r0, #0
 8008070:	dbef      	blt.n	8008052 <pack77_1+0xe>
    const char *s2 = strchr(s1 + 1, ' ');
 8008072:	2120      	movs	r1, #32
 8008074:	4628      	mov	r0, r5
 8008076:	f006 f9f1 	bl	800e45c <strchr>
    if (s2 != 0) {
 800807a:	b300      	cbz	r0, 80080be <pack77_1+0x7a>
        igrid4 = packgrid(s2 + 1);
 800807c:	3001      	adds	r0, #1
 800807e:	f7ff ff77 	bl	8007f70 <packgrid>
    n28a <<= 1; // ipa = 0
 8008082:	007a      	lsls	r2, r7, #1
    n28b <<= 1; // ipb = 0
 8008084:	0073      	lsls	r3, r6, #1
    b77[0] = (n28a >> 21);
 8008086:	1551      	asrs	r1, r2, #21
 8008088:	7021      	strb	r1, [r4, #0]
    b77[1] = (n28a >> 13);
 800808a:	1351      	asrs	r1, r2, #13
    b77[2] = (n28a >> 5);
 800808c:	1152      	asrs	r2, r2, #5
    b77[1] = (n28a >> 13);
 800808e:	7061      	strb	r1, [r4, #1]
    b77[2] = (n28a >> 5);
 8008090:	70a2      	strb	r2, [r4, #2]
    b77[3] = (uint8_t)(n28a << 3) | (uint8_t)(n28b >> 26);
 8008092:	169a      	asrs	r2, r3, #26
 8008094:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8008098:	70e2      	strb	r2, [r4, #3]
    b77[4] = (n28b >> 18);
 800809a:	149a      	asrs	r2, r3, #18
 800809c:	7122      	strb	r2, [r4, #4]
    b77[5] = (n28b >> 10);
 800809e:	129a      	asrs	r2, r3, #10
    b77[6] = (n28b >> 2);
 80080a0:	109b      	asrs	r3, r3, #2
    b77[5] = (n28b >> 10);
 80080a2:	7162      	strb	r2, [r4, #5]
    b77[6] = (n28b >> 2);
 80080a4:	71a3      	strb	r3, [r4, #6]
    b77[7] = (uint8_t)(n28b << 6) | (uint8_t)(igrid4 >> 10);
 80080a6:	0a83      	lsrs	r3, r0, #10
 80080a8:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
 80080ac:	71e3      	strb	r3, [r4, #7]
    b77[8] = (igrid4 >> 2);
 80080ae:	0883      	lsrs	r3, r0, #2
    b77[9] = (uint8_t)(igrid4 << 6) | (uint8_t)(i3 << 3);
 80080b0:	0180      	lsls	r0, r0, #6
    b77[8] = (igrid4 >> 2);
 80080b2:	7223      	strb	r3, [r4, #8]
    b77[9] = (uint8_t)(igrid4 << 6) | (uint8_t)(i3 << 3);
 80080b4:	f040 0008 	orr.w	r0, r0, #8
 80080b8:	7260      	strb	r0, [r4, #9]
    return 0;
 80080ba:	2000      	movs	r0, #0
 80080bc:	e7cb      	b.n	8008056 <pack77_1+0x12>
        igrid4 = packgrid(0);
 80080be:	f647 6091 	movw	r0, #32401	; 0x7e91
 80080c2:	e7de      	b.n	8008082 <pack77_1+0x3e>

080080c4 <pack77>:
    b77[8] &= 0xFE;
    b77[9] &= 0x00;
}


int pack77(const char *msg, uint8_t *c77) {
 80080c4:	b508      	push	{r3, lr}
    // Check Type 1 (Standard 77-bit message) or Type 2, with optional "/P"
    if (0 == pack77_1(msg, c77)) {
 80080c6:	f7ff ffbd 	bl	8008044 <pack77_1>

    // Default to free text
    // i3=0 n3=0
  //  packtext77(msg, c77);
    return 0;
}
 80080ca:	2000      	movs	r0, #0
 80080cc:	bd08      	pop	{r3, pc}

080080ce <trim_front>:

extern _Bool true;
extern _Bool false;


const char * trim_front(const char *str) {
 80080ce:	4603      	mov	r3, r0
 80080d0:	4618      	mov	r0, r3
 80080d2:	3301      	adds	r3, #1
    // Skip leading whitespace
    while (*str == ' ') {
 80080d4:	7802      	ldrb	r2, [r0, #0]
 80080d6:	2a20      	cmp	r2, #32
 80080d8:	d0fa      	beq.n	80080d0 <trim_front+0x2>
        str++;
    }
    return str;
}
 80080da:	4770      	bx	lr

080080dc <trim_back>:

void trim_back(char *str) {
 80080dc:	b510      	push	{r4, lr}
 80080de:	4604      	mov	r4, r0
    // Skip trailing whitespace by replacing it with '\0' characters
    int idx = strlen(str) - 1;
 80080e0:	f7f8 f900 	bl	80002e4 <strlen>
    while (idx >= 0 && str[idx] == ' ') {
        str[idx--] = '\0';
 80080e4:	2200      	movs	r2, #0
 80080e6:	4420      	add	r0, r4
    while (idx >= 0 && str[idx] == ' ') {
 80080e8:	42a0      	cmp	r0, r4
 80080ea:	d003      	beq.n	80080f4 <trim_back+0x18>
 80080ec:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d000      	beq.n	80080f6 <trim_back+0x1a>
    }
}
 80080f4:	bd10      	pop	{r4, pc}
        str[idx--] = '\0';
 80080f6:	f800 2d01 	strb.w	r2, [r0, #-1]!
 80080fa:	e7f5      	b.n	80080e8 <trim_back+0xc>

080080fc <trim>:

// 1) trims a string from the back by changing whitespaces to '\0'
// 2) trims a string from the front by skipping whitespaces
char * trim(char *str) {
 80080fc:	b510      	push	{r4, lr}
    str = (char *)trim_front(str);
 80080fe:	f7ff ffe6 	bl	80080ce <trim_front>
 8008102:	4604      	mov	r4, r0
    trim_back(str);
 8008104:	f7ff ffea 	bl	80080dc <trim_back>
    // return a pointer to the first non-whitespace character
    return str;
}
 8008108:	4620      	mov	r0, r4
 800810a:	bd10      	pop	{r4, pc}

0800810c <is_digit>:
char to_upper(char c) {
    return (c >= 'a' && c <= 'z') ? (c - 'a' + 'A') : c;
}

_Bool is_digit(char c) {
    return (c >= '0') && (c <= '9');
 800810c:	3830      	subs	r0, #48	; 0x30
}
 800810e:	2809      	cmp	r0, #9
 8008110:	bf8c      	ite	hi
 8008112:	2000      	movhi	r0, #0
 8008114:	2001      	movls	r0, #1
 8008116:	4770      	bx	lr

08008118 <is_letter>:

_Bool is_letter(char c) {
    return ((c >= 'A') && (c <= 'Z')) || ((c >= 'a') && (c <= 'z'));
 8008118:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800811c:	3841      	subs	r0, #65	; 0x41
}
 800811e:	2819      	cmp	r0, #25
 8008120:	bf8c      	ite	hi
 8008122:	2000      	movhi	r0, #0
 8008124:	2001      	movls	r0, #1
 8008126:	4770      	bx	lr

08008128 <in_range>:
_Bool is_space(char c) {
    return (c == ' ');
}

_Bool in_range(char c, char min, char max) {
    return (c >= min) && (c <= max);
 8008128:	4288      	cmp	r0, r1
 800812a:	d304      	bcc.n	8008136 <in_range+0xe>
 800812c:	4290      	cmp	r0, r2
 800812e:	bf8c      	ite	hi
 8008130:	2000      	movhi	r0, #0
 8008132:	2001      	movls	r0, #1
 8008134:	4770      	bx	lr
 8008136:	2000      	movs	r0, #0
}
 8008138:	4770      	bx	lr

0800813a <starts_with>:

_Bool starts_with(const char *string, const char *prefix) {
 800813a:	b538      	push	{r3, r4, r5, lr}
 800813c:	4605      	mov	r5, r0
 800813e:	460c      	mov	r4, r1
    return 0 == memcmp(string, prefix, strlen(prefix));
 8008140:	4608      	mov	r0, r1
 8008142:	f7f8 f8cf 	bl	80002e4 <strlen>
 8008146:	4621      	mov	r1, r4
 8008148:	4602      	mov	r2, r0
 800814a:	4628      	mov	r0, r5
 800814c:	f006 f87c 	bl	800e248 <memcmp>
}
 8008150:	fab0 f080 	clz	r0, r0
 8008154:	0940      	lsrs	r0, r0, #5
 8008156:	bd38      	pop	{r3, r4, r5, pc}

08008158 <equals>:

_Bool equals(const char *string1, const char *string2) {
 8008158:	b508      	push	{r3, lr}
    return 0 == strcmp(string1, string2);
 800815a:	f7f8 f8b9 	bl	80002d0 <strcmp>
}
 800815e:	fab0 f080 	clz	r0, r0
 8008162:	0940      	lsrs	r0, r0, #5
 8008164:	bd08      	pop	{r3, pc}

08008166 <char_index>:


int char_index(const char *string, char c) {
    for (int i = 0; *string; ++i, ++string) {
 8008166:	4603      	mov	r3, r0
int char_index(const char *string, char c) {
 8008168:	b510      	push	{r4, lr}
 800816a:	1a1a      	subs	r2, r3, r0
    for (int i = 0; *string; ++i, ++string) {
 800816c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008170:	b914      	cbnz	r4, 8008178 <char_index+0x12>
        if (c == *string) {
            return i;
        }
    }
    return -1;  // Not found
 8008172:	f04f 32ff 	mov.w	r2, #4294967295
 8008176:	e001      	b.n	800817c <char_index+0x16>
        if (c == *string) {
 8008178:	428c      	cmp	r4, r1
 800817a:	d1f6      	bne.n	800816a <char_index+0x4>
}
 800817c:	4610      	mov	r0, r2
 800817e:	bd10      	pop	{r4, pc}

08008180 <dd_to_int>:
    *msg_out = 0; // Add zero termination
}


// Parse a 2 digit integer from string
int dd_to_int(const char *str, int length) {
 8008180:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = 0;
    _Bool negative;
    int i;
    if (str[0] == '-') {
 8008182:	7803      	ldrb	r3, [r0, #0]
 8008184:	2b2d      	cmp	r3, #45	; 0x2d
 8008186:	d106      	bne.n	8008196 <dd_to_int+0x16>
        negative = true;
 8008188:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <dd_to_int+0x44>)
 800818a:	781d      	ldrb	r5, [r3, #0]
        i = 1;                          // Consume the - sign
 800818c:	2301      	movs	r3, #1
 800818e:	4403      	add	r3, r0
 8008190:	2200      	movs	r2, #0
    }

    while (i < length) {
        if (str[i] == 0) break;
        if (!is_digit(str[i])) break;
        result *= 10;
 8008192:	260a      	movs	r6, #10
 8008194:	e008      	b.n	80081a8 <dd_to_int+0x28>
        negative = false;
 8008196:	4a0c      	ldr	r2, [pc, #48]	; (80081c8 <dd_to_int+0x48>)
 8008198:	7815      	ldrb	r5, [r2, #0]
        i = (str[0] == '+') ? 1 : 0;    // Consume a + sign if found
 800819a:	f1a3 022b 	sub.w	r2, r3, #43	; 0x2b
 800819e:	4253      	negs	r3, r2
 80081a0:	4153      	adcs	r3, r2
 80081a2:	e7f4      	b.n	800818e <dd_to_int+0xe>
        result += (str[i] - '0');
 80081a4:	fb06 4202 	mla	r2, r6, r2, r4
    while (i < length) {
 80081a8:	1a1c      	subs	r4, r3, r0
 80081aa:	42a1      	cmp	r1, r4
 80081ac:	dd05      	ble.n	80081ba <dd_to_int+0x3a>
        if (str[i] == 0) break;
 80081ae:	f813 4b01 	ldrb.w	r4, [r3], #1
 80081b2:	3c30      	subs	r4, #48	; 0x30
 80081b4:	b2e7      	uxtb	r7, r4
 80081b6:	2f09      	cmp	r7, #9
 80081b8:	d9f4      	bls.n	80081a4 <dd_to_int+0x24>
        ++i;
    }

    return negative ? -result : result;
 80081ba:	b90d      	cbnz	r5, 80081c0 <dd_to_int+0x40>
}
 80081bc:	4610      	mov	r0, r2
 80081be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return negative ? -result : result;
 80081c0:	4252      	negs	r2, r2
 80081c2:	e7fb      	b.n	80081bc <dd_to_int+0x3c>
 80081c4:	200009d4 	.word	0x200009d4
 80081c8:	2000199c 	.word	0x2000199c

080081cc <int_to_dd>:


// Convert a 2 digit integer to string
void int_to_dd(char *str, int value, int width, _Bool full_sign) {
    if (value < 0) {
 80081cc:	2900      	cmp	r1, #0
void int_to_dd(char *str, int value, int width, _Bool full_sign) {
 80081ce:	b530      	push	{r4, r5, lr}
 80081d0:	f100 0401 	add.w	r4, r0, #1
    if (value < 0) {
 80081d4:	da17      	bge.n	8008206 <int_to_dd+0x3a>
        *str = '-';
 80081d6:	232d      	movs	r3, #45	; 0x2d
        ++str;
        value = -value;
 80081d8:	4249      	negs	r1, r1
        *str = '-';
 80081da:	7003      	strb	r3, [r0, #0]
        *str = '+';
        ++str;
    }

    int divisor = 1;
    for (int i = 0; i < width - 1; ++i) {
 80081dc:	2000      	movs	r0, #0
    int divisor = 1;
 80081de:	2301      	movs	r3, #1
    for (int i = 0; i < width - 1; ++i) {
 80081e0:	3a01      	subs	r2, #1
        divisor *= 10;
 80081e2:	250a      	movs	r5, #10
    for (int i = 0; i < width - 1; ++i) {
 80081e4:	4282      	cmp	r2, r0
 80081e6:	dc14      	bgt.n	8008212 <int_to_dd+0x46>

        *str = '0' + digit;
        ++str;

        value -= digit * divisor;
        divisor /= 10;
 80081e8:	200a      	movs	r0, #10
        int digit = value / divisor;
 80081ea:	fb91 f2f3 	sdiv	r2, r1, r3
 80081ee:	fb03 1112 	mls	r1, r3, r2, r1
        *str = '0' + digit;
 80081f2:	f102 0530 	add.w	r5, r2, #48	; 0x30
        divisor /= 10;
 80081f6:	fb93 f3f0 	sdiv	r3, r3, r0
        *str = '0' + digit;
 80081fa:	f804 5b01 	strb.w	r5, [r4], #1
    while (divisor >= 1) {
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f3      	bne.n	80081ea <int_to_dd+0x1e>
    }
    *str = 0;   // Add zero terminator
 8008202:	7023      	strb	r3, [r4, #0]
}
 8008204:	bd30      	pop	{r4, r5, pc}
    else if (full_sign) {
 8008206:	b113      	cbz	r3, 800820e <int_to_dd+0x42>
        *str = '+';
 8008208:	232b      	movs	r3, #43	; 0x2b
 800820a:	7003      	strb	r3, [r0, #0]
 800820c:	e7e6      	b.n	80081dc <int_to_dd+0x10>
 800820e:	4604      	mov	r4, r0
 8008210:	e7e4      	b.n	80081dc <int_to_dd+0x10>
        divisor *= 10;
 8008212:	436b      	muls	r3, r5
    for (int i = 0; i < width - 1; ++i) {
 8008214:	3001      	adds	r0, #1
 8008216:	e7e5      	b.n	80081e4 <int_to_dd+0x18>

08008218 <charn>:
// table 2: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
// table 3: "0123456789"
// table 4: " ABCDEFGHIJKLMNOPQRSTUVWXYZ"
// table 5: " 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
char charn(int c, int table_idx) {
    if (table_idx != 2 && table_idx != 3) {
 8008218:	1e8b      	subs	r3, r1, #2
 800821a:	2b01      	cmp	r3, #1
 800821c:	d904      	bls.n	8008228 <charn+0x10>
        if (c == 0) return ' ';
 800821e:	b1f8      	cbz	r0, 8008260 <charn+0x48>
        c -= 1;
    }
    if (table_idx != 4) {
 8008220:	2904      	cmp	r1, #4
        c -= 1;
 8008222:	f100 30ff 	add.w	r0, r0, #4294967295
    if (table_idx != 4) {
 8008226:	d01d      	beq.n	8008264 <charn+0x4c>
        if (c < 10) return '0' + c;
 8008228:	2809      	cmp	r0, #9
 800822a:	dc02      	bgt.n	8008232 <charn+0x1a>
 800822c:	3030      	adds	r0, #48	; 0x30
        c -= 10;
    }
    if (table_idx != 3) {
        if (c < 26) return 'A' + c;
 800822e:	b2c0      	uxtb	r0, r0
 8008230:	4770      	bx	lr
    if (table_idx != 3) {
 8008232:	2903      	cmp	r1, #3
 8008234:	d018      	beq.n	8008268 <charn+0x50>
        c -= 10;
 8008236:	f1a0 030a 	sub.w	r3, r0, #10
        if (c < 26) return 'A' + c;
 800823a:	2b19      	cmp	r3, #25
 800823c:	dc02      	bgt.n	8008244 <charn+0x2c>
 800823e:	4618      	mov	r0, r3
 8008240:	3041      	adds	r0, #65	; 0x41
 8008242:	e7f4      	b.n	800822e <charn+0x16>
        c -= 26;
 8008244:	3824      	subs	r0, #36	; 0x24
    }

    if (table_idx == 0) {
 8008246:	b921      	cbnz	r1, 8008252 <charn+0x3a>
        if (c < 5) return "+-./?" [c];
 8008248:	2804      	cmp	r0, #4
 800824a:	dc0d      	bgt.n	8008268 <charn+0x50>
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <charn+0x54>)
 800824e:	5c18      	ldrb	r0, [r3, r0]
 8008250:	4770      	bx	lr
    }
    else if (table_idx == 5) {
 8008252:	2905      	cmp	r1, #5
 8008254:	d108      	bne.n	8008268 <charn+0x50>
        if (c == 0) return '/';
 8008256:	2800      	cmp	r0, #0
 8008258:	bf14      	ite	ne
 800825a:	205f      	movne	r0, #95	; 0x5f
 800825c:	202f      	moveq	r0, #47	; 0x2f
 800825e:	4770      	bx	lr
        if (c == 0) return ' ';
 8008260:	2020      	movs	r0, #32
 8008262:	4770      	bx	lr
        if (c < 26) return 'A' + c;
 8008264:	2819      	cmp	r0, #25
 8008266:	ddeb      	ble.n	8008240 <charn+0x28>
    }

    return '_'; // unknown character, should never get here
 8008268:	205f      	movs	r0, #95	; 0x5f
}
 800826a:	4770      	bx	lr
 800826c:	08055292 	.word	0x08055292

08008270 <unpack28>:
const uint16_t MAXGRID4 = 32400L;


// n28 is a 28-bit integer, e.g. n28a or n28b, containing all the
// call sign bits from a packed message.
int unpack28(uint32_t n28, uint8_t ip, uint8_t i3, char *result) {
 8008270:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	461d      	mov	r5, r3
    // Check for special tokens DE, QRZ, CQ, CQ_nnn, CQ_aaaa
    if (n28 < NTOKENS) {
 8008276:	4b66      	ldr	r3, [pc, #408]	; (8008410 <unpack28+0x1a0>)
int unpack28(uint32_t n28, uint8_t ip, uint8_t i3, char *result) {
 8008278:	4604      	mov	r4, r0
 800827a:	4688      	mov	r8, r1
    if (n28 < NTOKENS) {
 800827c:	4298      	cmp	r0, r3
int unpack28(uint32_t n28, uint8_t ip, uint8_t i3, char *result) {
 800827e:	4691      	mov	r9, r2
    if (n28 < NTOKENS) {
 8008280:	d849      	bhi.n	8008316 <unpack28+0xa6>
        if (n28 <= 2) {
 8008282:	2802      	cmp	r0, #2
 8008284:	d811      	bhi.n	80082aa <unpack28+0x3a>
            if (n28 == 0) strcpy(result, "DE");
 8008286:	b938      	cbnz	r0, 8008298 <unpack28+0x28>
 8008288:	4962      	ldr	r1, [pc, #392]	; (8008414 <unpack28+0x1a4>)
 800828a:	4628      	mov	r0, r5
 800828c:	f006 f8f3 	bl	800e476 <strcpy>
            strcat(result, "/P");
        }
    }

    return 0;   // Success
}
 8008290:	4620      	mov	r0, r4
 8008292:	b002      	add	sp, #8
 8008294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (n28 == 1) strcpy(result, "QRZ");
 8008298:	2801      	cmp	r0, #1
            if (n28 == 2) strcpy(result, "CQ");
 800829a:	4628      	mov	r0, r5
            if (n28 == 1) strcpy(result, "QRZ");
 800829c:	bf0c      	ite	eq
 800829e:	495e      	ldreq	r1, [pc, #376]	; (8008418 <unpack28+0x1a8>)
            if (n28 == 2) strcpy(result, "CQ");
 80082a0:	495e      	ldrne	r1, [pc, #376]	; (800841c <unpack28+0x1ac>)
 80082a2:	f006 f8e8 	bl	800e476 <strcpy>
            return 0;   // Success
 80082a6:	2400      	movs	r4, #0
 80082a8:	e7f2      	b.n	8008290 <unpack28+0x20>
        if (n28 <= 1002) {
 80082aa:	f240 33ea 	movw	r3, #1002	; 0x3ea
 80082ae:	4298      	cmp	r0, r3
 80082b0:	d80b      	bhi.n	80082ca <unpack28+0x5a>
            strcpy(result, "CQ ");
 80082b2:	495b      	ldr	r1, [pc, #364]	; (8008420 <unpack28+0x1b0>)
 80082b4:	4628      	mov	r0, r5
 80082b6:	f006 f8de 	bl	800e476 <strcpy>
            int_to_dd(result + 3, n28 - 3, 3, true);
 80082ba:	2203      	movs	r2, #3
 80082bc:	4b59      	ldr	r3, [pc, #356]	; (8008424 <unpack28+0x1b4>)
 80082be:	1ee1      	subs	r1, r4, #3
 80082c0:	18a8      	adds	r0, r5, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f7ff ff82 	bl	80081cc <int_to_dd>
 80082c8:	e7ed      	b.n	80082a6 <unpack28+0x36>
        if (n28 <= 532443L) {
 80082ca:	4b57      	ldr	r3, [pc, #348]	; (8008428 <unpack28+0x1b8>)
 80082cc:	4298      	cmp	r0, r3
 80082ce:	d902      	bls.n	80082d6 <unpack28+0x66>
        return -1;
 80082d0:	f04f 34ff 	mov.w	r4, #4294967295
 80082d4:	e7dc      	b.n	8008290 <unpack28+0x20>
            aaaa[4] = '\0';
 80082d6:	2300      	movs	r3, #0
            uint32_t n = n28 - 1003;
 80082d8:	f2a0 30eb 	subw	r0, r0, #1003	; 0x3eb
            for (int i = 3; /* */; --i) {
 80082dc:	2403      	movs	r4, #3
                aaaa[i] = charn(n % 27, 4);
 80082de:	271b      	movs	r7, #27
            aaaa[4] = '\0';
 80082e0:	f88d 3004 	strb.w	r3, [sp, #4]
                aaaa[i] = charn(n % 27, 4);
 80082e4:	2104      	movs	r1, #4
 80082e6:	fbb0 f6f7 	udiv	r6, r0, r7
 80082ea:	fb07 0016 	mls	r0, r7, r6, r0
 80082ee:	f7ff ff93 	bl	8008218 <charn>
 80082f2:	f80d 0004 	strb.w	r0, [sp, r4]
                if (i == 0) break;
 80082f6:	b114      	cbz	r4, 80082fe <unpack28+0x8e>
                n /= 27;
 80082f8:	4630      	mov	r0, r6
            for (int i = 3; /* */; --i) {
 80082fa:	3c01      	subs	r4, #1
                aaaa[i] = charn(n % 27, 4);
 80082fc:	e7f2      	b.n	80082e4 <unpack28+0x74>
            strcpy(result, "CQ ");
 80082fe:	4948      	ldr	r1, [pc, #288]	; (8008420 <unpack28+0x1b0>)
 8008300:	4628      	mov	r0, r5
 8008302:	f006 f8b8 	bl	800e476 <strcpy>
            strcat(result, trim_front(aaaa));
 8008306:	4668      	mov	r0, sp
 8008308:	f7ff fee1 	bl	80080ce <trim_front>
 800830c:	4601      	mov	r1, r0
            strcat(result, "/P");
 800830e:	4628      	mov	r0, r5
 8008310:	f006 f895 	bl	800e43e <strcat>
 8008314:	e7bc      	b.n	8008290 <unpack28+0x20>
    n28 = n28 - NTOKENS;
 8008316:	4945      	ldr	r1, [pc, #276]	; (800842c <unpack28+0x1bc>)
 8008318:	4401      	add	r1, r0
    if (n28 < MAX22) {
 800831a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800831e:	d20d      	bcs.n	800833c <unpack28+0xcc>
        result[0] = '<';
 8008320:	4628      	mov	r0, r5
 8008322:	233c      	movs	r3, #60	; 0x3c
        int_to_dd(result + 1, n28, 7, true);
 8008324:	2207      	movs	r2, #7
        result[9] = '\0';
 8008326:	2400      	movs	r4, #0
        result[0] = '<';
 8008328:	f800 3b01 	strb.w	r3, [r0], #1
        int_to_dd(result + 1, n28, 7, true);
 800832c:	4b3d      	ldr	r3, [pc, #244]	; (8008424 <unpack28+0x1b4>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f7ff ff4c 	bl	80081cc <int_to_dd>
        result[8] = '>';
 8008334:	233e      	movs	r3, #62	; 0x3e
        result[9] = '\0';
 8008336:	726c      	strb	r4, [r5, #9]
        result[8] = '>';
 8008338:	722b      	strb	r3, [r5, #8]
        return 0;
 800833a:	e7a9      	b.n	8008290 <unpack28+0x20>
    uint32_t n = n28 - MAX22;
 800833c:	4e3c      	ldr	r6, [pc, #240]	; (8008430 <unpack28+0x1c0>)
    callsign[5] = charn(n % 27, 4);
 800833e:	271b      	movs	r7, #27
    callsign[6] = '\0';
 8008340:	2400      	movs	r4, #0
    callsign[5] = charn(n % 27, 4);
 8008342:	2104      	movs	r1, #4
    uint32_t n = n28 - MAX22;
 8008344:	4406      	add	r6, r0
    callsign[6] = '\0';
 8008346:	f88d 4006 	strb.w	r4, [sp, #6]
    callsign[5] = charn(n % 27, 4);
 800834a:	fbb6 faf7 	udiv	sl, r6, r7
 800834e:	fb07 601a 	mls	r0, r7, sl, r6
 8008352:	f7ff ff61 	bl	8008218 <charn>
 8008356:	f88d 0005 	strb.w	r0, [sp, #5]
    callsign[4] = charn(n % 27, 4);
 800835a:	2104      	movs	r1, #4
 800835c:	fbba f0f7 	udiv	r0, sl, r7
 8008360:	fb07 a010 	mls	r0, r7, r0, sl
 8008364:	f7ff ff58 	bl	8008218 <charn>
    n /= 27;
 8008368:	f240 23d9 	movw	r3, #729	; 0x2d9
    callsign[4] = charn(n % 27, 4);
 800836c:	f88d 0004 	strb.w	r0, [sp, #4]
    callsign[3] = charn(n % 27, 4);
 8008370:	2104      	movs	r1, #4
    n /= 27;
 8008372:	fbb6 f3f3 	udiv	r3, r6, r3
    callsign[3] = charn(n % 27, 4);
 8008376:	fbb3 f0f7 	udiv	r0, r3, r7
 800837a:	fb07 3010 	mls	r0, r7, r0, r3
 800837e:	f7ff ff4b 	bl	8008218 <charn>
    n /= 27;
 8008382:	f644 43e3 	movw	r3, #19683	; 0x4ce3
    callsign[2] = charn(n % 10, 3);
 8008386:	220a      	movs	r2, #10
    callsign[3] = charn(n % 27, 4);
 8008388:	f88d 0003 	strb.w	r0, [sp, #3]
    callsign[2] = charn(n % 10, 3);
 800838c:	2103      	movs	r1, #3
    n /= 27;
 800838e:	fbb6 f3f3 	udiv	r3, r6, r3
    callsign[2] = charn(n % 10, 3);
 8008392:	fbb3 f0f2 	udiv	r0, r3, r2
 8008396:	fb02 3010 	mls	r0, r2, r0, r3
 800839a:	f7ff ff3d 	bl	8008218 <charn>
    n /= 10;
 800839e:	4b25      	ldr	r3, [pc, #148]	; (8008434 <unpack28+0x1c4>)
    callsign[1] = charn(n % 36, 2);
 80083a0:	2224      	movs	r2, #36	; 0x24
    callsign[2] = charn(n % 10, 3);
 80083a2:	f88d 0002 	strb.w	r0, [sp, #2]
    callsign[1] = charn(n % 36, 2);
 80083a6:	2102      	movs	r1, #2
    n /= 10;
 80083a8:	fbb6 f3f3 	udiv	r3, r6, r3
    callsign[1] = charn(n % 36, 2);
 80083ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80083b0:	fb02 3010 	mls	r0, r2, r0, r3
 80083b4:	f7ff ff30 	bl	8008218 <charn>
 80083b8:	f88d 0001 	strb.w	r0, [sp, #1]
    n /= 36;
 80083bc:	481e      	ldr	r0, [pc, #120]	; (8008438 <unpack28+0x1c8>)
    callsign[0] = charn(n % 37, 1);
 80083be:	2325      	movs	r3, #37	; 0x25
 80083c0:	2101      	movs	r1, #1
    n /= 36;
 80083c2:	fbb6 f6f0 	udiv	r6, r6, r0
    callsign[0] = charn(n % 37, 1);
 80083c6:	fbb6 f0f3 	udiv	r0, r6, r3
 80083ca:	fb03 6010 	mls	r0, r3, r0, r6
 80083ce:	f7ff ff23 	bl	8008218 <charn>
 80083d2:	ab02      	add	r3, sp, #8
 80083d4:	f803 0d08 	strb.w	r0, [r3, #-8]!
    strcpy(result, trim(callsign));
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff fe8f 	bl	80080fc <trim>
 80083de:	4601      	mov	r1, r0
 80083e0:	4628      	mov	r0, r5
 80083e2:	f006 f848 	bl	800e476 <strcpy>
    if (strlen(result) == 0) return -1;
 80083e6:	782b      	ldrb	r3, [r5, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f43f af71 	beq.w	80082d0 <unpack28+0x60>
    if (ip) {
 80083ee:	f1b8 0f00 	cmp.w	r8, #0
 80083f2:	d00a      	beq.n	800840a <unpack28+0x19a>
        if (i3 == 1) {
 80083f4:	f1b9 0f01 	cmp.w	r9, #1
 80083f8:	d101      	bne.n	80083fe <unpack28+0x18e>
            strcat(result, "/R");
 80083fa:	4910      	ldr	r1, [pc, #64]	; (800843c <unpack28+0x1cc>)
 80083fc:	e787      	b.n	800830e <unpack28+0x9e>
        else if (i3 == 2) {
 80083fe:	f1b9 0f02 	cmp.w	r9, #2
 8008402:	f47f af45 	bne.w	8008290 <unpack28+0x20>
            strcat(result, "/P");
 8008406:	490e      	ldr	r1, [pc, #56]	; (8008440 <unpack28+0x1d0>)
 8008408:	e781      	b.n	800830e <unpack28+0x9e>
            return 0;   // Success
 800840a:	4644      	mov	r4, r8
 800840c:	e740      	b.n	8008290 <unpack28+0x20>
 800840e:	bf00      	nop
 8008410:	001f7ce7 	.word	0x001f7ce7
 8008414:	08055298 	.word	0x08055298
 8008418:	0805529b 	.word	0x0805529b
 800841c:	0805529f 	.word	0x0805529f
 8008420:	08055275 	.word	0x08055275
 8008424:	200009d4 	.word	0x200009d4
 8008428:	00081fdb 	.word	0x00081fdb
 800842c:	ffe08318 	.word	0xffe08318
 8008430:	ffa08318 	.word	0xffa08318
 8008434:	000300de 	.word	0x000300de
 8008438:	006c1f38 	.word	0x006c1f38
 800843c:	080552a2 	.word	0x080552a2
 8008440:	080552a5 	.word	0x080552a5

08008444 <unpack_type1>:


int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 8008444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t  ir;

    // Extract packed fields
    // read(c77,1000) n28a,ipa,n28b,ipb,ir,igrid4,i3
    // 1000 format(2(b28,b1),b1,b15,b3)
    n28a  = (a77[0] << 21);
 8008448:	f890 c000 	ldrb.w	ip, [r0]
int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 800844c:	4699      	mov	r9, r3
    n28a |= (a77[1] << 13);
 800844e:	7843      	ldrb	r3, [r0, #1]
int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 8008450:	4688      	mov	r8, r1
    n28a  = (a77[0] << 21);
 8008452:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
    n28a |= (a77[2] << 5);
    n28a |= (a77[3] >> 3);
 8008456:	78c6      	ldrb	r6, [r0, #3]
    n28b  = ((a77[3] & 0x07) << 26);
    n28b |= (a77[4] << 18);
 8008458:	7904      	ldrb	r4, [r0, #4]
 800845a:	ea4c 3c43 	orr.w	ip, ip, r3, lsl #13
    n28a |= (a77[2] << 5);
 800845e:	7883      	ldrb	r3, [r0, #2]
int unpack_type1(const uint8_t *a77, uint8_t i3, char *field1, char *field2, char *field3) {
 8008460:	9d08      	ldr	r5, [sp, #32]
 8008462:	ea4c 0cd6 	orr.w	ip, ip, r6, lsr #3
    n28b  = ((a77[3] & 0x07) << 26);
 8008466:	06b6      	lsls	r6, r6, #26
    n28a |= (a77[3] >> 3);
 8008468:	ea4c 1c43 	orr.w	ip, ip, r3, lsl #5
    n28b |= (a77[5] << 10);
    n28b |= (a77[6] << 2);
    n28b |= (a77[7] >> 6);
 800846c:	79c3      	ldrb	r3, [r0, #7]
    n28b  = ((a77[3] & 0x07) << 26);
 800846e:	f006 51e0 	and.w	r1, r6, #469762048	; 0x1c000000
    n28b |= (a77[5] << 10);
 8008472:	7946      	ldrb	r6, [r0, #5]
    ir      = ((a77[7] & 0x20) >> 5);
 8008474:	f3c3 1740 	ubfx	r7, r3, #5, #1
    n28b |= (a77[5] << 10);
 8008478:	02b6      	lsls	r6, r6, #10
    n28b |= (a77[7] >> 6);
 800847a:	ea46 4684 	orr.w	r6, r6, r4, lsl #18
    n28b |= (a77[6] << 2);
 800847e:	7984      	ldrb	r4, [r0, #6]
    n28b |= (a77[7] >> 6);
 8008480:	ea46 1693 	orr.w	r6, r6, r3, lsr #6
 8008484:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
    igrid4  = ((a77[7] & 0x1F) << 10);
 8008488:	029c      	lsls	r4, r3, #10
    igrid4 |= (a77[8] << 2);
    igrid4 |= (a77[9] >> 6);

    // Unpack both callsigns
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 800848a:	4613      	mov	r3, r2
    n28b |= (a77[7] >> 6);
 800848c:	430e      	orrs	r6, r1
    igrid4 |= (a77[8] << 2);
 800848e:	7a01      	ldrb	r1, [r0, #8]
    igrid4  = ((a77[7] & 0x1F) << 10);
 8008490:	f404 44f8 	and.w	r4, r4, #31744	; 0x7c00
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 8008494:	4642      	mov	r2, r8
    igrid4 |= (a77[8] << 2);
 8008496:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
    igrid4 |= (a77[9] >> 6);
 800849a:	7a41      	ldrb	r1, [r0, #9]
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 800849c:	ea4f 005c 	mov.w	r0, ip, lsr #1
    igrid4 |= (a77[9] >> 6);
 80084a0:	ea44 1491 	orr.w	r4, r4, r1, lsr #6
    if (unpack28(n28a >> 1, n28a & 0x01, i3, field1) < 0) {
 80084a4:	f00c 0101 	and.w	r1, ip, #1
 80084a8:	f7ff fee2 	bl	8008270 <unpack28>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	db5d      	blt.n	800856c <unpack_type1+0x128>
        return -1;
    }
    if (unpack28(n28b >> 1, n28b & 0x01, i3, field2) < 0) {
 80084b0:	464b      	mov	r3, r9
 80084b2:	4642      	mov	r2, r8
 80084b4:	f006 0101 	and.w	r1, r6, #1
 80084b8:	0870      	lsrs	r0, r6, #1
 80084ba:	f7ff fed9 	bl	8008270 <unpack28>
 80084be:	2800      	cmp	r0, #0
 80084c0:	db57      	blt.n	8008572 <unpack_type1+0x12e>
    // }
    // if (field2[0] != '<' && strlen(field2) >= 4) {
    //     save_hash_call(field2)
    // }

    if (igrid4 <= MAXGRID4) {
 80084c2:	f647 6390 	movw	r3, #32400	; 0x7e90
 80084c6:	429c      	cmp	r4, r3
 80084c8:	d82a      	bhi.n	8008520 <unpack_type1+0xdc>
        // Extract 4 symbol grid locator
        char *dst = field3;
        uint16_t n = igrid4;
        if (ir > 0) {
 80084ca:	b127      	cbz	r7, 80084d6 <unpack_type1+0x92>
            // In case of ir=1 add an "R" before grid
            dst = stpcpy(dst, "R ");
 80084cc:	4628      	mov	r0, r5
 80084ce:	492a      	ldr	r1, [pc, #168]	; (8008578 <unpack_type1+0x134>)
 80084d0:	f005 ffac 	bl	800e42c <stpcpy>
 80084d4:	4605      	mov	r5, r0
        }

        dst[4] = '\0';
        dst[3] = '0' + (n % 10);
 80084d6:	230a      	movs	r3, #10
        dst[4] = '\0';
 80084d8:	2000      	movs	r0, #0
        dst[3] = '0' + (n % 10);
 80084da:	fbb4 f2f3 	udiv	r2, r4, r3
 80084de:	fb03 4112 	mls	r1, r3, r2, r4
        dst[4] = '\0';
 80084e2:	7128      	strb	r0, [r5, #4]
        dst[3] = '0' + (n % 10);
 80084e4:	3130      	adds	r1, #48	; 0x30
 80084e6:	70e9      	strb	r1, [r5, #3]
        n /= 10;
        dst[2] = '0' + (n % 10);
 80084e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80084ec:	fb01 2313 	mls	r3, r1, r3, r2
        n /= 10;
        dst[1] = 'A' + (n % 18);
 80084f0:	2212      	movs	r2, #18
        dst[2] = '0' + (n % 10);
 80084f2:	3330      	adds	r3, #48	; 0x30
 80084f4:	70ab      	strb	r3, [r5, #2]
        dst[1] = 'A' + (n % 18);
 80084f6:	2364      	movs	r3, #100	; 0x64
 80084f8:	fbb4 f1f3 	udiv	r1, r4, r3
 80084fc:	fbb1 f3f2 	udiv	r3, r1, r2
 8008500:	fb02 1313 	mls	r3, r2, r3, r1
        n /= 18;
        dst[0] = 'A' + (n % 18);
 8008504:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8008508:	fbb4 f1f1 	udiv	r1, r4, r1
 800850c:	fbb1 f4f2 	udiv	r4, r1, r2
 8008510:	fb02 1414 	mls	r4, r2, r4, r1
        dst[1] = 'A' + (n % 18);
 8008514:	3341      	adds	r3, #65	; 0x41
        dst[0] = 'A' + (n % 18);
 8008516:	3441      	adds	r4, #65	; 0x41
        dst[1] = 'A' + (n % 18);
 8008518:	706b      	strb	r3, [r5, #1]
        dst[0] = 'A' + (n % 18);
 800851a:	702c      	strb	r4, [r5, #0]
        // if(msg(1:3).eq.'CQ ' .and. irpt.ge.2) unpk77_success=.false.
        // if (irpt >= 2 && strncmp(field1, "CQ", 2) == 0) return -1;
    }

    return 0;       // Success
}
 800851c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        int irpt = igrid4 - MAXGRID4;
 8008520:	f5a4 41fd 	sub.w	r1, r4, #32384	; 0x7e80
 8008524:	f1a1 0310 	sub.w	r3, r1, #16
        if (irpt == 1) field3[0] = '\0';
 8008528:	2b01      	cmp	r3, #1
 800852a:	d102      	bne.n	8008532 <unpack_type1+0xee>
 800852c:	2000      	movs	r0, #0
 800852e:	7028      	strb	r0, [r5, #0]
 8008530:	e7f4      	b.n	800851c <unpack_type1+0xd8>
        else if (irpt == 2) strcpy(field3, "RRR");
 8008532:	2b02      	cmp	r3, #2
 8008534:	d105      	bne.n	8008542 <unpack_type1+0xfe>
 8008536:	4911      	ldr	r1, [pc, #68]	; (800857c <unpack_type1+0x138>)
        else if (irpt == 3) strcpy(field3, "RR73");
 8008538:	4628      	mov	r0, r5
 800853a:	f005 ff9c 	bl	800e476 <strcpy>
    return 0;       // Success
 800853e:	2000      	movs	r0, #0
 8008540:	e7ec      	b.n	800851c <unpack_type1+0xd8>
        else if (irpt == 3) strcpy(field3, "RR73");
 8008542:	2b03      	cmp	r3, #3
 8008544:	d101      	bne.n	800854a <unpack_type1+0x106>
 8008546:	490e      	ldr	r1, [pc, #56]	; (8008580 <unpack_type1+0x13c>)
 8008548:	e7f6      	b.n	8008538 <unpack_type1+0xf4>
        else if (irpt == 4) strcpy(field3, "73");
 800854a:	2b04      	cmp	r3, #4
 800854c:	d101      	bne.n	8008552 <unpack_type1+0x10e>
 800854e:	490d      	ldr	r1, [pc, #52]	; (8008584 <unpack_type1+0x140>)
 8008550:	e7f2      	b.n	8008538 <unpack_type1+0xf4>
            if (ir > 0) {
 8008552:	b11f      	cbz	r7, 800855c <unpack_type1+0x118>
                *dst++ = 'R'; // Add "R" before report
 8008554:	2352      	movs	r3, #82	; 0x52
 8008556:	3501      	adds	r5, #1
 8008558:	f805 3c01 	strb.w	r3, [r5, #-1]
            int_to_dd(dst, irpt - 35, 2, true);
 800855c:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <unpack_type1+0x144>)
 800855e:	2202      	movs	r2, #2
 8008560:	3933      	subs	r1, #51	; 0x33
 8008562:	4628      	mov	r0, r5
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f7ff fe31 	bl	80081cc <int_to_dd>
 800856a:	e7e8      	b.n	800853e <unpack_type1+0xfa>
        return -1;
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	e7d4      	b.n	800851c <unpack_type1+0xd8>
        return -2;
 8008572:	f06f 0001 	mvn.w	r0, #1
 8008576:	e7d1      	b.n	800851c <unpack_type1+0xd8>
 8008578:	080552a8 	.word	0x080552a8
 800857c:	08055289 	.word	0x08055289
 8008580:	0805528d 	.word	0x0805528d
 8008584:	0805528f 	.word	0x0805528f
 8008588:	200009d4 	.word	0x200009d4

0800858c <unpack_text>:


int unpack_text(const uint8_t *a71, char *text) {
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // TODO: test
    uint8_t b71[9];

    uint8_t carry = 0;
    for (int i = 0; i < 9; ++i) {
 8008590:	2300      	movs	r3, #0
int unpack_text(const uint8_t *a71, char *text) {
 8008592:	b088      	sub	sp, #32
 8008594:	460e      	mov	r6, r1
    uint8_t carry = 0;
 8008596:	461a      	mov	r2, r3
        b71[i] = carry | (a71[i] >> 1);
 8008598:	ad01      	add	r5, sp, #4
 800859a:	5cc1      	ldrb	r1, [r0, r3]
 800859c:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 80085a0:	555a      	strb	r2, [r3, r5]
    for (int i = 0; i < 9; ++i) {
 80085a2:	3301      	adds	r3, #1
        carry = (a71[i] & 1) ? 0x80 : 0;
 80085a4:	01ca      	lsls	r2, r1, #7
    for (int i = 0; i < 9; ++i) {
 80085a6:	2b09      	cmp	r3, #9
        carry = (a71[i] & 1) ? 0x80 : 0;
 80085a8:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < 9; ++i) {
 80085aa:	d1f6      	bne.n	800859a <unpack_text+0xe>
    }

	char c14[14];
	c14[13] = 0;
 80085ac:	2300      	movs	r3, #0
    for (int idx = 12; idx >= 0; --idx) {
 80085ae:	240c      	movs	r4, #12
        // Divide the long integer in b71 by 42
        uint16_t rem = 0;
        for (int i = 0; i < 9; ++i) {
            rem = (rem << 8) | b71[i];
            b71[i] = rem / 42;
 80085b0:	f04f 082a 	mov.w	r8, #42	; 0x2a
            rem    = rem % 42;
        }
        c14[idx] = charn(rem, 0);
 80085b4:	af04      	add	r7, sp, #16
	c14[13] = 0;
 80085b6:	f88d 301d 	strb.w	r3, [sp, #29]
        for (int i = 0; i < 9; ++i) {
 80085ba:	2200      	movs	r2, #0
        uint16_t rem = 0;
 80085bc:	4610      	mov	r0, r2
            rem = (rem << 8) | b71[i];
 80085be:	5cab      	ldrb	r3, [r5, r2]
 80085c0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80085c4:	b280      	uxth	r0, r0
            b71[i] = rem / 42;
 80085c6:	fbb0 f3f8 	udiv	r3, r0, r8
 80085ca:	54ab      	strb	r3, [r5, r2]
        for (int i = 0; i < 9; ++i) {
 80085cc:	3201      	adds	r2, #1
            rem    = rem % 42;
 80085ce:	fb08 0013 	mls	r0, r8, r3, r0
        for (int i = 0; i < 9; ++i) {
 80085d2:	2a09      	cmp	r2, #9
            rem    = rem % 42;
 80085d4:	b280      	uxth	r0, r0
        for (int i = 0; i < 9; ++i) {
 80085d6:	d1f2      	bne.n	80085be <unpack_text+0x32>
        c14[idx] = charn(rem, 0);
 80085d8:	2100      	movs	r1, #0
 80085da:	f7ff fe1d 	bl	8008218 <charn>
 80085de:	5538      	strb	r0, [r7, r4]
    for (int idx = 12; idx >= 0; --idx) {
 80085e0:	f114 34ff 	adds.w	r4, r4, #4294967295
 80085e4:	d2e9      	bcs.n	80085ba <unpack_text+0x2e>
    }

	strcpy(text, trim(c14));
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff fd88 	bl	80080fc <trim>
 80085ec:	4601      	mov	r1, r0
 80085ee:	4630      	mov	r0, r6
 80085f0:	f005 ff41 	bl	800e476 <strcpy>
    return 0;       // Success
}
 80085f4:	2000      	movs	r0, #0
 80085f6:	b008      	add	sp, #32
 80085f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085fc <unpack_telemetry>:


int unpack_telemetry(const uint8_t *a71, char *telemetry) {
 80085fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t b71[9];

    // Shift bits in a71 right by 1
    uint8_t carry = 0;
    for (int i = 0; i < 9; ++i) {
 80085fe:	2300      	movs	r3, #0
        b71[i] = (carry << 7) | (a71[i] >> 1);
 8008600:	ac01      	add	r4, sp, #4
    uint8_t carry = 0;
 8008602:	461d      	mov	r5, r3
        b71[i] = (carry << 7) | (a71[i] >> 1);
 8008604:	5cc6      	ldrb	r6, [r0, r3]
 8008606:	0872      	lsrs	r2, r6, #1
 8008608:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
        carry = (a71[i] & 0x01);
 800860c:	f006 0501 	and.w	r5, r6, #1
        b71[i] = (carry << 7) | (a71[i] >> 1);
 8008610:	551a      	strb	r2, [r3, r4]
    for (int i = 0; i < 9; ++i) {
 8008612:	3301      	adds	r3, #1
 8008614:	2b09      	cmp	r3, #9
 8008616:	d1f5      	bne.n	8008604 <unpack_telemetry+0x8>
    }

    // Convert b71 to hexadecimal string
    for (int i = 0; i < 9; ++i) {
 8008618:	2200      	movs	r2, #0
        uint8_t nibble1 = (b71[i] >> 4);
 800861a:	5ca3      	ldrb	r3, [r4, r2]
 800861c:	0918      	lsrs	r0, r3, #4
        uint8_t nibble2 = (b71[i] & 0x0F);
 800861e:	f003 030f 	and.w	r3, r3, #15
        char c1 = (nibble1 > 9) ? (nibble1 - 10 + 'A') : nibble1 + '0';
 8008622:	2809      	cmp	r0, #9
 8008624:	bf8c      	ite	hi
 8008626:	3037      	addhi	r0, #55	; 0x37
 8008628:	3030      	addls	r0, #48	; 0x30
        char c2 = (nibble2 > 9) ? (nibble2 - 10 + 'A') : nibble2 + '0';
 800862a:	2b09      	cmp	r3, #9
        telemetry[i * 2] = c1;
 800862c:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
        telemetry[i * 2 + 1] = c2;
 8008630:	eb01 0042 	add.w	r0, r1, r2, lsl #1
    for (int i = 0; i < 9; ++i) {
 8008634:	f102 0201 	add.w	r2, r2, #1
        char c2 = (nibble2 > 9) ? (nibble2 - 10 + 'A') : nibble2 + '0';
 8008638:	bf8c      	ite	hi
 800863a:	3337      	addhi	r3, #55	; 0x37
 800863c:	3330      	addls	r3, #48	; 0x30
    for (int i = 0; i < 9; ++i) {
 800863e:	2a09      	cmp	r2, #9
        telemetry[i * 2 + 1] = c2;
 8008640:	7043      	strb	r3, [r0, #1]
    for (int i = 0; i < 9; ++i) {
 8008642:	d1ea      	bne.n	800861a <unpack_telemetry+0x1e>
    }

    telemetry[18] = '\0';
 8008644:	2000      	movs	r0, #0
 8008646:	7488      	strb	r0, [r1, #18]
    return 0;
}
 8008648:	b004      	add	sp, #16
 800864a:	bd70      	pop	{r4, r5, r6, pc}

0800864c <unpack_nonstandard>:


//none standard for wsjt-x 2.0
//by KD8CEC
int unpack_nonstandard(const uint8_t *a77, char *field1, char *field2, char *field3)
{
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	b091      	sub	sp, #68	; 0x44
 8008652:	461e      	mov	r6, r3
	n12 = (a77[0] << 4);   //11 ~4  : 8
	n12 |= (a77[1] >> 4);  //3~0 : 12

	n58 = ((uint64_t)(a77[1] & 0x0F) << 54); //57 ~ 54 : 4
	n58 |= ((uint64_t)a77[2] << 46); //53 ~ 46 : 12
	n58 |= ((uint64_t)a77[3] << 38); //45 ~ 38 : 12
 8008654:	f890 a003 	ldrb.w	sl, [r0, #3]
{
 8008658:	9104      	str	r1, [sp, #16]
	n12 |= (a77[1] >> 4);  //3~0 : 12
 800865a:	7841      	ldrb	r1, [r0, #1]
	n58 |= ((uint64_t)a77[3] << 38); //45 ~ 38 : 12
 800865c:	ea4f 158a 	mov.w	r5, sl, lsl #6
{
 8008660:	9207      	str	r2, [sp, #28]
	n12 |= (a77[1] >> 4);  //3~0 : 12
 8008662:	090b      	lsrs	r3, r1, #4
	n12 = (a77[0] << 4);   //11 ~4  : 8
 8008664:	7802      	ldrb	r2, [r0, #0]
	n58 |= ((uint64_t)a77[4] << 30); //37 ~ 30 : 12
 8008666:	f890 a004 	ldrb.w	sl, [r0, #4]
	n12 |= (a77[1] >> 4);  //3~0 : 12
 800866a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	n58 |= ((uint64_t)a77[2] << 46); //53 ~ 46 : 12
 800866e:	2200      	movs	r2, #0
	n58 |= ((uint64_t)a77[5] << 22); //29 ~ 22 : 12
	n58 |= ((uint64_t)a77[6] << 14); //21 ~ 14 : 12
	n58 |= ((uint64_t)a77[7] << 6);  //13 ~ 6 : 12
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008670:	7a07      	ldrb	r7, [r0, #8]
	n12 |= (a77[1] >> 4);  //3~0 : 12
 8008672:	9305      	str	r3, [sp, #20]
	n58 = ((uint64_t)(a77[1] & 0x0F) << 54); //57 ~ 54 : 4
 8008674:	058b      	lsls	r3, r1, #22
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008676:	ea42 0802 	orr.w	r8, r2, r2
	n58 = ((uint64_t)(a77[1] & 0x0F) << 54); //57 ~ 54 : 4
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	2300      	movs	r3, #0
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	e9dd 3400 	ldrd	r3, r4, [sp]
 8008684:	2300      	movs	r3, #0
 8008686:	f004 7470 	and.w	r4, r4, #62914560	; 0x3c00000
 800868a:	e9cd 3402 	strd	r3, r4, [sp, #8]
	n58 |= ((uint64_t)a77[2] << 46); //53 ~ 46 : 12
 800868e:	7884      	ldrb	r4, [r0, #2]
 8008690:	03a3      	lsls	r3, r4, #14
	n58 |= ((uint64_t)a77[4] << 30); //37 ~ 30 : 12
 8008692:	ea4f 748a 	mov.w	r4, sl, lsl #30
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008696:	ea43 0905 	orr.w	r9, r3, r5
	n58 |= ((uint64_t)a77[4] << 30); //37 ~ 30 : 12
 800869a:	ea4f 059a 	mov.w	r5, sl, lsr #2
	n58 |= ((uint64_t)a77[5] << 22); //29 ~ 22 : 12
 800869e:	f890 a005 	ldrb.w	sl, [r0, #5]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086a2:	ea48 0204 	orr.w	r2, r8, r4
 80086a6:	ea49 0305 	orr.w	r3, r9, r5
	n58 |= ((uint64_t)a77[5] << 22); //29 ~ 22 : 12
 80086aa:	ea4f 548a 	mov.w	r4, sl, lsl #22
 80086ae:	ea4f 259a 	mov.w	r5, sl, lsr #10
	n58 |= ((uint64_t)a77[6] << 14); //21 ~ 14 : 12
 80086b2:	f890 a006 	ldrb.w	sl, [r0, #6]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086b6:	ea42 0804 	orr.w	r8, r2, r4
 80086ba:	ea43 0905 	orr.w	r9, r3, r5
	n58 |= ((uint64_t)a77[6] << 14); //21 ~ 14 : 12
 80086be:	ea4f 328a 	mov.w	r2, sl, lsl #14
 80086c2:	ea4f 439a 	mov.w	r3, sl, lsr #18
	n58 |= ((uint64_t)a77[7] << 6);  //13 ~ 6 : 12
 80086c6:	f890 a007 	ldrb.w	sl, [r0, #7]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086ca:	ea42 0408 	orr.w	r4, r2, r8
	n58 |= ((uint64_t)a77[7] << 6);  //13 ~ 6 : 12
 80086ce:	ea4f 188a 	mov.w	r8, sl, lsl #6
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086d2:	ea43 0509 	orr.w	r5, r3, r9
 80086d6:	08bb      	lsrs	r3, r7, #2
 80086d8:	ea44 0108 	orr.w	r1, r4, r8
	n58 |= ((uint64_t)a77[7] << 6);  //13 ~ 6 : 12
 80086dc:	ea4f 699a 	mov.w	r9, sl, lsr #26
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086e0:	ea41 0403 	orr.w	r4, r1, r3
 80086e4:	f3c7 0340 	ubfx	r3, r7, #1, #1
 80086e8:	ea45 0209 	orr.w	r2, r5, r9
	icq   = ((a77[9] >> 6) & 0x01);

	char c11[12];
	c11[11] = '\0';

    for (int i = 10; /* no condition */ ; --i) {
 80086ec:	250a      	movs	r5, #10
 80086ee:	9306      	str	r3, [sp, #24]
	nrpt  |= (a77[9] >> 7);	//76543210
 80086f0:	7a43      	ldrb	r3, [r0, #9]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086f2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80086f6:	f3c3 1980 	ubfx	r9, r3, #6, #1
	nrpt  |= (a77[9] >> 7);	//76543210
 80086fa:	9302      	str	r3, [sp, #8]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 80086fc:	ea4a 0a04 	orr.w	sl, sl, r4
	c11[11] = '\0';
 8008700:	f89d 3000 	ldrb.w	r3, [sp]
	n58 |= ((uint64_t)a77[8] >> 2);  //5 ~ 0 : 765432 10
 8008704:	ea4b 0b02 	orr.w	fp, fp, r2
    	c11[i] = charn(n58 % 38, 5);
 8008708:	ac09      	add	r4, sp, #36	; 0x24
	c11[11] = '\0';
 800870a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    	c11[i] = charn(n58 % 38, 5);
 800870e:	2226      	movs	r2, #38	; 0x26
 8008710:	2300      	movs	r3, #0
 8008712:	4650      	mov	r0, sl
 8008714:	4659      	mov	r1, fp
 8008716:	f7f8 fb97 	bl	8000e48 <__aeabi_uldivmod>
 800871a:	2105      	movs	r1, #5
 800871c:	4610      	mov	r0, r2
 800871e:	f7ff fd7b 	bl	8008218 <charn>
 8008722:	5560      	strb	r0, [r4, r5]
        if (i == 0) break;
 8008724:	b14d      	cbz	r5, 800873a <unpack_nonstandard+0xee>
    	n58 /= 38;
 8008726:	4650      	mov	r0, sl
 8008728:	4659      	mov	r1, fp
 800872a:	2226      	movs	r2, #38	; 0x26
 800872c:	2300      	movs	r3, #0
 800872e:	f7f8 fb8b 	bl	8000e48 <__aeabi_uldivmod>
    for (int i = 10; /* no condition */ ; --i) {
 8008732:	3d01      	subs	r5, #1
    	n58 /= 38;
 8008734:	4682      	mov	sl, r0
 8008736:	468b      	mov	fp, r1
    	c11[i] = charn(n58 % 38, 5);
 8008738:	e7e9      	b.n	800870e <unpack_nonstandard+0xc2>
    }

	char call_3[15];
    // should replace with hash12(n12, call_3);
    // strcpy(call_3, "<...>");
    call_3[0] = '<';
 800873a:	233c      	movs	r3, #60	; 0x3c
 800873c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    int_to_dd(call_3 + 1, n12, 4, true);
 8008740:	2204      	movs	r2, #4
 8008742:	9905      	ldr	r1, [sp, #20]
    call_3[0] = '<';
 8008744:	f808 3d10 	strb.w	r3, [r8, #-16]!
    int_to_dd(call_3 + 1, n12, 4, true);
 8008748:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 800874c:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <unpack_nonstandard+0x184>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f7ff fd3c 	bl	80081cc <int_to_dd>
    call_3[5] = '>';
 8008754:	233e      	movs	r3, #62	; 0x3e
    call_3[6] = '\0';
 8008756:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
    call_3[5] = '>';
 800875a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

	char * call_1 = (iflip) ? c11 : call_3;
 800875e:	9b06      	ldr	r3, [sp, #24]
 8008760:	b30b      	cbz	r3, 80087a6 <unpack_nonstandard+0x15a>
 8008762:	4620      	mov	r0, r4
    char * call_2 = (iflip) ? call_3 : c11;
 8008764:	4644      	mov	r4, r8
	//save_hash_call(c11_trimmed);

	if (icq == 0) {
 8008766:	f1b9 0f00 	cmp.w	r9, #0
 800876a:	d129      	bne.n	80087c0 <unpack_nonstandard+0x174>
	nrpt  = ((a77[8] & 0x01) << 1);
 800876c:	007b      	lsls	r3, r7, #1
	nrpt  |= (a77[9] >> 7);	//76543210
 800876e:	9a02      	ldr	r2, [sp, #8]
	nrpt  = ((a77[8] & 0x01) << 1);
 8008770:	f003 0302 	and.w	r3, r3, #2
	nrpt  |= (a77[9] >> 7);	//76543210
 8008774:	ea43 17d2 	orr.w	r7, r3, r2, lsr #7
		strcpy(field1, trim(call_1));
 8008778:	f7ff fcc0 	bl	80080fc <trim>
 800877c:	4601      	mov	r1, r0
 800877e:	9804      	ldr	r0, [sp, #16]
 8008780:	f005 fe79 	bl	800e476 <strcpy>
		if (nrpt == 1)
 8008784:	2f01      	cmp	r7, #1
 8008786:	d110      	bne.n	80087aa <unpack_nonstandard+0x15e>
			strcpy(field3, "RRR");
 8008788:	4912      	ldr	r1, [pc, #72]	; (80087d4 <unpack_nonstandard+0x188>)
		else if (nrpt == 2)
			strcpy(field3, "RR73");
 800878a:	4630      	mov	r0, r6
 800878c:	f005 fe73 	bl	800e476 <strcpy>
        }
	} else {
		strcpy(field1, "CQ");
        field3[0] = '\0';
	}
    strcpy(field2, trim(call_2));
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fcb3 	bl	80080fc <trim>
 8008796:	4601      	mov	r1, r0
 8008798:	9807      	ldr	r0, [sp, #28]
 800879a:	f005 fe6c 	bl	800e476 <strcpy>

    return 0;
}
 800879e:	2000      	movs	r0, #0
 80087a0:	b011      	add	sp, #68	; 0x44
 80087a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char * call_1 = (iflip) ? c11 : call_3;
 80087a6:	4640      	mov	r0, r8
 80087a8:	e7dd      	b.n	8008766 <unpack_nonstandard+0x11a>
		else if (nrpt == 2)
 80087aa:	2f02      	cmp	r7, #2
 80087ac:	d101      	bne.n	80087b2 <unpack_nonstandard+0x166>
			strcpy(field3, "RR73");
 80087ae:	490a      	ldr	r1, [pc, #40]	; (80087d8 <unpack_nonstandard+0x18c>)
 80087b0:	e7eb      	b.n	800878a <unpack_nonstandard+0x13e>
		else if (nrpt == 3)
 80087b2:	2f03      	cmp	r7, #3
 80087b4:	d101      	bne.n	80087ba <unpack_nonstandard+0x16e>
			strcpy(field3, "73");
 80087b6:	4909      	ldr	r1, [pc, #36]	; (80087dc <unpack_nonstandard+0x190>)
 80087b8:	e7e7      	b.n	800878a <unpack_nonstandard+0x13e>
            field3[0] = '\0';
 80087ba:	f886 9000 	strb.w	r9, [r6]
 80087be:	e7e7      	b.n	8008790 <unpack_nonstandard+0x144>
		strcpy(field1, "CQ");
 80087c0:	4907      	ldr	r1, [pc, #28]	; (80087e0 <unpack_nonstandard+0x194>)
 80087c2:	9804      	ldr	r0, [sp, #16]
 80087c4:	f005 fe57 	bl	800e476 <strcpy>
        field3[0] = '\0';
 80087c8:	2300      	movs	r3, #0
 80087ca:	7033      	strb	r3, [r6, #0]
 80087cc:	e7e0      	b.n	8008790 <unpack_nonstandard+0x144>
 80087ce:	bf00      	nop
 80087d0:	200009d4 	.word	0x200009d4
 80087d4:	08055289 	.word	0x08055289
 80087d8:	0805528d 	.word	0x0805528d
 80087dc:	0805528f 	.word	0x0805528f
 80087e0:	0805529f 	.word	0x0805529f

080087e4 <unpack77_fields>:

int unpack77_fields(const uint8_t *a77, char *field1, char *field2, char *field3) {
 80087e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t  n3, i3;

    // Extract n3 (bits 71..73) and i3 (bits 74..76)
    n3 = ((a77[8] << 2) & 0x04) | ((a77[9] >> 6) & 0x03);
 80087e6:	f890 c009 	ldrb.w	ip, [r0, #9]
    i3 = (a77[9] >> 3) & 0x07;

    field1[0] = field2[0] = field3[0] = '\0';
 80087ea:	f04f 0e00 	mov.w	lr, #0
    n3 = ((a77[8] << 2) & 0x04) | ((a77[9] >> 6) & 0x03);
 80087ee:	7a04      	ldrb	r4, [r0, #8]
int unpack77_fields(const uint8_t *a77, char *field1, char *field2, char *field3) {
 80087f0:	4605      	mov	r5, r0
    i3 = (a77[9] >> 3) & 0x07;
 80087f2:	f3cc 06c2 	ubfx	r6, ip, #3, #3
    field1[0] = field2[0] = field3[0] = '\0';
 80087f6:	f883 e000 	strb.w	lr, [r3]
int unpack77_fields(const uint8_t *a77, char *field1, char *field2, char *field3) {
 80087fa:	460f      	mov	r7, r1
    field1[0] = field2[0] = field3[0] = '\0';
 80087fc:	f882 e000 	strb.w	lr, [r2]
 8008800:	f881 e000 	strb.w	lr, [r1]

    if (i3 == 0 && n3 == 0) {
 8008804:	b98e      	cbnz	r6, 800882a <unpack77_fields+0x46>
    n3 = ((a77[8] << 2) & 0x04) | ((a77[9] >> 6) & 0x03);
 8008806:	00a4      	lsls	r4, r4, #2
 8008808:	f004 0404 	and.w	r4, r4, #4
    if (i3 == 0 && n3 == 0) {
 800880c:	ea54 149c 	orrs.w	r4, r4, ip, lsr #6
 8008810:	d104      	bne.n	800881c <unpack77_fields+0x38>
    //     // Type 5: TU; W9XYZ K1ABC R-09 FN             1 28 28 1 7 9       74   WWROF contest
    // }

    // unknown type, should never get here
    return -1;
}
 8008812:	b003      	add	sp, #12
 8008814:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return unpack_text(a77, field1);
 8008818:	f7ff beb8 	b.w	800858c <unpack_text>
    else if (i3 == 0 && n3 == 5) {
 800881c:	2c05      	cmp	r4, #5
 800881e:	d104      	bne.n	800882a <unpack77_fields+0x46>
}
 8008820:	b003      	add	sp, #12
 8008822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return unpack_telemetry(a77, field1);
 8008826:	f7ff bee9 	b.w	80085fc <unpack_telemetry>
    else if (i3 == 1 || i3 == 2) {
 800882a:	1e71      	subs	r1, r6, #1
 800882c:	2901      	cmp	r1, #1
 800882e:	d808      	bhi.n	8008842 <unpack77_fields+0x5e>
        return unpack_type1(a77, i3, field1, field2, field3);
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4631      	mov	r1, r6
 8008834:	4613      	mov	r3, r2
 8008836:	4628      	mov	r0, r5
 8008838:	463a      	mov	r2, r7
 800883a:	f7ff fe03 	bl	8008444 <unpack_type1>
}
 800883e:	b003      	add	sp, #12
 8008840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (i3 == 4) {
 8008842:	2e04      	cmp	r6, #4
 8008844:	d106      	bne.n	8008854 <unpack77_fields+0x70>
	    return unpack_nonstandard(a77, field1, field2, field3);
 8008846:	4639      	mov	r1, r7
 8008848:	4628      	mov	r0, r5
}
 800884a:	b003      	add	sp, #12
 800884c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	    return unpack_nonstandard(a77, field1, field2, field3);
 8008850:	f7ff befc 	b.w	800864c <unpack_nonstandard>
    return -1;
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	e7f1      	b.n	800883e <unpack77_fields+0x5a>
	...

0800885c <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800885c:	4b03      	ldr	r3, [pc, #12]	; (800886c <disk_status+0x10>)
 800885e:	181a      	adds	r2, r3, r0
 8008860:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	7a10      	ldrb	r0, [r2, #8]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	4718      	bx	r3
 800886c:	200019c0 	.word	0x200019c0

08008870 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <disk_initialize+0x1c>)
 8008872:	5c1a      	ldrb	r2, [r3, r0]
 8008874:	b942      	cbnz	r2, 8008888 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8008876:	2201      	movs	r2, #1
 8008878:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800887a:	181a      	adds	r2, r3, r0
 800887c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008880:	7a10      	ldrb	r0, [r2, #8]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4718      	bx	r3
  }
  return stat;
}
 8008888:	2000      	movs	r0, #0
 800888a:	4770      	bx	lr
 800888c:	200019c0 	.word	0x200019c0

08008890 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008890:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008892:	4c05      	ldr	r4, [pc, #20]	; (80088a8 <disk_read+0x18>)
 8008894:	1825      	adds	r5, r4, r0
 8008896:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800889a:	6860      	ldr	r0, [r4, #4]
 800889c:	6884      	ldr	r4, [r0, #8]
 800889e:	7a28      	ldrb	r0, [r5, #8]
 80088a0:	46a4      	mov	ip, r4
  return res;
}
 80088a2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088a4:	4760      	bx	ip
 80088a6:	bf00      	nop
 80088a8:	200019c0 	.word	0x200019c0

080088ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80088ac:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80088ae:	4c05      	ldr	r4, [pc, #20]	; (80088c4 <disk_write+0x18>)
 80088b0:	1825      	adds	r5, r4, r0
 80088b2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80088b6:	6860      	ldr	r0, [r4, #4]
 80088b8:	68c4      	ldr	r4, [r0, #12]
 80088ba:	7a28      	ldrb	r0, [r5, #8]
 80088bc:	46a4      	mov	ip, r4
  return res;
}
 80088be:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80088c0:	4760      	bx	ip
 80088c2:	bf00      	nop
 80088c4:	200019c0 	.word	0x200019c0

080088c8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <disk_ioctl+0x18>)
{
 80088ca:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088cc:	181c      	adds	r4, r3, r0
 80088ce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	7a20      	ldrb	r0, [r4, #8]
 80088d6:	691b      	ldr	r3, [r3, #16]
  return res;
}
 80088d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088dc:	4718      	bx	r3
 80088de:	bf00      	nop
 80088e0:	200019c0 	.word	0x200019c0

080088e4 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 80088e4:	2000      	movs	r0, #0
 80088e6:	4770      	bx	lr

080088e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80088e8:	3801      	subs	r0, #1
 80088ea:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80088ec:	4291      	cmp	r1, r2
 80088ee:	d100      	bne.n	80088f2 <mem_cpy+0xa>
		*d++ = *s++;
}
 80088f0:	4770      	bx	lr
		*d++ = *s++;
 80088f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088f6:	f800 3f01 	strb.w	r3, [r0, #1]!
 80088fa:	e7f7      	b.n	80088ec <mem_cpy+0x4>

080088fc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088fc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 80088fe:	4290      	cmp	r0, r2
 8008900:	d100      	bne.n	8008904 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8008902:	4770      	bx	lr
		*d++ = (BYTE)val;
 8008904:	f800 1b01 	strb.w	r1, [r0], #1
 8008908:	e7f9      	b.n	80088fe <mem_set+0x2>
	...

0800890c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800890c:	4a1e      	ldr	r2, [pc, #120]	; (8008988 <chk_lock+0x7c>)
 800890e:	6813      	ldr	r3, [r2, #0]
{
 8008910:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8008912:	b17b      	cbz	r3, 8008934 <chk_lock+0x28>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008914:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8008918:	429c      	cmp	r4, r3
 800891a:	d109      	bne.n	8008930 <chk_lock+0x24>
 800891c:	6854      	ldr	r4, [r2, #4]
 800891e:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8008922:	429c      	cmp	r4, r3
 8008924:	d104      	bne.n	8008930 <chk_lock+0x24>
				Files[i].clu == dp->sclust &&
 8008926:	8914      	ldrh	r4, [r2, #8]
 8008928:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
 800892c:	429c      	cmp	r4, r3
 800892e:	d024      	beq.n	800897a <chk_lock+0x6e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008930:	2400      	movs	r4, #0
 8008932:	e000      	b.n	8008936 <chk_lock+0x2a>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 8008934:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8008936:	68d3      	ldr	r3, [r2, #12]
 8008938:	b1eb      	cbz	r3, 8008976 <chk_lock+0x6a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800893a:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 800893e:	42ab      	cmp	r3, r5
 8008940:	d109      	bne.n	8008956 <chk_lock+0x4a>
 8008942:	6915      	ldr	r5, [r2, #16]
 8008944:	f8d0 3208 	ldr.w	r3, [r0, #520]	; 0x208
 8008948:	429d      	cmp	r5, r3
 800894a:	d104      	bne.n	8008956 <chk_lock+0x4a>
				Files[i].clu == dp->sclust &&
 800894c:	8a95      	ldrh	r5, [r2, #20]
 800894e:	f8b0 3206 	ldrh.w	r3, [r0, #518]	; 0x206
 8008952:	429d      	cmp	r5, r3
 8008954:	d016      	beq.n	8008984 <chk_lock+0x78>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008956:	b974      	cbnz	r4, 8008976 <chk_lock+0x6a>
 8008958:	2902      	cmp	r1, #2
 800895a:	bf0c      	ite	eq
 800895c:	2000      	moveq	r0, #0
 800895e:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8008960:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008962:	210c      	movs	r1, #12
 8008964:	fb01 2203 	mla	r2, r1, r3, r2
 8008968:	8953      	ldrh	r3, [r2, #10]
 800896a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896e:	bf14      	ite	ne
 8008970:	2000      	movne	r0, #0
 8008972:	2010      	moveq	r0, #16
 8008974:	e7f4      	b.n	8008960 <chk_lock+0x54>
 8008976:	2000      	movs	r0, #0
 8008978:	e7f2      	b.n	8008960 <chk_lock+0x54>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800897a:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800897c:	2900      	cmp	r1, #0
 800897e:	d0f0      	beq.n	8008962 <chk_lock+0x56>
 8008980:	2010      	movs	r0, #16
 8008982:	e7ed      	b.n	8008960 <chk_lock+0x54>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008984:	2301      	movs	r3, #1
 8008986:	e7f9      	b.n	800897c <chk_lock+0x70>
 8008988:	200019a0 	.word	0x200019a0

0800898c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 800898c:	4a24      	ldr	r2, [pc, #144]	; (8008a20 <inc_lock+0x94>)
{
 800898e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 8008990:	6813      	ldr	r3, [r2, #0]
 8008992:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
 8008996:	429e      	cmp	r6, r3
 8008998:	d109      	bne.n	80089ae <inc_lock+0x22>
 800899a:	6855      	ldr	r5, [r2, #4]
 800899c:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
 80089a0:	42a5      	cmp	r5, r4
 80089a2:	d104      	bne.n	80089ae <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
 80089a4:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80089a8:	8914      	ldrh	r4, [r2, #8]
 80089aa:	42a5      	cmp	r5, r4
 80089ac:	d028      	beq.n	8008a00 <inc_lock+0x74>
		if (Files[i].fs == dp->fs &&
 80089ae:	68d4      	ldr	r4, [r2, #12]
 80089b0:	42b4      	cmp	r4, r6
 80089b2:	d109      	bne.n	80089c8 <inc_lock+0x3c>
 80089b4:	6917      	ldr	r7, [r2, #16]
 80089b6:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80089ba:	42af      	cmp	r7, r5
 80089bc:	d104      	bne.n	80089c8 <inc_lock+0x3c>
			Files[i].clu == dp->sclust &&
 80089be:	8a97      	ldrh	r7, [r2, #20]
 80089c0:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80089c4:	42af      	cmp	r7, r5
 80089c6:	d026      	beq.n	8008a16 <inc_lock+0x8a>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80089c8:	b10b      	cbz	r3, 80089ce <inc_lock+0x42>
 80089ca:	bb34      	cbnz	r4, 8008a1a <inc_lock+0x8e>
 80089cc:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 80089ce:	240c      	movs	r4, #12
 80089d0:	435c      	muls	r4, r3
 80089d2:	1915      	adds	r5, r2, r4
 80089d4:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80089d6:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 80089da:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
		Files[i].clu = dp->sclust;
 80089de:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 80089e0:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 80089e2:	2000      	movs	r0, #0
 80089e4:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80089e6:	b999      	cbnz	r1, 8008a10 <inc_lock+0x84>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80089e8:	210c      	movs	r1, #12
 80089ea:	fb01 2103 	mla	r1, r1, r3, r2
 80089ee:	8949      	ldrh	r1, [r1, #10]
 80089f0:	3101      	adds	r1, #1
 80089f2:	b289      	uxth	r1, r1
 80089f4:	200c      	movs	r0, #12
 80089f6:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 80089fa:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80089fc:	8151      	strh	r1, [r2, #10]
}
 80089fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a00:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008a02:	2900      	cmp	r1, #0
 8008a04:	d0f0      	beq.n	80089e8 <inc_lock+0x5c>
 8008a06:	210c      	movs	r1, #12
 8008a08:	fb01 2103 	mla	r1, r1, r3, r2
 8008a0c:	8949      	ldrh	r1, [r1, #10]
 8008a0e:	b921      	cbnz	r1, 8008a1a <inc_lock+0x8e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a14:	e7ee      	b.n	80089f4 <inc_lock+0x68>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008a16:	2301      	movs	r3, #1
 8008a18:	e7f3      	b.n	8008a02 <inc_lock+0x76>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	e7ef      	b.n	80089fe <inc_lock+0x72>
 8008a1e:	bf00      	nop
 8008a20:	200019a0 	.word	0x200019a0

08008a24 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008a24:	3801      	subs	r0, #1
 8008a26:	2801      	cmp	r0, #1
 8008a28:	d817      	bhi.n	8008a5a <dec_lock+0x36>
		n = Files[i].ctr;
 8008a2a:	490d      	ldr	r1, [pc, #52]	; (8008a60 <dec_lock+0x3c>)
 8008a2c:	220c      	movs	r2, #12
 8008a2e:	fb02 1200 	mla	r2, r2, r0, r1
 8008a32:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a38:	d106      	bne.n	8008a48 <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008a3e:	230c      	movs	r3, #12
 8008a40:	4343      	muls	r3, r0
 8008a42:	2000      	movs	r0, #0
 8008a44:	50c8      	str	r0, [r1, r3]
 8008a46:	4770      	bx	lr
		if (n) n--;					/* Decrement read mode open count */
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0f8      	beq.n	8008a3e <dec_lock+0x1a>
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8008a50:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0f3      	beq.n	8008a3e <dec_lock+0x1a>
		res = FR_OK;
 8008a56:	2000      	movs	r0, #0
 8008a58:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008a5a:	2002      	movs	r0, #2
	}
	return res;
}
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	200019a0 	.word	0x200019a0

08008a64 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008a64:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 8008a68:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a6a:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008a6e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a72:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008a74:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a78:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8008a7a:	b130      	cbz	r0, 8008a8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a7c:	4281      	cmp	r1, r0
 8008a7e:	d302      	bcc.n	8008a86 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a80:	1a09      	subs	r1, r1, r0
 8008a82:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a84:	e7f8      	b.n	8008a78 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a86:	6858      	ldr	r0, [r3, #4]
 8008a88:	4408      	add	r0, r1
}
 8008a8a:	4770      	bx	lr

08008a8c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8008a92:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8008a94:	01c3      	lsls	r3, r0, #7
 8008a96:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8008a9a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008a9e:	fa50 f383 	uxtab	r3, r0, r3
 8008aa2:	428a      	cmp	r2, r1
 8008aa4:	b2d8      	uxtb	r0, r3
 8008aa6:	d1f5      	bne.n	8008a94 <sum_sfn+0x8>
	return sum;
}
 8008aa8:	4770      	bx	lr

08008aaa <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008aaa:	6802      	ldr	r2, [r0, #0]
{
 8008aac:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008aae:	b152      	cbz	r2, 8008ac6 <get_ldnumber+0x1c>
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ab8:	2c1f      	cmp	r4, #31
 8008aba:	d90c      	bls.n	8008ad6 <get_ldnumber+0x2c>
 8008abc:	2c3a      	cmp	r4, #58	; 0x3a
 8008abe:	d1f8      	bne.n	8008ab2 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8008ac0:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008ac2:	428b      	cmp	r3, r1
 8008ac4:	d002      	beq.n	8008acc <get_ldnumber+0x22>
	int vol = -1;
 8008ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aca:	e005      	b.n	8008ad8 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	2a30      	cmp	r2, #48	; 0x30
 8008ad0:	d1f9      	bne.n	8008ac6 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ad6:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8008ad8:	bd10      	pop	{r4, pc}

08008ada <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008ada:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008adc:	b190      	cbz	r0, 8008b04 <validate+0x2a>
 8008ade:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8008ae2:	b17b      	cbz	r3, 8008b04 <validate+0x2a>
 8008ae4:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8008ae8:	b162      	cbz	r2, 8008b04 <validate+0x2a>
 8008aea:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8008aee:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8008af2:	4291      	cmp	r1, r2
 8008af4:	d106      	bne.n	8008b04 <validate+0x2a>
 8008af6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008afa:	f7ff feaf 	bl	800885c <disk_status>
 8008afe:	f010 0001 	ands.w	r0, r0, #1
 8008b02:	d000      	beq.n	8008b06 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8008b04:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8008b06:	bd08      	pop	{r3, pc}

08008b08 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32)
 8008b08:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008b0a:	7eca      	ldrb	r2, [r1, #27]
 8008b0c:	7e8b      	ldrb	r3, [r1, #26]
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008b0e:	bf08      	it	eq
 8008b10:	7d48      	ldrbeq	r0, [r1, #21]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8008b12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008b16:	bf02      	ittt	eq
 8008b18:	7d0a      	ldrbeq	r2, [r1, #20]
 8008b1a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008b1e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	4770      	bx	lr

08008b26 <sync_window.part.1>:
FRESULT sync_window (
 8008b26:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008b28:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8008b2c:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008b2e:	4601      	mov	r1, r0
 8008b30:	2301      	movs	r3, #1
 8008b32:	462a      	mov	r2, r5
 8008b34:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8008b38:	f7ff feb8 	bl	80088ac <disk_write>
 8008b3c:	b9d0      	cbnz	r0, 8008b74 <sync_window.part.1+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b3e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8008b42:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8008b46:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8008b48:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d301      	bcc.n	8008b54 <sync_window.part.1+0x2e>
	FRESULT res = FR_OK;
 8008b50:	2000      	movs	r0, #0
}
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b54:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8008b58:	2e01      	cmp	r6, #1
 8008b5a:	d9f9      	bls.n	8008b50 <sync_window.part.1+0x2a>
					wsect += fs->fsize;
 8008b5c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008b60:	4621      	mov	r1, r4
 8008b62:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b66:	3e01      	subs	r6, #1
					wsect += fs->fsize;
 8008b68:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	f7ff fe9d 	bl	80088ac <disk_write>
 8008b72:	e7f1      	b.n	8008b58 <sync_window.part.1+0x32>
			res = FR_DISK_ERR;
 8008b74:	2001      	movs	r0, #1
 8008b76:	e7ec      	b.n	8008b52 <sync_window.part.1+0x2c>

08008b78 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b78:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8008b7c:	b10b      	cbz	r3, 8008b82 <sync_window+0xa>
 8008b7e:	f7ff bfd2 	b.w	8008b26 <sync_window.part.1>
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	4770      	bx	lr

08008b86 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b86:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8008b8a:	428b      	cmp	r3, r1
{
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b92:	d013      	beq.n	8008bbc <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8008b94:	f7ff fff0 	bl	8008b78 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b98:	4604      	mov	r4, r0
 8008b9a:	b968      	cbnz	r0, 8008bb8 <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008b9c:	462a      	mov	r2, r5
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8008ba6:	f7ff fe73 	bl	8008890 <disk_read>
 8008baa:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008bac:	bf1c      	itt	ne
 8008bae:	f04f 35ff 	movne.w	r5, #4294967295
 8008bb2:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008bb4:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8008bb8:	4620      	mov	r0, r4
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008bbc:	2400      	movs	r4, #0
 8008bbe:	e7fb      	b.n	8008bb8 <move_window+0x32>

08008bc0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008bc0:	2300      	movs	r3, #0
{
 8008bc2:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008bc4:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8008bc8:	f04f 33ff 	mov.w	r3, #4294967295
{
 8008bcc:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008bce:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008bd2:	f7ff ffd8 	bl	8008b86 <move_window>
 8008bd6:	b9c0      	cbnz	r0, 8008c0a <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008bd8:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8008bdc:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8008be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008be4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d110      	bne.n	8008c0e <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008bec:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8008bf0:	4a08      	ldr	r2, [pc, #32]	; (8008c14 <check_fs+0x54>)
 8008bf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d006      	beq.n	8008c08 <check_fs+0x48>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008bfa:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8008bfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8008c02:	1a80      	subs	r0, r0, r2
 8008c04:	bf18      	it	ne
 8008c06:	2001      	movne	r0, #1
}
 8008c08:	bd10      	pop	{r4, pc}
		return 3;
 8008c0a:	2003      	movs	r0, #3
 8008c0c:	e7fc      	b.n	8008c08 <check_fs+0x48>
		return 2;
 8008c0e:	2002      	movs	r0, #2
 8008c10:	e7fa      	b.n	8008c08 <check_fs+0x48>
 8008c12:	bf00      	nop
 8008c14:	00544146 	.word	0x00544146

08008c18 <find_volume>:
{
 8008c18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8008c1c:	2300      	movs	r3, #0
{
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4615      	mov	r5, r2
	*rfs = 0;
 8008c22:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 8008c24:	4608      	mov	r0, r1
 8008c26:	f7ff ff40 	bl	8008aaa <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c2a:	1e07      	subs	r7, r0, #0
 8008c2c:	f2c0 8123 	blt.w	8008e76 <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c30:	4e95      	ldr	r6, [pc, #596]	; (8008e88 <find_volume+0x270>)
 8008c32:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 8008c36:	699c      	ldr	r4, [r3, #24]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c38:	2c00      	cmp	r4, #0
 8008c3a:	f000 811e 	beq.w	8008e7a <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 8008c3e:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c42:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008c46:	b17b      	cbz	r3, 8008c68 <find_volume+0x50>
		stat = disk_status(fs->drv);
 8008c48:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008c4c:	f7ff fe06 	bl	800885c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c50:	07c3      	lsls	r3, r0, #31
 8008c52:	d409      	bmi.n	8008c68 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	f000 8112 	beq.w	8008e7e <find_volume+0x266>
 8008c5a:	f010 0004 	ands.w	r0, r0, #4
 8008c5e:	d000      	beq.n	8008c62 <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 8008c60:	200a      	movs	r0, #10
}
 8008c62:	b004      	add	sp, #16
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008c68:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c6a:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 8008c6c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c70:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c74:	f7ff fdfc 	bl	8008870 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008c78:	07c1      	lsls	r1, r0, #31
 8008c7a:	f100 8102 	bmi.w	8008e82 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008c7e:	b10d      	cbz	r5, 8008c84 <find_volume+0x6c>
 8008c80:	0742      	lsls	r2, r0, #29
 8008c82:	d4ed      	bmi.n	8008c60 <find_volume+0x48>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008c84:	2100      	movs	r1, #0
 8008c86:	4620      	mov	r0, r4
 8008c88:	f7ff ff9a 	bl	8008bc0 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008c8c:	2801      	cmp	r0, #1
 8008c8e:	f040 80db 	bne.w	8008e48 <find_volume+0x230>
 8008c92:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008c96:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008c98:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8008c9c:	b103      	cbz	r3, 8008ca0 <find_volume+0x88>
 8008c9e:	680b      	ldr	r3, [r1, #0]
 8008ca0:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008ca4:	3201      	adds	r2, #1
 8008ca6:	3110      	adds	r1, #16
 8008ca8:	2a04      	cmp	r2, #4
 8008caa:	d1f5      	bne.n	8008c98 <find_volume+0x80>
 8008cac:	2700      	movs	r7, #0
			bsect = br[i];
 8008cae:	f85d 5027 	ldr.w	r5, [sp, r7, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	f000 80bf 	beq.w	8008e36 <find_volume+0x21e>
 8008cb8:	4629      	mov	r1, r5
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f7ff ff80 	bl	8008bc0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f040 80b9 	bne.w	8008e38 <find_volume+0x220>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008cc6:	7b22      	ldrb	r2, [r4, #12]
 8008cc8:	7ae3      	ldrb	r3, [r4, #11]
 8008cca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd2:	f040 80bc 	bne.w	8008e4e <find_volume+0x236>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008cd6:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008cd8:	f894 e010 	ldrb.w	lr, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008cdc:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008cde:	f884 e203 	strb.w	lr, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008ce2:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008ce6:	f10e 33ff 	add.w	r3, lr, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008cea:	bf08      	it	eq
 8008cec:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008cee:	2b01      	cmp	r3, #1
	fs->fsize = fasize;
 8008cf0:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008cf4:	f200 80ab 	bhi.w	8008e4e <find_volume+0x236>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008cf8:	7b67      	ldrb	r7, [r4, #13]
 8008cfa:	f884 7202 	strb.w	r7, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008cfe:	2f00      	cmp	r7, #0
 8008d00:	f000 80a5 	beq.w	8008e4e <find_volume+0x236>
 8008d04:	1e7b      	subs	r3, r7, #1
 8008d06:	423b      	tst	r3, r7
 8008d08:	f040 80a1 	bne.w	8008e4e <find_volume+0x236>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d0c:	7ca3      	ldrb	r3, [r4, #18]
 8008d0e:	7c60      	ldrb	r0, [r4, #17]
 8008d10:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008d14:	0703      	lsls	r3, r0, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d16:	f8a4 0208 	strh.w	r0, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008d1a:	f040 8098 	bne.w	8008e4e <find_volume+0x236>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008d1e:	7ce2      	ldrb	r2, [r4, #19]
 8008d20:	7d23      	ldrb	r3, [r4, #20]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008d22:	f894 c00f 	ldrb.w	ip, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008d26:	ea52 2303 	orrs.w	r3, r2, r3, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008d2a:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008d2c:	bf08      	it	eq
 8008d2e:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008d30:	ea52 220c 	orrs.w	r2, r2, ip, lsl #8
 8008d34:	f000 808b 	beq.w	8008e4e <find_volume+0x236>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008d38:	fb01 fe0e 	mul.w	lr, r1, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008d3c:	eb02 1c10 	add.w	ip, r2, r0, lsr #4
 8008d40:	44f4      	add	ip, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008d42:	4563      	cmp	r3, ip
 8008d44:	f0c0 8083 	bcc.w	8008e4e <find_volume+0x236>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008d48:	eba3 030c 	sub.w	r3, r3, ip
 8008d4c:	fbb3 f3f7 	udiv	r3, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d07c      	beq.n	8008e4e <find_volume+0x236>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008d54:	f640 77f5 	movw	r7, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008d58:	f64f 78f5 	movw	r8, #65525	; 0xfff5
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008d5c:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8008d5e:	44ac      	add	ip, r5
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008d60:	42bb      	cmp	r3, r7
 8008d62:	bf94      	ite	ls
 8008d64:	2701      	movls	r7, #1
 8008d66:	2702      	movhi	r7, #2
	fs->volbase = bsect;								/* Volume start sector */
 8008d68:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008d6c:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008d70:	4543      	cmp	r3, r8
 8008d72:	bf88      	it	hi
 8008d74:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008d76:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
 8008d78:	f8c4 c228 	str.w	ip, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8008d7c:	2f03      	cmp	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008d7e:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	if (fmt == FS_FAT32) {
 8008d82:	d168      	bne.n	8008e56 <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d162      	bne.n	8008e4e <find_volume+0x236>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008d88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008d8a:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008d8c:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008d90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d94:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8008d98:	d359      	bcc.n	8008e4e <find_volume+0x236>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008d9a:	f04f 33ff 	mov.w	r3, #4294967295
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008d9e:	2f03      	cmp	r7, #3
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008da0:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8008da4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	fs->fsi_flag = 0x80;
 8008da8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008dac:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008db0:	d12d      	bne.n	8008e0e <find_volume+0x1f6>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008db2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8008db6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008dba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d125      	bne.n	8008e0e <find_volume+0x1f6>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008dc2:	1c69      	adds	r1, r5, #1
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff fede 	bl	8008b86 <move_window>
 8008dca:	bb00      	cbnz	r0, 8008e0e <find_volume+0x1f6>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dcc:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8008dd0:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8008dd4:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ddc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d114      	bne.n	8008e0e <find_volume+0x1f6>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008de4:	6822      	ldr	r2, [r4, #0]
 8008de6:	4b29      	ldr	r3, [pc, #164]	; (8008e8c <find_volume+0x274>)
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d110      	bne.n	8008e0e <find_volume+0x1f6>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008dec:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8008df0:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8008df4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008df8:	3320      	adds	r3, #32
 8008dfa:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008dfc:	bf01      	itttt	eq
 8008dfe:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8008e02:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008e06:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8008e0a:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8008e0e:	8bb3      	ldrh	r3, [r6, #28]
 8008e10:	2000      	movs	r0, #0
	fs->fs_type = fmt;	/* FAT sub-type */
 8008e12:	f884 7200 	strb.w	r7, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008e16:	3301      	adds	r3, #1
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	83b3      	strh	r3, [r6, #28]
 8008e1c:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e20:	6833      	ldr	r3, [r6, #0]
 8008e22:	429c      	cmp	r4, r3
 8008e24:	bf04      	itt	eq
 8008e26:	2300      	moveq	r3, #0
 8008e28:	6033      	streq	r3, [r6, #0]
 8008e2a:	68f3      	ldr	r3, [r6, #12]
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	f47f af18 	bne.w	8008c62 <find_volume+0x4a>
 8008e32:	60f0      	str	r0, [r6, #12]
 8008e34:	e715      	b.n	8008c62 <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008e36:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008e38:	3701      	adds	r7, #1
 8008e3a:	2f04      	cmp	r7, #4
 8008e3c:	f47f af37 	bne.w	8008cae <find_volume+0x96>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e40:	2803      	cmp	r0, #3
 8008e42:	d104      	bne.n	8008e4e <find_volume+0x236>
 8008e44:	2001      	movs	r0, #1
 8008e46:	e70c      	b.n	8008c62 <find_volume+0x4a>
 8008e48:	2803      	cmp	r0, #3
 8008e4a:	d0fb      	beq.n	8008e44 <find_volume+0x22c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008e4c:	b108      	cbz	r0, 8008e52 <find_volume+0x23a>
 8008e4e:	200d      	movs	r0, #13
 8008e50:	e707      	b.n	8008c62 <find_volume+0x4a>
	bsect = 0;
 8008e52:	4605      	mov	r5, r0
 8008e54:	e737      	b.n	8008cc6 <find_volume+0xae>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d0f9      	beq.n	8008e4e <find_volume+0x236>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008e5a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008e5c:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008e5e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8008e62:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008e66:	bf1b      	ittet	ne
 8008e68:	18d2      	addne	r2, r2, r3
 8008e6a:	f003 0301 	andne.w	r3, r3, #1
 8008e6e:	4613      	moveq	r3, r2
 8008e70:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8008e74:	e78c      	b.n	8008d90 <find_volume+0x178>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e76:	200b      	movs	r0, #11
 8008e78:	e6f3      	b.n	8008c62 <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e7a:	200c      	movs	r0, #12
 8008e7c:	e6f1      	b.n	8008c62 <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 8008e7e:	4628      	mov	r0, r5
 8008e80:	e6ef      	b.n	8008c62 <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008e82:	2003      	movs	r0, #3
 8008e84:	e6ed      	b.n	8008c62 <find_volume+0x4a>
 8008e86:	bf00      	nop
 8008e88:	200019a0 	.word	0x200019a0
 8008e8c:	41615252 	.word	0x41615252

08008e90 <sync_fs>:
{
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008e94:	f7ff fe70 	bl	8008b78 <sync_window>
 8008e98:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d14b      	bne.n	8008f36 <sync_fs+0xa6>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008e9e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d13e      	bne.n	8008f24 <sync_fs+0x94>
 8008ea6:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d13a      	bne.n	8008f24 <sync_fs+0x94>
			mem_set(fs->win.d8, 0, SS(fs));
 8008eae:	4601      	mov	r1, r0
 8008eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f7ff fd21 	bl	80088fc <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008eba:	f64a 2255 	movw	r2, #43605	; 0xaa55
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008ebe:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008ec2:	f8a4 21fe 	strh.w	r2, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008ec6:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <sync_fs+0xa8>)
 8008ec8:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008eca:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 8008ece:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8008ed2:	3220      	adds	r2, #32
 8008ed4:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008ed8:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8008edc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008ee0:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 8008ee4:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8008ee8:	0c11      	lsrs	r1, r2, #16
 8008eea:	0e12      	lsrs	r2, r2, #24
 8008eec:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
 8008ef0:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008ef4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8008ef8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008efc:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8008f00:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8008f04:	0c11      	lsrs	r1, r2, #16
 8008f06:	0e12      	lsrs	r2, r2, #24
 8008f08:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008f0c:	4621      	mov	r1, r4
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008f0e:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8008f12:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8008f16:	3201      	adds	r2, #1
 8008f18:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008f1c:	f7ff fcc6 	bl	80088ac <disk_write>
			fs->fsi_flag = 0;
 8008f20:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008f24:	2200      	movs	r2, #0
 8008f26:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	f7ff fccc 	bl	80088c8 <disk_ioctl>
			res = FR_DISK_ERR;
 8008f30:	3000      	adds	r0, #0
 8008f32:	bf18      	it	ne
 8008f34:	2001      	movne	r0, #1
}
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	41615252 	.word	0x41615252

08008f3c <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f3c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8008f40:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f42:	3b02      	subs	r3, #2
 8008f44:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8008f46:	bf83      	ittte	hi
 8008f48:	f890 3202 	ldrbhi.w	r3, [r0, #514]	; 0x202
 8008f4c:	f8d0 0228 	ldrhi.w	r0, [r0, #552]	; 0x228
 8008f50:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f54:	2000      	movls	r0, #0
}
 8008f56:	4770      	bx	lr

08008f58 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008f58:	2901      	cmp	r1, #1
{
 8008f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008f60:	d959      	bls.n	8009016 <get_fat+0xbe>
 8008f62:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8008f66:	428b      	cmp	r3, r1
 8008f68:	d955      	bls.n	8009016 <get_fat+0xbe>
		switch (fs->fs_type) {
 8008f6a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d027      	beq.n	8008fc2 <get_fat+0x6a>
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	d036      	beq.n	8008fe4 <get_fat+0x8c>
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d14d      	bne.n	8009016 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8008f7a:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f7e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8008f82:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8008f86:	f7ff fdfe 	bl	8008b86 <move_window>
 8008f8a:	b110      	cbz	r0, 8008f92 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8008f92:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f94:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8008f98:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8008fa2:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008fa4:	f7ff fdef 	bl	8008b86 <move_window>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1ef      	bne.n	8008f8c <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008fac:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008fb0:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008fb2:	5df0      	ldrb	r0, [r6, r7]
 8008fb4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008fb8:	bf4c      	ite	mi
 8008fba:	0900      	lsrmi	r0, r0, #4
 8008fbc:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8008fc0:	e7e6      	b.n	8008f90 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fc2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8008fc6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8008fca:	f7ff fddc 	bl	8008b86 <move_window>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d1dc      	bne.n	8008f8c <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008fd2:	006d      	lsls	r5, r5, #1
 8008fd4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8008fd8:	1973      	adds	r3, r6, r5
 8008fda:	5d70      	ldrb	r0, [r6, r5]
 8008fdc:	785b      	ldrb	r3, [r3, #1]
 8008fde:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008fe2:	e7d5      	b.n	8008f90 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fe4:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8008fe8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8008fec:	f7ff fdcb 	bl	8008b86 <move_window>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d1cb      	bne.n	8008f8c <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008ff4:	00ad      	lsls	r5, r5, #2
 8008ff6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8008ffa:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008ffc:	7898      	ldrb	r0, [r3, #2]
 8008ffe:	78da      	ldrb	r2, [r3, #3]
 8009000:	0400      	lsls	r0, r0, #16
 8009002:	785b      	ldrb	r3, [r3, #1]
 8009004:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8009008:	5d72      	ldrb	r2, [r6, r5]
 800900a:	4310      	orrs	r0, r2
 800900c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009010:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8009014:	e7bc      	b.n	8008f90 <get_fat+0x38>
			val = 1;	/* Internal error */
 8009016:	2001      	movs	r0, #1
	return val;
 8009018:	e7ba      	b.n	8008f90 <get_fat+0x38>

0800901a <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800901a:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 800901e:	b570      	push	{r4, r5, r6, lr}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009020:	2a01      	cmp	r2, #1
{
 8009022:	4604      	mov	r4, r0
 8009024:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8009026:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800902a:	d101      	bne.n	8009030 <dir_sdi+0x16>
		return FR_INT_ERR;
 800902c:	2002      	movs	r0, #2
}
 800902e:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009030:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8009034:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8009038:	4291      	cmp	r1, r2
 800903a:	d9f7      	bls.n	800902c <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800903c:	b9f2      	cbnz	r2, 800907c <dir_sdi+0x62>
 800903e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8009042:	2903      	cmp	r1, #3
 8009044:	d102      	bne.n	800904c <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8009046:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800904a:	b9c1      	cbnz	r1, 800907e <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800904c:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8009050:	42a9      	cmp	r1, r5
 8009052:	d9eb      	bls.n	800902c <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8009054:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8009058:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800905c:	2800      	cmp	r0, #0
 800905e:	d0e5      	beq.n	800902c <dir_sdi+0x12>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009060:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009064:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009068:	f005 050f 	and.w	r5, r5, #15
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800906c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	return FR_OK;
 8009070:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009072:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 8009076:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 800907a:	e7d8      	b.n	800902e <dir_sdi+0x14>
 800907c:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800907e:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8009082:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009084:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8009086:	42b5      	cmp	r5, r6
 8009088:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800908c:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 800908e:	d202      	bcs.n	8009096 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8009090:	f7ff ff54 	bl	8008f3c <clust2sect>
 8009094:	e7e0      	b.n	8009058 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009096:	f7ff ff5f 	bl	8008f58 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800909a:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800909c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800909e:	d009      	beq.n	80090b4 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80090a0:	2801      	cmp	r0, #1
 80090a2:	d9c3      	bls.n	800902c <dir_sdi+0x12>
 80090a4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80090a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090ac:	4283      	cmp	r3, r0
 80090ae:	d9bd      	bls.n	800902c <dir_sdi+0x12>
			idx -= ic;
 80090b0:	1bad      	subs	r5, r5, r6
 80090b2:	e7e8      	b.n	8009086 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090b4:	2001      	movs	r0, #1
 80090b6:	e7ba      	b.n	800902e <dir_sdi+0x14>

080090b8 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090b8:	2901      	cmp	r1, #1
{
 80090ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	4605      	mov	r5, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80090c4:	d970      	bls.n	80091a8 <put_fat+0xf0>
 80090c6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80090ca:	428b      	cmp	r3, r1
 80090cc:	d96c      	bls.n	80091a8 <put_fat+0xf0>
		switch (fs->fs_type) {
 80090ce:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d03c      	beq.n	8009150 <put_fat+0x98>
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d04b      	beq.n	8009172 <put_fat+0xba>
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d164      	bne.n	80091a8 <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 80090de:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090e2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80090e6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80090ea:	f7ff fd4c 	bl	8008b86 <move_window>
			if (res != FR_OK) break;
 80090ee:	bb28      	cbnz	r0, 800913c <put_fat+0x84>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80090f0:	f014 0401 	ands.w	r4, r4, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80090f4:	f107 0801 	add.w	r8, r7, #1
 80090f8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80090fc:	4628      	mov	r0, r5
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80090fe:	bf0f      	iteee	eq
 8009100:	b2f3      	uxtbeq	r3, r6
 8009102:	5deb      	ldrbne	r3, [r5, r7]
 8009104:	f003 020f 	andne.w	r2, r3, #15
 8009108:	0133      	lslne	r3, r6, #4
 800910a:	bf1c      	itt	ne
 800910c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8009110:	4313      	orrne	r3, r2
 8009112:	55eb      	strb	r3, [r5, r7]
			fs->wflag = 1;
 8009114:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009116:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 800911a:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800911e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8009122:	f7ff fd30 	bl	8008b86 <move_window>
			if (res != FR_OK) break;
 8009126:	b948      	cbnz	r0, 800913c <put_fat+0x84>
			p = &fs->win.d8[bc % SS(fs)];
 8009128:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800912c:	b144      	cbz	r4, 8009140 <put_fat+0x88>
 800912e:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8009132:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8009136:	2301      	movs	r3, #1
 8009138:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
}
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009140:	f815 2008 	ldrb.w	r2, [r5, r8]
 8009144:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8009148:	f022 020f 	bic.w	r2, r2, #15
 800914c:	4332      	orrs	r2, r6
 800914e:	e7f0      	b.n	8009132 <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009150:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009154:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8009158:	f7ff fd15 	bl	8008b86 <move_window>
			if (res != FR_OK) break;
 800915c:	2800      	cmp	r0, #0
 800915e:	d1ed      	bne.n	800913c <put_fat+0x84>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009160:	0064      	lsls	r4, r4, #1
			ST_WORD(p, (WORD)val);
 8009162:	f3c6 2207 	ubfx	r2, r6, #8, #8
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009166:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800916a:	552e      	strb	r6, [r5, r4]
 800916c:	442c      	add	r4, r5
 800916e:	7062      	strb	r2, [r4, #1]
 8009170:	e7e1      	b.n	8009136 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009172:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8009176:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800917a:	f7ff fd04 	bl	8008b86 <move_window>
			if (res != FR_OK) break;
 800917e:	2800      	cmp	r0, #0
 8009180:	d1dc      	bne.n	800913c <put_fat+0x84>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009182:	00a4      	lsls	r4, r4, #2
 8009184:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8009188:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 800918a:	78cb      	ldrb	r3, [r1, #3]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009192:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8009196:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800919a:	552a      	strb	r2, [r5, r4]
 800919c:	704b      	strb	r3, [r1, #1]
 800919e:	0c13      	lsrs	r3, r2, #16
 80091a0:	0e12      	lsrs	r2, r2, #24
 80091a2:	708b      	strb	r3, [r1, #2]
 80091a4:	70ca      	strb	r2, [r1, #3]
 80091a6:	e7c6      	b.n	8009136 <put_fat+0x7e>
			res = FR_INT_ERR;
 80091a8:	2002      	movs	r0, #2
 80091aa:	e7c7      	b.n	800913c <put_fat+0x84>

080091ac <create_chain>:
{
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80091b0:	460f      	mov	r7, r1
 80091b2:	b989      	cbnz	r1, 80091d8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80091b4:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80091b8:	b1fe      	cbz	r6, 80091fa <create_chain+0x4e>
 80091ba:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80091be:	429e      	cmp	r6, r3
 80091c0:	bf28      	it	cs
 80091c2:	2601      	movcs	r6, #1
 80091c4:	4634      	mov	r4, r6
		ncl++;							/* Next cluster */
 80091c6:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80091c8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d817      	bhi.n	8009200 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 80091d0:	2e01      	cmp	r6, #1
 80091d2:	d814      	bhi.n	80091fe <create_chain+0x52>
 80091d4:	2400      	movs	r4, #0
 80091d6:	e008      	b.n	80091ea <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80091d8:	f7ff febe 	bl	8008f58 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80091dc:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80091de:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80091e0:	d93b      	bls.n	800925a <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80091e2:	3001      	adds	r0, #1
 80091e4:	d103      	bne.n	80091ee <create_chain+0x42>
			ncl = 2;
 80091e6:	f04f 34ff 	mov.w	r4, #4294967295
}
 80091ea:	4620      	mov	r0, r4
 80091ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091ee:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d8f9      	bhi.n	80091ea <create_chain+0x3e>
 80091f6:	463e      	mov	r6, r7
 80091f8:	e7e4      	b.n	80091c4 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80091fa:	2601      	movs	r6, #1
 80091fc:	e7e2      	b.n	80091c4 <create_chain+0x18>
			ncl = 2;
 80091fe:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	f7ff fea8 	bl	8008f58 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8009208:	b130      	cbz	r0, 8009218 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800920a:	1c41      	adds	r1, r0, #1
 800920c:	d0eb      	beq.n	80091e6 <create_chain+0x3a>
 800920e:	2801      	cmp	r0, #1
 8009210:	d023      	beq.n	800925a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8009212:	42b4      	cmp	r4, r6
 8009214:	d1d7      	bne.n	80091c6 <create_chain+0x1a>
 8009216:	e7dd      	b.n	80091d4 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009218:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f7ff ff4a 	bl	80090b8 <put_fat>
	if (res == FR_OK && clst != 0) {
 8009224:	b9b8      	cbnz	r0, 8009256 <create_chain+0xaa>
 8009226:	b97f      	cbnz	r7, 8009248 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8009228:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 800922c:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	d0da      	beq.n	80091ea <create_chain+0x3e>
			fs->free_clust--;
 8009234:	3b01      	subs	r3, #1
 8009236:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 800923a:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8009246:	e7d0      	b.n	80091ea <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009248:	4622      	mov	r2, r4
 800924a:	4639      	mov	r1, r7
 800924c:	4628      	mov	r0, r5
 800924e:	f7ff ff33 	bl	80090b8 <put_fat>
	if (res == FR_OK) {
 8009252:	2800      	cmp	r0, #0
 8009254:	d0e8      	beq.n	8009228 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009256:	2801      	cmp	r0, #1
 8009258:	d0c5      	beq.n	80091e6 <create_chain+0x3a>
 800925a:	2401      	movs	r4, #1
 800925c:	e7c5      	b.n	80091ea <create_chain+0x3e>

0800925e <dir_next>:
{
 800925e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8009262:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
{
 8009266:	4604      	mov	r4, r0
 8009268:	4689      	mov	r9, r1
	i = dp->index + 1;
 800926a:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800926c:	b2b3      	uxth	r3, r6
 800926e:	b913      	cbnz	r3, 8009276 <dir_next+0x18>
		return FR_NO_FILE;
 8009270:	2004      	movs	r0, #4
}
 8009272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009276:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0f8      	beq.n	8009270 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800927e:	f016 080f 	ands.w	r8, r6, #15
 8009282:	d10b      	bne.n	800929c <dir_next+0x3e>
		dp->sect++;					/* Next sector */
 8009284:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8009286:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800928a:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		dp->sect++;					/* Next sector */
 800928e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 8009292:	b969      	cbnz	r1, 80092b0 <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009294:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8009298:	42b3      	cmp	r3, r6
 800929a:	d9e9      	bls.n	8009270 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800929c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return FR_OK;
 80092a0:	2000      	movs	r0, #0
	dp->index = (WORD)i;	/* Current index */
 80092a2:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80092a6:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80092aa:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 80092ae:	e7e0      	b.n	8009272 <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80092b0:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80092b4:	3f01      	subs	r7, #1
 80092b6:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 80092ba:	d1ef      	bne.n	800929c <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80092bc:	f7ff fe4c 	bl	8008f58 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80092c0:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80092c2:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80092c4:	d801      	bhi.n	80092ca <dir_next+0x6c>
 80092c6:	2002      	movs	r0, #2
 80092c8:	e7d3      	b.n	8009272 <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80092ca:	1c42      	adds	r2, r0, #1
 80092cc:	d101      	bne.n	80092d2 <dir_next+0x74>
 80092ce:	2001      	movs	r0, #1
 80092d0:	e7cf      	b.n	8009272 <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80092d2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80092d6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80092da:	42ab      	cmp	r3, r5
 80092dc:	d82f      	bhi.n	800933e <dir_next+0xe0>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80092de:	f1b9 0f00 	cmp.w	r9, #0
 80092e2:	d0c5      	beq.n	8009270 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80092e4:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80092e8:	f7ff ff60 	bl	80091ac <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80092ec:	4605      	mov	r5, r0
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d03e      	beq.n	8009370 <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 80092f2:	2801      	cmp	r0, #1
 80092f4:	d0e7      	beq.n	80092c6 <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	d0e9      	beq.n	80092ce <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80092fa:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80092fe:	f7ff fc3b 	bl	8008b78 <sync_window>
 8009302:	4601      	mov	r1, r0
 8009304:	2800      	cmp	r0, #0
 8009306:	d1e2      	bne.n	80092ce <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800930c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009310:	f7ff faf4 	bl	80088fc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009314:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
						dp->fs->wflag = 1;
 8009318:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800931c:	4629      	mov	r1, r5
 800931e:	4610      	mov	r0, r2
 8009320:	f7ff fe0c 	bl	8008f3c <clust2sect>
 8009324:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009328:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800932c:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009330:	42bb      	cmp	r3, r7
 8009332:	d80e      	bhi.n	8009352 <dir_next+0xf4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009334:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8009338:	1bdf      	subs	r7, r3, r7
 800933a:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800933e:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009342:	4629      	mov	r1, r5
 8009344:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009348:	f7ff fdf8 	bl	8008f3c <clust2sect>
 800934c:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8009350:	e7a4      	b.n	800929c <dir_next+0x3e>
						dp->fs->wflag = 1;
 8009352:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8009356:	f7ff fbe6 	bl	8008b26 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800935a:	2800      	cmp	r0, #0
 800935c:	d1b7      	bne.n	80092ce <dir_next+0x70>
						dp->fs->winsect++;
 800935e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009362:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8009364:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8009368:	3301      	adds	r3, #1
 800936a:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
 800936e:	e7db      	b.n	8009328 <dir_next+0xca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009370:	2007      	movs	r0, #7
 8009372:	e77e      	b.n	8009272 <dir_next+0x14>

08009374 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009374:	2901      	cmp	r1, #1
{
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800937c:	d801      	bhi.n	8009382 <remove_chain+0xe>
		res = FR_INT_ERR;
 800937e:	2002      	movs	r0, #2
}
 8009380:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009382:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8009386:	428b      	cmp	r3, r1
 8009388:	d9f9      	bls.n	800937e <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800938a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800938e:	429d      	cmp	r5, r3
 8009390:	d205      	bcs.n	800939e <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8009392:	4629      	mov	r1, r5
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff fddf 	bl	8008f58 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 800939a:	4606      	mov	r6, r0
 800939c:	b908      	cbnz	r0, 80093a2 <remove_chain+0x2e>
		res = FR_INT_ERR;
 800939e:	2000      	movs	r0, #0
 80093a0:	e7ee      	b.n	8009380 <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80093a2:	2801      	cmp	r0, #1
 80093a4:	d0eb      	beq.n	800937e <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80093a6:	1c41      	adds	r1, r0, #1
 80093a8:	d015      	beq.n	80093d6 <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80093aa:	2200      	movs	r2, #0
 80093ac:	4629      	mov	r1, r5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fe82 	bl	80090b8 <put_fat>
			if (res != FR_OK) break;
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1e3      	bne.n	8009380 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80093b8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80093bc:	1c5a      	adds	r2, r3, #1
 80093be:	d008      	beq.n	80093d2 <remove_chain+0x5e>
				fs->free_clust++;
 80093c0:	3301      	adds	r3, #1
 80093c2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 80093c6:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 80093d2:	4635      	mov	r5, r6
 80093d4:	e7d9      	b.n	800938a <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7d2      	b.n	8009380 <remove_chain+0xc>
	...

080093dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80093dc:	b530      	push	{r4, r5, lr}
 80093de:	b085      	sub	sp, #20
 80093e0:	4615      	mov	r5, r2
 80093e2:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80093e6:	a804      	add	r0, sp, #16
 80093e8:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 80093ec:	f7ff fb5d 	bl	8008aaa <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80093f0:	2800      	cmp	r0, #0
 80093f2:	db21      	blt.n	8009438 <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80093f4:	0081      	lsls	r1, r0, #2
 80093f6:	4b12      	ldr	r3, [pc, #72]	; (8009440 <f_mount+0x64>)
 80093f8:	185a      	adds	r2, r3, r1
 80093fa:	6990      	ldr	r0, [r2, #24]

	if (cfs) {
 80093fc:	b158      	cbz	r0, 8009416 <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	2400      	movs	r4, #0
 8009402:	4290      	cmp	r0, r2
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009404:	f880 4200 	strb.w	r4, [r0, #512]	; 0x200
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009408:	bf04      	itt	eq
 800940a:	2200      	moveq	r2, #0
 800940c:	601a      	streq	r2, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	4290      	cmp	r0, r2
 8009412:	bf08      	it	eq
 8009414:	60dc      	streq	r4, [r3, #12]
	}

	if (fs) {
 8009416:	9801      	ldr	r0, [sp, #4]
 8009418:	b110      	cbz	r0, 8009420 <f_mount+0x44>
		fs->fs_type = 0;				/* Clear new fs object */
 800941a:	2200      	movs	r2, #0
 800941c:	f880 2200 	strb.w	r2, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009420:	440b      	add	r3, r1
 8009422:	6198      	str	r0, [r3, #24]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009424:	b130      	cbz	r0, 8009434 <f_mount+0x58>
 8009426:	2d01      	cmp	r5, #1
 8009428:	d108      	bne.n	800943c <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800942a:	2200      	movs	r2, #0
 800942c:	4669      	mov	r1, sp
 800942e:	a801      	add	r0, sp, #4
 8009430:	f7ff fbf2 	bl	8008c18 <find_volume>
	LEAVE_FF(fs, res);
}
 8009434:	b005      	add	sp, #20
 8009436:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009438:	200b      	movs	r0, #11
 800943a:	e7fb      	b.n	8009434 <f_mount+0x58>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800943c:	2000      	movs	r0, #0
 800943e:	e7f9      	b.n	8009434 <f_mount+0x58>
 8009440:	200019a0 	.word	0x200019a0

08009444 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800944a:	2300      	movs	r3, #0
{
 800944c:	4604      	mov	r4, r0
 800944e:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8009450:	f8cb 3000 	str.w	r3, [fp]
{
 8009454:	4615      	mov	r5, r2

	res = validate(fp);							/* Check validity */
 8009456:	f7ff fb40 	bl	8008ada <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800945a:	4606      	mov	r6, r0
 800945c:	bb60      	cbnz	r0, 80094b8 <f_read+0x74>
	if (fp->err)								/* Check error */
 800945e:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8009462:	2b00      	cmp	r3, #0
 8009464:	f040 80ae 	bne.w	80095c4 <f_read+0x180>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8009468:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800946c:	07d8      	lsls	r0, r3, #31
 800946e:	f140 80ab 	bpl.w	80095c8 <f_read+0x184>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8009472:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009476:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 800947a:	1bdf      	subs	r7, r3, r7
 800947c:	42af      	cmp	r7, r5
 800947e:	bf28      	it	cs
 8009480:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8009482:	b1cf      	cbz	r7, 80094b8 <f_read+0x74>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009484:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8009488:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800948c:	2b00      	cmp	r3, #0
 800948e:	f040 808a 	bne.w	80095a6 <f_read+0x162>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009492:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009496:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800949a:	3b01      	subs	r3, #1
 800949c:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 80094a0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	d11d      	bne.n	80094e4 <f_read+0xa0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80094a8:	b951      	cbnz	r1, 80094c0 <f_read+0x7c>
					clst = fp->sclust;			/* Follow from the origin */
 80094aa:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80094ae:	2801      	cmp	r0, #1
 80094b0:	d812      	bhi.n	80094d8 <f_read+0x94>
 80094b2:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80094b4:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80094b8:	4630      	mov	r0, r6
 80094ba:	b003      	add	sp, #12
 80094bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 80094c0:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80094c4:	b11b      	cbz	r3, 80094ce <f_read+0x8a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff facc 	bl	8008a64 <clmt_clust>
 80094cc:	e7ef      	b.n	80094ae <f_read+0x6a>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80094ce:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80094d2:	f7ff fd41 	bl	8008f58 <get_fat>
 80094d6:	e7ea      	b.n	80094ae <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80094d8:	1c41      	adds	r1, r0, #1
 80094da:	d101      	bne.n	80094e0 <f_read+0x9c>
 80094dc:	2601      	movs	r6, #1
 80094de:	e7e9      	b.n	80094b4 <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 80094e0:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80094e4:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 80094e8:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80094ec:	4650      	mov	r0, sl
 80094ee:	f7ff fd25 	bl	8008f3c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d0dd      	beq.n	80094b2 <f_read+0x6e>
			sect += csect;
 80094f6:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80094f8:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80094fa:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 80094fe:	d02f      	beq.n	8009560 <f_read+0x11c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009500:	9a01      	ldr	r2, [sp, #4]
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009502:	4649      	mov	r1, r9
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009504:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
 8009508:	442a      	add	r2, r5
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800950a:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800950e:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8009510:	bf84      	itt	hi
 8009512:	9a01      	ldrhi	r2, [sp, #4]
 8009514:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8009516:	4642      	mov	r2, r8
 8009518:	462b      	mov	r3, r5
 800951a:	f7ff f9b9 	bl	8008890 <disk_read>
 800951e:	2800      	cmp	r0, #0
 8009520:	d1dc      	bne.n	80094dc <f_read+0x98>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8009522:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009526:	065a      	lsls	r2, r3, #25
 8009528:	d50c      	bpl.n	8009544 <f_read+0x100>
 800952a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800952e:	eba0 0008 	sub.w	r0, r0, r8
 8009532:	4285      	cmp	r5, r0
 8009534:	d906      	bls.n	8009544 <f_read+0x100>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800953a:	4621      	mov	r1, r4
 800953c:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8009540:	f7ff f9d2 	bl	80088e8 <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009544:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009546:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800954a:	44a9      	add	r9, r5
 800954c:	1b7f      	subs	r7, r7, r5
 800954e:	442b      	add	r3, r5
 8009550:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009554:	f8db 3000 	ldr.w	r3, [fp]
 8009558:	442b      	add	r3, r5
 800955a:	f8cb 3000 	str.w	r3, [fp]
 800955e:	e790      	b.n	8009482 <f_read+0x3e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8009560:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009564:	4590      	cmp	r8, r2
 8009566:	d01c      	beq.n	80095a2 <f_read+0x15e>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009568:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800956c:	065b      	lsls	r3, r3, #25
 800956e:	d50d      	bpl.n	800958c <f_read+0x148>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009570:	2301      	movs	r3, #1
 8009572:	4621      	mov	r1, r4
 8009574:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8009578:	f7ff f998 	bl	80088ac <disk_write>
 800957c:	2800      	cmp	r0, #0
 800957e:	d1ad      	bne.n	80094dc <f_read+0x98>
					fp->flag &= ~FA__DIRTY;
 8009580:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009588:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800958c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009590:	2301      	movs	r3, #1
 8009592:	4642      	mov	r2, r8
 8009594:	4621      	mov	r1, r4
 8009596:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800959a:	f7ff f979 	bl	8008890 <disk_read>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d19c      	bne.n	80094dc <f_read+0x98>
			fp->dsect = sect;
 80095a2:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80095a6:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80095aa:	4648      	mov	r0, r9
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80095ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80095b0:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80095b4:	4421      	add	r1, r4
 80095b6:	42bd      	cmp	r5, r7
 80095b8:	bf28      	it	cs
 80095ba:	463d      	movcs	r5, r7
 80095bc:	462a      	mov	r2, r5
 80095be:	f7ff f993 	bl	80088e8 <mem_cpy>
 80095c2:	e7c0      	b.n	8009546 <f_read+0x102>
 80095c4:	461e      	mov	r6, r3
 80095c6:	e777      	b.n	80094b8 <f_read+0x74>
		LEAVE_FF(fp->fs, FR_DENIED);
 80095c8:	2607      	movs	r6, #7
 80095ca:	e775      	b.n	80094b8 <f_read+0x74>

080095cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80095cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80095d2:	2300      	movs	r3, #0
{
 80095d4:	4604      	mov	r4, r0
 80095d6:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 80095d8:	f8cb 3000 	str.w	r3, [fp]
{
 80095dc:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 80095de:	f7ff fa7c 	bl	8008ada <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80095e2:	4606      	mov	r6, r0
 80095e4:	bb50      	cbnz	r0, 800963c <f_write+0x70>
	if (fp->err)							/* Check error */
 80095e6:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f040 80d9 	bne.w	80097a2 <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80095f0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80095f4:	0799      	lsls	r1, r3, #30
 80095f6:	f140 80d6 	bpl.w	80097a6 <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80095fa:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80095fe:	42df      	cmn	r7, r3
 8009600:	f0c0 8083 	bcc.w	800970a <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009604:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009608:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800960c:	4293      	cmp	r3, r2
 800960e:	f200 80c5 	bhi.w	800979c <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009612:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009616:	f043 0320 	orr.w	r3, r3, #32
 800961a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800961e:	e00d      	b.n	800963c <f_write+0x70>
					if (fp->cltbl)
 8009620:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8009624:	b173      	cbz	r3, 8009644 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff fa1c 	bl	8008a64 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800962c:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800962e:	2800      	cmp	r0, #0
 8009630:	d0e8      	beq.n	8009604 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009632:	2901      	cmp	r1, #1
 8009634:	d109      	bne.n	800964a <f_write+0x7e>
 8009636:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009638:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 800963c:	4630      	mov	r0, r6
 800963e:	b003      	add	sp, #12
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009644:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009648:	e07a      	b.n	8009740 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800964a:	1c4a      	adds	r2, r1, #1
 800964c:	d101      	bne.n	8009652 <f_write+0x86>
 800964e:	2601      	movs	r6, #1
 8009650:	e7f2      	b.n	8009638 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009652:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8009656:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800965a:	b90b      	cbnz	r3, 8009660 <f_write+0x94>
 800965c:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009660:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009664:	065b      	lsls	r3, r3, #25
 8009666:	d511      	bpl.n	800968c <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009668:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800966c:	2301      	movs	r3, #1
 800966e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009672:	4621      	mov	r1, r4
 8009674:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009678:	f7ff f918 	bl	80088ac <disk_write>
 800967c:	2800      	cmp	r0, #0
 800967e:	d1e6      	bne.n	800964e <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8009680:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009688:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800968c:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8009690:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8009694:	4650      	mov	r0, sl
 8009696:	f7ff fc51 	bl	8008f3c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800969a:	2800      	cmp	r0, #0
 800969c:	d0cb      	beq.n	8009636 <f_write+0x6a>
			sect += csect;
 800969e:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096a0:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80096a2:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096a6:	d04e      	beq.n	8009746 <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80096a8:	9a01      	ldr	r2, [sp, #4]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80096aa:	4649      	mov	r1, r9
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80096ac:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
 80096b0:	442a      	add	r2, r5
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80096b2:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80096b6:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80096b8:	bf84      	itt	hi
 80096ba:	9a01      	ldrhi	r2, [sp, #4]
 80096bc:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80096be:	4642      	mov	r2, r8
 80096c0:	462b      	mov	r3, r5
 80096c2:	f7ff f8f3 	bl	80088ac <disk_write>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d1c1      	bne.n	800964e <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80096ca:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 80096ce:	eba1 0108 	sub.w	r1, r1, r8
 80096d2:	428d      	cmp	r5, r1
 80096d4:	d90c      	bls.n	80096f0 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80096d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096da:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff f902 	bl	80088e8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80096e4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80096e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ec:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80096f0:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80096f2:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80096f6:	44a9      	add	r9, r5
 80096f8:	1b7f      	subs	r7, r7, r5
 80096fa:	442b      	add	r3, r5
 80096fc:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8009700:	f8db 3000 	ldr.w	r3, [fp]
 8009704:	442b      	add	r3, r5
 8009706:	f8cb 3000 	str.w	r3, [fp]
 800970a:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
	for ( ;  btw;							/* Repeat until all data written */
 800970e:	2f00      	cmp	r7, #0
 8009710:	f43f af78 	beq.w	8009604 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009714:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8009718:	bb5b      	cbnz	r3, 8009772 <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800971a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800971e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8009722:	3b01      	subs	r3, #1
 8009724:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8009728:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	d197      	bne.n	8009660 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009730:	2900      	cmp	r1, #0
 8009732:	f47f af75 	bne.w	8009620 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8009736:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 800973a:	2900      	cmp	r1, #0
 800973c:	f47f af79 	bne.w	8009632 <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009740:	f7ff fd34 	bl	80091ac <create_chain>
 8009744:	e772      	b.n	800962c <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009746:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800974a:	4598      	cmp	r8, r3
 800974c:	d00f      	beq.n	800976e <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800974e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009752:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009756:	429a      	cmp	r2, r3
 8009758:	d909      	bls.n	800976e <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800975a:	2301      	movs	r3, #1
 800975c:	4642      	mov	r2, r8
 800975e:	4621      	mov	r1, r4
 8009760:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8009764:	f7ff f894 	bl	8008890 <disk_read>
				if (fp->fptr < fp->fsize &&
 8009768:	2800      	cmp	r0, #0
 800976a:	f47f af70 	bne.w	800964e <f_write+0x82>
			fp->dsect = sect;
 800976e:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009772:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009776:	4649      	mov	r1, r9
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009778:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800977c:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009780:	4420      	add	r0, r4
 8009782:	42bd      	cmp	r5, r7
 8009784:	bf28      	it	cs
 8009786:	463d      	movcs	r5, r7
 8009788:	462a      	mov	r2, r5
 800978a:	f7ff f8ad 	bl	80088e8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800978e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009796:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800979a:	e7aa      	b.n	80096f2 <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800979c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 80097a0:	e737      	b.n	8009612 <f_write+0x46>
 80097a2:	461e      	mov	r6, r3
 80097a4:	e74a      	b.n	800963c <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 80097a6:	2607      	movs	r6, #7
 80097a8:	e748      	b.n	800963c <f_write+0x70>

080097aa <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80097aa:	290a      	cmp	r1, #10
{
 80097ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097ae:	4604      	mov	r4, r0
 80097b0:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80097b2:	d102      	bne.n	80097ba <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 80097b4:	210d      	movs	r1, #13
 80097b6:	f7ff fff8 	bl	80097aa <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80097ba:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80097bc:	2b00      	cmp	r3, #0
 80097be:	db14      	blt.n	80097ea <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80097c0:	1c5d      	adds	r5, r3, #1
 80097c2:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80097c4:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80097c6:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80097c8:	dd0b      	ble.n	80097e2 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80097ca:	ab01      	add	r3, sp, #4
 80097cc:	462a      	mov	r2, r5
 80097ce:	f104 010c 	add.w	r1, r4, #12
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	f7ff fefa 	bl	80095cc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	1b5d      	subs	r5, r3, r5
 80097dc:	bf18      	it	ne
 80097de:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 80097e2:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 80097e4:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 80097e6:	3301      	adds	r3, #1
 80097e8:	60a3      	str	r3, [r4, #8]
}
 80097ea:	b002      	add	sp, #8
 80097ec:	bd70      	pop	{r4, r5, r6, pc}

080097ee <f_sync>:
{
 80097ee:	b570      	push	{r4, r5, r6, lr}
 80097f0:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 80097f2:	f7ff f972 	bl	8008ada <validate>
	if (res == FR_OK) {
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d158      	bne.n	80098ac <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80097fa:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80097fe:	069a      	lsls	r2, r3, #26
 8009800:	d554      	bpl.n	80098ac <f_sync+0xbe>
			if (fp->flag & FA__DIRTY) {
 8009802:	065b      	lsls	r3, r3, #25
 8009804:	d511      	bpl.n	800982a <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009806:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800980a:	2301      	movs	r3, #1
 800980c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009810:	4621      	mov	r1, r4
 8009812:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009816:	f7ff f849 	bl	80088ac <disk_write>
 800981a:	2800      	cmp	r0, #0
 800981c:	d145      	bne.n	80098aa <f_sync+0xbc>
				fp->flag &= ~FA__DIRTY;
 800981e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009826:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			res = move_window(fp->fs, fp->dir_sect);
 800982a:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800982e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009832:	f7ff f9a8 	bl	8008b86 <move_window>
 8009836:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8009838:	bbc0      	cbnz	r0, 80098ac <f_sync+0xbe>
				dir = fp->dir_ptr;
 800983a:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800983e:	7aeb      	ldrb	r3, [r5, #11]
 8009840:	f043 0320 	orr.w	r3, r3, #32
 8009844:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009846:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800984a:	772b      	strb	r3, [r5, #28]
 800984c:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	776b      	strb	r3, [r5, #29]
 8009854:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8009858:	77ab      	strb	r3, [r5, #30]
 800985a:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800985e:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009860:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009864:	76ab      	strb	r3, [r5, #26]
 8009866:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800986a:	0c1b      	lsrs	r3, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 800986c:	76ea      	strb	r2, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800986e:	752b      	strb	r3, [r5, #20]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	756b      	strb	r3, [r5, #21]
				tm = GET_FATTIME();							/* Update updated time */
 8009874:	f7ff f836 	bl	80088e4 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009878:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800987c:	75a8      	strb	r0, [r5, #22]
 800987e:	75eb      	strb	r3, [r5, #23]
 8009880:	0c03      	lsrs	r3, r0, #16
 8009882:	0e00      	lsrs	r0, r0, #24
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009884:	74ae      	strb	r6, [r5, #18]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009886:	762b      	strb	r3, [r5, #24]
 8009888:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800988a:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800988c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8009890:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 8009894:	f023 0320 	bic.w	r3, r3, #32
 8009898:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 800989c:	2301      	movs	r3, #1
 800989e:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
}
 80098a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80098a6:	f7ff baf3 	b.w	8008e90 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80098aa:	2001      	movs	r0, #1
}
 80098ac:	bd70      	pop	{r4, r5, r6, pc}

080098ae <f_close>:
{
 80098ae:	b510      	push	{r4, lr}
 80098b0:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80098b2:	f7ff ff9c 	bl	80097ee <f_sync>
	if (res == FR_OK)
 80098b6:	b950      	cbnz	r0, 80098ce <f_close+0x20>
		res = validate(fp);				/* Lock volume */
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7ff f90e 	bl	8008ada <validate>
		if (res == FR_OK) {
 80098be:	b930      	cbnz	r0, 80098ce <f_close+0x20>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80098c0:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 80098c4:	f7ff f8ae 	bl	8008a24 <dec_lock>
			if (res == FR_OK)
 80098c8:	b908      	cbnz	r0, 80098ce <f_close+0x20>
				fp->fs = 0;				/* Invalidate file object */
 80098ca:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
 80098ce:	bd10      	pop	{r4, pc}

080098d0 <f_lseek>:
{
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	4604      	mov	r4, r0
 80098d6:	460d      	mov	r5, r1
	res = validate(fp);					/* Check validity of the object */
 80098d8:	f7ff f8ff 	bl	8008ada <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80098dc:	4606      	mov	r6, r0
 80098de:	bb10      	cbnz	r0, 8009926 <f_lseek+0x56>
	if (fp->err)						/* Check error */
 80098e0:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f040 813c 	bne.w	8009b62 <f_lseek+0x292>
	if (fp->cltbl) {	/* Fast seek */
 80098ea:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 8086 	beq.w	8009a00 <f_lseek+0x130>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80098f4:	1c6a      	adds	r2, r5, #1
 80098f6:	d13c      	bne.n	8009972 <f_lseek+0xa2>
			cl = fp->sclust;			/* Top of the chain */
 80098f8:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80098fc:	f103 0904 	add.w	r9, r3, #4
 8009900:	f8d3 a000 	ldr.w	sl, [r3]
 8009904:	2502      	movs	r5, #2
			if (cl) {
 8009906:	b357      	cbz	r7, 800995e <f_lseek+0x8e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009908:	f04f 0800 	mov.w	r8, #0
 800990c:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(fp->fs, cl);
 8009910:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009914:	f7ff fb20 	bl	8008f58 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009918:	2801      	cmp	r0, #1
						cl = get_fat(fp->fs, cl);
 800991a:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800991e:	d807      	bhi.n	8009930 <f_lseek+0x60>
 8009920:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009922:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
}
 8009926:	4630      	mov	r0, r6
 8009928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992c:	4607      	mov	r7, r0
 800992e:	e7eb      	b.n	8009908 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d101      	bne.n	8009938 <f_lseek+0x68>
 8009934:	2601      	movs	r6, #1
 8009936:	e7f4      	b.n	8009922 <f_lseek+0x52>
					} while (cl == pcl + 1);
 8009938:	eb07 0308 	add.w	r3, r7, r8
 800993c:	4283      	cmp	r3, r0
 800993e:	d0e5      	beq.n	800990c <f_lseek+0x3c>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009940:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009942:	45aa      	cmp	sl, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8009944:	bf21      	itttt	cs
 8009946:	464b      	movcs	r3, r9
 8009948:	f843 8b08 	strcs.w	r8, [r3], #8
 800994c:	f8c9 7004 	strcs.w	r7, [r9, #4]
 8009950:	4699      	movcs	r9, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009952:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009956:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800995a:	4283      	cmp	r3, r0
 800995c:	d8e6      	bhi.n	800992c <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800995e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 8009962:	4555      	cmp	r5, sl
			*fp->cltbl = ulen;	/* Number of items used */
 8009964:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8009966:	f200 80fe 	bhi.w	8009b66 <f_lseek+0x296>
				*tbl = 0;		/* Terminate table */
 800996a:	2300      	movs	r3, #0
 800996c:	f8c9 3000 	str.w	r3, [r9]
 8009970:	e7d9      	b.n	8009926 <f_lseek+0x56>
 8009972:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8009976:	4285      	cmp	r5, r0
 8009978:	bf28      	it	cs
 800997a:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800997c:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 8009980:	2d00      	cmp	r5, #0
 8009982:	d0d0      	beq.n	8009926 <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009984:	f105 38ff 	add.w	r8, r5, #4294967295
 8009988:	4620      	mov	r0, r4
 800998a:	4641      	mov	r1, r8
 800998c:	f7ff f86a 	bl	8008a64 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 8009990:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 8009994:	4601      	mov	r1, r0
 8009996:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800999a:	4638      	mov	r0, r7
 800999c:	f7ff face 	bl	8008f3c <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d0bd      	beq.n	8009920 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80099a4:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	d0bc      	beq.n	8009926 <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80099ac:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80099b0:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80099b4:	3d01      	subs	r5, #1
 80099b6:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 80099ba:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80099bc:	42aa      	cmp	r2, r5
 80099be:	d0b2      	beq.n	8009926 <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80099c0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80099c4:	0659      	lsls	r1, r3, #25
 80099c6:	d50d      	bpl.n	80099e4 <f_lseek+0x114>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80099c8:	2301      	movs	r3, #1
 80099ca:	4621      	mov	r1, r4
 80099cc:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 80099d0:	f7fe ff6c 	bl	80088ac <disk_write>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1ad      	bne.n	8009934 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 80099d8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80099dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099e0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80099e4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80099e8:	2301      	movs	r3, #1
 80099ea:	462a      	mov	r2, r5
 80099ec:	4621      	mov	r1, r4
 80099ee:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80099f2:	f7fe ff4d 	bl	8008890 <disk_read>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d19c      	bne.n	8009934 <f_lseek+0x64>
					fp->dsect = dsc;
 80099fa:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80099fe:	e792      	b.n	8009926 <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009a00:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8009a04:	42ab      	cmp	r3, r5
 8009a06:	d205      	bcs.n	8009a14 <f_lseek+0x144>
			 && !(fp->flag & FA_WRITE)
 8009a08:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 8009a0c:	f012 0f02 	tst.w	r2, #2
 8009a10:	bf08      	it	eq
 8009a12:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8009a14:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8009a16:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 8009a1a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 8009a1e:	b97d      	cbnz	r5, 8009a40 <f_lseek+0x170>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009a20:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009a24:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	f67f af7c 	bls.w	8009926 <f_lseek+0x56>
			fp->fsize = fp->fptr;
 8009a2e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8009a32:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009a36:	f043 0320 	orr.w	r3, r3, #32
 8009a3a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8009a3e:	e772      	b.n	8009926 <f_lseek+0x56>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009a40:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009a44:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8009a48:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d03f      	beq.n	8009ace <f_lseek+0x1fe>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	1e6a      	subs	r2, r5, #1
 8009a52:	fbb3 f1f7 	udiv	r1, r3, r7
 8009a56:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8009a5a:	428a      	cmp	r2, r1
 8009a5c:	d337      	bcc.n	8009ace <f_lseek+0x1fe>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009a5e:	427a      	negs	r2, r7
				clst = fp->clust;
 8009a60:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009a64:	4013      	ands	r3, r2
				ofs -= fp->fptr;
 8009a66:	1aed      	subs	r5, r5, r3
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009a68:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
			if (clst != 0) {
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d163      	bne.n	8009b38 <f_lseek+0x268>
		fp->fptr = nsect = 0;
 8009a70:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009a72:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0d0      	beq.n	8009a20 <f_lseek+0x150>
 8009a7e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8009a82:	42aa      	cmp	r2, r5
 8009a84:	d0cc      	beq.n	8009a20 <f_lseek+0x150>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009a86:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009a8a:	065b      	lsls	r3, r3, #25
 8009a8c:	d510      	bpl.n	8009ab0 <f_lseek+0x1e0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009a8e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009a92:	2301      	movs	r3, #1
 8009a94:	4621      	mov	r1, r4
 8009a96:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009a9a:	f7fe ff07 	bl	80088ac <disk_write>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f47f af48 	bne.w	8009934 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 8009aa4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aac:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009ab0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8009abe:	f7fe fee7 	bl	8008890 <disk_read>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f47f af36 	bne.w	8009934 <f_lseek+0x64>
			fp->dsect = nsect;
 8009ac8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8009acc:	e7a8      	b.n	8009a20 <f_lseek+0x150>
				clst = fp->sclust;						/* start from the first cluster */
 8009ace:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009ad2:	b951      	cbnz	r1, 8009aea <f_lseek+0x21a>
					clst = create_chain(fp->fs, 0);
 8009ad4:	f7ff fb6a 	bl	80091ac <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009ad8:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8009ada:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009adc:	f43f af20 	beq.w	8009920 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ae0:	1c42      	adds	r2, r0, #1
 8009ae2:	f43f af27 	beq.w	8009934 <f_lseek+0x64>
					fp->sclust = clst;
 8009ae6:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 8009aea:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 8009aee:	e7bd      	b.n	8009a6c <f_lseek+0x19c>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009af0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8009af4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009af8:	079b      	lsls	r3, r3, #30
 8009afa:	d505      	bpl.n	8009b08 <f_lseek+0x238>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009afc:	f7ff fb56 	bl	80091ac <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009b00:	4601      	mov	r1, r0
 8009b02:	b920      	cbnz	r0, 8009b0e <f_lseek+0x23e>
 8009b04:	463d      	mov	r5, r7
 8009b06:	e019      	b.n	8009b3c <f_lseek+0x26c>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009b08:	f7ff fa26 	bl	8008f58 <get_fat>
 8009b0c:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009b0e:	1c4a      	adds	r2, r1, #1
 8009b10:	f43f af10 	beq.w	8009934 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009b14:	2901      	cmp	r1, #1
 8009b16:	f67f af03 	bls.w	8009920 <f_lseek+0x50>
 8009b1a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009b1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b22:	428b      	cmp	r3, r1
 8009b24:	f67f aefc 	bls.w	8009920 <f_lseek+0x50>
					fp->fptr += bcs;
 8009b28:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 8009b2c:	1bed      	subs	r5, r5, r7
					fp->clust = clst;
 8009b2e:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8009b32:	443b      	add	r3, r7
 8009b34:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				while (ofs > bcs) {						/* Cluster following loop */
 8009b38:	42bd      	cmp	r5, r7
 8009b3a:	d8d9      	bhi.n	8009af0 <f_lseek+0x220>
				fp->fptr += ofs;
 8009b3c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8009b40:	442b      	add	r3, r5
 8009b42:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8009b46:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d090      	beq.n	8009a70 <f_lseek+0x1a0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009b4e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009b52:	f7ff f9f3 	bl	8008f3c <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f43f aee2 	beq.w	8009920 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8009b5c:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8009b60:	e787      	b.n	8009a72 <f_lseek+0x1a2>
 8009b62:	461e      	mov	r6, r3
 8009b64:	e6df      	b.n	8009926 <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009b66:	2611      	movs	r6, #17
 8009b68:	e6dd      	b.n	8009926 <f_lseek+0x56>

08009b6a <f_gets>:
{
 8009b6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b6e:	4606      	mov	r6, r0
 8009b70:	4690      	mov	r8, r2
	TCHAR c, *p = buff;
 8009b72:	4605      	mov	r5, r0
	int n = 0;
 8009b74:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009b76:	1e4f      	subs	r7, r1, #1
 8009b78:	42bc      	cmp	r4, r7
 8009b7a:	da12      	bge.n	8009ba2 <f_gets+0x38>
		f_read(fp, s, 1, &rc);
 8009b7c:	ab01      	add	r3, sp, #4
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4669      	mov	r1, sp
 8009b82:	4640      	mov	r0, r8
 8009b84:	f7ff fc5e 	bl	8009444 <f_read>
		if (rc != 1) break;
 8009b88:	9b01      	ldr	r3, [sp, #4]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d109      	bne.n	8009ba2 <f_gets+0x38>
		c = s[0];
 8009b8e:	f89d 3000 	ldrb.w	r3, [sp]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009b92:	2b0d      	cmp	r3, #13
 8009b94:	d0f0      	beq.n	8009b78 <f_gets+0xe>
		if (c == '\n') break;		/* Break on EOL */
 8009b96:	2b0a      	cmp	r3, #10
		*p++ = c;
 8009b98:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8009b9c:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8009ba0:	d1ea      	bne.n	8009b78 <f_gets+0xe>
	*p = 0;
 8009ba2:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009ba4:	429c      	cmp	r4, r3
	*p = 0;
 8009ba6:	702b      	strb	r3, [r5, #0]
}
 8009ba8:	bf14      	ite	ne
 8009baa:	4630      	movne	r0, r6
 8009bac:	4618      	moveq	r0, r3
 8009bae:	b002      	add	sp, #8
 8009bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bb4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009bb4:	b510      	push	{r4, lr}
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8009bb6:	2300      	movs	r3, #0
{
 8009bb8:	b094      	sub	sp, #80	; 0x50
 8009bba:	1e44      	subs	r4, r0, #1
	pb.fp = fp;				/* Initialize output buffer */
 8009bbc:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 8009bbe:	e9cd 3302 	strd	r3, r3, [sp, #8]

	while (*str)			/* Put the string */
 8009bc2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8009bc6:	b931      	cbnz	r1, 8009bd6 <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009bc8:	9a02      	ldr	r2, [sp, #8]
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	da07      	bge.n	8009bde <f_puts+0x2a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8009bce:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009bd2:	b014      	add	sp, #80	; 0x50
 8009bd4:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 8009bd6:	a801      	add	r0, sp, #4
 8009bd8:	f7ff fde7 	bl	80097aa <putc_bfd>
 8009bdc:	e7f1      	b.n	8009bc2 <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009bde:	466b      	mov	r3, sp
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	9801      	ldr	r0, [sp, #4]
 8009be4:	f7ff fcf2 	bl	80095cc <f_write>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d1f0      	bne.n	8009bce <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009bec:	9a02      	ldr	r2, [sp, #8]
 8009bee:	9b00      	ldr	r3, [sp, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d1ec      	bne.n	8009bce <f_puts+0x1a>
 8009bf4:	9803      	ldr	r0, [sp, #12]
 8009bf6:	e7ec      	b.n	8009bd2 <f_puts+0x1e>

08009bf8 <ff_convert>:
	)
{
	WCHAR c;


	if (chr < 0x80) {
 8009bf8:	287f      	cmp	r0, #127	; 0x7f
{
 8009bfa:	b510      	push	{r4, lr}
	if (chr < 0x80) {
 8009bfc:	d90d      	bls.n	8009c1a <ff_convert+0x22>
		c = chr;

	} else {
		if (dir) {
 8009bfe:	b969      	cbnz	r1, 8009c1c <ff_convert+0x24>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 8009c00:	4a0b      	ldr	r2, [pc, #44]	; (8009c30 <ff_convert+0x38>)
 8009c02:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8009c06:	b28b      	uxth	r3, r1
 8009c08:	4284      	cmp	r4, r0
 8009c0a:	d003      	beq.n	8009c14 <ff_convert+0x1c>
 8009c0c:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8009c0e:	2980      	cmp	r1, #128	; 0x80
 8009c10:	d1f7      	bne.n	8009c02 <ff_convert+0xa>
 8009c12:	460b      	mov	r3, r1
			}
			c = (c + 0x80) & 0xFF;
 8009c14:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8009c18:	b2c0      	uxtb	r0, r0
		}
	}

	return c;

}
 8009c1a:	bd10      	pop	{r4, pc}
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009c1c:	28ff      	cmp	r0, #255	; 0xff
 8009c1e:	bf97      	itett	ls
 8009c20:	4b04      	ldrls	r3, [pc, #16]	; (8009c34 <ff_convert+0x3c>)
 8009c22:	2000      	movhi	r0, #0
 8009c24:	eb03 0040 	addls.w	r0, r3, r0, lsl #1
 8009c28:	f830 0c46 	ldrhls.w	r0, [r0, #-70]
 8009c2c:	e7f5      	b.n	8009c1a <ff_convert+0x22>
 8009c2e:	bf00      	nop
 8009c30:	08050c8e 	.word	0x08050c8e
 8009c34:	08050bd4 	.word	0x08050bd4

08009c38 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009c38:	4b08      	ldr	r3, [pc, #32]	; (8009c5c <ff_wtoupper+0x24>)
 8009c3a:	2200      	movs	r2, #0
{
 8009c3c:	b530      	push	{r4, r5, lr}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009c3e:	f503 75dd 	add.w	r5, r3, #442	; 0x1ba
 8009c42:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 8009c46:	0054      	lsls	r4, r2, #1
 8009c48:	b121      	cbz	r1, 8009c54 <ff_wtoupper+0x1c>
 8009c4a:	4281      	cmp	r1, r0
 8009c4c:	d103      	bne.n	8009c56 <ff_wtoupper+0x1e>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009c4e:	4423      	add	r3, r4
 8009c50:	f8b3 039a 	ldrh.w	r0, [r3, #922]	; 0x39a
}
 8009c54:	bd30      	pop	{r4, r5, pc}
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009c56:	3201      	adds	r2, #1
 8009c58:	e7f3      	b.n	8009c42 <ff_wtoupper+0xa>
 8009c5a:	bf00      	nop
 8009c5c:	08050bd4 	.word	0x08050bd4

08009c60 <dir_find.part.13>:
FRESULT dir_find (
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009c64:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8009c68:	f64f 78ff 	movw	r8, #65535	; 0xffff
FRESULT dir_find (
 8009c6c:	b085      	sub	sp, #20
 8009c6e:	4605      	mov	r5, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009c70:	464c      	mov	r4, r9
 8009c72:	f8a0 8224 	strh.w	r8, [r0, #548]	; 0x224
		res = move_window(dp->fs, dp->sect);
 8009c76:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8009c7a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8009c7e:	f7fe ff82 	bl	8008b86 <move_window>
		if (res != FR_OK) break;
 8009c82:	4607      	mov	r7, r0
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d15e      	bne.n	8009d46 <dir_find.part.13+0xe6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009c88:	f8d5 6214 	ldr.w	r6, [r5, #532]	; 0x214
		c = dir[DIR_Name];
 8009c8c:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	d07a      	beq.n	8009d88 <dir_find.part.13+0x128>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009c92:	2ae5      	cmp	r2, #229	; 0xe5
 8009c94:	d006      	beq.n	8009ca4 <dir_find.part.13+0x44>
		a = dir[DIR_Attr] & AM_MASK;
 8009c96:	7af1      	ldrb	r1, [r6, #11]
 8009c98:	f001 033f 	and.w	r3, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009c9c:	0709      	lsls	r1, r1, #28
 8009c9e:	d504      	bpl.n	8009caa <dir_find.part.13+0x4a>
 8009ca0:	2b0f      	cmp	r3, #15
 8009ca2:	d004      	beq.n	8009cae <dir_find.part.13+0x4e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009ca4:	f8a5 8224 	strh.w	r8, [r5, #548]	; 0x224
 8009ca8:	e053      	b.n	8009d52 <dir_find.part.13+0xf2>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009caa:	2b0f      	cmp	r3, #15
 8009cac:	d156      	bne.n	8009d5c <dir_find.part.13+0xfc>
				if (dp->lfn) {
 8009cae:	f8d5 b220 	ldr.w	fp, [r5, #544]	; 0x220
 8009cb2:	f1bb 0f00 	cmp.w	fp, #0
 8009cb6:	d03f      	beq.n	8009d38 <dir_find.part.13+0xd8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009cb8:	0650      	lsls	r0, r2, #25
 8009cba:	d548      	bpl.n	8009d4e <dir_find.part.13+0xee>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8009cbc:	f002 04bf 	and.w	r4, r2, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009cc0:	f8b5 2206 	ldrh.w	r2, [r5, #518]	; 0x206
						sum = dir[LDIR_Chksum];
 8009cc4:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009cc8:	f8a5 2224 	strh.w	r2, [r5, #548]	; 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009ccc:	7b72      	ldrb	r2, [r6, #13]
 8009cce:	454a      	cmp	r2, r9
 8009cd0:	d13f      	bne.n	8009d52 <dir_find.part.13+0xf2>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009cd2:	7833      	ldrb	r3, [r6, #0]
	s = 0; wc = 1;
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	f04f 0a00 	mov.w	sl, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8009cda:	f023 0740 	bic.w	r7, r3, #64	; 0x40
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	1e7a      	subs	r2, r7, #1
 8009ce2:	270d      	movs	r7, #13
 8009ce4:	4357      	muls	r7, r2
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8009ce6:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <dir_find.part.13+0x12c>)
 8009ce8:	f81a 1003 	ldrb.w	r1, [sl, r3]
 8009cec:	1872      	adds	r2, r6, r1
 8009cee:	f892 c001 	ldrb.w	ip, [r2, #1]
 8009cf2:	5c72      	ldrb	r2, [r6, r1]
 8009cf4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
		if (wc) {	/* Last character has not been processed */
 8009cf8:	b368      	cbz	r0, 8009d56 <dir_find.part.13+0xf6>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7ff ff9c 	bl	8009c38 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009d00:	2ffe      	cmp	r7, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009d02:	9003      	str	r0, [sp, #12]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009d04:	d825      	bhi.n	8009d52 <dir_find.part.13+0xf2>
 8009d06:	1c7a      	adds	r2, r7, #1
 8009d08:	f83b 0017 	ldrh.w	r0, [fp, r7, lsl #1]
 8009d0c:	9202      	str	r2, [sp, #8]
 8009d0e:	f7ff ff93 	bl	8009c38 <ff_wtoupper>
 8009d12:	9903      	ldr	r1, [sp, #12]
 8009d14:	4281      	cmp	r1, r0
 8009d16:	d11c      	bne.n	8009d52 <dir_find.part.13+0xf2>
 8009d18:	9a02      	ldr	r2, [sp, #8]
 8009d1a:	4617      	mov	r7, r2
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8009d1c:	f10a 0a01 	add.w	sl, sl, #1
 8009d20:	f1ba 0f0d 	cmp.w	sl, #13
 8009d24:	d1df      	bne.n	8009ce6 <dir_find.part.13+0x86>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009d26:	9b01      	ldr	r3, [sp, #4]
 8009d28:	0659      	lsls	r1, r3, #25
 8009d2a:	d503      	bpl.n	8009d34 <dir_find.part.13+0xd4>
 8009d2c:	b110      	cbz	r0, 8009d34 <dir_find.part.13+0xd4>
 8009d2e:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 8009d32:	b973      	cbnz	r3, 8009d52 <dir_find.part.13+0xf2>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009d34:	3c01      	subs	r4, #1
 8009d36:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f7ff fa8f 	bl	800925e <dir_next>
	} while (res == FR_OK);
 8009d40:	4607      	mov	r7, r0
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d097      	beq.n	8009c76 <dir_find.part.13+0x16>
}
 8009d46:	4638      	mov	r0, r7
 8009d48:	b005      	add	sp, #20
 8009d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009d4e:	42a2      	cmp	r2, r4
 8009d50:	d0bc      	beq.n	8009ccc <dir_find.part.13+0x6c>
 8009d52:	24ff      	movs	r4, #255	; 0xff
 8009d54:	e7f0      	b.n	8009d38 <dir_find.part.13+0xd8>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8009d56:	4542      	cmp	r2, r8
 8009d58:	d0e0      	beq.n	8009d1c <dir_find.part.13+0xbc>
 8009d5a:	e7fa      	b.n	8009d52 <dir_find.part.13+0xf2>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009d5c:	b924      	cbnz	r4, 8009d68 <dir_find.part.13+0x108>
 8009d5e:	4630      	mov	r0, r6
 8009d60:	f7fe fe94 	bl	8008a8c <sum_sfn>
 8009d64:	4548      	cmp	r0, r9
 8009d66:	d0ee      	beq.n	8009d46 <dir_find.part.13+0xe6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009d68:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8009d6c:	7ada      	ldrb	r2, [r3, #11]
 8009d6e:	07d2      	lsls	r2, r2, #31
 8009d70:	d498      	bmi.n	8009ca4 <dir_find.part.13+0x44>
 8009d72:	f103 000b 	add.w	r0, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009d76:	4283      	cmp	r3, r0
 8009d78:	d0e5      	beq.n	8009d46 <dir_find.part.13+0xe6>
 8009d7a:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d82:	4291      	cmp	r1, r2
 8009d84:	d0f7      	beq.n	8009d76 <dir_find.part.13+0x116>
 8009d86:	e78d      	b.n	8009ca4 <dir_find.part.13+0x44>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d88:	2704      	movs	r7, #4
 8009d8a:	e7dc      	b.n	8009d46 <dir_find.part.13+0xe6>
 8009d8c:	08050c54 	.word	0x08050c54

08009d90 <dir_register>:
{
 8009d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mem_cpy(sn, fn, 12);
 8009d94:	220c      	movs	r2, #12
{
 8009d96:	b086      	sub	sp, #24
	fn = dp->fn; lfn = dp->lfn;
 8009d98:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
{
 8009d9c:	4604      	mov	r4, r0
	fn = dp->fn; lfn = dp->lfn;
 8009d9e:	f8d0 7220 	ldr.w	r7, [r0, #544]	; 0x220
	mem_cpy(sn, fn, 12);
 8009da2:	eb0d 0002 	add.w	r0, sp, r2
 8009da6:	4631      	mov	r1, r6
 8009da8:	f7fe fd9e 	bl	80088e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009dac:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009db0:	07db      	lsls	r3, r3, #31
 8009db2:	f140 8082 	bpl.w	8009eba <dir_register+0x12a>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009db6:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8009db8:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009dbc:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8009ff4 <dir_register+0x264>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009dc0:	72f3      	strb	r3, [r6, #11]
 8009dc2:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
	mem_cpy(dst, src, 11);
 8009dc6:	220b      	movs	r2, #11
 8009dc8:	a903      	add	r1, sp, #12
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7fe fd8c 	bl	80088e8 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009dd0:	f1b9 0f05 	cmp.w	r9, #5
 8009dd4:	d950      	bls.n	8009e78 <dir_register+0xe8>
 8009dd6:	1eb8      	subs	r0, r7, #2
 8009dd8:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8009dda:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	d13d      	bne.n	8009e5e <dir_register+0xce>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009de2:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8009de4:	f003 000f 	and.w	r0, r3, #15
		ns[i--] = c;
 8009de8:	3a01      	subs	r2, #1
		c = (seq % 16) + '0';
 8009dea:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8009dee:	2939      	cmp	r1, #57	; 0x39
 8009df0:	bf88      	it	hi
 8009df2:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8009df6:	a801      	add	r0, sp, #4
	} while (seq);
 8009df8:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8009dfa:	4410      	add	r0, r2
 8009dfc:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8009dfe:	d1f1      	bne.n	8009de4 <dir_register+0x54>
	ns[i] = '~';
 8009e00:	a906      	add	r1, sp, #24
 8009e02:	207e      	movs	r0, #126	; 0x7e
 8009e04:	4411      	add	r1, r2
 8009e06:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d003      	beq.n	8009e16 <dir_register+0x86>
 8009e0e:	5cf1      	ldrb	r1, [r6, r3]
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	2920      	cmp	r1, #32
 8009e14:	d132      	bne.n	8009e7c <dir_register+0xec>
 8009e16:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009e18:	2a07      	cmp	r2, #7
 8009e1a:	bf97      	itett	ls
 8009e1c:	a906      	addls	r1, sp, #24
 8009e1e:	2120      	movhi	r1, #32
 8009e20:	1889      	addls	r1, r1, r2
 8009e22:	3201      	addls	r2, #1
 8009e24:	bf98      	it	ls
 8009e26:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8009e2a:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8009e2e:	1b99      	subs	r1, r3, r6
 8009e30:	2907      	cmp	r1, #7
 8009e32:	d9f1      	bls.n	8009e18 <dir_register+0x88>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e34:	2100      	movs	r1, #0
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7ff f8ef 	bl	800901a <dir_sdi>
	if (res != FR_OK) return res;
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	bba8      	cbnz	r0, 8009eac <dir_register+0x11c>
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7ff ff0d 	bl	8009c60 <dir_find.part.13>
			if (res != FR_OK) break;
 8009e46:	4605      	mov	r5, r0
 8009e48:	bb80      	cbnz	r0, 8009eac <dir_register+0x11c>
		for (n = 1; n < 100; n++) {
 8009e4a:	f109 0901 	add.w	r9, r9, #1
 8009e4e:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8009e52:	d1b8      	bne.n	8009dc6 <dir_register+0x36>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009e54:	2507      	movs	r5, #7
}
 8009e56:	4628      	mov	r0, r5
 8009e58:	b006      	add	sp, #24
 8009e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (*lfn) {	/* Create a CRC */
 8009e5e:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8009e60:	f002 0501 	and.w	r5, r2, #1
				wc >>= 1;
 8009e64:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 8009e66:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8009e6a:	03dd      	lsls	r5, r3, #15
 8009e6c:	bf48      	it	mi
 8009e6e:	ea83 0308 	eormi.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8009e72:	3901      	subs	r1, #1
 8009e74:	d1f4      	bne.n	8009e60 <dir_register+0xd0>
 8009e76:	e7b0      	b.n	8009dda <dir_register+0x4a>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8009e78:	464b      	mov	r3, r9
 8009e7a:	e7b2      	b.n	8009de2 <dir_register+0x52>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	e7c4      	b.n	8009e0a <dir_register+0x7a>
		for (n = 0; lfn[n]; n++) ;
 8009e80:	3601      	adds	r6, #1
 8009e82:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1fa      	bne.n	8009e80 <dir_register+0xf0>
		nent = (n + 25) / 13;
 8009e8a:	3619      	adds	r6, #25
 8009e8c:	230d      	movs	r3, #13
 8009e8e:	fbb6 f6f3 	udiv	r6, r6, r3
 8009e92:	e017      	b.n	8009ec4 <dir_register+0x134>
		for (n = 0; lfn[n]; n++) ;
 8009e94:	2600      	movs	r6, #0
 8009e96:	e7f4      	b.n	8009e82 <dir_register+0xf2>
				n = 0;					/* Not a blank entry. Restart to search */
 8009e98:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7ff f9de 	bl	800925e <dir_next>
		} while (res == FR_OK);
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	b1b0      	cbz	r0, 8009ed4 <dir_register+0x144>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009ea6:	2d04      	cmp	r5, #4
 8009ea8:	d0d4      	beq.n	8009e54 <dir_register+0xc4>
 8009eaa:	e7d4      	b.n	8009e56 <dir_register+0xc6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009eac:	2d04      	cmp	r5, #4
 8009eae:	d1d2      	bne.n	8009e56 <dir_register+0xc6>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009eb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009eb4:	72f3      	strb	r3, [r6, #11]
 8009eb6:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009eba:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009ebe:	079b      	lsls	r3, r3, #30
 8009ec0:	d4e8      	bmi.n	8009e94 <dir_register+0x104>
		nent = 1;
 8009ec2:	2601      	movs	r6, #1
	res = dir_sdi(dp, 0);
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f7ff f8a7 	bl	800901a <dir_sdi>
	if (res == FR_OK) {
 8009ecc:	4605      	mov	r5, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d1e9      	bne.n	8009ea6 <dir_register+0x116>
		n = 0;
 8009ed2:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8009ed4:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009ed8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009edc:	f7fe fe53 	bl	8008b86 <move_window>
			if (res != FR_OK) break;
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d1df      	bne.n	8009ea6 <dir_register+0x116>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009ee6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2be5      	cmp	r3, #229	; 0xe5
 8009eee:	d001      	beq.n	8009ef4 <dir_register+0x164>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1d1      	bne.n	8009e98 <dir_register+0x108>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009ef4:	3701      	adds	r7, #1
 8009ef6:	42be      	cmp	r6, r7
 8009ef8:	d1cf      	bne.n	8009e9a <dir_register+0x10a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009efa:	3e01      	subs	r6, #1
 8009efc:	d055      	beq.n	8009faa <dir_register+0x21a>
		res = dir_sdi(dp, dp->index - nent);
 8009efe:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 8009f02:	4620      	mov	r0, r4
 8009f04:	1b89      	subs	r1, r1, r6
 8009f06:	f7ff f888 	bl	800901a <dir_sdi>
		if (res == FR_OK) {
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d1a2      	bne.n	8009e56 <dir_register+0xc6>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009f10:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009f14:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009f18:	f7fe fdb8 	bl	8008a8c <sum_sfn>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009f1c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8009ff8 <dir_register+0x268>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009f20:	4607      	mov	r7, r0
				res = move_window(dp->fs, dp->sect);
 8009f22:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009f26:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009f2a:	f7fe fe2c 	bl	8008b86 <move_window>
 8009f2e:	4605      	mov	r5, r0
				if (res != FR_OK) break;
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d190      	bne.n	8009e56 <dir_register+0xc6>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009f34:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009f38:	220f      	movs	r2, #15
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009f3a:	b2f1      	uxtb	r1, r6
 8009f3c:	f8d4 e220 	ldr.w	lr, [r4, #544]	; 0x220
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009f40:	250d      	movs	r5, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009f42:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009f44:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8009f46:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Type] = 0;
 8009f48:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8009f4a:	436a      	muls	r2, r5
	s = wc = 0;
 8009f4c:	4605      	mov	r5, r0
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8009f4e:	7698      	strb	r0, [r3, #26]
 8009f50:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009f52:	4548      	cmp	r0, r9
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009f54:	f815 c008 	ldrb.w	ip, [r5, r8]
	} while (++s < 13);
 8009f58:	f105 0501 	add.w	r5, r5, #1
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009f5c:	bf1c      	itt	ne
 8009f5e:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 8009f62:	3201      	addne	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009f64:	f803 000c 	strb.w	r0, [r3, ip]
 8009f68:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8009f6c:	449c      	add	ip, r3
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	bf08      	it	eq
 8009f72:	4648      	moveq	r0, r9
	} while (++s < 13);
 8009f74:	2d0d      	cmp	r5, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009f76:	f88c a001 	strb.w	sl, [ip, #1]
	} while (++s < 13);
 8009f7a:	d1ea      	bne.n	8009f52 <dir_register+0x1c2>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8009f7c:	4548      	cmp	r0, r9
 8009f7e:	d002      	beq.n	8009f86 <dir_register+0x1f6>
 8009f80:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8009f84:	b90a      	cbnz	r2, 8009f8a <dir_register+0x1fa>
 8009f86:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009f8a:	7019      	strb	r1, [r3, #0]
				dp->fs->wflag = 1;
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
				res = dir_next(dp, 0);	/* Next entry */
 8009f92:	2100      	movs	r1, #0
 8009f94:	4620      	mov	r0, r4
				dp->fs->wflag = 1;
 8009f96:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8009f9a:	f7ff f960 	bl	800925e <dir_next>
			} while (res == FR_OK && --nent);
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	f47f af58 	bne.w	8009e56 <dir_register+0xc6>
 8009fa6:	3e01      	subs	r6, #1
 8009fa8:	d1bb      	bne.n	8009f22 <dir_register+0x192>
		res = move_window(dp->fs, dp->sect);
 8009faa:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8009fae:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8009fb2:	f7fe fde8 	bl	8008b86 <move_window>
		if (res == FR_OK) {
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	f47f af4c 	bne.w	8009e56 <dir_register+0xc6>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8009fc6:	f7fe fc99 	bl	80088fc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009fca:	220b      	movs	r2, #11
 8009fcc:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8009fd0:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 8009fd4:	f7fe fc88 	bl	80088e8 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009fd8:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8009fdc:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8009fe0:	7adb      	ldrb	r3, [r3, #11]
 8009fe2:	f003 0318 	and.w	r3, r3, #24
 8009fe6:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8009fee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8009ff2:	e730      	b.n	8009e56 <dir_register+0xc6>
 8009ff4:	00011021 	.word	0x00011021
 8009ff8:	08050c54 	.word	0x08050c54

08009ffc <follow_path>:
{
 8009ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a000:	780b      	ldrb	r3, [r1, #0]
{
 800a002:	4607      	mov	r7, r0
 800a004:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a006:	2b2f      	cmp	r3, #47	; 0x2f
 800a008:	d001      	beq.n	800a00e <follow_path+0x12>
 800a00a:	2b5c      	cmp	r3, #92	; 0x5c
 800a00c:	d101      	bne.n	800a012 <follow_path+0x16>
		path++;
 800a00e:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 800a012:	2400      	movs	r4, #0
 800a014:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a018:	f898 3000 	ldrb.w	r3, [r8]
 800a01c:	2b1f      	cmp	r3, #31
 800a01e:	f200 80cc 	bhi.w	800a1ba <follow_path+0x1be>
		res = dir_sdi(dp, 0);
 800a022:	4621      	mov	r1, r4
 800a024:	4638      	mov	r0, r7
 800a026:	f7fe fff8 	bl	800901a <dir_sdi>
		dp->dir = 0;
 800a02a:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
}
 800a02e:	b003      	add	sp, #12
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lfn[di++] = w;					/* Store the Unicode character */
 800a034:	f825 0f02 	strh.w	r0, [r5, #2]!
 800a038:	4646      	mov	r6, r8
 800a03a:	e0ce      	b.n	800a1da <follow_path+0x1de>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a03c:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 800a03e:	44a0      	add	r8, r4
 800a040:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a044:	bf8c      	ite	hi
 800a046:	2400      	movhi	r4, #0
 800a048:	2404      	movls	r4, #4
	while (di) {						/* Strip trailing spaces and dots */
 800a04a:	2e00      	cmp	r6, #0
 800a04c:	f000 80e4 	beq.w	800a218 <follow_path+0x21c>
		w = lfn[di - 1];
 800a050:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800a054:	2920      	cmp	r1, #32
 800a056:	d002      	beq.n	800a05e <follow_path+0x62>
 800a058:	292e      	cmp	r1, #46	; 0x2e
 800a05a:	f040 80e1 	bne.w	800a220 <follow_path+0x224>
		di--;
 800a05e:	3e01      	subs	r6, #1
 800a060:	e7f3      	b.n	800a04a <follow_path+0x4e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a062:	3101      	adds	r1, #1
 800a064:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 800a068:	2a20      	cmp	r2, #32
 800a06a:	d0fa      	beq.n	800a062 <follow_path+0x66>
 800a06c:	2a2e      	cmp	r2, #46	; 0x2e
 800a06e:	d0f8      	beq.n	800a062 <follow_path+0x66>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a070:	b109      	cbz	r1, 800a076 <follow_path+0x7a>
 800a072:	f044 0403 	orr.w	r4, r4, #3
 800a076:	464a      	mov	r2, r9
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a078:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 800a07c:	282e      	cmp	r0, #46	; 0x2e
 800a07e:	d001      	beq.n	800a084 <follow_path+0x88>
 800a080:	3e01      	subs	r6, #1
 800a082:	d1f9      	bne.n	800a078 <follow_path+0x7c>
		dp->fn[i++] = (BYTE)w;
 800a084:	f04f 0a00 	mov.w	sl, #0
 800a088:	f04f 0908 	mov.w	r9, #8
 800a08c:	4655      	mov	r5, sl
		w = lfn[si++];					/* Get an LFN character */
 800a08e:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 800a092:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800a094:	b1c0      	cbz	r0, 800a0c8 <follow_path+0xcc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a096:	2820      	cmp	r0, #32
 800a098:	d003      	beq.n	800a0a2 <follow_path+0xa6>
 800a09a:	282e      	cmp	r0, #46	; 0x2e
 800a09c:	d105      	bne.n	800a0aa <follow_path+0xae>
 800a09e:	42b2      	cmp	r2, r6
 800a0a0:	d007      	beq.n	800a0b2 <follow_path+0xb6>
			cf |= NS_LOSS | NS_LFN; continue;
 800a0a2:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	e7f1      	b.n	800a08e <follow_path+0x92>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a0aa:	45ca      	cmp	sl, r9
 800a0ac:	d205      	bcs.n	800a0ba <follow_path+0xbe>
 800a0ae:	42b2      	cmp	r2, r6
 800a0b0:	d150      	bne.n	800a154 <follow_path+0x158>
			if (ni == 11) {				/* Long extension */
 800a0b2:	f1b9 0f0b 	cmp.w	r9, #11
 800a0b6:	d145      	bne.n	800a144 <follow_path+0x148>
 800a0b8:	e002      	b.n	800a0c0 <follow_path+0xc4>
 800a0ba:	f1b9 0f0b 	cmp.w	r9, #11
 800a0be:	d13c      	bne.n	800a13a <follow_path+0x13e>
				cf |= NS_LOSS | NS_LFN; break;
 800a0c0:	f044 0403 	orr.w	r4, r4, #3
 800a0c4:	f04f 090b 	mov.w	r9, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800a0c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a0cc:	781a      	ldrb	r2, [r3, #0]
 800a0ce:	2ae5      	cmp	r2, #229	; 0xe5
 800a0d0:	bf04      	itt	eq
 800a0d2:	2205      	moveq	r2, #5
 800a0d4:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 800a0d6:	f1b9 0f08 	cmp.w	r9, #8
 800a0da:	bf04      	itt	eq
 800a0dc:	00ad      	lsleq	r5, r5, #2
 800a0de:	b2ed      	uxtbeq	r5, r5
 800a0e0:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800a0e4:	2b0c      	cmp	r3, #12
 800a0e6:	d003      	beq.n	800a0f0 <follow_path+0xf4>
 800a0e8:	f005 0203 	and.w	r2, r5, #3
 800a0ec:	2a03      	cmp	r2, #3
 800a0ee:	d101      	bne.n	800a0f4 <follow_path+0xf8>
		cf |= NS_LFN;
 800a0f0:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a0f4:	07a1      	lsls	r1, r4, #30
 800a0f6:	d409      	bmi.n	800a10c <follow_path+0x110>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a0f8:	f005 0503 	and.w	r5, r5, #3
 800a0fc:	2d01      	cmp	r5, #1
 800a0fe:	bf08      	it	eq
 800a100:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a104:	2b04      	cmp	r3, #4
 800a106:	bf08      	it	eq
 800a108:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a10c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a110:	2100      	movs	r1, #0
 800a112:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a114:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a116:	f7fe ff80 	bl	800901a <dir_sdi>
	if (res != FR_OK) return res;
 800a11a:	b910      	cbnz	r0, 800a122 <follow_path+0x126>
 800a11c:	4638      	mov	r0, r7
 800a11e:	f7ff fd9f 	bl	8009c60 <dir_find.part.13>
			ns = dp->fn[NSFLAG];
 800a122:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800a126:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a128:	b3b8      	cbz	r0, 800a19a <follow_path+0x19e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a12a:	2804      	cmp	r0, #4
 800a12c:	f47f af7f 	bne.w	800a02e <follow_path+0x32>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a130:	f013 0f04 	tst.w	r3, #4
 800a134:	bf08      	it	eq
 800a136:	2005      	moveq	r0, #5
 800a138:	e779      	b.n	800a02e <follow_path+0x32>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a13a:	42b2      	cmp	r2, r6
 800a13c:	d002      	beq.n	800a144 <follow_path+0x148>
 800a13e:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 800a142:	d8c1      	bhi.n	800a0c8 <follow_path+0xcc>
			b <<= 2; continue;
 800a144:	00ad      	lsls	r5, r5, #2
 800a146:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a148:	f04f 090b 	mov.w	r9, #11
 800a14c:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800a150:	b2ed      	uxtb	r5, r5
 800a152:	e7a8      	b.n	800a0a6 <follow_path+0xaa>
		if (w >= 0x80) {				/* Non ASCII character */
 800a154:	287f      	cmp	r0, #127	; 0x7f
 800a156:	d90c      	bls.n	800a172 <follow_path+0x176>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a158:	2100      	movs	r1, #0
 800a15a:	9201      	str	r2, [sp, #4]
 800a15c:	f044 0402 	orr.w	r4, r4, #2
 800a160:	f7ff fd4a 	bl	8009bf8 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a164:	9a01      	ldr	r2, [sp, #4]
 800a166:	b158      	cbz	r0, 800a180 <follow_path+0x184>
 800a168:	4b3a      	ldr	r3, [pc, #232]	; (800a254 <follow_path+0x258>)
 800a16a:	4418      	add	r0, r3
 800a16c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a170:	b130      	cbz	r0, 800a180 <follow_path+0x184>
 800a172:	4b39      	ldr	r3, [pc, #228]	; (800a258 <follow_path+0x25c>)
	while (*str && *str != chr) str++;
 800a174:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a178:	2900      	cmp	r1, #0
 800a17a:	d05e      	beq.n	800a23a <follow_path+0x23e>
 800a17c:	4281      	cmp	r1, r0
 800a17e:	d1f9      	bne.n	800a174 <follow_path+0x178>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a180:	f044 0403 	orr.w	r4, r4, #3
 800a184:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800a186:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800a18a:	f801 000a 	strb.w	r0, [r1, sl]
 800a18e:	f10a 0a01 	add.w	sl, sl, #1
 800a192:	e788      	b.n	800a0a6 <follow_path+0xaa>
					b |= 2;
 800a194:	f045 0502 	orr.w	r5, r5, #2
 800a198:	e7f5      	b.n	800a186 <follow_path+0x18a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a19a:	075a      	lsls	r2, r3, #29
 800a19c:	f53f af47 	bmi.w	800a02e <follow_path+0x32>
			dir = dp->dir;						/* Follow the sub-directory */
 800a1a0:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a1a4:	7acb      	ldrb	r3, [r1, #11]
 800a1a6:	06db      	lsls	r3, r3, #27
 800a1a8:	d538      	bpl.n	800a21c <follow_path+0x220>
			dp->sclust = ld_clust(dp->fs, dir);
 800a1aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a1ae:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a1b2:	f7fe fca9 	bl	8008b08 <ld_clust.isra.0>
 800a1b6:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a1ba:	f898 3000 	ldrb.w	r3, [r8]
 800a1be:	4644      	mov	r4, r8
 800a1c0:	f108 0801 	add.w	r8, r8, #1
 800a1c4:	2b2f      	cmp	r3, #47	; 0x2f
 800a1c6:	d0f8      	beq.n	800a1ba <follow_path+0x1be>
 800a1c8:	2b5c      	cmp	r3, #92	; 0x5c
 800a1ca:	d0f6      	beq.n	800a1ba <follow_path+0x1be>
	lfn = dp->lfn;
 800a1cc:	f8d7 b220 	ldr.w	fp, [r7, #544]	; 0x220
 800a1d0:	f104 39ff 	add.w	r9, r4, #4294967295
	si = di = 0;
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	f1ab 0502 	sub.w	r5, fp, #2
		w = p[si++];					/* Get a character */
 800a1da:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 800a1de:	f106 0801 	add.w	r8, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800a1e2:	281f      	cmp	r0, #31
 800a1e4:	f67f af2a 	bls.w	800a03c <follow_path+0x40>
 800a1e8:	282f      	cmp	r0, #47	; 0x2f
 800a1ea:	f43f af27 	beq.w	800a03c <follow_path+0x40>
 800a1ee:	285c      	cmp	r0, #92	; 0x5c
 800a1f0:	f43f af24 	beq.w	800a03c <follow_path+0x40>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800a1f4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 800a1f8:	d00e      	beq.n	800a218 <follow_path+0x21c>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	f7ff fcfc 	bl	8009bf8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a200:	b150      	cbz	r0, 800a218 <follow_path+0x21c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800a202:	287f      	cmp	r0, #127	; 0x7f
 800a204:	f63f af16 	bhi.w	800a034 <follow_path+0x38>
 800a208:	4914      	ldr	r1, [pc, #80]	; (800a25c <follow_path+0x260>)
	while (*str && *str != chr) str++;
 800a20a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a20e:	2a00      	cmp	r2, #0
 800a210:	f43f af10 	beq.w	800a034 <follow_path+0x38>
 800a214:	4282      	cmp	r2, r0
 800a216:	d1f8      	bne.n	800a20a <follow_path+0x20e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a218:	2006      	movs	r0, #6
 800a21a:	e708      	b.n	800a02e <follow_path+0x32>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a21c:	2005      	movs	r0, #5
	return res;
 800a21e:	e706      	b.n	800a02e <follow_path+0x32>
	lfn[di] = 0;						/* LFN is created */
 800a220:	2500      	movs	r5, #0
	mem_set(dp->fn, ' ', 11);
 800a222:	2120      	movs	r1, #32
 800a224:	220b      	movs	r2, #11
 800a226:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
	lfn[di] = 0;						/* LFN is created */
 800a22a:	f82b 5016 	strh.w	r5, [fp, r6, lsl #1]
 800a22e:	eb0b 0946 	add.w	r9, fp, r6, lsl #1
	mem_set(dp->fn, ' ', 11);
 800a232:	f7fe fb63 	bl	80088fc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a236:	4629      	mov	r1, r5
 800a238:	e714      	b.n	800a064 <follow_path+0x68>
				if (IsUpper(w)) {		/* ASCII large capital */
 800a23a:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800a23e:	2919      	cmp	r1, #25
 800a240:	d9a8      	bls.n	800a194 <follow_path+0x198>
					if (IsLower(w)) {	/* ASCII small capital */
 800a242:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800a246:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800a248:	bf9e      	ittt	ls
 800a24a:	3820      	subls	r0, #32
 800a24c:	f045 0501 	orrls.w	r5, r5, #1
 800a250:	b280      	uxthls	r0, r0
 800a252:	e798      	b.n	800a186 <follow_path+0x18a>
 800a254:	08050bd4 	.word	0x08050bd4
 800a258:	080552e7 	.word	0x080552e7
 800a25c:	080552de 	.word	0x080552de

0800a260 <f_open>:
{
 800a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800a268:	4691      	mov	r9, r2
	if (!fp) return FR_INVALID_OBJECT;
 800a26a:	4606      	mov	r6, r0
{
 800a26c:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800a26e:	2800      	cmp	r0, #0
 800a270:	f000 80cf 	beq.w	800a412 <f_open+0x1b2>
	fp->fs = 0;			/* Clear file object */
 800a274:	2300      	movs	r3, #0
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a276:	f002 021e 	and.w	r2, r2, #30
 800a27a:	a901      	add	r1, sp, #4
	fp->fs = 0;			/* Clear file object */
 800a27c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a280:	a885      	add	r0, sp, #532	; 0x214
 800a282:	f7fe fcc9 	bl	8008c18 <find_volume>
	if (res == FR_OK) {
 800a286:	2800      	cmp	r0, #0
 800a288:	f040 80c5 	bne.w	800a416 <f_open+0x1b6>
		INIT_BUF(dj);
 800a28c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a290:	f000 f956 	bl	800a540 <ff_memalloc>
 800a294:	4680      	mov	r8, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	f000 80bf 	beq.w	800a41a <f_open+0x1ba>
 800a29c:	ab02      	add	r3, sp, #8
 800a29e:	908d      	str	r0, [sp, #564]	; 0x234
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2a0:	9901      	ldr	r1, [sp, #4]
 800a2a2:	a805      	add	r0, sp, #20
		INIT_BUF(dj);
 800a2a4:	938b      	str	r3, [sp, #556]	; 0x22c
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a2a6:	f009 071f 	and.w	r7, r9, #31
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2aa:	f7ff fea7 	bl	8009ffc <follow_path>
		dir = dj.dir;
 800a2ae:	9d8a      	ldr	r5, [sp, #552]	; 0x228
		if (res == FR_OK) {
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	b950      	cbnz	r0, 800a2ca <f_open+0x6a>
			if (!dir)	/* Default directory itself */
 800a2b4:	2d00      	cmp	r5, #0
 800a2b6:	d040      	beq.n	800a33a <f_open+0xda>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2b8:	f017 0f1e 	tst.w	r7, #30
 800a2bc:	a805      	add	r0, sp, #20
 800a2be:	bf14      	ite	ne
 800a2c0:	2101      	movne	r1, #1
 800a2c2:	2100      	moveq	r1, #0
 800a2c4:	f7fe fb22 	bl	800890c <chk_lock>
 800a2c8:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2ca:	f019 0f1c 	tst.w	r9, #28
 800a2ce:	f000 808f 	beq.w	800a3f0 <f_open+0x190>
			if (res != FR_OK) {					/* No file, create new */
 800a2d2:	b3b4      	cbz	r4, 800a342 <f_open+0xe2>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a2d4:	2c04      	cmp	r4, #4
 800a2d6:	d108      	bne.n	800a2ea <f_open+0x8a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2d8:	4b51      	ldr	r3, [pc, #324]	; (800a420 <f_open+0x1c0>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	b10a      	cbz	r2, 800a2e2 <f_open+0x82>
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	bb6b      	cbnz	r3, 800a33e <f_open+0xde>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2e2:	a805      	add	r0, sp, #20
 800a2e4:	f7ff fd54 	bl	8009d90 <dir_register>
 800a2e8:	4604      	mov	r4, r0
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a2ea:	f047 0708 	orr.w	r7, r7, #8
				dir = dj.dir;					/* New entry */
 800a2ee:	9d8a      	ldr	r5, [sp, #552]	; 0x228
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a2f0:	b374      	cbz	r4, 800a350 <f_open+0xf0>
		FREE_BUF();
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f000 f926 	bl	800a544 <ff_memfree>
		if (res == FR_OK) {
 800a2f8:	b9d4      	cbnz	r4, 800a330 <f_open+0xd0>
			fp->flag = mode;					/* File access mode */
 800a2fa:	f886 7206 	strb.w	r7, [r6, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a2fe:	4629      	mov	r1, r5
 800a300:	9f85      	ldr	r7, [sp, #532]	; 0x214
			fp->err = 0;						/* Clear error flag */
 800a302:	f886 4207 	strb.w	r4, [r6, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a306:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 800a30a:	f7fe fbfd 	bl	8008b08 <ld_clust.isra.0>
 800a30e:	f8c6 0210 	str.w	r0, [r6, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a312:	69eb      	ldr	r3, [r5, #28]
			fp->fptr = 0;						/* File pointer */
 800a314:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a318:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
			fp->id = fp->fs->id;
 800a31c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->dsect = 0;
 800a320:	f8c6 4218 	str.w	r4, [r6, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 800a324:	f8c6 4224 	str.w	r4, [r6, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 800a328:	f8c6 7200 	str.w	r7, [r6, #512]	; 0x200
			fp->id = fp->fs->id;
 800a32c:	f8a6 3204 	strh.w	r3, [r6, #516]	; 0x204
}
 800a330:	4620      	mov	r0, r4
 800a332:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 800a336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				res = FR_INVALID_NAME;
 800a33a:	2406      	movs	r4, #6
 800a33c:	e7c5      	b.n	800a2ca <f_open+0x6a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a33e:	2412      	movs	r4, #18
 800a340:	e7d3      	b.n	800a2ea <f_open+0x8a>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a342:	7aeb      	ldrb	r3, [r5, #11]
 800a344:	f013 0f11 	tst.w	r3, #17
 800a348:	d15d      	bne.n	800a406 <f_open+0x1a6>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a34a:	f019 0f04 	tst.w	r9, #4
 800a34e:	d15c      	bne.n	800a40a <f_open+0x1aa>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a350:	073b      	lsls	r3, r7, #28
 800a352:	d533      	bpl.n	800a3bc <f_open+0x15c>
				dw = GET_FATTIME();				/* Created time */
 800a354:	f7fe fac6 	bl	80088e4 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a358:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a35c:	2400      	movs	r4, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a35e:	73a8      	strb	r0, [r5, #14]
 800a360:	73eb      	strb	r3, [r5, #15]
 800a362:	0c03      	lsrs	r3, r0, #16
 800a364:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a366:	72ec      	strb	r4, [r5, #11]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a368:	742b      	strb	r3, [r5, #16]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a36a:	4629      	mov	r1, r5
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a36c:	7468      	strb	r0, [r5, #17]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a36e:	772c      	strb	r4, [r5, #28]
 800a370:	776c      	strb	r4, [r5, #29]
 800a372:	77ac      	strb	r4, [r5, #30]
 800a374:	77ec      	strb	r4, [r5, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a376:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800a378:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 800a37c:	f7fe fbc4 	bl	8008b08 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a380:	76ac      	strb	r4, [r5, #26]
 800a382:	76ec      	strb	r4, [r5, #27]
				dj.fs->wflag = 1;
 800a384:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a386:	752c      	strb	r4, [r5, #20]
				if (cl) {						/* Remove the cluster chain if exist */
 800a388:	4681      	mov	r9, r0
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a38a:	756c      	strb	r4, [r5, #21]
				dj.fs->wflag = 1;
 800a38c:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800a38e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800a392:	b198      	cbz	r0, 800a3bc <f_open+0x15c>
					res = remove_chain(dj.fs, cl);
 800a394:	4601      	mov	r1, r0
 800a396:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800a398:	f8d3 a22c 	ldr.w	sl, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 800a39c:	f7fe ffea 	bl	8009374 <remove_chain>
					if (res == FR_OK) {
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d1a5      	bne.n	800a2f2 <f_open+0x92>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a3a6:	9885      	ldr	r0, [sp, #532]	; 0x214
 800a3a8:	f109 33ff 	add.w	r3, r9, #4294967295
						res = move_window(dj.fs, dw);
 800a3ac:	4651      	mov	r1, sl
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a3ae:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800a3b2:	f7fe fbe8 	bl	8008b86 <move_window>
		if (res == FR_OK) {
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d19a      	bne.n	800a2f2 <f_open+0x92>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a3bc:	073b      	lsls	r3, r7, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a3be:	9b85      	ldr	r3, [sp, #532]	; 0x214
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3c0:	a805      	add	r0, sp, #20
				mode |= FA__WRITTEN;
 800a3c2:	bf48      	it	mi
 800a3c4:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a3c8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
			fp->dir_ptr = dir;
 800a3cc:	f8c6 5220 	str.w	r5, [r6, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3d0:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a3d4:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3d8:	bf14      	ite	ne
 800a3da:	2101      	movne	r1, #1
 800a3dc:	2100      	moveq	r1, #0
 800a3de:	f7fe fad5 	bl	800898c <inc_lock>
			if (!fp->lockid) res = FR_INT_ERR;
 800a3e2:	2800      	cmp	r0, #0
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a3e4:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800a3e8:	bf14      	ite	ne
 800a3ea:	2400      	movne	r4, #0
 800a3ec:	2402      	moveq	r4, #2
 800a3ee:	e780      	b.n	800a2f2 <f_open+0x92>
			if (res == FR_OK) {					/* Follow succeeded */
 800a3f0:	2c00      	cmp	r4, #0
 800a3f2:	f47f af7e 	bne.w	800a2f2 <f_open+0x92>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a3f6:	7aeb      	ldrb	r3, [r5, #11]
 800a3f8:	06d8      	lsls	r0, r3, #27
 800a3fa:	d408      	bmi.n	800a40e <f_open+0x1ae>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a3fc:	f019 0f02 	tst.w	r9, #2
 800a400:	d0dc      	beq.n	800a3bc <f_open+0x15c>
 800a402:	07da      	lsls	r2, r3, #31
 800a404:	d5da      	bpl.n	800a3bc <f_open+0x15c>
						res = FR_DENIED;
 800a406:	2407      	movs	r4, #7
 800a408:	e773      	b.n	800a2f2 <f_open+0x92>
						res = FR_EXIST;
 800a40a:	2408      	movs	r4, #8
 800a40c:	e771      	b.n	800a2f2 <f_open+0x92>
					res = FR_NO_FILE;
 800a40e:	2404      	movs	r4, #4
 800a410:	e76f      	b.n	800a2f2 <f_open+0x92>
	if (!fp) return FR_INVALID_OBJECT;
 800a412:	2409      	movs	r4, #9
 800a414:	e78c      	b.n	800a330 <f_open+0xd0>
 800a416:	4604      	mov	r4, r0
 800a418:	e78a      	b.n	800a330 <f_open+0xd0>
		INIT_BUF(dj);
 800a41a:	2411      	movs	r4, #17
 800a41c:	e788      	b.n	800a330 <f_open+0xd0>
 800a41e:	bf00      	nop
 800a420:	200019a0 	.word	0x200019a0

0800a424 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800a424:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <FATFS_LinkDriverEx+0x40>)
{
 800a426:	b530      	push	{r4, r5, lr}
  if(disk.nbr <= _VOLUMES)
 800a428:	7a5c      	ldrb	r4, [r3, #9]
 800a42a:	2c01      	cmp	r4, #1
 800a42c:	d818      	bhi.n	800a460 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a42e:	7a5d      	ldrb	r5, [r3, #9]
 800a430:	2400      	movs	r4, #0
 800a432:	b2ed      	uxtb	r5, r5
 800a434:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 800a436:	7a5d      	ldrb	r5, [r3, #9]
 800a438:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a43c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800a43e:	7a58      	ldrb	r0, [r3, #9]
 800a440:	4418      	add	r0, r3
 800a442:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 800a444:	7a5a      	ldrb	r2, [r3, #9]
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 800a44a:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800a44c:	b2c0      	uxtb	r0, r0
 800a44e:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800a450:	233a      	movs	r3, #58	; 0x3a
    path[2] = '/';
    path[3] = 0;
 800a452:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 800a454:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800a456:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a458:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 800a45a:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800a45c:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }
  
  return ret;
}
 800a45e:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800a460:	2001      	movs	r0, #1
 800a462:	e7fc      	b.n	800a45e <FATFS_LinkDriverEx+0x3a>
 800a464:	200019c0 	.word	0x200019c0

0800a468 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800a468:	2200      	movs	r2, #0
 800a46a:	f7ff bfdb 	b.w	800a424 <FATFS_LinkDriverEx>
	...

0800a470 <SD_initialize>:
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 800a470:	2301      	movs	r3, #1
{
 800a472:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a474:	4c05      	ldr	r4, [pc, #20]	; (800a48c <SD_initialize+0x1c>)
 800a476:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800a478:	f7f8 fdf6 	bl	8003068 <BSP_SD_Init>
 800a47c:	4623      	mov	r3, r4
 800a47e:	b918      	cbnz	r0, 800a488 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 800a480:	7822      	ldrb	r2, [r4, #0]
 800a482:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a486:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800a488:	7818      	ldrb	r0, [r3, #0]
}
 800a48a:	bd10      	pop	{r4, pc}
 800a48c:	200009d5 	.word	0x200009d5

0800a490 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  Stat = STA_NOINIT;
 800a490:	2301      	movs	r3, #1
{
 800a492:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a494:	4c05      	ldr	r4, [pc, #20]	; (800a4ac <SD_status+0x1c>)
 800a496:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 800a498:	f7f8 fe16 	bl	80030c8 <BSP_SD_GetStatus>
 800a49c:	4623      	mov	r3, r4
 800a49e:	b918      	cbnz	r0, 800a4a8 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 800a4a0:	7822      	ldrb	r2, [r4, #0]
 800a4a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a4a6:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 800a4a8:	7818      	ldrb	r0, [r3, #0]
}
 800a4aa:	bd10      	pop	{r4, pc}
 800a4ac:	200009d5 	.word	0x200009d5

0800a4b0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a4b0:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800a4b2:	9301      	str	r3, [sp, #4]
 800a4b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4b8:	0252      	lsls	r2, r2, #9
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f7f8 fcca 	bl	8002e58 <BSP_SD_ReadBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800a4c4:	3000      	adds	r0, #0
 800a4c6:	bf18      	it	ne
 800a4c8:	2001      	movne	r0, #1
 800a4ca:	b003      	add	sp, #12
 800a4cc:	f85d fb04 	ldr.w	pc, [sp], #4

0800a4d0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a4d0:	b507      	push	{r0, r1, r2, lr}
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4d8:	0252      	lsls	r2, r2, #9
 800a4da:	4608      	mov	r0, r1
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f7f8 fccc 	bl	8002e7c <BSP_SD_WriteBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 800a4e4:	3000      	adds	r0, #0
 800a4e6:	bf18      	it	ne
 800a4e8:	2001      	movne	r0, #1
 800a4ea:	b003      	add	sp, #12
 800a4ec:	f85d fb04 	ldr.w	pc, [sp], #4

0800a4f0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a4f0:	4b12      	ldr	r3, [pc, #72]	; (800a53c <SD_ioctl+0x4c>)
{
 800a4f2:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a4f4:	781b      	ldrb	r3, [r3, #0]
{
 800a4f6:	b096      	sub	sp, #88	; 0x58
 800a4f8:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a4fa:	07db      	lsls	r3, r3, #31
 800a4fc:	d41c      	bmi.n	800a538 <SD_ioctl+0x48>
  
  switch (cmd)
 800a4fe:	2903      	cmp	r1, #3
 800a500:	d803      	bhi.n	800a50a <SD_ioctl+0x1a>
 800a502:	e8df f001 	tbb	[pc, r1]
 800a506:	050e      	.short	0x050e
 800a508:	1410      	.short	0x1410
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 800a50a:	2004      	movs	r0, #4
  }
  
  return res;
}
 800a50c:	b016      	add	sp, #88	; 0x58
 800a50e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a510:	4668      	mov	r0, sp
 800a512:	f7f8 fddf 	bl	80030d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 800a516:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a51a:	0a5b      	lsrs	r3, r3, #9
 800a51c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a520:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 800a522:	2000      	movs	r0, #0
 800a524:	e7f2      	b.n	800a50c <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 800a526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a52a:	8013      	strh	r3, [r2, #0]
 800a52c:	e7f9      	b.n	800a522 <SD_ioctl+0x32>
    *(DWORD*)buff = BLOCK_SIZE;
 800a52e:	f44f 7300 	mov.w	r3, #512	; 0x200
  DRESULT res = RES_ERROR;
 800a532:	2001      	movs	r0, #1
    *(DWORD*)buff = BLOCK_SIZE;
 800a534:	6013      	str	r3, [r2, #0]
    break;
 800a536:	e7e9      	b.n	800a50c <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a538:	2003      	movs	r0, #3
 800a53a:	e7e7      	b.n	800a50c <SD_ioctl+0x1c>
 800a53c:	200009d5 	.word	0x200009d5

0800a540 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 800a540:	f003 be72 	b.w	800e228 <malloc>

0800a544 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	free(mblock);	/* Discard the memory block with POSIX API */
 800a544:	f003 be78 	b.w	800e238 <free>

0800a548 <write_ADIF_Log>:


char log_line[180];


		void write_ADIF_Log(void) {
 800a548:	b510      	push	{r4, lr}
 800a54a:	b086      	sub	sp, #24

			// sprintf(log_line,"<call:7>%7s<gridsquare:4>%4s<mode:3>FT8<qso_date:8>%8s <time_on:6>%6s<band:3>%3s <freq:9>%9s<station_callsign:7>%7s<my_gridsquare:4>%4s <eor>",
					// Answer_CQ[index].call, Answer_CQ[index].locator,  log_rtc_date_string, log_rtc_time_string, band,display_frequency, Station_Call, Locator);
			// Target_Call, Target_Locator,  log_rtc_date_string, log_rtc_time_string, band,display_frequency, Station_Call, Locator);

			 sprintf(log_line,"<call:7>%7s<gridsquare:4>%4s<mode:3>FT8<qso_date:8>%8s <time_on:6>%6s<freq:9>%9s<station_callsign:7>%7s<my_gridsquare:4>%4s <eor>",
 800a54c:	4c0d      	ldr	r4, [pc, #52]	; (800a584 <write_ADIF_Log+0x3c>)
			make_Real_Time();
 800a54e:	f000 f9fb 	bl	800a948 <make_Real_Time>
			make_Real_Date();
 800a552:	f000 fa25 	bl	800a9a0 <make_Real_Date>
			 sprintf(log_line,"<call:7>%7s<gridsquare:4>%4s<mode:3>FT8<qso_date:8>%8s <time_on:6>%6s<freq:9>%9s<station_callsign:7>%7s<my_gridsquare:4>%4s <eor>",
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <write_ADIF_Log+0x40>)
 800a558:	4a0c      	ldr	r2, [pc, #48]	; (800a58c <write_ADIF_Log+0x44>)
 800a55a:	4620      	mov	r0, r4
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <write_ADIF_Log+0x48>)
 800a560:	490c      	ldr	r1, [pc, #48]	; (800a594 <write_ADIF_Log+0x4c>)
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <write_ADIF_Log+0x50>)
 800a566:	9302      	str	r3, [sp, #8]
 800a568:	4b0c      	ldr	r3, [pc, #48]	; (800a59c <write_ADIF_Log+0x54>)
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <write_ADIF_Log+0x58>)
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <write_ADIF_Log+0x5c>)
 800a572:	f003 ff3b 	bl	800e3ec <siprintf>
			 Target_Call, Target_Locator,  log_rtc_date_string, log_rtc_time_string, display_frequency, Station_Call, Locator);


			  Write_Log_Data(log_line);
 800a576:	4620      	mov	r0, r4
	}
 800a578:	b006      	add	sp, #24
 800a57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			  Write_Log_Data(log_line);
 800a57e:	f003 b9d7 	b.w	800d930 <Write_Log_Data>
 800a582:	bf00      	nop
 800a584:	2003a67d 	.word	0x2003a67d
 800a588:	2003a731 	.word	0x2003a731
 800a58c:	2003a645 	.word	0x2003a645
 800a590:	2003a7f0 	.word	0x2003a7f0
 800a594:	080552ef 	.word	0x080552ef
 800a598:	20000fe8 	.word	0x20000fe8
 800a59c:	2003a736 	.word	0x2003a736
 800a5a0:	2003a654 	.word	0x2003a654
 800a5a4:	2003a82f 	.word	0x2003a82f

0800a5a8 <Set_HP_Gain>:
{

	if (HP_gain > HP_GAIN_MAX) 		HP_gain = HP_GAIN_MAX;
		if (HP_gain < HP_GAIN_MIN)			HP_gain = HP_GAIN_MIN;

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001C, HP_gain+64);  //headphone volume
 800a5a8:	f380 0006 	usat	r0, #6, r0
 800a5ac:	211c      	movs	r1, #28
{
 800a5ae:	b510      	push	{r4, lr}
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001C, HP_gain+64);  //headphone volume
 800a5b0:	b284      	uxth	r4, r0
 800a5b2:	2034      	movs	r0, #52	; 0x34
 800a5b4:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	f7f7 fd81 	bl	80020c0 <AUDIO_IO_Write>
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001D, HP_gain+320);  //headphone volume
 800a5be:	f504 72a0 	add.w	r2, r4, #320	; 0x140
 800a5c2:	211d      	movs	r1, #29
 800a5c4:	2034      	movs	r0, #52	; 0x34
 800a5c6:	b292      	uxth	r2, r2
   }   // End of Set_HP_Gain
 800a5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001D, HP_gain+320);  //headphone volume
 800a5cc:	f7f7 bd78 	b.w	80020c0 <AUDIO_IO_Write>

0800a5d0 <Set_PGA_Gain>:
	if (PGA_gain < PGA_GAIN_MIN)
		PGA_gain = PGA_GAIN_MIN;
	if (PGA_gain > PGA_GAIN_MAX)
		PGA_gain = PGA_GAIN_MAX;

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x0018, PGA_gain);
 800a5d0:	f380 0005 	usat	r0, #5, r0
 800a5d4:	2118      	movs	r1, #24
{
 800a5d6:	b510      	push	{r4, lr}
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x0018, PGA_gain);
 800a5d8:	b284      	uxth	r4, r0
 800a5da:	2034      	movs	r0, #52	; 0x34
 800a5dc:	4622      	mov	r2, r4
 800a5de:	f7f7 fd6f 	bl	80020c0 <AUDIO_IO_Write>
	HAL_Delay(1);
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	f003 fa32 	bl	800da4c <HAL_Delay>

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x001A, PGA_gain+256);
 800a5e8:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800a5ec:	2034      	movs	r0, #52	; 0x34
 800a5ee:	211a      	movs	r1, #26
 800a5f0:	b292      	uxth	r2, r2
 800a5f2:	f7f7 fd65 	bl	80020c0 <AUDIO_IO_Write>
	HAL_Delay(1);
 800a5f6:	2001      	movs	r0, #1
}   // End of Set_PGA_gain
 800a5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1);
 800a5fc:	f003 ba26 	b.w	800da4c <HAL_Delay>

0800a600 <Set_ADC_DVC>:

}   // End of Set_ADC_DVC
*/

void Set_ADC_DVC(int ADC_gain)  // gain in 0.375 dB steps
{
 800a600:	2801      	cmp	r0, #1
		ADC_gain = ADC_GAIN_MAX;
	if (ADC_gain < ADC_GAIN_MIN)
		ADC_gain = ADC_GAIN_MIN;


	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x400, ADC_gain);
 800a602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a606:	bfb8      	it	lt
 800a608:	2001      	movlt	r0, #1
 800a60a:	28ff      	cmp	r0, #255	; 0xff
 800a60c:	bfa8      	it	ge
 800a60e:	20ff      	movge	r0, #255	; 0xff
{
 800a610:	b510      	push	{r4, lr}
	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x400, ADC_gain);
 800a612:	b284      	uxth	r4, r0
 800a614:	2034      	movs	r0, #52	; 0x34
 800a616:	4622      	mov	r2, r4
 800a618:	f7f7 fd52 	bl	80020c0 <AUDIO_IO_Write>
	HAL_Delay(1);
 800a61c:	2001      	movs	r0, #1
 800a61e:	f003 fa15 	bl	800da4c <HAL_Delay>

	AUDIO_IO_Write(AUDIO_I2C_ADDRESS, 0x401, ADC_gain+256);
 800a622:	f504 7280 	add.w	r2, r4, #256	; 0x100
 800a626:	2034      	movs	r0, #52	; 0x34
 800a628:	f240 4101 	movw	r1, #1025	; 0x401
 800a62c:	b292      	uxth	r2, r2
 800a62e:	f7f7 fd47 	bl	80020c0 <AUDIO_IO_Write>
	HAL_Delay(1);
 800a632:	2001      	movs	r0, #1


}   // End of Set_ADC_DVC
 800a634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1);
 800a638:	f003 ba08 	b.w	800da4c <HAL_Delay>

0800a63c <bcd_to_decimal>:

};

unsigned char bcd_to_decimal(unsigned char d)
{
         return ((d & 0x0F) + (((d & 0xF0) >> 4) * 10));
 800a63c:	0903      	lsrs	r3, r0, #4
 800a63e:	f000 000f 	and.w	r0, r0, #15
 800a642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a646:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800a64a:	b2c0      	uxtb	r0, r0
 800a64c:	4770      	bx	lr

0800a64e <decimal_to_bcd>:


unsigned char decimal_to_bcd(unsigned char d)
{
         return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
 800a64e:	230a      	movs	r3, #10
 800a650:	fbb0 f2f3 	udiv	r2, r0, r3
 800a654:	fb03 0012 	mls	r0, r3, r2, r0
 800a658:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 800a65c:	b2c0      	uxtb	r0, r0
 800a65e:	4770      	bx	lr

0800a660 <DS3231_Read>:


unsigned char DS3231_Read(unsigned char address)
{
	return EXT_I2C_Read(DS3231_Read_addr, address);
 800a660:	4601      	mov	r1, r0
 800a662:	20d1      	movs	r0, #209	; 0xd1
 800a664:	f7f7 bd9e 	b.w	80021a4 <EXT_I2C_Read>

0800a668 <DS3231_Write>:
}


void DS3231_Write(unsigned char address, unsigned char value)
{
	EXT_I2C_Write(DS3231_Write_addr, address, value);
 800a668:	460a      	mov	r2, r1
 800a66a:	4601      	mov	r1, r0
 800a66c:	20d0      	movs	r0, #208	; 0xd0
 800a66e:	f7f7 bd79 	b.w	8002164 <EXT_I2C_Write>

0800a672 <DS3231_init>:
}


void DS3231_init(void)
{
 800a672:	b508      	push	{r3, lr}

         DS3231_Write(controlREG, 0x00);
 800a674:	2100      	movs	r1, #0
 800a676:	200e      	movs	r0, #14
 800a678:	f7ff fff6 	bl	800a668 <DS3231_Write>
         DS3231_Write(statusREG, 0x08);
 800a67c:	2108      	movs	r1, #8
 800a67e:	200f      	movs	r0, #15

}
 800a680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
         DS3231_Write(statusREG, 0x08);
 800a684:	f7ff bff0 	b.w	800a668 <DS3231_Write>

0800a688 <getTime>:


void getTime(unsigned char *p3, unsigned char *p2, unsigned char *p1, short *p0, short hour_format)
{
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	4617      	mov	r7, r2
 800a68c:	4604      	mov	r4, r0
         unsigned char tmp = 0;

         *p1 = DS3231_Read(secondREG);
 800a68e:	2000      	movs	r0, #0
{
 800a690:	460e      	mov	r6, r1
 800a692:	461d      	mov	r5, r3
         *p1 = DS3231_Read(secondREG);
 800a694:	f7ff ffe4 	bl	800a660 <DS3231_Read>
             *p1 = bcd_to_decimal(*p1);
 800a698:	f7ff ffd0 	bl	800a63c <bcd_to_decimal>
 800a69c:	7038      	strb	r0, [r7, #0]

        *p2 = DS3231_Read(minuteREG);
 800a69e:	2001      	movs	r0, #1
 800a6a0:	f7ff ffde 	bl	800a660 <DS3231_Read>
        *p2 =  bcd_to_decimal(*p2);
 800a6a4:	f7ff ffca 	bl	800a63c <bcd_to_decimal>

         switch(hour_format)
 800a6a8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
        *p2 =  bcd_to_decimal(*p2);
 800a6ac:	7030      	strb	r0, [r6, #0]
         {
                  case 1:
                  {
                           tmp = DS3231_Read(hourREG);
 800a6ae:	2002      	movs	r0, #2
         switch(hour_format)
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d10d      	bne.n	800a6d0 <getTime+0x48>
                           tmp = DS3231_Read(hourREG);
 800a6b4:	f7ff ffd4 	bl	800a660 <DS3231_Read>
                           tmp &= 0x20;
                           *p0 = (short)(tmp >> 5);
 800a6b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800a6bc:	8028      	strh	r0, [r5, #0]
                           *p3 = (0x1F & DS3231_Read(hourREG));
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f7ff ffce 	bl	800a660 <DS3231_Read>
                           *p3 = bcd_to_decimal(*p3);
 800a6c4:	f000 001f 	and.w	r0, r0, #31
                           break;
                  }
                  default:
                  {
                           *p3 = (0x3F & DS3231_Read(hourREG));
                           *p3 = bcd_to_decimal(*p3);
 800a6c8:	f7ff ffb8 	bl	800a63c <bcd_to_decimal>
 800a6cc:	7020      	strb	r0, [r4, #0]
                           break;
                  }
         }
}
 800a6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                           *p3 = (0x3F & DS3231_Read(hourREG));
 800a6d0:	f7ff ffc6 	bl	800a660 <DS3231_Read>
                           *p3 = bcd_to_decimal(*p3);
 800a6d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a6d8:	e7f6      	b.n	800a6c8 <getTime+0x40>

0800a6da <getDate>:


void getDate(unsigned char *p4, unsigned char *p3, unsigned char *p2, unsigned char *p1)
{
 800a6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6dc:	461f      	mov	r7, r3
 800a6de:	4604      	mov	r4, r0
         *p1 = DS3231_Read(yearREG);
 800a6e0:	2006      	movs	r0, #6
{
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	4616      	mov	r6, r2
         *p1 = DS3231_Read(yearREG);
 800a6e6:	f7ff ffbb 	bl	800a660 <DS3231_Read>
         *p1 = bcd_to_decimal(*p1);
 800a6ea:	f7ff ffa7 	bl	800a63c <bcd_to_decimal>
 800a6ee:	7038      	strb	r0, [r7, #0]
         *p2 = (0x1F & DS3231_Read(monthREG));
 800a6f0:	2005      	movs	r0, #5
 800a6f2:	f7ff ffb5 	bl	800a660 <DS3231_Read>
         *p2 = bcd_to_decimal(*p2);
 800a6f6:	f000 001f 	and.w	r0, r0, #31
 800a6fa:	f7ff ff9f 	bl	800a63c <bcd_to_decimal>
 800a6fe:	7030      	strb	r0, [r6, #0]
         *p3 = (0x3F & DS3231_Read(dateREG));
 800a700:	2004      	movs	r0, #4
 800a702:	f7ff ffad 	bl	800a660 <DS3231_Read>
         *p3 = bcd_to_decimal(*p3);
 800a706:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a70a:	f7ff ff97 	bl	800a63c <bcd_to_decimal>
 800a70e:	7028      	strb	r0, [r5, #0]
         *p4 = (0x07 & DS3231_Read(dayREG));
 800a710:	2003      	movs	r0, #3
 800a712:	f7ff ffa5 	bl	800a660 <DS3231_Read>
         *p4 = bcd_to_decimal(*p4);
 800a716:	f000 0007 	and.w	r0, r0, #7
 800a71a:	f7ff ff8f 	bl	800a63c <bcd_to_decimal>
 800a71e:	7020      	strb	r0, [r4, #0]
}
 800a720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a722 <RTC_setTime>:


void RTC_setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, short am_pm_state, short hour_format)
{
 800a722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a724:	460f      	mov	r7, r1
 800a726:	4606      	mov	r6, r0
         unsigned char tmp = 0;
         DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 800a728:	4610      	mov	r0, r2
{
 800a72a:	461c      	mov	r4, r3
         DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 800a72c:	f7ff ff8f 	bl	800a64e <decimal_to_bcd>
 800a730:	4601      	mov	r1, r0
 800a732:	2000      	movs	r0, #0
{
 800a734:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
         DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
 800a738:	f7ff ff96 	bl	800a668 <DS3231_Write>
         DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
 800a73c:	4638      	mov	r0, r7
 800a73e:	f7ff ff86 	bl	800a64e <decimal_to_bcd>
 800a742:	4601      	mov	r1, r0
 800a744:	2001      	movs	r0, #1
 800a746:	f7ff ff8f 	bl	800a668 <DS3231_Write>
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ff7f 	bl	800a64e <decimal_to_bcd>
         switch(hour_format)
 800a750:	2d01      	cmp	r5, #1
 800a752:	d10b      	bne.n	800a76c <RTC_setTime+0x4a>
         {
                  case 1:
                  {
                           switch(am_pm_state)
 800a754:	2c01      	cmp	r4, #1
                                    {
                                             tmp = 0x40;
                                             break;
                                    }
                           }
                           DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 800a756:	f000 001f 	and.w	r0, r0, #31
                                             tmp = 0x40;
 800a75a:	bf0c      	ite	eq
 800a75c:	2160      	moveq	r1, #96	; 0x60
 800a75e:	2140      	movne	r1, #64	; 0x40
                           DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
 800a760:	4301      	orrs	r1, r0
                           break;
                  }

                  default:
                  {
                           DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 800a762:	2002      	movs	r0, #2
                           break;
                  }
         }
}
 800a764:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                           DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
 800a768:	f7ff bf7e 	b.w	800a668 <DS3231_Write>
 800a76c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 800a770:	e7f7      	b.n	800a762 <RTC_setTime+0x40>

0800a772 <RTC_setDate>:


void RTC_setDate(unsigned char daySet, unsigned char dateSet, unsigned char monthSet, unsigned char yearSet)
{
 800a772:	b570      	push	{r4, r5, r6, lr}
 800a774:	460e      	mov	r6, r1
 800a776:	4615      	mov	r5, r2
 800a778:	461c      	mov	r4, r3
         DS3231_Write(dayREG, (decimal_to_bcd(daySet)));
 800a77a:	f7ff ff68 	bl	800a64e <decimal_to_bcd>
 800a77e:	4601      	mov	r1, r0
 800a780:	2003      	movs	r0, #3
 800a782:	f7ff ff71 	bl	800a668 <DS3231_Write>
         DS3231_Write(dateREG, (decimal_to_bcd(dateSet)));
 800a786:	4630      	mov	r0, r6
 800a788:	f7ff ff61 	bl	800a64e <decimal_to_bcd>
 800a78c:	4601      	mov	r1, r0
 800a78e:	2004      	movs	r0, #4
 800a790:	f7ff ff6a 	bl	800a668 <DS3231_Write>
         DS3231_Write(monthREG, (decimal_to_bcd(monthSet)));
 800a794:	4628      	mov	r0, r5
 800a796:	f7ff ff5a 	bl	800a64e <decimal_to_bcd>
 800a79a:	4601      	mov	r1, r0
 800a79c:	2005      	movs	r0, #5
 800a79e:	f7ff ff63 	bl	800a668 <DS3231_Write>
         DS3231_Write(yearREG, (decimal_to_bcd(yearSet)));
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7ff ff53 	bl	800a64e <decimal_to_bcd>
 800a7a8:	4601      	mov	r1, r0
 800a7aa:	2006      	movs	r0, #6
}
 800a7ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         DS3231_Write(yearREG, (decimal_to_bcd(yearSet)));
 800a7b0:	f7ff bf5a 	b.w	800a668 <DS3231_Write>

0800a7b4 <display_RealTime>:
}

*/


void display_RealTime(int x, int y) {
 800a7b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	 //fetch time from RTC
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a7b8:	4c0d      	ldr	r4, [pc, #52]	; (800a7f0 <display_RealTime+0x3c>)
 800a7ba:	2500      	movs	r5, #0
 800a7bc:	4f0d      	ldr	r7, [pc, #52]	; (800a7f4 <display_RealTime+0x40>)
void display_RealTime(int x, int y) {
 800a7be:	4680      	mov	r8, r0
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a7c0:	4e0d      	ldr	r6, [pc, #52]	; (800a7f8 <display_RealTime+0x44>)
void display_RealTime(int x, int y) {
 800a7c2:	4689      	mov	r9, r1
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	9500      	str	r5, [sp, #0]
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <display_RealTime+0x48>)
 800a7ce:	f7ff ff5b 	bl	800a688 <getTime>
	show_UTC_time(x, y,rtc_hour,rtc_minute,rtc_second, 0);
 800a7d2:	7821      	ldrb	r1, [r4, #0]
 800a7d4:	783b      	ldrb	r3, [r7, #0]
 800a7d6:	fa1f f088 	uxth.w	r0, r8
 800a7da:	9100      	str	r1, [sp, #0]
 800a7dc:	fa1f f189 	uxth.w	r1, r9
 800a7e0:	7832      	ldrb	r2, [r6, #0]
 800a7e2:	9501      	str	r5, [sp, #4]
 800a7e4:	f000 fa3e 	bl	800ac64 <show_UTC_time>
}
 800a7e8:	b003      	add	sp, #12
 800a7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	bf00      	nop
 800a7f0:	2003a674 	.word	0x2003a674
 800a7f4:	2003a67c 	.word	0x2003a67c
 800a7f8:	2003a64c 	.word	0x2003a64c
 800a7fc:	2003a804 	.word	0x2003a804

0800a800 <load_RealTime>:

void load_RealTime(void) {
 800a800:	b573      	push	{r0, r1, r4, r5, r6, lr}
	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a802:	2300      	movs	r3, #0
 800a804:	4c0a      	ldr	r4, [pc, #40]	; (800a830 <load_RealTime+0x30>)
 800a806:	4d0b      	ldr	r5, [pc, #44]	; (800a834 <load_RealTime+0x34>)
 800a808:	4e0b      	ldr	r6, [pc, #44]	; (800a838 <load_RealTime+0x38>)
 800a80a:	4622      	mov	r2, r4
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	4629      	mov	r1, r5
 800a810:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <load_RealTime+0x3c>)
 800a812:	4630      	mov	r0, r6
 800a814:	f7ff ff38 	bl	800a688 <getTime>
	s_RTC_Data[3].data = rtc_hour;
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <load_RealTime+0x40>)
 800a81a:	7832      	ldrb	r2, [r6, #0]
 800a81c:	779a      	strb	r2, [r3, #30]
	s_RTC_Data[4].data = rtc_minute;
 800a81e:	782a      	ldrb	r2, [r5, #0]
 800a820:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	s_RTC_Data[5].data = rtc_second;
 800a824:	7822      	ldrb	r2, [r4, #0]
 800a826:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800a82a:	b002      	add	sp, #8
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	bf00      	nop
 800a830:	2003a674 	.word	0x2003a674
 800a834:	2003a67c 	.word	0x2003a67c
 800a838:	2003a64c 	.word	0x2003a64c
 800a83c:	2003a804 	.word	0x2003a804
 800a840:	200009d8 	.word	0x200009d8

0800a844 <display_RTC_TimeEdit>:

void display_RTC_TimeEdit(int x, int y){
 800a844:	b537      	push	{r0, r1, r2, r4, r5, lr}
	show_UTC_time(x, y,s_RTC_Data[3].data,s_RTC_Data[4].data,s_RTC_Data[5].data, 0);
 800a846:	4c07      	ldr	r4, [pc, #28]	; (800a864 <display_RTC_TimeEdit+0x20>)
 800a848:	2500      	movs	r5, #0
 800a84a:	b289      	uxth	r1, r1
 800a84c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800a850:	b280      	uxth	r0, r0
 800a852:	7fa2      	ldrb	r2, [r4, #30]
 800a854:	9501      	str	r5, [sp, #4]
 800a856:	f894 402e 	ldrb.w	r4, [r4, #46]	; 0x2e
 800a85a:	9400      	str	r4, [sp, #0]
 800a85c:	f000 fa02 	bl	800ac64 <show_UTC_time>
}
 800a860:	b003      	add	sp, #12
 800a862:	bd30      	pop	{r4, r5, pc}
 800a864:	200009d8 	.word	0x200009d8

0800a868 <set_RTC_to_TimeEdit>:

void set_RTC_to_TimeEdit(void) {
	RTC_setTime(s_RTC_Data[3].data,s_RTC_Data[4].data,s_RTC_Data[5].data ,0, 0);
 800a868:	4b06      	ldr	r3, [pc, #24]	; (800a884 <set_RTC_to_TimeEdit+0x1c>)
void set_RTC_to_TimeEdit(void) {
 800a86a:	b507      	push	{r0, r1, r2, lr}
	RTC_setTime(s_RTC_Data[3].data,s_RTC_Data[4].data,s_RTC_Data[5].data ,0, 0);
 800a86c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800a870:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
 800a874:	7f98      	ldrb	r0, [r3, #30]
 800a876:	2300      	movs	r3, #0
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	f7ff ff52 	bl	800a722 <RTC_setTime>
}
 800a87e:	b003      	add	sp, #12
 800a880:	f85d fb04 	ldr.w	pc, [sp], #4
 800a884:	200009d8 	.word	0x200009d8

0800a888 <load_RealDate>:

void load_RealDate(void) {
 800a888:	b510      	push	{r4, lr}
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a88a:	4c0d      	ldr	r4, [pc, #52]	; (800a8c0 <load_RealDate+0x38>)
 800a88c:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <load_RealDate+0x3c>)
 800a88e:	4a0e      	ldr	r2, [pc, #56]	; (800a8c8 <load_RealDate+0x40>)
 800a890:	4621      	mov	r1, r4
 800a892:	480e      	ldr	r0, [pc, #56]	; (800a8cc <load_RealDate+0x44>)
 800a894:	f7ff ff21 	bl	800a6da <getDate>
	if(rtc_date > 0) s_RTC_Data[0].data = rtc_date;
 800a898:	7822      	ldrb	r2, [r4, #0]
 800a89a:	4b0d      	ldr	r3, [pc, #52]	; (800a8d0 <load_RealDate+0x48>)
 800a89c:	b15a      	cbz	r2, 800a8b6 <load_RealDate+0x2e>
	else s_RTC_Data[0].data = rtc_date = 1;
 800a89e:	719a      	strb	r2, [r3, #6]

	if(rtc_month > 0) s_RTC_Data[1].data = rtc_month;
 800a8a0:	4a09      	ldr	r2, [pc, #36]	; (800a8c8 <load_RealDate+0x40>)
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	b152      	cbz	r2, 800a8bc <load_RealDate+0x34>
	else s_RTC_Data[1].data = 1;
 800a8a6:	739a      	strb	r2, [r3, #14]

	if (rtc_year >= 24) s_RTC_Data[2].data = rtc_year;
 800a8a8:	4a06      	ldr	r2, [pc, #24]	; (800a8c4 <load_RealDate+0x3c>)
 800a8aa:	7812      	ldrb	r2, [r2, #0]
 800a8ac:	2a17      	cmp	r2, #23
	else
	s_RTC_Data[2].data = 1;
 800a8ae:	bf98      	it	ls
 800a8b0:	2201      	movls	r2, #1
 800a8b2:	759a      	strb	r2, [r3, #22]
}
 800a8b4:	bd10      	pop	{r4, pc}
	else s_RTC_Data[0].data = rtc_date = 1;
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	7022      	strb	r2, [r4, #0]
 800a8ba:	e7f0      	b.n	800a89e <load_RealDate+0x16>
	else s_RTC_Data[1].data = 1;
 800a8bc:	2201      	movs	r2, #1
 800a8be:	e7f2      	b.n	800a8a6 <load_RealDate+0x1e>
 800a8c0:	2003a80c 	.word	0x2003a80c
 800a8c4:	2003a7ff 	.word	0x2003a7ff
 800a8c8:	2003a7ef 	.word	0x2003a7ef
 800a8cc:	2003a834 	.word	0x2003a834
 800a8d0:	200009d8 	.word	0x200009d8

0800a8d4 <display_RTC_DateEdit>:

void display_RTC_DateEdit(int x, int y){
 800a8d4:	b513      	push	{r0, r1, r4, lr}
    show_Real_Date(x,  y,s_RTC_Data[0].data,s_RTC_Data[1].data,s_RTC_Data[2].data);
 800a8d6:	4c05      	ldr	r4, [pc, #20]	; (800a8ec <display_RTC_DateEdit+0x18>)
 800a8d8:	b289      	uxth	r1, r1
 800a8da:	b280      	uxth	r0, r0
 800a8dc:	7ba3      	ldrb	r3, [r4, #14]
 800a8de:	79a2      	ldrb	r2, [r4, #6]
 800a8e0:	7da4      	ldrb	r4, [r4, #22]
 800a8e2:	9400      	str	r4, [sp, #0]
 800a8e4:	f000 f9ee 	bl	800acc4 <show_Real_Date>
}
 800a8e8:	b002      	add	sp, #8
 800a8ea:	bd10      	pop	{r4, pc}
 800a8ec:	200009d8 	.word	0x200009d8

0800a8f0 <set_RTC_to_DateEdit>:

void set_RTC_to_DateEdit(void) {
	RTC_setDate(0,s_RTC_Data[0].data,s_RTC_Data[1].data,s_RTC_Data[2].data);
 800a8f0:	4903      	ldr	r1, [pc, #12]	; (800a900 <set_RTC_to_DateEdit+0x10>)
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	7d8b      	ldrb	r3, [r1, #22]
 800a8f6:	7b8a      	ldrb	r2, [r1, #14]
 800a8f8:	7989      	ldrb	r1, [r1, #6]
 800a8fa:	f7ff bf3a 	b.w	800a772 <RTC_setDate>
 800a8fe:	bf00      	nop
 800a900:	200009d8 	.word	0x200009d8

0800a904 <display_Real_Date>:
}


void display_Real_Date(int x, int y) {
 800a904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a908:	4c0b      	ldr	r4, [pc, #44]	; (800a938 <display_Real_Date+0x34>)
void display_Real_Date(int x, int y) {
 800a90a:	4607      	mov	r7, r0
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a90c:	4e0b      	ldr	r6, [pc, #44]	; (800a93c <display_Real_Date+0x38>)
void display_Real_Date(int x, int y) {
 800a90e:	4688      	mov	r8, r1
	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a910:	4d0b      	ldr	r5, [pc, #44]	; (800a940 <display_Real_Date+0x3c>)
 800a912:	4623      	mov	r3, r4
 800a914:	4632      	mov	r2, r6
 800a916:	480b      	ldr	r0, [pc, #44]	; (800a944 <display_Real_Date+0x40>)
 800a918:	4629      	mov	r1, r5
 800a91a:	f7ff fede 	bl	800a6da <getDate>
    show_Real_Date(x, y,rtc_date,rtc_month,rtc_year);
 800a91e:	7821      	ldrb	r1, [r4, #0]
 800a920:	7833      	ldrb	r3, [r6, #0]
 800a922:	b2b8      	uxth	r0, r7
 800a924:	9100      	str	r1, [sp, #0]
 800a926:	fa1f f188 	uxth.w	r1, r8
 800a92a:	782a      	ldrb	r2, [r5, #0]
 800a92c:	f000 f9ca 	bl	800acc4 <show_Real_Date>
}
 800a930:	b002      	add	sp, #8
 800a932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a936:	bf00      	nop
 800a938:	2003a7ff 	.word	0x2003a7ff
 800a93c:	2003a7ef 	.word	0x2003a7ef
 800a940:	2003a80c 	.word	0x2003a80c
 800a944:	2003a834 	.word	0x2003a834

0800a948 <make_Real_Time>:


void make_Real_Time(void) {
 800a948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	getTime(&rtc_hour, &rtc_minute, &rtc_second, &rtc_ampm,  _24_hour_format );
 800a94a:	4d0f      	ldr	r5, [pc, #60]	; (800a988 <make_Real_Time+0x40>)
 800a94c:	2400      	movs	r4, #0
 800a94e:	4f0f      	ldr	r7, [pc, #60]	; (800a98c <make_Real_Time+0x44>)
 800a950:	4e0f      	ldr	r6, [pc, #60]	; (800a990 <make_Real_Time+0x48>)
 800a952:	462a      	mov	r2, r5
 800a954:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <make_Real_Time+0x4c>)
 800a956:	4639      	mov	r1, r7
 800a958:	4630      	mov	r0, r6
 800a95a:	9400      	str	r4, [sp, #0]
 800a95c:	f7ff fe94 	bl	800a688 <getTime>

	sprintf((char *)log_rtc_time_string,"%2i%2i%2i",rtc_hour,rtc_minute,rtc_second);
 800a960:	7829      	ldrb	r1, [r5, #0]
 800a962:	783b      	ldrb	r3, [r7, #0]
 800a964:	7832      	ldrb	r2, [r6, #0]
 800a966:	9100      	str	r1, [sp, #0]
 800a968:	480b      	ldr	r0, [pc, #44]	; (800a998 <make_Real_Time+0x50>)
 800a96a:	490c      	ldr	r1, [pc, #48]	; (800a99c <make_Real_Time+0x54>)
 800a96c:	f003 fd3e 	bl	800e3ec <siprintf>

	for (int i=0; i<9; i++) if (log_rtc_time_string[i] == 32) log_rtc_time_string[i] = 48;  //blank remover
 800a970:	4623      	mov	r3, r4
 800a972:	4a09      	ldr	r2, [pc, #36]	; (800a998 <make_Real_Time+0x50>)
 800a974:	2130      	movs	r1, #48	; 0x30
 800a976:	5c98      	ldrb	r0, [r3, r2]
 800a978:	2820      	cmp	r0, #32
 800a97a:	bf08      	it	eq
 800a97c:	5499      	strbeq	r1, [r3, r2]
 800a97e:	3301      	adds	r3, #1
 800a980:	2b09      	cmp	r3, #9
 800a982:	d1f8      	bne.n	800a976 <make_Real_Time+0x2e>
	/*
    BSP_LCD_SetFont (&Font16);
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
    BSP_LCD_DisplayStringAt(240, 160, log_rtc_time_string, LEFT_MODE);
    */
}
 800a984:	b003      	add	sp, #12
 800a986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a988:	2003a674 	.word	0x2003a674
 800a98c:	2003a67c 	.word	0x2003a67c
 800a990:	2003a64c 	.word	0x2003a64c
 800a994:	2003a804 	.word	0x2003a804
 800a998:	2003a736 	.word	0x2003a736
 800a99c:	08055377 	.word	0x08055377

0800a9a0 <make_Real_Date>:

void make_Real_Date(void){
 800a9a0:	b573      	push	{r0, r1, r4, r5, r6, lr}

	getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
 800a9a2:	4e0f      	ldr	r6, [pc, #60]	; (800a9e0 <make_Real_Date+0x40>)
 800a9a4:	4c0f      	ldr	r4, [pc, #60]	; (800a9e4 <make_Real_Date+0x44>)
 800a9a6:	4d10      	ldr	r5, [pc, #64]	; (800a9e8 <make_Real_Date+0x48>)
 800a9a8:	4633      	mov	r3, r6
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	480f      	ldr	r0, [pc, #60]	; (800a9ec <make_Real_Date+0x4c>)
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	f7ff fe93 	bl	800a6da <getDate>
	sprintf((char *)log_rtc_date_string,"%2s%2i%2i%2i","20",rtc_year, rtc_month,rtc_date);
 800a9b4:	782a      	ldrb	r2, [r5, #0]
 800a9b6:	7833      	ldrb	r3, [r6, #0]
 800a9b8:	9201      	str	r2, [sp, #4]
 800a9ba:	7822      	ldrb	r2, [r4, #0]
 800a9bc:	490c      	ldr	r1, [pc, #48]	; (800a9f0 <make_Real_Date+0x50>)
 800a9be:	9200      	str	r2, [sp, #0]
 800a9c0:	480c      	ldr	r0, [pc, #48]	; (800a9f4 <make_Real_Date+0x54>)
 800a9c2:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <make_Real_Date+0x58>)
 800a9c4:	f003 fd12 	bl	800e3ec <siprintf>

	for (int i=0; i<9; i++) if (log_rtc_date_string[i] == 32) log_rtc_date_string[i] = 48;  //blank remover
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	4a0a      	ldr	r2, [pc, #40]	; (800a9f4 <make_Real_Date+0x54>)
 800a9cc:	2130      	movs	r1, #48	; 0x30
 800a9ce:	5c98      	ldrb	r0, [r3, r2]
 800a9d0:	2820      	cmp	r0, #32
 800a9d2:	bf08      	it	eq
 800a9d4:	5499      	strbeq	r1, [r3, r2]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	2b09      	cmp	r3, #9
 800a9da:	d1f8      	bne.n	800a9ce <make_Real_Date+0x2e>
    //show_short(300, 120, rtc_month);
    //show_short(360, 120, rtc_year);
    BSP_LCD_DisplayStringAt(240, 140, log_rtc_date_string, LEFT_MODE);
	*/

}
 800a9dc:	b002      	add	sp, #8
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
 800a9e0:	2003a7ff 	.word	0x2003a7ff
 800a9e4:	2003a7ef 	.word	0x2003a7ef
 800a9e8:	2003a80c 	.word	0x2003a80c
 800a9ec:	2003a834 	.word	0x2003a834
 800a9f0:	08055374 	.word	0x08055374
 800a9f4:	2003a654 	.word	0x2003a654
 800a9f8:	08055371 	.word	0x08055371

0800a9fc <make_File_Name>:

void make_File_Name(void){
 800a9fc:	b508      	push	{r3, lr}

	//make_Real_Time();
	make_Real_Date();
 800a9fe:	f7ff ffcf 	bl	800a9a0 <make_Real_Date>

	//getDate(&rtc_dow,&rtc_date , &rtc_month, &rtc_year);
	//sprintf((char *)file_name_string,"%s_%s.adi",log_rtc_date_string,log_rtc_time_string);
	//for (int i=0; i<9; i++) if (log_rtc_date_string[i] == 32) log_rtc_date_string[i] = 48;  //blank remover

	sprintf((char *)file_name_string,"%s.adi",log_rtc_date_string);
 800aa02:	4a08      	ldr	r2, [pc, #32]	; (800aa24 <make_File_Name+0x28>)
 800aa04:	4908      	ldr	r1, [pc, #32]	; (800aa28 <make_File_Name+0x2c>)
 800aa06:	4809      	ldr	r0, [pc, #36]	; (800aa2c <make_File_Name+0x30>)
 800aa08:	f003 fcf0 	bl	800e3ec <siprintf>
	for (int i=0; i<24; i++) if (file_name_string[i] == 32) file_name_string[i] = 48;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4a07      	ldr	r2, [pc, #28]	; (800aa2c <make_File_Name+0x30>)
 800aa10:	2130      	movs	r1, #48	; 0x30
 800aa12:	5c98      	ldrb	r0, [r3, r2]
 800aa14:	2820      	cmp	r0, #32
 800aa16:	bf08      	it	eq
 800aa18:	5499      	strbeq	r1, [r3, r2]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	2b18      	cmp	r3, #24
 800aa1e:	d1f8      	bne.n	800aa12 <make_File_Name+0x16>
    //show_short(300, 120, rtc_month);
    //show_short(360, 120, rtc_year);
    //BSP_LCD_DisplayStringAt(240, 180, file_name_string, LEFT_MODE);


}
 800aa20:	bd08      	pop	{r3, pc}
 800aa22:	bf00      	nop
 800aa24:	2003a654 	.word	0x2003a654
 800aa28:	08055381 	.word	0x08055381
 800aa2c:	2003a743 	.word	0x2003a743

0800aa30 <update_log_display>:
display_message log_messages[4];

extern void set_RTC_to_GPS(void);


void update_log_display(int mode){
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	for (int i = 0; i<max_log_messages -1; i++ ) {
 800aa34:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800aaf4 <update_log_display+0xc4>
void update_log_display(int mode){
 800aa38:	4606      	mov	r6, r0
 800aa3a:	4c29      	ldr	r4, [pc, #164]	; (800aae0 <update_log_display+0xb0>)
	for (int i = 0; i<max_log_messages -1; i++ ) {
 800aa3c:	2700      	movs	r7, #0
 800aa3e:	4645      	mov	r5, r8
 800aa40:	f8d8 3000 	ldr.w	r3, [r8]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	42bb      	cmp	r3, r7
 800aa48:	dc20      	bgt.n	800aa8c <update_log_display+0x5c>
 800aa4a:	4a26      	ldr	r2, [pc, #152]	; (800aae4 <update_log_display+0xb4>)
		strcpy(log_messages[i].message , log_messages[i+1].message);
		log_messages[i].text_color = log_messages[i+1].text_color;
	}

	if (mode == 0) {
 800aa4c:	bb4e      	cbnz	r6, 800aaa2 <update_log_display+0x72>
		strcpy(log_messages[max_log_messages -1].message,current_QSO_receive_message);
 800aa4e:	2118      	movs	r1, #24
 800aa50:	fb01 2303 	mla	r3, r1, r3, r2
 800aa54:	4924      	ldr	r1, [pc, #144]	; (800aae8 <update_log_display+0xb8>)
		log_messages[max_log_messages -1].text_color = 0;
	}

	if (mode == 1) {
		strcpy(log_messages[max_log_messages -1].message,current_QSO_xmit_message);
 800aa56:	4618      	mov	r0, r3
 800aa58:	f003 fd0d 	bl	800e476 <strcpy>
		log_messages[max_log_messages -1].text_color = 1;
 800aa5c:	6146      	str	r6, [r0, #20]
	}

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800aa5e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800aa62:	4e20      	ldr	r6, [pc, #128]	; (800aae4 <update_log_display+0xb4>)
 800aa64:	f7f7 ff12 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 40, 240, 80);
 800aa68:	22f0      	movs	r2, #240	; 0xf0
 800aa6a:	2350      	movs	r3, #80	; 0x50
 800aa6c:	2128      	movs	r1, #40	; 0x28
 800aa6e:	4610      	mov	r0, r2
	BSP_LCD_SetFont (&Font16);
	//BSP_LCD_SetTextColor(LCD_COLOR_GREEN);

	for (int i = 0; i<max_log_messages; i++ ) {
 800aa70:	2428      	movs	r4, #40	; 0x28
 800aa72:	2700      	movs	r7, #0

		if(log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800aa74:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800aaf8 <update_log_display+0xc8>
    BSP_LCD_FillRect(240, 40, 240, 80);
 800aa78:	f7f8 f862 	bl	8002b40 <BSP_LCD_FillRect>
	BSP_LCD_SetFont (&Font16);
 800aa7c:	481b      	ldr	r0, [pc, #108]	; (800aaec <update_log_display+0xbc>)
 800aa7e:	f7f7 ff1d 	bl	80028bc <BSP_LCD_SetFont>
	for (int i = 0; i<max_log_messages; i++ ) {
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	42bb      	cmp	r3, r7
 800aa86:	dc13      	bgt.n	800aab0 <update_log_display+0x80>
		if(log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);

		BSP_LCD_DisplayStringAt(240, 40 + i*20, log_messages[i].message, LEFT_MODE);
	}

}
 800aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(log_messages[i].message , log_messages[i+1].message);
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	f1a4 0018 	sub.w	r0, r4, #24
 800aa92:	f003 fcf0 	bl	800e476 <strcpy>
		log_messages[i].text_color = log_messages[i+1].text_color;
 800aa96:	6963      	ldr	r3, [r4, #20]
		strcpy(log_messages[i].message , log_messages[i+1].message);
 800aa98:	3701      	adds	r7, #1
 800aa9a:	3418      	adds	r4, #24
		log_messages[i].text_color = log_messages[i+1].text_color;
 800aa9c:	f844 3c1c 	str.w	r3, [r4, #-28]
 800aaa0:	e7ce      	b.n	800aa40 <update_log_display+0x10>
	if (mode == 1) {
 800aaa2:	2e01      	cmp	r6, #1
 800aaa4:	d1db      	bne.n	800aa5e <update_log_display+0x2e>
		strcpy(log_messages[max_log_messages -1].message,current_QSO_xmit_message);
 800aaa6:	2118      	movs	r1, #24
 800aaa8:	fb01 2303 	mla	r3, r1, r3, r2
 800aaac:	4910      	ldr	r1, [pc, #64]	; (800aaf0 <update_log_display+0xc0>)
 800aaae:	e7d2      	b.n	800aa56 <update_log_display+0x26>
		if(log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800aab0:	6973      	ldr	r3, [r6, #20]
 800aab2:	b913      	cbnz	r3, 800aaba <update_log_display+0x8a>
 800aab4:	4640      	mov	r0, r8
 800aab6:	f7f7 fee9 	bl	800288c <BSP_LCD_SetTextColor>
		if(log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800aaba:	6973      	ldr	r3, [r6, #20]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d103      	bne.n	800aac8 <update_log_display+0x98>
 800aac0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800aac4:	f7f7 fee2 	bl	800288c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(240, 40 + i*20, log_messages[i].message, LEFT_MODE);
 800aac8:	4621      	mov	r1, r4
 800aaca:	3414      	adds	r4, #20
 800aacc:	4632      	mov	r2, r6
 800aace:	2303      	movs	r3, #3
 800aad0:	20f0      	movs	r0, #240	; 0xf0
	for (int i = 0; i<max_log_messages; i++ ) {
 800aad2:	3701      	adds	r7, #1
		BSP_LCD_DisplayStringAt(240, 40 + i*20, log_messages[i].message, LEFT_MODE);
 800aad4:	f7f7 ff74 	bl	80029c0 <BSP_LCD_DisplayStringAt>
 800aad8:	3618      	adds	r6, #24
 800aada:	b2a4      	uxth	r4, r4
 800aadc:	e7d1      	b.n	800aa82 <update_log_display+0x52>
 800aade:	bf00      	nop
 800aae0:	200417f0 	.word	0x200417f0
 800aae4:	200417d8 	.word	0x200417d8
 800aae8:	2003a88e 	.word	0x2003a88e
 800aaec:	20000030 	.word	0x20000030
 800aaf0:	200417c4 	.word	0x200417c4
 800aaf4:	20000a08 	.word	0x20000a08
 800aaf8:	ffff0000 	.word	0xffff0000

0800aafc <update_Beacon_log_display>:
char current_Beacon_receive_message[20];
char current_Beacon_xmit_message[20];
int max_Beacon_log_messages = 10;
display_message Beacon_log_messages[10];

void update_Beacon_log_display(int mode){
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	for (int i = 0; i<max_Beacon_log_messages -1; i++ ) {
 800ab00:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800abc0 <update_Beacon_log_display+0xc4>
void update_Beacon_log_display(int mode){
 800ab04:	4606      	mov	r6, r0
 800ab06:	4c29      	ldr	r4, [pc, #164]	; (800abac <update_Beacon_log_display+0xb0>)
	for (int i = 0; i<max_Beacon_log_messages -1; i++ ) {
 800ab08:	2700      	movs	r7, #0
 800ab0a:	4645      	mov	r5, r8
 800ab0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	42bb      	cmp	r3, r7
 800ab14:	dc20      	bgt.n	800ab58 <update_Beacon_log_display+0x5c>
 800ab16:	4a26      	ldr	r2, [pc, #152]	; (800abb0 <update_Beacon_log_display+0xb4>)
		strcpy(Beacon_log_messages[i].message , Beacon_log_messages[i+1].message);
		Beacon_log_messages[i].text_color = Beacon_log_messages[i+1].text_color;
	}


	if (mode == 0) {
 800ab18:	bb4e      	cbnz	r6, 800ab6e <update_Beacon_log_display+0x72>
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_receive_message);
 800ab1a:	2118      	movs	r1, #24
 800ab1c:	fb01 2303 	mla	r3, r1, r3, r2
 800ab20:	4924      	ldr	r1, [pc, #144]	; (800abb4 <update_Beacon_log_display+0xb8>)
		Beacon_log_messages[max_Beacon_log_messages -1].text_color = 0;
	}

	if (mode == 1) {
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_xmit_message);
 800ab22:	4618      	mov	r0, r3
 800ab24:	f003 fca7 	bl	800e476 <strcpy>
		Beacon_log_messages[max_Beacon_log_messages -1].text_color = 1;
 800ab28:	6146      	str	r6, [r0, #20]
	}


    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ab2a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ab2e:	4e20      	ldr	r6, [pc, #128]	; (800abb0 <update_Beacon_log_display+0xb4>)
 800ab30:	f7f7 feac 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 40, 240, 200);
 800ab34:	22f0      	movs	r2, #240	; 0xf0
 800ab36:	23c8      	movs	r3, #200	; 0xc8
 800ab38:	2128      	movs	r1, #40	; 0x28
 800ab3a:	4610      	mov	r0, r2
	BSP_LCD_SetFont (&Font16);

	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800ab3c:	2428      	movs	r4, #40	; 0x28
 800ab3e:	2700      	movs	r7, #0

		if(Beacon_log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800ab40:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800abc4 <update_Beacon_log_display+0xc8>
    BSP_LCD_FillRect(240, 40, 240, 200);
 800ab44:	f7f7 fffc 	bl	8002b40 <BSP_LCD_FillRect>
	BSP_LCD_SetFont (&Font16);
 800ab48:	481b      	ldr	r0, [pc, #108]	; (800abb8 <update_Beacon_log_display+0xbc>)
 800ab4a:	f7f7 feb7 	bl	80028bc <BSP_LCD_SetFont>
	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800ab4e:	686b      	ldr	r3, [r5, #4]
 800ab50:	42bb      	cmp	r3, r7
 800ab52:	dc13      	bgt.n	800ab7c <update_Beacon_log_display+0x80>
		if(Beacon_log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);

		BSP_LCD_DisplayStringAt(240, 40 + i*20, Beacon_log_messages[i].message, LEFT_MODE);
	}

}
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(Beacon_log_messages[i].message , Beacon_log_messages[i+1].message);
 800ab58:	4621      	mov	r1, r4
 800ab5a:	f1a4 0018 	sub.w	r0, r4, #24
 800ab5e:	f003 fc8a 	bl	800e476 <strcpy>
		Beacon_log_messages[i].text_color = Beacon_log_messages[i+1].text_color;
 800ab62:	6963      	ldr	r3, [r4, #20]
		strcpy(Beacon_log_messages[i].message , Beacon_log_messages[i+1].message);
 800ab64:	3701      	adds	r7, #1
 800ab66:	3418      	adds	r4, #24
		Beacon_log_messages[i].text_color = Beacon_log_messages[i+1].text_color;
 800ab68:	f844 3c1c 	str.w	r3, [r4, #-28]
 800ab6c:	e7ce      	b.n	800ab0c <update_Beacon_log_display+0x10>
	if (mode == 1) {
 800ab6e:	2e01      	cmp	r6, #1
 800ab70:	d1db      	bne.n	800ab2a <update_Beacon_log_display+0x2e>
		strcpy(Beacon_log_messages[max_Beacon_log_messages -1].message,current_Beacon_xmit_message);
 800ab72:	2118      	movs	r1, #24
 800ab74:	fb01 2303 	mla	r3, r1, r3, r2
 800ab78:	4910      	ldr	r1, [pc, #64]	; (800abbc <update_Beacon_log_display+0xc0>)
 800ab7a:	e7d2      	b.n	800ab22 <update_Beacon_log_display+0x26>
		if(Beacon_log_messages[i].text_color == 0 )  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800ab7c:	6973      	ldr	r3, [r6, #20]
 800ab7e:	b913      	cbnz	r3, 800ab86 <update_Beacon_log_display+0x8a>
 800ab80:	4640      	mov	r0, r8
 800ab82:	f7f7 fe83 	bl	800288c <BSP_LCD_SetTextColor>
		if(Beacon_log_messages[i].text_color == 1 )  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ab86:	6973      	ldr	r3, [r6, #20]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d103      	bne.n	800ab94 <update_Beacon_log_display+0x98>
 800ab8c:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800ab90:	f7f7 fe7c 	bl	800288c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(240, 40 + i*20, Beacon_log_messages[i].message, LEFT_MODE);
 800ab94:	4621      	mov	r1, r4
 800ab96:	3414      	adds	r4, #20
 800ab98:	4632      	mov	r2, r6
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	20f0      	movs	r0, #240	; 0xf0
	for (int i = 0; i<max_Beacon_log_messages; i++ ) {
 800ab9e:	3701      	adds	r7, #1
		BSP_LCD_DisplayStringAt(240, 40 + i*20, Beacon_log_messages[i].message, LEFT_MODE);
 800aba0:	f7f7 ff0e 	bl	80029c0 <BSP_LCD_DisplayStringAt>
 800aba4:	3618      	adds	r6, #24
 800aba6:	b2a4      	uxth	r4, r4
 800aba8:	e7d1      	b.n	800ab4e <update_Beacon_log_display+0x52>
 800abaa:	bf00      	nop
 800abac:	200416ec 	.word	0x200416ec
 800abb0:	200416d4 	.word	0x200416d4
 800abb4:	2003a878 	.word	0x2003a878
 800abb8:	20000030 	.word	0x20000030
 800abbc:	200416c0 	.word	0x200416c0
 800abc0:	20000a08 	.word	0x20000a08
 800abc4:	ffff0000 	.word	0xffff0000

0800abc8 <show_wide>:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
    BSP_LCD_DisplayStringAt(x, y, string, LEFT_MODE);
}
*/

void show_wide(uint16_t x, uint16_t y,int variable) {
 800abc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abca:	4604      	mov	r4, r0
 800abcc:	460d      	mov	r5, r1
	uint8_t string[7];   // print format stuff
    sprintf(string,"%6i",variable);
 800abce:	4668      	mov	r0, sp
 800abd0:	4908      	ldr	r1, [pc, #32]	; (800abf4 <show_wide+0x2c>)
 800abd2:	f003 fc0b 	bl	800e3ec <siprintf>
    BSP_LCD_SetFont (&Font16);
 800abd6:	4808      	ldr	r0, [pc, #32]	; (800abf8 <show_wide+0x30>)
 800abd8:	f7f7 fe70 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800abdc:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800abe0:	f7f7 fe54 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, string, LEFT_MODE);
 800abe4:	2303      	movs	r3, #3
 800abe6:	466a      	mov	r2, sp
 800abe8:	4629      	mov	r1, r5
 800abea:	4620      	mov	r0, r4
 800abec:	f7f7 fee8 	bl	80029c0 <BSP_LCD_DisplayStringAt>
}
 800abf0:	b003      	add	sp, #12
 800abf2:	bd30      	pop	{r4, r5, pc}
 800abf4:	080553ad 	.word	0x080553ad
 800abf8:	20000030 	.word	0x20000030

0800abfc <show_variable>:


void show_variable(uint16_t x, uint16_t y,int variable) {
 800abfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abfe:	4604      	mov	r4, r0
 800ac00:	460d      	mov	r5, r1
	uint8_t string[5];   // print format stuff
    sprintf(string,"%4i",variable);
 800ac02:	4668      	mov	r0, sp
 800ac04:	4908      	ldr	r1, [pc, #32]	; (800ac28 <show_variable+0x2c>)
 800ac06:	f003 fbf1 	bl	800e3ec <siprintf>
    BSP_LCD_SetFont (&Font16);
 800ac0a:	4808      	ldr	r0, [pc, #32]	; (800ac2c <show_variable+0x30>)
 800ac0c:	f7f7 fe56 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ac10:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800ac14:	f7f7 fe3a 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, string, LEFT_MODE);
 800ac18:	2303      	movs	r3, #3
 800ac1a:	466a      	mov	r2, sp
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f7f7 fece 	bl	80029c0 <BSP_LCD_DisplayStringAt>
}
 800ac24:	b003      	add	sp, #12
 800ac26:	bd30      	pop	{r4, r5, pc}
 800ac28:	080553b1 	.word	0x080553b1
 800ac2c:	20000030 	.word	0x20000030

0800ac30 <show_short>:

void show_short(uint16_t x, uint16_t y,uint8_t variable) {
 800ac30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	460d      	mov	r5, r1
	char string[4];   // print format stuff
    sprintf(string,"%2i",variable);
 800ac36:	a801      	add	r0, sp, #4
 800ac38:	4908      	ldr	r1, [pc, #32]	; (800ac5c <show_short+0x2c>)
 800ac3a:	f003 fbd7 	bl	800e3ec <siprintf>
    BSP_LCD_SetFont (&Font16);
 800ac3e:	4808      	ldr	r0, [pc, #32]	; (800ac60 <show_short+0x30>)
 800ac40:	f7f7 fe3c 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ac44:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800ac48:	f7f7 fe20 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, string, LEFT_MODE);
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	aa01      	add	r2, sp, #4
 800ac50:	4629      	mov	r1, r5
 800ac52:	4620      	mov	r0, r4
 800ac54:	f7f7 feb4 	bl	80029c0 <BSP_LCD_DisplayStringAt>
}
 800ac58:	b003      	add	sp, #12
 800ac5a:	bd30      	pop	{r4, r5, pc}
 800ac5c:	080553bd 	.word	0x080553bd
 800ac60:	20000030 	.word	0x20000030

0800ac64 <show_UTC_time>:


void show_UTC_time(uint16_t x, uint16_t y,int utc_hours,int utc_minutes,int utc_seconds, int color) {
 800ac64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac66:	460e      	mov	r6, r1
 800ac68:	4605      	mov	r5, r0
	sprintf((char *)rtc_time_string,"%2i:%2i:%2i",utc_hours,utc_minutes,utc_seconds);
 800ac6a:	4813      	ldr	r0, [pc, #76]	; (800acb8 <show_UTC_time+0x54>)
 800ac6c:	e9dd 1406 	ldrd	r1, r4, [sp, #24]
 800ac70:	9100      	str	r1, [sp, #0]
 800ac72:	4912      	ldr	r1, [pc, #72]	; (800acbc <show_UTC_time+0x58>)
 800ac74:	f003 fbba 	bl	800e3ec <siprintf>
	for (int i=0; i<9; i++) if (rtc_time_string[i] == 32) rtc_time_string[i] = 48;  //blank remover
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4a0f      	ldr	r2, [pc, #60]	; (800acb8 <show_UTC_time+0x54>)
 800ac7c:	2130      	movs	r1, #48	; 0x30
 800ac7e:	5c98      	ldrb	r0, [r3, r2]
 800ac80:	2820      	cmp	r0, #32
 800ac82:	bf08      	it	eq
 800ac84:	5499      	strbeq	r1, [r3, r2]
 800ac86:	3301      	adds	r3, #1
 800ac88:	2b09      	cmp	r3, #9
 800ac8a:	d1f8      	bne.n	800ac7e <show_UTC_time+0x1a>


    BSP_LCD_SetFont (&Font16);
 800ac8c:	480c      	ldr	r0, [pc, #48]	; (800acc0 <show_UTC_time+0x5c>)
 800ac8e:	f7f7 fe15 	bl	80028bc <BSP_LCD_SetFont>

    if(color == 0)BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800ac92:	b964      	cbnz	r4, 800acae <show_UTC_time+0x4a>
 800ac94:	f04f 30ff 	mov.w	r0, #4294967295
    if(color == 1)BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800ac98:	f7f7 fdf8 	bl	800288c <BSP_LCD_SetTextColor>

    BSP_LCD_DisplayStringAt(x, y, rtc_time_string, LEFT_MODE);
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	4a06      	ldr	r2, [pc, #24]	; (800acb8 <show_UTC_time+0x54>)
 800aca0:	4631      	mov	r1, r6
 800aca2:	4628      	mov	r0, r5
}
 800aca4:	b002      	add	sp, #8
 800aca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_LCD_DisplayStringAt(x, y, rtc_time_string, LEFT_MODE);
 800acaa:	f7f7 be89 	b.w	80029c0 <BSP_LCD_DisplayStringAt>
    if(color == 1)BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800acae:	2c01      	cmp	r4, #1
 800acb0:	d1f4      	bne.n	800ac9c <show_UTC_time+0x38>
 800acb2:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800acb6:	e7ef      	b.n	800ac98 <show_UTC_time+0x34>
 800acb8:	20001a2c 	.word	0x20001a2c
 800acbc:	080553b5 	.word	0x080553b5
 800acc0:	20000030 	.word	0x20000030

0800acc4 <show_Real_Date>:


void show_Real_Date(uint16_t x, uint16_t y,int date,int month,int year) {
 800acc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acc6:	460e      	mov	r6, r1
	sprintf((char *)rtc_date_string,"%2i:%2i:%2i",date,month,year);
 800acc8:	4c0b      	ldr	r4, [pc, #44]	; (800acf8 <show_Real_Date+0x34>)
 800acca:	9906      	ldr	r1, [sp, #24]
void show_Real_Date(uint16_t x, uint16_t y,int date,int month,int year) {
 800accc:	4605      	mov	r5, r0
	sprintf((char *)rtc_date_string,"%2i:%2i:%2i",date,month,year);
 800acce:	4620      	mov	r0, r4
 800acd0:	9100      	str	r1, [sp, #0]
 800acd2:	490a      	ldr	r1, [pc, #40]	; (800acfc <show_Real_Date+0x38>)
 800acd4:	f003 fb8a 	bl	800e3ec <siprintf>
    BSP_LCD_SetFont (&Font16);
 800acd8:	4809      	ldr	r0, [pc, #36]	; (800ad00 <show_Real_Date+0x3c>)
 800acda:	f7f7 fdef 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800acde:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800ace2:	f7f7 fdd3 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(x, y, rtc_date_string, LEFT_MODE);
 800ace6:	2303      	movs	r3, #3
 800ace8:	4622      	mov	r2, r4
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
}
 800acee:	b002      	add	sp, #8
 800acf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_LCD_DisplayStringAt(x, y, rtc_date_string, LEFT_MODE);
 800acf4:	f7f7 be64 	b.w	80029c0 <BSP_LCD_DisplayStringAt>
 800acf8:	20001a14 	.word	0x20001a14
 800acfc:	080553b5 	.word	0x080553b5
 800ad00:	20000030 	.word	0x20000030

0800ad04 <setup_display>:


void setup_display(void) {
 800ad04:	b508      	push	{r3, lr}

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ad06:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800ad0a:	f7f7 fdbf 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 272);
 800ad0e:	2100      	movs	r1, #0
 800ad10:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ad14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	f7f7 ff11 	bl	8002b40 <BSP_LCD_FillRect>

    BSP_LCD_SetFont (&Font16);
 800ad1e:	4811      	ldr	r0, [pc, #68]	; (800ad64 <setup_display+0x60>)
 800ad20:	f7f7 fdcc 	bl	80028bc <BSP_LCD_SetFont>

    drawButton(0);
 800ad24:	2000      	movs	r0, #0
 800ad26:	f001 fc15 	bl	800c554 <drawButton>
    drawButton(1);
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f001 fc12 	bl	800c554 <drawButton>
    drawButton(2);
 800ad30:	2002      	movs	r0, #2
 800ad32:	f001 fc0f 	bl	800c554 <drawButton>
    drawButton(3);
 800ad36:	2003      	movs	r0, #3
 800ad38:	f001 fc0c 	bl	800c554 <drawButton>
    drawButton(4);
 800ad3c:	2004      	movs	r0, #4
 800ad3e:	f001 fc09 	bl	800c554 <drawButton>
    drawButton(5);
 800ad42:	2005      	movs	r0, #5
 800ad44:	f001 fc06 	bl	800c554 <drawButton>
    drawButton(6);
 800ad48:	2006      	movs	r0, #6
 800ad4a:	f001 fc03 	bl	800c554 <drawButton>
    drawButton(7);
 800ad4e:	2007      	movs	r0, #7
 800ad50:	f001 fc00 	bl	800c554 <drawButton>
   // Monitor_Only = 1;
    drawButton(8);
 800ad54:	2008      	movs	r0, #8
 800ad56:	f001 fbfd 	bl	800c554 <drawButton>
    drawButton(9);
 800ad5a:	2009      	movs	r0, #9


    //BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
   // BSP_LCD_DisplayStringAt(320, 0, "Gain",0x03);

}
 800ad5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    drawButton(9);
 800ad60:	f001 bbf8 	b.w	800c554 <drawButton>
 800ad64:	20000030 	.word	0x20000030

0800ad68 <Set_Cursor_Frequency>:




void Set_Cursor_Frequency(uint16_t cursor_pos){
 800ad68:	b508      	push	{r3, lr}
	  NCO_Frequency = (double) ((float)cursor * FFT_Resolution + ft8_min_freq);
 800ad6a:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <Set_Cursor_Frequency+0x38>)
 800ad6c:	8818      	ldrh	r0, [r3, #0]
 800ad6e:	ee07 0a90 	vmov	s15, r0
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	ee17 0a90 	vmov	r0, s15
 800ad7a:	f7f5 fc75 	bl	8000668 <__aeabi_f2d>
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4b08      	ldr	r3, [pc, #32]	; (800ada4 <Set_Cursor_Frequency+0x3c>)
 800ad82:	f7f5 fcc9 	bl	8000718 <__aeabi_dmul>
 800ad86:	a304      	add	r3, pc, #16	; (adr r3, 800ad98 <Set_Cursor_Frequency+0x30>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f7f5 fb0e 	bl	80003ac <__adddf3>
 800ad90:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <Set_Cursor_Frequency+0x40>)
 800ad92:	e9c3 0100 	strd	r0, r1, [r3]
     }
 800ad96:	bd08      	pop	{r3, pc}
 800ad98:	00000000 	.word	0x00000000
 800ad9c:	4072c000 	.word	0x4072c000
 800ada0:	20001a1e 	.word	0x20001a1e
 800ada4:	40190000 	.word	0x40190000
 800ada8:	20007348 	.word	0x20007348

0800adac <FFT_Touch>:


uint16_t FFT_Touch(void) {

 // if  ((valx > FFT_X  && valx < FFT_X + FFT_W/2 ) && (valy > FFT_Y && valy < FFT_Y + 2 * FFT_H))
	if  ((valx > FFT_X  && valx < FFT_X + FFT_W/2 ) && (valy > FFT_Y && valy < 30))
 800adac:	4b07      	ldr	r3, [pc, #28]	; (800adcc <FFT_Touch+0x20>)
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800adb6:	d807      	bhi.n	800adc8 <FFT_Touch+0x1c>
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <FFT_Touch+0x24>)
 800adba:	8818      	ldrh	r0, [r3, #0]
 800adbc:	3802      	subs	r0, #2
  return 1;
 800adbe:	281b      	cmp	r0, #27
 800adc0:	bf8c      	ite	hi
 800adc2:	2000      	movhi	r0, #0
 800adc4:	2001      	movls	r0, #1
 800adc6:	4770      	bx	lr
  else
  return 0;
 800adc8:	2000      	movs	r0, #0
}
 800adca:	4770      	bx	lr
 800adcc:	2003a8b8 	.word	0x2003a8b8
 800add0:	2003a88c 	.word	0x2003a88c

0800add4 <FT8_Touch>:

int FT8_Touch(void) {

	  int y_test;
	  if  ((valx > 0  && valx < 240 ) && (valy > 40 && valy < 240)){
 800add4:	4b0a      	ldr	r3, [pc, #40]	; (800ae00 <FT8_Touch+0x2c>)
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	3b01      	subs	r3, #1
 800adda:	2bee      	cmp	r3, #238	; 0xee
 800addc:	d80d      	bhi.n	800adfa <FT8_Touch+0x26>
 800adde:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <FT8_Touch+0x30>)
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	f1a3 0229 	sub.w	r2, r3, #41	; 0x29
 800ade6:	2ac6      	cmp	r2, #198	; 0xc6
 800ade8:	d807      	bhi.n	800adfa <FT8_Touch+0x26>
	  y_test = valy - 40;

	  FT_8_TouchIndex = y_test /20;
 800adea:	2214      	movs	r2, #20
	  y_test = valy - 40;
 800adec:	3b28      	subs	r3, #40	; 0x28
	  //show_variable(300,100,valx);
	 // show_variable(340,100,valy);
	 // show_variable(380,100,FT_8_TouchIndex);

	  return 1;
 800adee:	2001      	movs	r0, #1
	  FT_8_TouchIndex = y_test /20;
 800adf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf4:	4a04      	ldr	r2, [pc, #16]	; (800ae08 <FT8_Touch+0x34>)
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	4770      	bx	lr
  }

	  else
	  return 0;
 800adfa:	2000      	movs	r0, #0
}
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	2003a8b8 	.word	0x2003a8b8
 800ae04:	2003a88c 	.word	0x2003a88c
 800ae08:	20001a24 	.word	0x20001a24

0800ae0c <Xmit_message_Touch>:

int Xmit_message_Touch(void) {

	  int y_test;
	  if  ((valx > 240  && valx < 480 ) && (valy > 160 && valy < 240)){
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <Xmit_message_Touch+0x2c>)
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	3bf1      	subs	r3, #241	; 0xf1
 800ae12:	2bee      	cmp	r3, #238	; 0xee
 800ae14:	d80d      	bhi.n	800ae32 <Xmit_message_Touch+0x26>
 800ae16:	4b09      	ldr	r3, [pc, #36]	; (800ae3c <Xmit_message_Touch+0x30>)
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	f1a3 02a1 	sub.w	r2, r3, #161	; 0xa1
 800ae1e:	2a4e      	cmp	r2, #78	; 0x4e
 800ae20:	d807      	bhi.n	800ae32 <Xmit_message_Touch+0x26>
	  y_test = valy - 160;

	  FT_8_MessageIndex = y_test /20;
 800ae22:	2214      	movs	r2, #20
	  y_test = valy - 160;
 800ae24:	3ba0      	subs	r3, #160	; 0xa0
	  //show_variable(300,80,valx);
	  //show_variable(340,80,valy);
	  //show_variable(380,80,FT_8_MessageIndex);

	  return 1;
 800ae26:	2001      	movs	r0, #1
	  FT_8_MessageIndex = y_test /20;
 800ae28:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae2c:	4a04      	ldr	r2, [pc, #16]	; (800ae40 <Xmit_message_Touch+0x34>)
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	4770      	bx	lr
  }

	  else
	  return 0;
 800ae32:	2000      	movs	r0, #0
}
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	2003a8b8 	.word	0x2003a8b8
 800ae3c:	2003a88c 	.word	0x2003a88c
 800ae40:	20001a38 	.word	0x20001a38

0800ae44 <Process_Touch>:
	    if(!Tune_On && !xmit_flag && !Beacon_On) sButtonData[5].state = 0;
 800ae44:	4b26      	ldr	r3, [pc, #152]	; (800aee0 <Process_Touch+0x9c>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4b26      	ldr	r3, [pc, #152]	; (800aee4 <Process_Touch+0xa0>)
void Process_Touch (void) {
 800ae4a:	b570      	push	{r4, r5, r6, lr}
	    if(!Tune_On && !xmit_flag && !Beacon_On) sButtonData[5].state = 0;
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	d141      	bne.n	800aed4 <Process_Touch+0x90>
 800ae50:	4a25      	ldr	r2, [pc, #148]	; (800aee8 <Process_Touch+0xa4>)
 800ae52:	6812      	ldr	r2, [r2, #0]
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	d13d      	bne.n	800aed4 <Process_Touch+0x90>
 800ae58:	4a24      	ldr	r2, [pc, #144]	; (800aeec <Process_Touch+0xa8>)
 800ae5a:	6812      	ldr	r2, [r2, #0]
 800ae5c:	2a00      	cmp	r2, #0
 800ae5e:	d139      	bne.n	800aed4 <Process_Touch+0x90>
		test = BSP_TS_GetState(&TS_State);
 800ae60:	4c23      	ldr	r4, [pc, #140]	; (800aef0 <Process_Touch+0xac>)
	    sButtonData[5].state = 1;
 800ae62:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		test = BSP_TS_GetState(&TS_State);
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7f8 fad4 	bl	8003414 <BSP_TS_GetState>
 800ae6c:	4b21      	ldr	r3, [pc, #132]	; (800aef4 <Process_Touch+0xb0>)
 800ae6e:	7018      	strb	r0, [r3, #0]
		if(TS_State.touchDetected > 0) {
 800ae70:	7823      	ldrb	r3, [r4, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d02d      	beq.n	800aed2 <Process_Touch+0x8e>
			valx = (uint16_t)TS_State.touchX[0];
 800ae76:	8862      	ldrh	r2, [r4, #2]
		      BSP_TS_GetState(&TS_State);
 800ae78:	4626      	mov	r6, r4
			valx = (uint16_t)TS_State.touchX[0];
 800ae7a:	4d1f      	ldr	r5, [pc, #124]	; (800aef8 <Process_Touch+0xb4>)
			valy = (uint16_t)TS_State.touchY[0];
 800ae7c:	89a1      	ldrh	r1, [r4, #12]
			valx = (uint16_t)TS_State.touchX[0];
 800ae7e:	802a      	strh	r2, [r5, #0]
			valy = (uint16_t)TS_State.touchY[0];
 800ae80:	4a1e      	ldr	r2, [pc, #120]	; (800aefc <Process_Touch+0xb8>)
 800ae82:	8011      	strh	r1, [r2, #0]
		      BSP_TS_GetState(&TS_State);
 800ae84:	4630      	mov	r0, r6
 800ae86:	f7f8 fac5 	bl	8003414 <BSP_TS_GetState>
		    }while(TS_State.touchDetected > 0);
 800ae8a:	7823      	ldrb	r3, [r4, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1f9      	bne.n	800ae84 <Process_Touch+0x40>
			if (FFT_Touch() == 1)    {
 800ae90:	f7ff ff8c 	bl	800adac <FFT_Touch>
 800ae94:	2801      	cmp	r0, #1
 800ae96:	d11f      	bne.n	800aed8 <Process_Touch+0x94>
			cursor = ( valx - FFT_X);
 800ae98:	4b19      	ldr	r3, [pc, #100]	; (800af00 <Process_Touch+0xbc>)
 800ae9a:	8828      	ldrh	r0, [r5, #0]
 800ae9c:	8018      	strh	r0, [r3, #0]
			NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800ae9e:	3030      	adds	r0, #48	; 0x30
 800aea0:	f7f5 fbd0 	bl	8000644 <__aeabi_i2d>
 800aea4:	2200      	movs	r2, #0
 800aea6:	4b17      	ldr	r3, [pc, #92]	; (800af04 <Process_Touch+0xc0>)
 800aea8:	f7f5 fc36 	bl	8000718 <__aeabi_dmul>
 800aeac:	4b16      	ldr	r3, [pc, #88]	; (800af08 <Process_Touch+0xc4>)
 800aeae:	e9c3 0100 	strd	r0, r1, [r3]
			show_variable(400, 25,(int)  NCO_Frequency );
 800aeb2:	f7f5 fee1 	bl	8000c78 <__aeabi_d2iz>
 800aeb6:	2119      	movs	r1, #25
 800aeb8:	4602      	mov	r2, r0
 800aeba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800aebe:	f7ff fe9d 	bl	800abfc <show_variable>
			FT8_Touch_Flag = FT8_Touch();
 800aec2:	f7ff ff87 	bl	800add4 <FT8_Touch>
 800aec6:	4b11      	ldr	r3, [pc, #68]	; (800af0c <Process_Touch+0xc8>)
 800aec8:	6018      	str	r0, [r3, #0]
			FT8_Message_Touch = Xmit_message_Touch();
 800aeca:	f7ff ff9f 	bl	800ae0c <Xmit_message_Touch>
 800aece:	4b10      	ldr	r3, [pc, #64]	; (800af10 <Process_Touch+0xcc>)
 800aed0:	6018      	str	r0, [r3, #0]
}
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
	    sButtonData[5].state = 1;
 800aed4:	2201      	movs	r2, #1
 800aed6:	e7c3      	b.n	800ae60 <Process_Touch+0x1c>
			  checkButton();
 800aed8:	f001 fe84 	bl	800cbe4 <checkButton>
 800aedc:	e7f1      	b.n	800aec2 <Process_Touch+0x7e>
 800aede:	bf00      	nop
 800aee0:	2003a650 	.word	0x2003a650
 800aee4:	20000c40 	.word	0x20000c40
 800aee8:	2000c750 	.word	0x2000c750
 800aeec:	2003a678 	.word	0x2003a678
 800aef0:	200019cc 	.word	0x200019cc
 800aef4:	2003a8b0 	.word	0x2003a8b0
 800aef8:	2003a8b8 	.word	0x2003a8b8
 800aefc:	2003a88c 	.word	0x2003a88c
 800af00:	20001a1e 	.word	0x20001a1e
 800af04:	40190000 	.word	0x40190000
 800af08:	20007348 	.word	0x20007348
 800af0c:	20001a20 	.word	0x20001a20
 800af10:	20001a28 	.word	0x20001a28

0800af14 <Init_Waterfall>:


void Init_Waterfall (void)
{

	pWFBfr = &WF_Bfr[0];
 800af14:	4b04      	ldr	r3, [pc, #16]	; (800af28 <Init_Waterfall+0x14>)
 800af16:	4a05      	ldr	r2, [pc, #20]	; (800af2c <Init_Waterfall+0x18>)
 800af18:	601a      	str	r2, [r3, #0]
	WF_Count = 0;
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b04      	ldr	r3, [pc, #16]	; (800af30 <Init_Waterfall+0x1c>)
 800af1e:	62da      	str	r2, [r3, #44]	; 0x2c
	WF_Line0 = FFT_H - 1;
 800af20:	2227      	movs	r2, #39	; 0x27
 800af22:	4b04      	ldr	r3, [pc, #16]	; (800af34 <Init_Waterfall+0x20>)
 800af24:	601a      	str	r2, [r3, #0]

}
 800af26:	4770      	bx	lr
 800af28:	2003a8b4 	.word	0x2003a8b4
 800af2c:	2003a8ba 	.word	0x2003a8ba
 800af30:	200019cc 	.word	0x200019cc
 800af34:	2003a8a4 	.word	0x2003a8a4

0800af38 <Display_WF>:

int null_count, FFT_Line_Delay;

void Display_WF(void)	{

		if(ft8_marker ==1) {
 800af38:	4b49      	ldr	r3, [pc, #292]	; (800b060 <Display_WF+0x128>)
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	2a01      	cmp	r2, #1
void Display_WF(void)	{
 800af3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af42:	4d48      	ldr	r5, [pc, #288]	; (800b064 <Display_WF+0x12c>)
 800af44:	4c48      	ldr	r4, [pc, #288]	; (800b068 <Display_WF+0x130>)
		if(ft8_marker ==1) {
 800af46:	d165      	bne.n	800b014 <Display_WF+0xdc>

		for (int x = 0; x < (FFT_W ); x++) *(pWFBfr + (FFT_W*WF_Line0) + x) = 63;
 800af48:	2200      	movs	r2, #0
 800af4a:	f44f 7730 	mov.w	r7, #704	; 0x2c0
 800af4e:	203f      	movs	r0, #63	; 0x3f
 800af50:	6829      	ldr	r1, [r5, #0]
 800af52:	6826      	ldr	r6, [r4, #0]
 800af54:	fb07 6101 	mla	r1, r7, r1, r6
 800af58:	5488      	strb	r0, [r1, r2]
 800af5a:	3201      	adds	r2, #1
 800af5c:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 800af60:	d1f6      	bne.n	800af50 <Display_WF+0x18>
		ft8_marker = 0;
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]
			}
		}

		//shift data in memory by one time stepft8_buffer
		for (int y = 0; y < WF_Line0 ; y++){
			for (int x = 0; x <FFT_W ; x++) {
 800af66:	2200      	movs	r2, #0
 800af68:	f44f 7630 	mov.w	r6, #704	; 0x2c0
 800af6c:	4610      	mov	r0, r2
		for (int y = 0; y < WF_Line0 ; y++){
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	4283      	cmp	r3, r0
 800af72:	dc64      	bgt.n	800b03e <Display_WF+0x106>
 800af74:	2700      	movs	r7, #0
				}
			}

		for ( int y = 0; y < FFT_H; y++){
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
			BSP_LCD_DrawPixel(x, y,WFPalette[ (*(pWFBfr + y*FFT_W + 2*x)) ] );
 800af76:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800b088 <Display_WF+0x150>
		for ( int y = 0; y < FFT_H; y++){
 800af7a:	463e      	mov	r6, r7
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800af7c:	2500      	movs	r5, #0
			BSP_LCD_DrawPixel(x, y,WFPalette[ (*(pWFBfr + y*FFT_W + 2*x)) ] );
 800af7e:	fa1f f886 	uxth.w	r8, r6
 800af82:	6823      	ldr	r3, [r4, #0]
 800af84:	b2a8      	uxth	r0, r5
 800af86:	4641      	mov	r1, r8
 800af88:	eb03 0345 	add.w	r3, r3, r5, lsl #1
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800af8c:	3501      	adds	r5, #1
			BSP_LCD_DrawPixel(x, y,WFPalette[ (*(pWFBfr + y*FFT_W + 2*x)) ] );
 800af8e:	5ddb      	ldrb	r3, [r3, r7]
 800af90:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800af94:	f7f7 fc9e 	bl	80028d4 <BSP_LCD_DrawPixel>
			for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800af98:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
 800af9c:	d1f1      	bne.n	800af82 <Display_WF+0x4a>
		for ( int y = 0; y < FFT_H; y++){
 800af9e:	3601      	adds	r6, #1
 800afa0:	f507 7730 	add.w	r7, r7, #704	; 0x2c0
 800afa4:	2e28      	cmp	r6, #40	; 0x28
 800afa6:	d1e9      	bne.n	800af7c <Display_WF+0x44>
				}
			}


		if (Auto_Sync) {
 800afa8:	4e30      	ldr	r6, [pc, #192]	; (800b06c <Display_WF+0x134>)
 800afaa:	6832      	ldr	r2, [r6, #0]
 800afac:	b332      	cbz	r2, 800affc <Display_WF+0xc4>
		for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
		//	if ((*(pWFBfr + 37*FFT_W + 2*x))  > 0) null_count++;
		//	if ((*(pWFBfr + 38*FFT_W + 2*x))  > 0) null_count++;
			if ((*(pWFBfr + 39*FFT_W + 2*x))  > 0) null_count++;
 800afae:	6820      	ldr	r0, [r4, #0]
		for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800afb0:	2300      	movs	r3, #0
			if ((*(pWFBfr + 39*FFT_W + 2*x))  > 0) null_count++;
 800afb2:	f646 3440 	movw	r4, #27456	; 0x6b40
 800afb6:	492e      	ldr	r1, [pc, #184]	; (800b070 <Display_WF+0x138>)
 800afb8:	eb04 0243 	add.w	r2, r4, r3, lsl #1
 800afbc:	5c82      	ldrb	r2, [r0, r2]
 800afbe:	b112      	cbz	r2, 800afc6 <Display_WF+0x8e>
 800afc0:	680a      	ldr	r2, [r1, #0]
 800afc2:	3201      	adds	r2, #1
 800afc4:	600a      	str	r2, [r1, #0]
		for (int x = 0; x < ft8_buffer -ft8_min_bin; x++){
 800afc6:	3301      	adds	r3, #1
 800afc8:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800afcc:	d1f4      	bne.n	800afb8 <Display_WF+0x80>

		}
		//show_variable(0,220, null_count) ;

		if(null_count<3){
 800afce:	4c28      	ldr	r4, [pc, #160]	; (800b070 <Display_WF+0x138>)
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	2a02      	cmp	r2, #2
 800afd4:	dc10      	bgt.n	800aff8 <Display_WF+0xc0>

			FFT_Line_Delay ++;
 800afd6:	4d27      	ldr	r5, [pc, #156]	; (800b074 <Display_WF+0x13c>)
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	3301      	adds	r3, #1

			if (FFT_Line_Delay >= 2) {
 800afdc:	2b01      	cmp	r3, #1
			FFT_Line_Delay ++;
 800afde:	602b      	str	r3, [r5, #0]
			if (FFT_Line_Delay >= 2) {
 800afe0:	dd0a      	ble.n	800aff8 <Display_WF+0xc0>
		    FT8_Sync();
 800afe2:	f001 fe53 	bl	800cc8c <FT8_Sync>
			//set_RTC_to_GPS();
			Auto_Sync = 0;
 800afe6:	2300      	movs	r3, #0
			FFT_Line_Delay = 0;
	        sButtonData[5].state = 0;
 800afe8:	4a23      	ldr	r2, [pc, #140]	; (800b078 <Display_WF+0x140>)
	        drawButton(5);
 800afea:	2005      	movs	r0, #5
			Auto_Sync = 0;
 800afec:	6033      	str	r3, [r6, #0]
			FFT_Line_Delay = 0;
 800afee:	602b      	str	r3, [r5, #0]
	        sButtonData[5].state = 0;
 800aff0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
	        drawButton(5);
 800aff4:	f001 faae 	bl	800c554 <drawButton>
			}
		}



		null_count = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	6023      	str	r3, [r4, #0]
		}


		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800affc:	481f      	ldr	r0, [pc, #124]	; (800b07c <Display_WF+0x144>)
 800affe:	f7f7 fc45 	bl	800288c <BSP_LCD_SetTextColor>
		BSP_LCD_DrawLine(FFT_X+ cursor,FFT_H,FFT_X+cursor,0);
 800b002:	4b1f      	ldr	r3, [pc, #124]	; (800b080 <Display_WF+0x148>)
 800b004:	2128      	movs	r1, #40	; 0x28
 800b006:	881a      	ldrh	r2, [r3, #0]
 800b008:	2300      	movs	r3, #0
 800b00a:	4610      	mov	r0, r2

		}
 800b00c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		BSP_LCD_DrawLine(FFT_X+ cursor,FFT_H,FFT_X+cursor,0);
 800b010:	f7f7 bd2a 	b.w	8002a68 <BSP_LCD_DrawLine>
 800b014:	4e1b      	ldr	r6, [pc, #108]	; (800b084 <Display_WF+0x14c>)
			for (int x = 0; x < FFT_W; x++) {
 800b016:	2200      	movs	r2, #0
 800b018:	f44f 7c30 	mov.w	ip, #704	; 0x2c0
				*(pWFBfr + (FFT_W*WF_Line0) + x) = 63;
 800b01c:	273f      	movs	r7, #63	; 0x3f
				if(FFT_Buffer[x + 2*ft8_min_bin]>=0 && FFT_Buffer[x + 2*ft8_min_bin]<64)
 800b01e:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800b022:	6829      	ldr	r1, [r5, #0]
 800b024:	2b3f      	cmp	r3, #63	; 0x3f
 800b026:	6820      	ldr	r0, [r4, #0]
 800b028:	fb0c 2101 	mla	r1, ip, r1, r2
			for (int x = 0; x < FFT_W; x++) {
 800b02c:	f102 0201 	add.w	r2, r2, #1
				*(pWFBfr + (FFT_W*WF_Line0) + x) = (uint8_t)FFT_Buffer[x + 2*ft8_min_bin];
 800b030:	bf88      	it	hi
 800b032:	463b      	movhi	r3, r7
			for (int x = 0; x < FFT_W; x++) {
 800b034:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
				*(pWFBfr + (FFT_W*WF_Line0) + x) = (uint8_t)FFT_Buffer[x + 2*ft8_min_bin];
 800b038:	5443      	strb	r3, [r0, r1]
			for (int x = 0; x < FFT_W; x++) {
 800b03a:	d1f0      	bne.n	800b01e <Display_WF+0xe6>
 800b03c:	e793      	b.n	800af66 <Display_WF+0x2e>
				*(pWFBfr + (FFT_W*y) + x) = *(pWFBfr + (FFT_W*(y+1)) + x);
 800b03e:	3001      	adds	r0, #1
			for (int x = 0; x <FFT_W ; x++) {
 800b040:	2300      	movs	r3, #0
				*(pWFBfr + (FFT_W*y) + x) = *(pWFBfr + (FFT_W*(y+1)) + x);
 800b042:	6821      	ldr	r1, [r4, #0]
 800b044:	198f      	adds	r7, r1, r6
 800b046:	4411      	add	r1, r2
 800b048:	5cff      	ldrb	r7, [r7, r3]
 800b04a:	54cf      	strb	r7, [r1, r3]
			for (int x = 0; x <FFT_W ; x++) {
 800b04c:	3301      	adds	r3, #1
 800b04e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800b052:	d1f6      	bne.n	800b042 <Display_WF+0x10a>
 800b054:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
 800b058:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 800b05c:	e787      	b.n	800af6e <Display_WF+0x36>
 800b05e:	bf00      	nop
 800b060:	20006340 	.word	0x20006340
 800b064:	2003a8a4 	.word	0x2003a8a4
 800b068:	2003a8b4 	.word	0x2003a8b4
 800b06c:	2003a670 	.word	0x2003a670
 800b070:	2003a8a8 	.word	0x2003a8a8
 800b074:	2003a8ac 	.word	0x2003a8ac
 800b078:	20000c40 	.word	0x20000c40
 800b07c:	ffff0000 	.word	0xffff0000
 800b080:	20001a1e 	.word	0x20001a1e
 800b084:	20002bb2 	.word	0x20002bb2
 800b088:	08051164 	.word	0x08051164

0800b08c <Process_FIR_I_32K>:
arm_fir_instance_q15 S_FIR_Q_32K = { NUM_FIR_COEF,&FIR_State_Q[0], &coeff_fir_I_32K[0] };



void Process_FIR_I_32K(void){
	arm_fir_q15(&S_FIR_I_32K, &FIR_I_In[0], &FIR_I_Out[0], BUFFERSIZE / 4);
 800b08c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800b090:	4a02      	ldr	r2, [pc, #8]	; (800b09c <Process_FIR_I_32K+0x10>)
 800b092:	4903      	ldr	r1, [pc, #12]	; (800b0a0 <Process_FIR_I_32K+0x14>)
 800b094:	4803      	ldr	r0, [pc, #12]	; (800b0a4 <Process_FIR_I_32K+0x18>)
 800b096:	f7f6 bbec 	b.w	8001872 <arm_fir_q15>
 800b09a:	bf00      	nop
 800b09c:	20003134 	.word	0x20003134
 800b0a0:	20007d50 	.word	0x20007d50
 800b0a4:	20000c14 	.word	0x20000c14

0800b0a8 <Process_FIR_Q_32K>:
	}

void Process_FIR_Q_32K(void){
	arm_fir_q15(&S_FIR_Q_32K, &FIR_Q_In[0], &FIR_Q_Out[0], BUFFERSIZE / 4);
 800b0a8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800b0ac:	4a02      	ldr	r2, [pc, #8]	; (800b0b8 <Process_FIR_Q_32K+0x10>)
 800b0ae:	4903      	ldr	r1, [pc, #12]	; (800b0bc <Process_FIR_Q_32K+0x14>)
 800b0b0:	4803      	ldr	r0, [pc, #12]	; (800b0c0 <Process_FIR_Q_32K+0x18>)
 800b0b2:	f7f6 bbde 	b.w	8001872 <arm_fir_q15>
 800b0b6:	bf00      	nop
 800b0b8:	20010b68 	.word	0x20010b68
 800b0bc:	2000f15c 	.word	0x2000f15c
 800b0c0:	20000c20 	.word	0x20000c20

0800b0c4 <ft_blackman_i>:
    const float alpha = 0.16f; // or 2860/18608
    const float a0 = (1 - alpha) / 2;
    const float a1 = 1.0f / 2;
    const float a2 = alpha / 2;

    float x1 = cosf(2 * (float)M_PI * i / (N - 1));
 800b0c4:	ee07 0a90 	vmov	s15, r0
 800b0c8:	3901      	subs	r1, #1
 800b0ca:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b110 <ft_blackman_i+0x4c>
 800b0ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0d2:	ee07 1a10 	vmov	s14, r1
float ft_blackman_i(int i, int N) {
 800b0d6:	b508      	push	{r3, lr}
    float x1 = cosf(2 * (float)M_PI * i / (N - 1));
 800b0d8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b0dc:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800b0e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800b0e4:	f003 fe3a 	bl	800ed5c <cosf>
    float x2 = 2*x1*x1 - 1; // Use double angle formula
 800b0e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b0ec:	ee70 7a00 	vadd.f32	s15, s0, s0

    return a0 - a1*x1 + a2*x2;
 800b0f0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float x2 = 2*x1*x1 - 1; // Use double angle formula
 800b0f4:	eea7 7a80 	vfma.f32	s14, s15, s0
    return a0 - a1*x1 + a2*x2;
 800b0f8:	eddf 7a06 	vldr	s15, [pc, #24]	; 800b114 <ft_blackman_i+0x50>
 800b0fc:	eee0 7a66 	vfms.f32	s15, s0, s13
 800b100:	eeb0 0a67 	vmov.f32	s0, s15
}
 800b104:	eddf 7a04 	vldr	s15, [pc, #16]	; 800b118 <ft_blackman_i+0x54>
 800b108:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b10c:	bd08      	pop	{r3, pc}
 800b10e:	bf00      	nop
 800b110:	40c90fdb 	.word	0x40c90fdb
 800b114:	3ed70a3e 	.word	0x3ed70a3e
 800b118:	3da3d70a 	.word	0x3da3d70a

0800b11c <init_DSP>:
void init_DSP(void) {
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	4d0c      	ldr	r5, [pc, #48]	; (800b150 <init_DSP+0x34>)
   for (int i = 0; i < FFT_SIZE; ++i) window[i] = ft_blackman_i(i, FFT_SIZE);
 800b120:	2400      	movs	r4, #0
   arm_rfft_init_q15(&fft_inst, FFT_SIZE, 0, 1);
 800b122:	2301      	movs	r3, #1
 800b124:	2200      	movs	r2, #0
 800b126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b12a:	480a      	ldr	r0, [pc, #40]	; (800b154 <init_DSP+0x38>)
 800b12c:	f7f6 fcc2 	bl	8001ab4 <arm_rfft_init_q15>
   for (int i = 0; i < FFT_SIZE; ++i) window[i] = ft_blackman_i(i, FFT_SIZE);
 800b130:	4620      	mov	r0, r4
 800b132:	3401      	adds	r4, #1
 800b134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b138:	f7ff ffc4 	bl	800b0c4 <ft_blackman_i>
 800b13c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800b140:	eca5 0a01 	vstmia	r5!, {s0}
 800b144:	d1f4      	bne.n	800b130 <init_DSP+0x14>
   offset_step = (int) ft8_buffer*4;
 800b146:	4b04      	ldr	r3, [pc, #16]	; (800b158 <init_DSP+0x3c>)
 800b148:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b14c:	601a      	str	r2, [r3, #0]
}
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	20013d78 	.word	0x20013d78
 800b154:	20043100 	.word	0x20043100
 800b158:	20002af0 	.word	0x20002af0
 800b15c:	00000000 	.word	0x00000000

0800b160 <extract_power>:
  }



// Compute FFT magnitudes (log power) for each timeslot in the signal
void extract_power( int offset) {
 800b160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	4c48      	ldr	r4, [pc, #288]	; (800b288 <extract_power+0x128>)


        // Loop over two possible time offsets (0 and block_size/2)
        for (int time_sub = 0; time_sub <= input_gulp_size/2; time_sub += input_gulp_size/2) {
 800b166:	2600      	movs	r6, #0

        for (int i = 0; i <  FFT_SIZE ; i++) window_dsp_buffer[i] = (q15_t) ( (float) extract_signal[i + time_sub] * window[i] );
 800b168:	4f48      	ldr	r7, [pc, #288]	; (800b28c <extract_power+0x12c>)
 800b16a:	4404      	add	r4, r0
        arm_rfft_q15(&fft_inst, window_dsp_buffer,dsp_output );
 800b16c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800b2a8 <extract_power+0x148>
        arm_shift_q15(&dsp_output[0], 5, &FFT_Scale[0], FFT_SIZE * 2 );
 800b170:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800b2ac <extract_power+0x14c>
 800b174:	4b46      	ldr	r3, [pc, #280]	; (800b290 <extract_power+0x130>)
        for (int i = 0; i <  FFT_SIZE ; i++) window_dsp_buffer[i] = (q15_t) ( (float) extract_signal[i + time_sub] * window[i] );
 800b176:	2500      	movs	r5, #0
 800b178:	4a46      	ldr	r2, [pc, #280]	; (800b294 <extract_power+0x134>)
 800b17a:	1971      	adds	r1, r6, r5
 800b17c:	ecb3 7a01 	vldmia	r3!, {s14}
 800b180:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 800b184:	ee07 1a90 	vmov	s15, r1
 800b188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b18c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b194:	ee17 1a90 	vmov	r1, s15
 800b198:	f827 1015 	strh.w	r1, [r7, r5, lsl #1]
 800b19c:	3501      	adds	r5, #1
 800b19e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800b1a2:	d1ea      	bne.n	800b17a <extract_power+0x1a>
        arm_rfft_q15(&fft_inst, window_dsp_buffer,dsp_output );
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	483b      	ldr	r0, [pc, #236]	; (800b298 <extract_power+0x138>)
 800b1aa:	f8df a104 	ldr.w	sl, [pc, #260]	; 800b2b0 <extract_power+0x150>
 800b1ae:	f7f6 fd5f 	bl	8001c70 <arm_rfft_q15>
        arm_shift_q15(&dsp_output[0], 5, &FFT_Scale[0], FFT_SIZE * 2 );
 800b1b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1b6:	464a      	mov	r2, r9
 800b1b8:	2105      	movs	r1, #5
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	f7f6 fd91 	bl	8001ce2 <arm_shift_q15>
        arm_cmplx_mag_squared_q15(&FFT_Scale[0], &FFT_Magnitude[0], FFT_SIZE);
 800b1c0:	46d3      	mov	fp, sl
 800b1c2:	462a      	mov	r2, r5

       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b1c4:	2500      	movs	r5, #0
        arm_cmplx_mag_squared_q15(&FFT_Scale[0], &FFT_Magnitude[0], FFT_SIZE);
 800b1c6:	4935      	ldr	r1, [pc, #212]	; (800b29c <extract_power+0x13c>)
 800b1c8:	4648      	mov	r0, r9
 800b1ca:	f7f6 fb11 	bl	80017f0 <arm_cmplx_mag_squared_q15>
        FFT_Mag_10[j] = 10 * (int32_t)FFT_Magnitude[j];
 800b1ce:	4b33      	ldr	r3, [pc, #204]	; (800b29c <extract_power+0x13c>)
 800b1d0:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 800b1d4:	4b32      	ldr	r3, [pc, #200]	; (800b2a0 <extract_power+0x140>)
 800b1d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b1da:	0040      	lsls	r0, r0, #1
        mag_db[j] =  5.0 * log((float)FFT_Mag_10[j] + 0.1);
 800b1dc:	ee07 0a90 	vmov	s15, r0
        FFT_Mag_10[j] = 10 * (int32_t)FFT_Magnitude[j];
 800b1e0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b1e4:	3501      	adds	r5, #1
        mag_db[j] =  5.0 * log((float)FFT_Mag_10[j] + 0.1);
 800b1e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1ea:	ee17 0a90 	vmov	r0, s15
 800b1ee:	f7f5 fa3b 	bl	8000668 <__aeabi_f2d>
 800b1f2:	a323      	add	r3, pc, #140	; (adr r3, 800b280 <extract_power+0x120>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	f7f5 f8d8 	bl	80003ac <__adddf3>
 800b1fc:	ec41 0b10 	vmov	d0, r0, r1
 800b200:	f003 fdec 	bl	800eddc <log>
 800b204:	2200      	movs	r2, #0
 800b206:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <extract_power+0x144>)
 800b208:	ec51 0b10 	vmov	r0, r1, d0
 800b20c:	f7f5 fa84 	bl	8000718 <__aeabi_dmul>
 800b210:	f7f5 fd7a 	bl	8000d08 <__aeabi_d2f>
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b214:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
        mag_db[j] =  5.0 * log((float)FFT_Mag_10[j] + 0.1);
 800b218:	f84b 0b04 	str.w	r0, [fp], #4
       for (int j = 0; j< FFT_SIZE/2; j++) {
 800b21c:	d1d7      	bne.n	800b1ce <extract_power+0x6e>
            // Loop over two possible frequency bin offsets (for averaging)
            for (int freq_sub = 0; freq_sub < 2; ++freq_sub) {
                for (int j = 0; j < ft8_buffer; ++j) {
                    float db1 = mag_db[j * 2 + freq_sub];
                    float db2 = mag_db[j * 2 + freq_sub + 1];
                    float db = (db1 + db2) / 2;
 800b21e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b222:	4625      	mov	r5, r4
            for (int freq_sub = 0; freq_sub < 2; ++freq_sub) {
 800b224:	2000      	movs	r0, #0
 800b226:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
                for (int j = 0; j < ft8_buffer; ++j) {
 800b22a:	2200      	movs	r2, #0
                    float db = (db1 + db2) / 2;
 800b22c:	edd1 7a00 	vldr	s15, [r1]
 800b230:	edd1 6a01 	vldr	s13, [r1, #4]
 800b234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b238:	ee67 7a87 	vmul.f32	s15, s15, s14

                    int scaled = (int) (db);
 800b23c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b240:	ee17 3a90 	vmov	r3, s15
                  // export_fft_power[offset] = (scaled < 0) ? 0 : ((scaled > 255) ? 255 : scaled);
                    export_fft_power[offset] =  (uint8_t)  (scaled < 0) ? 0 : ((scaled > 255) ? 255 : scaled);
 800b244:	2b00      	cmp	r3, #0
 800b246:	db0e      	blt.n	800b266 <extract_power+0x106>
 800b248:	2bff      	cmp	r3, #255	; 0xff
 800b24a:	bfa8      	it	ge
 800b24c:	23ff      	movge	r3, #255	; 0xff
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	54ab      	strb	r3, [r5, r2]
                for (int j = 0; j < ft8_buffer; ++j) {
 800b252:	3201      	adds	r2, #1
 800b254:	3108      	adds	r1, #8
 800b256:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800b25a:	d1e7      	bne.n	800b22c <extract_power+0xcc>
 800b25c:	f505 75c8 	add.w	r5, r5, #400	; 0x190
            for (int freq_sub = 0; freq_sub < 2; ++freq_sub) {
 800b260:	b918      	cbnz	r0, 800b26a <extract_power+0x10a>
 800b262:	2001      	movs	r0, #1
 800b264:	e7df      	b.n	800b226 <extract_power+0xc6>
                    export_fft_power[offset] =  (uint8_t)  (scaled < 0) ? 0 : ((scaled > 255) ? 255 : scaled);
 800b266:	2300      	movs	r3, #0
 800b268:	e7f2      	b.n	800b250 <extract_power+0xf0>
        for (int time_sub = 0; time_sub <= input_gulp_size/2; time_sub += input_gulp_size/2) {
 800b26a:	f506 7600 	add.w	r6, r6, #512	; 0x200
 800b26e:	f504 7448 	add.w	r4, r4, #800	; 0x320
 800b272:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b276:	f47f af7d 	bne.w	800b174 <extract_power+0x14>
                    ++offset;
                }
            }
        }

}
 800b27a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27e:	bf00      	nop
 800b280:	9999999a 	.word	0x9999999a
 800b284:	3fb99999 	.word	0x3fb99999
 800b288:	20016d7c 	.word	0x20016d7c
 800b28c:	20015d78 	.word	0x20015d78
 800b290:	20013d78 	.word	0x20013d78
 800b294:	20008750 	.word	0x20008750
 800b298:	20043100 	.word	0x20043100
 800b29c:	20006344 	.word	0x20006344
 800b2a0:	20001af0 	.word	0x20001af0
 800b2a4:	40140000 	.word	0x40140000
 800b2a8:	20011d6c 	.word	0x20011d6c
 800b2ac:	2000c754 	.word	0x2000c754
 800b2b0:	2000fb64 	.word	0x2000fb64

0800b2b4 <process_FT8_FFT>:
void process_FT8_FFT(void) {
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 for(int i = 0; i< input_gulp_size; i++) {
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4b22      	ldr	r3, [pc, #136]	; (800b344 <process_FT8_FFT+0x90>)
			 extract_signal[i+ 2* input_gulp_size] =  FT8_Data[i];
 800b2ba:	4823      	ldr	r0, [pc, #140]	; (800b348 <process_FT8_FFT+0x94>)
			 extract_signal[i] = extract_signal[i + input_gulp_size];
 800b2bc:	f8b3 1800 	ldrh.w	r1, [r3, #2048]	; 0x800
 800b2c0:	f823 1b02 	strh.w	r1, [r3], #2
			 extract_signal[i+ input_gulp_size] = extract_signal[i + 2*input_gulp_size];
 800b2c4:	f8b3 1ffe 	ldrh.w	r1, [r3, #4094]	; 0xffe
 800b2c8:	f8a3 17fe 	strh.w	r1, [r3, #2046]	; 0x7fe
			 extract_signal[i+ 2* input_gulp_size] =  FT8_Data[i];
 800b2cc:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
		 for(int i = 0; i< input_gulp_size; i++) {
 800b2d0:	3201      	adds	r2, #1
 800b2d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
			 extract_signal[i+ 2* input_gulp_size] =  FT8_Data[i];
 800b2d6:	f8a3 1ffe 	strh.w	r1, [r3, #4094]	; 0xffe
		 for(int i = 0; i< input_gulp_size; i++) {
 800b2da:	d1ef      	bne.n	800b2bc <process_FT8_FFT+0x8>
		 if(ft8_flag == 1) {
 800b2dc:	4d1b      	ldr	r5, [pc, #108]	; (800b34c <process_FT8_FFT+0x98>)
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d12e      	bne.n	800b342 <process_FT8_FFT+0x8e>
		 master_offset =  offset_step *  FT_8_counter;
 800b2e4:	4c1a      	ldr	r4, [pc, #104]	; (800b350 <process_FT8_FFT+0x9c>)
 800b2e6:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <process_FT8_FFT+0xa0>)
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4e1a      	ldr	r6, [pc, #104]	; (800b358 <process_FT8_FFT+0xa4>)
 800b2ee:	4358      	muls	r0, r3
 800b2f0:	6030      	str	r0, [r6, #0]
		 extract_power(master_offset);
 800b2f2:	f7ff ff35 	bl	800b160 <extract_power>
				if(export_fft_power[k + master_offset ] <64 )
 800b2f6:	6831      	ldr	r1, [r6, #0]
		 for(int k = 0; k<ft8_buffer; k++){
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4a18      	ldr	r2, [pc, #96]	; (800b35c <process_FT8_FFT+0xa8>)
				FFT_Buffer[2*k] = 63;
 800b2fc:	263f      	movs	r6, #63	; 0x3f
 800b2fe:	4818      	ldr	r0, [pc, #96]	; (800b360 <process_FT8_FFT+0xac>)
 800b300:	4411      	add	r1, r2
				if(export_fft_power[k + master_offset ] <64 )
 800b302:	5ccf      	ldrb	r7, [r1, r3]
 800b304:	009a      	lsls	r2, r3, #2
 800b306:	2f3f      	cmp	r7, #63	; 0x3f
				FFT_Buffer[2*k] = (uint16_t )export_fft_power[k + master_offset ] ;
 800b308:	4402      	add	r2, r0
 800b30a:	bf9a      	itte	ls
 800b30c:	f820 7023 	strhls.w	r7, [r0, r3, lsl #2]
				FFT_Buffer[2*k+1] = (uint16_t )export_fft_power[k + master_offset + ft8_buffer] ;
 800b310:	18cf      	addls	r7, r1, r3
				FFT_Buffer[2*k] = 63;
 800b312:	f820 6023 	strhhi.w	r6, [r0, r3, lsl #2]
		 for(int k = 0; k<ft8_buffer; k++){
 800b316:	f103 0301 	add.w	r3, r3, #1
				FFT_Buffer[2*k+1] = (uint16_t )export_fft_power[k + master_offset + ft8_buffer] ;
 800b31a:	bf96      	itet	ls
 800b31c:	f897 7190 	ldrbls.w	r7, [r7, #400]	; 0x190
				FFT_Buffer[2*k+1] = 63;
 800b320:	8056      	strhhi	r6, [r2, #2]
				FFT_Buffer[2*k+1] = (uint16_t )export_fft_power[k + master_offset + ft8_buffer] ;
 800b322:	8057      	strhls	r7, [r2, #2]
		 for(int k = 0; k<ft8_buffer; k++){
 800b324:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b328:	d1eb      	bne.n	800b302 <process_FT8_FFT+0x4e>
		Display_WF();
 800b32a:	f7ff fe05 	bl	800af38 <Display_WF>
		 FT_8_counter++;
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	3301      	adds	r3, #1
		 if (FT_8_counter == ft8_msg_samples)
 800b332:	2b5b      	cmp	r3, #91	; 0x5b
		 FT_8_counter++;
 800b334:	6023      	str	r3, [r4, #0]
		 if (FT_8_counter == ft8_msg_samples)
 800b336:	d104      	bne.n	800b342 <process_FT8_FFT+0x8e>
		 {ft8_flag = 0;
 800b338:	2300      	movs	r3, #0
		 decode_flag = 1;
 800b33a:	2201      	movs	r2, #1
		 {ft8_flag = 0;
 800b33c:	602b      	str	r3, [r5, #0]
		 decode_flag = 1;
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <process_FT8_FFT+0xb0>)
 800b340:	601a      	str	r2, [r3, #0]
  }
 800b342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b344:	20008750 	.word	0x20008750
 800b348:	20011568 	.word	0x20011568
 800b34c:	20007344 	.word	0x20007344
 800b350:	20016d78 	.word	0x20016d78
 800b354:	20002af0 	.word	0x20002af0
 800b358:	20042e40 	.word	0x20042e40
 800b35c:	20016d7c 	.word	0x20016d7c
 800b360:	20002af4 	.word	0x20002af4
 800b364:	20001a10 	.word	0x20001a10

0800b368 <start_audio_I2C>:
//uint32_t uwVolume = 80;
//float rgain = 0.5;


void start_audio_I2C (void){
	AUDIO_IO_Init();
 800b368:	f7f6 bea2 	b.w	80020b0 <AUDIO_IO_Init>

0800b36c <clear_Output_Buffers>:

void clear_Output_Buffers(void);

void clear_Output_Buffers(void) {
	int i;
	for(i=0; i<BUFFERSIZE;i++) 	out_buff[i] = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	4a04      	ldr	r2, [pc, #16]	; (800b380 <clear_Output_Buffers+0x14>)
 800b370:	4619      	mov	r1, r3
 800b372:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b376:	3301      	adds	r3, #1
 800b378:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b37c:	d1f9      	bne.n	800b372 <clear_Output_Buffers+0x6>
	}
 800b37e:	4770      	bx	lr
 800b380:	20009f50 	.word	0x20009f50

0800b384 <start_duplex>:
	HAL_Delay(100);
	hope = wm8994_Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_BOTH, 70, (uint32_t)16000);
	HAL_Delay(100);
}

void start_duplex(int mode) {
 800b384:	b510      	push	{r4, lr}
 800b386:	4604      	mov	r4, r0
  //note, somehow there is a sneak path for setting the codec frequency see wmcodec for reference

  HAL_Delay(10);
 800b388:	200a      	movs	r0, #10
 800b38a:	f002 fb5f 	bl	800da4c <HAL_Delay>
  clear_Output_Buffers();
 800b38e:	f7ff ffed 	bl	800b36c <clear_Output_Buffers>
  if(mode == 0)
 800b392:	b9bc      	cbnz	r4, 800b3c4 <start_duplex+0x40>
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_BOTH, 70, 32000);
 800b394:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  else
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_BOTH, 70, 8000) ;
 800b398:	2246      	movs	r2, #70	; 0x46
 800b39a:	2103      	movs	r1, #3
 800b39c:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b3a0:	f7f7 f986 	bl	80026b0 <BSP_AUDIO_IN_OUT_Init>


  BSP_AUDIO_IN_Record((uint16_t*)&in_buff,BUFFERSIZE);
 800b3a4:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800b3a8:	4808      	ldr	r0, [pc, #32]	; (800b3cc <start_duplex+0x48>)
 800b3aa:	f7f7 f8b7 	bl	800251c <BSP_AUDIO_IN_Record>

  BSP_AUDIO_OUT_Play((uint16_t*)&out_buff, 2*BUFFERSIZE);
 800b3ae:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800b3b2:	4807      	ldr	r0, [pc, #28]	; (800b3d0 <start_duplex+0x4c>)
 800b3b4:	f7f6 ffa4 	bl	8002300 <BSP_AUDIO_OUT_Play>

  R_lgain = 0.5;
 800b3b8:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <start_duplex+0x50>)
 800b3ba:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b3be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("nop");
 800b3c0:	bf00      	nop

  NoOp;

}
 800b3c2:	bd10      	pop	{r4, pc}
  BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1, OUTPUT_DEVICE_BOTH, 70, 8000) ;
 800b3c4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800b3c8:	e7e6      	b.n	800b398 <start_duplex+0x14>
 800b3ca:	bf00      	nop
 800b3cc:	20003b40 	.word	0x20003b40
 800b3d0:	20009f50 	.word	0x20009f50
 800b3d4:	2000fb5c 	.word	0x2000fb5c

0800b3d8 <BSP_AUDIO_IN_TransferComplete_CallBack>:
}


void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
	buff_offset = BUFFERSIZE/2;
 800b3d8:	4b03      	ldr	r3, [pc, #12]	; (800b3e8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x10>)
 800b3da:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b3de:	801a      	strh	r2, [r3, #0]
	DSP_Flag = 1;
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	4b02      	ldr	r3, [pc, #8]	; (800b3ec <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800b3e4:	601a      	str	r2, [r3, #0]
	//I2S2_RX_ProcessBuffer(buff_offset );
	//transfer_buffers();


}
 800b3e6:	4770      	bx	lr
 800b3e8:	20013d70 	.word	0x20013d70
 800b3ec:	2000f158 	.word	0x2000f158

0800b3f0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
	buff_offset = 0;
 800b3f0:	4b03      	ldr	r3, [pc, #12]	; (800b400 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	801a      	strh	r2, [r3, #0]
	DSP_Flag = 1;
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4b02      	ldr	r3, [pc, #8]	; (800b404 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800b3fa:	601a      	str	r2, [r3, #0]
	//I2S2_RX_ProcessBuffer(buff_offset );
	//transfer_buffers();
}
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	20013d70 	.word	0x20013d70
 800b404:	2000f158 	.word	0x2000f158

0800b408 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
	//buff_offset = BUFFERSIZE/2;
	//DSP_Flag = 1;
	//transfer_buffers();
	//I2S2_RX_ProcessBuffer(buff_offset );
	//DSP_Process_Switch(buff_offset);
}
 800b408:	4770      	bx	lr

0800b40a <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
 800b40a:	4770      	bx	lr
 800b40c:	0000      	movs	r0, r0
	...

0800b410 <I2S2_RX_ProcessBuffer>:
}

int frame_counter;


void I2S2_RX_ProcessBuffer(uint16_t offset){
 800b410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static q15_t TX_I,TX_Q ;
	static long NCO_phz;
	float m_RMSConstant = 0.00001;


	x_NCOphzinc = (PI2 * LO_Freq / (double) Sample_Frequency);
 800b414:	4c5c      	ldr	r4, [pc, #368]	; (800b588 <I2S2_RX_ProcessBuffer+0x178>)
void I2S2_RX_ProcessBuffer(uint16_t offset){
 800b416:	4605      	mov	r5, r0
	x_NCOphzinc = (PI2 * LO_Freq / (double) Sample_Frequency);
 800b418:	a357      	add	r3, pc, #348	; (adr r3, 800b578 <I2S2_RX_ProcessBuffer+0x168>)
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b422:	f7f5 f979 	bl	8000718 <__aeabi_dmul>
 800b426:	4606      	mov	r6, r0
 800b428:	460f      	mov	r7, r1
 800b42a:	68a0      	ldr	r0, [r4, #8]
 800b42c:	f7f5 f91c 	bl	8000668 <__aeabi_f2d>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	006d      	lsls	r5, r5, #1
 800b43a:	f7f5 fa97 	bl	800096c <__aeabi_ddiv>
 800b43e:	4c53      	ldr	r4, [pc, #332]	; (800b58c <I2S2_RX_ProcessBuffer+0x17c>)
 800b440:	f7f5 fc62 	bl	8000d08 <__aeabi_d2f>
 800b444:	4b52      	ldr	r3, [pc, #328]	; (800b590 <I2S2_RX_ProcessBuffer+0x180>)
 800b446:	442c      	add	r4, r5

	for (int i = 0; i < BUFFERSIZE / 4; i++) {
			NCO_phz += (long) (KCONV * (x_NCOphzinc));
			TX_I = (Sine_table[(NCO_phz >> 4) & 0xFFF]);
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b448:	4f52      	ldr	r7, [pc, #328]	; (800b594 <I2S2_RX_ProcessBuffer+0x184>)
	x_NCOphzinc = (PI2 * LO_Freq / (double) Sample_Frequency);
 800b44a:	6018      	str	r0, [r3, #0]
			NCO_phz += (long) (KCONV * (x_NCOphzinc));
 800b44c:	f7f5 f90c 	bl	8000668 <__aeabi_f2d>
 800b450:	a34b      	add	r3, pc, #300	; (adr r3, 800b580 <I2S2_RX_ProcessBuffer+0x170>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f5 f95f 	bl	8000718 <__aeabi_dmul>
 800b45a:	f7f5 fc0d 	bl	8000c78 <__aeabi_d2iz>
 800b45e:	4a4e      	ldr	r2, [pc, #312]	; (800b598 <I2S2_RX_ProcessBuffer+0x188>)

			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b460:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b5b0 <I2S2_RX_ProcessBuffer+0x1a0>
 800b464:	6813      	ldr	r3, [r2, #0]
 800b466:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 800b59c <I2S2_RX_ProcessBuffer+0x18c>
 800b46a:	18c1      	adds	r1, r0, r3
			FIR_Q_In[i] = (q15_t) ((float) TX_Q   * (float)in_buff[i*2+1+offset] * m_RMSConstant);
 800b46c:	f8df c144 	ldr.w	ip, [pc, #324]	; 800b5b4 <I2S2_RX_ProcessBuffer+0x1a4>
	for (int i = 0; i < BUFFERSIZE / 4; i++) {
 800b470:	2300      	movs	r3, #0
 800b472:	460e      	mov	r6, r1
			TX_I = (Sine_table[(NCO_phz >> 4) & 0xFFF]);
 800b474:	ea4f 1826 	mov.w	r8, r6, asr #4
 800b478:	4406      	add	r6, r0
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b47a:	f508 6980 	add.w	r9, r8, #1024	; 0x400
			TX_I = (Sine_table[(NCO_phz >> 4) & 0xFFF]);
 800b47e:	f3c8 080b 	ubfx	r8, r8, #0, #12
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b482:	f937 8028 	ldrsh.w	r8, [r7, r8, lsl #2]
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b486:	f3c9 090b 	ubfx	r9, r9, #0, #12
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b48a:	ee07 8a10 	vmov	s14, r8
 800b48e:	f934 8023 	ldrsh.w	r8, [r4, r3, lsl #2]
			TX_Q = (Sine_table[((NCO_phz >> 4) + 0x400) & 0xFFF]);
 800b492:	f937 9029 	ldrsh.w	r9, [r7, r9, lsl #2]
			FIR_I_In[i] = (q15_t) ((float) TX_I * (float)in_buff[i*2+offset] * m_RMSConstant);
 800b496:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b49a:	ee07 8a10 	vmov	s14, r8
 800b49e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4a2:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b4a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b4aa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b4ae:	ee17 8a10 	vmov	r8, s14
 800b4b2:	f82e 8013 	strh.w	r8, [lr, r3, lsl #1]
			FIR_Q_In[i] = (q15_t) ((float) TX_Q   * (float)in_buff[i*2+1+offset] * m_RMSConstant);
 800b4b6:	eb04 0883 	add.w	r8, r4, r3, lsl #2
 800b4ba:	f9b8 8002 	ldrsh.w	r8, [r8, #2]
 800b4be:	ee07 8a90 	vmov	s15, r8
 800b4c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4c6:	ee07 9a90 	vmov	s15, r9
 800b4ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b4d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4da:	ee17 8a90 	vmov	r8, s15
 800b4de:	f82c 8013 	strh.w	r8, [ip, r3, lsl #1]
	for (int i = 0; i < BUFFERSIZE / 4; i++) {
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b4e8:	d1c4      	bne.n	800b474 <I2S2_RX_ProcessBuffer+0x64>
 800b4ea:	f240 43ff 	movw	r3, #1279	; 0x4ff
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];



			 if(frame_counter <4) {
 800b4ee:	4c2c      	ldr	r4, [pc, #176]	; (800b5a0 <I2S2_RX_ProcessBuffer+0x190>)
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b4f0:	4f2c      	ldr	r7, [pc, #176]	; (800b5a4 <I2S2_RX_ProcessBuffer+0x194>)

				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b4f2:	f04f 0905 	mov.w	r9, #5
 800b4f6:	fb03 1300 	mla	r3, r3, r0, r1
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b4fa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b5b8 <I2S2_RX_ProcessBuffer+0x1a8>
				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b4fe:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b5bc <I2S2_RX_ProcessBuffer+0x1ac>
 800b502:	6013      	str	r3, [r2, #0]
		 Process_FIR_I_32K();
 800b504:	f7ff fdc2 	bl	800b08c <Process_FIR_I_32K>
		 Process_FIR_Q_32K();
 800b508:	f7ff fdce 	bl	800b0a8 <Process_FIR_Q_32K>
			 if(frame_counter <4) {
 800b50c:	6821      	ldr	r1, [r4, #0]
 800b50e:	4826      	ldr	r0, [pc, #152]	; (800b5a8 <I2S2_RX_ProcessBuffer+0x198>)
		 for(int i=0;i<BUFFERSIZE/4;i++){
 800b510:	2300      	movs	r3, #0
				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b512:	ea4f 2c01 	mov.w	ip, r1, lsl #8
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b516:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 800b5c0 <I2S2_RX_ProcessBuffer+0x1b0>
 800b51a:	4428      	add	r0, r5
 800b51c:	4d23      	ldr	r5, [pc, #140]	; (800b5ac <I2S2_RX_ProcessBuffer+0x19c>)
			 if(frame_counter <4) {
 800b51e:	2903      	cmp	r1, #3
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b520:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b524:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
 800b528:	eba2 0506 	sub.w	r5, r2, r6
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b52c:	4432      	add	r2, r6
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b52e:	b22d      	sxth	r5, r5
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b530:	b212      	sxth	r2, r2
		 USB_Out[i] = FIR_I_Out[i] - FIR_Q_Out[i];
 800b532:	f82e 5013 	strh.w	r5, [lr, r3, lsl #1]
		 LSB_Out[i] = FIR_I_Out[i] + FIR_Q_Out[i];
 800b536:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
			 if(frame_counter <4) {
 800b53a:	dc08      	bgt.n	800b54e <I2S2_RX_ProcessBuffer+0x13e>
				if(i%5 == 0) FT8_Data[i/5 + frame_counter * 256] = USB_Out[i] ;
 800b53c:	fb93 f6f9 	sdiv	r6, r3, r9
 800b540:	eb06 0b86 	add.w	fp, r6, r6, lsl #2
 800b544:	455b      	cmp	r3, fp
 800b546:	bf04      	itt	eq
 800b548:	4466      	addeq	r6, ip
 800b54a:	f82a 5016 	strheq.w	r5, [sl, r6, lsl #1]
				 }


		out_buff[i*2+offset]= (int16_t)USB_Out[i];
 800b54e:	f820 5023 	strh.w	r5, [r0, r3, lsl #2]
		out_buff[i*2+1+offset]= (int16_t)LSB_Out[i];
 800b552:	eb00 0583 	add.w	r5, r0, r3, lsl #2
		 for(int i=0;i<BUFFERSIZE/4;i++){
 800b556:	3301      	adds	r3, #1
		out_buff[i*2+1+offset]= (int16_t)LSB_Out[i];
 800b558:	806a      	strh	r2, [r5, #2]
		 for(int i=0;i<BUFFERSIZE/4;i++){
 800b55a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b55e:	d1dd      	bne.n	800b51c <I2S2_RX_ProcessBuffer+0x10c>

		 }

		 frame_counter++;
 800b560:	3101      	adds	r1, #1

		 if(frame_counter == 4)
 800b562:	2904      	cmp	r1, #4
		 frame_counter++;
 800b564:	6021      	str	r1, [r4, #0]
		 if(frame_counter == 4)
 800b566:	d103      	bne.n	800b570 <I2S2_RX_ProcessBuffer+0x160>
		 {
			  process_FT8_FFT();
 800b568:	f7ff fea4 	bl	800b2b4 <process_FT8_FFT>
			  frame_counter = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	6023      	str	r3, [r4, #0]
		 }

    }
 800b570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	f3af 8000 	nop.w
 800b578:	54442d18 	.word	0x54442d18
 800b57c:	401921fb 	.word	0x401921fb
 800b580:	6dc5d639 	.word	0x6dc5d639
 800b584:	40c45f30 	.word	0x40c45f30
 800b588:	20000c30 	.word	0x20000c30
 800b58c:	20003b40 	.word	0x20003b40
 800b590:	2000f154 	.word	0x2000f154
 800b594:	0805126c 	.word	0x0805126c
 800b598:	200019fc 	.word	0x200019fc
 800b59c:	3727c5ac 	.word	0x3727c5ac
 800b5a0:	20043c20 	.word	0x20043c20
 800b5a4:	20003134 	.word	0x20003134
 800b5a8:	20009f50 	.word	0x20009f50
 800b5ac:	20010b68 	.word	0x20010b68
 800b5b0:	20007d50 	.word	0x20007d50
 800b5b4:	2000f15c 	.word	0x2000f15c
 800b5b8:	2000e754 	.word	0x2000e754
 800b5bc:	20011568 	.word	0x20011568
 800b5c0:	20007350 	.word	0x20007350

0800b5c4 <si5351_write_bulk>:




uint8_t si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
{
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	4617      	mov	r7, r2
	}
	return Wire.endTransmission();
	*/

	int i;
		for(i = 0; i < bytes; i++) {
 800b5cc:	2400      	movs	r4, #0
 800b5ce:	42a5      	cmp	r5, r4
 800b5d0:	dc01      	bgt.n	800b5d6 <si5351_write_bulk+0x12>
			EXT_I2C_Write(SI5351_BUS_BASE_ADDR,addr+i, data[i]);
		}

		return (uint8_t) i;

}
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			EXT_I2C_Write(SI5351_BUS_BASE_ADDR,addr+i, data[i]);
 800b5d6:	1931      	adds	r1, r6, r4
 800b5d8:	5d3a      	ldrb	r2, [r7, r4]
 800b5da:	20c0      	movs	r0, #192	; 0xc0
		for(i = 0; i < bytes; i++) {
 800b5dc:	3401      	adds	r4, #1
			EXT_I2C_Write(SI5351_BUS_BASE_ADDR,addr+i, data[i]);
 800b5de:	b289      	uxth	r1, r1
 800b5e0:	f7f6 fdc0 	bl	8002164 <EXT_I2C_Write>
 800b5e4:	e7f3      	b.n	800b5ce <si5351_write_bulk+0xa>

0800b5e6 <si5351_write>:




uint8_t si5351_write(uint8_t addr, uint8_t data)
{
 800b5e6:	b508      	push	{r3, lr}

	uint8_t buffer[2];
	buffer[0] = data;

	//EXT_I2C_Write(SI5351_BUS_BASE_ADDR, addr, data);
	EXT_I2C_Write_N(SI5351_BUS_BASE_ADDR, addr, buffer[0], 1);
 800b5e8:	460a      	mov	r2, r1
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4601      	mov	r1, r0
 800b5ee:	20c0      	movs	r0, #192	; 0xc0
 800b5f0:	f7f6 fdc8 	bl	8002184 <EXT_I2C_Write_N>

	return 0;
}
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	bd08      	pop	{r3, pc}

0800b5f8 <pll_reset>:
	if(target_pll == SI5351_PLLA)
 800b5f8:	b918      	cbnz	r0, 800b602 <pll_reset+0xa>
    	si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
 800b5fa:	2120      	movs	r1, #32
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 800b5fc:	20b1      	movs	r0, #177	; 0xb1
 800b5fe:	f7ff bff2 	b.w	800b5e6 <si5351_write>
	else if(target_pll == SI5351_PLLB)
 800b602:	2801      	cmp	r0, #1
 800b604:	d101      	bne.n	800b60a <pll_reset+0x12>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 800b606:	2180      	movs	r1, #128	; 0x80
 800b608:	e7f8      	b.n	800b5fc <pll_reset+0x4>
}
 800b60a:	4770      	bx	lr

0800b60c <si5351_read>:

	return reg_val;

	*/

	return EXT_I2C_Read(SI5351_BUS_BASE_ADDR, addr);
 800b60c:	4601      	mov	r1, r0
 800b60e:	20c0      	movs	r0, #192	; 0xc0
 800b610:	f7f6 bdc8 	b.w	80021a4 <EXT_I2C_Read>

0800b614 <output_enable>:
{
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4605      	mov	r5, r0
  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 800b618:	2003      	movs	r0, #3
{
 800b61a:	460c      	mov	r4, r1
  reg_val = si5351_read(SI5351_OUTPUT_ENABLE_CTRL);
 800b61c:	f7ff fff6 	bl	800b60c <si5351_read>
 800b620:	2301      	movs	r3, #1
  if(enable == 1)
 800b622:	2c01      	cmp	r4, #1
 800b624:	fa03 f305 	lsl.w	r3, r3, r5
 800b628:	b25b      	sxtb	r3, r3
    reg_val &= ~(1<<(uint8_t)clk);
 800b62a:	bf0c      	ite	eq
 800b62c:	ea20 0103 	biceq.w	r1, r0, r3
    reg_val |= (1<<(uint8_t)clk);
 800b630:	ea43 0100 	orrne.w	r1, r3, r0
  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 800b634:	2003      	movs	r0, #3
    reg_val |= (1<<(uint8_t)clk);
 800b636:	b2c9      	uxtb	r1, r1
}
 800b638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
 800b63c:	f7ff bfd3 	b.w	800b5e6 <si5351_write>

0800b640 <drive_strength>:
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b640:	3010      	adds	r0, #16
{
 800b642:	b538      	push	{r3, r4, r5, lr}
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b644:	b2c4      	uxtb	r4, r0
{
 800b646:	460d      	mov	r5, r1
  reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b648:	4620      	mov	r0, r4
 800b64a:	f7ff ffdf 	bl	800b60c <si5351_read>
  switch(drive)
 800b64e:	2d02      	cmp	r5, #2
  reg_val &= ~(mask);
 800b650:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  switch(drive)
 800b654:	d00a      	beq.n	800b66c <drive_strength+0x2c>
 800b656:	2d03      	cmp	r5, #3
 800b658:	d00b      	beq.n	800b672 <drive_strength+0x32>
 800b65a:	2d01      	cmp	r5, #1
 800b65c:	d101      	bne.n	800b662 <drive_strength+0x22>
   reg_val |= 0x01;
 800b65e:	f041 0101 	orr.w	r1, r1, #1
  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b662:	4620      	mov	r0, r4
}
 800b664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b668:	f7ff bfbd 	b.w	800b5e6 <si5351_write>
    reg_val |= 0x02;
 800b66c:	f041 0102 	orr.w	r1, r1, #2
    break;
 800b670:	e7f7      	b.n	800b662 <drive_strength+0x22>
    reg_val |= 0x03;
 800b672:	f041 0103 	orr.w	r1, r1, #3
    break;
 800b676:	e7f4      	b.n	800b662 <drive_strength+0x22>

0800b678 <set_ms_source>:
{
 800b678:	b570      	push	{r4, r5, r6, lr}
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b67a:	f100 0410 	add.w	r4, r0, #16
{
 800b67e:	460d      	mov	r5, r1
 800b680:	4606      	mov	r6, r0
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b682:	b2e4      	uxtb	r4, r4
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff ffc1 	bl	800b60c <si5351_read>
 800b68a:	4601      	mov	r1, r0
	if(pll == SI5351_PLLA)
 800b68c:	b93d      	cbnz	r5, 800b69e <set_ms_source+0x26>
		reg_val &= ~(SI5351_CLK_PLL_SELECT);
 800b68e:	f000 01df 	and.w	r1, r0, #223	; 0xdf
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b692:	4620      	mov	r0, r4
 800b694:	f7ff ffa7 	bl	800b5e6 <si5351_write>
	pll_assignment[(uint8_t)clk] = pll;
 800b698:	4b04      	ldr	r3, [pc, #16]	; (800b6ac <set_ms_source+0x34>)
 800b69a:	559d      	strb	r5, [r3, r6]
}
 800b69c:	bd70      	pop	{r4, r5, r6, pc}
	else if(pll == SI5351_PLLB)
 800b69e:	2d01      	cmp	r5, #1
		reg_val |= SI5351_CLK_PLL_SELECT;
 800b6a0:	bf04      	itt	eq
 800b6a2:	f040 0120 	orreq.w	r1, r0, #32
 800b6a6:	b2c9      	uxtbeq	r1, r1
 800b6a8:	e7f3      	b.n	800b692 <set_ms_source+0x1a>
 800b6aa:	bf00      	nop
 800b6ac:	20043c40 	.word	0x20043c40

0800b6b0 <set_int>:
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b6b0:	3010      	adds	r0, #16
{
 800b6b2:	b538      	push	{r3, r4, r5, lr}
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b6b4:	b2c4      	uxtb	r4, r0
{
 800b6b6:	460d      	mov	r5, r1
	reg_val = si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk);
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f7ff ffa7 	bl	800b60c <si5351_read>
	if(enable == 1)
 800b6be:	2d01      	cmp	r5, #1
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 800b6c0:	bf0c      	ite	eq
 800b6c2:	f040 0140 	orreq.w	r1, r0, #64	; 0x40
		reg_val &= ~(SI5351_CLK_INTEGER_MODE);
 800b6c6:	f000 01bf 	andne.w	r1, r0, #191	; 0xbf
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b6ca:	4620      	mov	r0, r4
		reg_val |= (SI5351_CLK_INTEGER_MODE);
 800b6cc:	bf08      	it	eq
 800b6ce:	b2c9      	uxtbeq	r1, r1
}
 800b6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
 800b6d4:	f7ff bf87 	b.w	800b5e6 <si5351_write>

0800b6d8 <pll_calc>:




uint64_t pll_calc(enum si5351_pll pll, uint64_t freq,  Si5351RegSet *reg, int32_t correction, uint8_t vcxo)
{
 800b6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	461f      	mov	r7, r3
 800b6de:	4690      	mov	r8, r2
 800b6e0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 800b6e4:	4b58      	ldr	r3, [pc, #352]	; (800b848 <pll_calc+0x170>)
 800b6e6:	e9dd b10c 	ldrd	fp, r1, [sp, #48]	; 0x30
	uint64_t ref_freq;
	if(pll == SI5351_PLLA)
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f040 808f 	bne.w	800b80e <pll_calc+0x136>
	{
		ref_freq = xtal_freq[(uint8_t)plla_ref_osc] * SI5351_FREQ_MULT;
 800b6f0:	4a56      	ldr	r2, [pc, #344]	; (800b84c <pll_calc+0x174>)
	}
	else
	{
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b6f2:	7812      	ldrb	r2, [r2, #0]
	uint64_t lltmp; //, denom;

	// Factor calibration value into nominal crystal frequency
	// Measured in parts-per-billion

	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b6f4:	07c8      	lsls	r0, r1, #31
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b6f6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800b6fa:	2364      	movs	r3, #100	; 0x64
 800b6fc:	fba4 4503 	umull	r4, r5, r4, r3
	ref_freq = ref_freq + (int32_t)((((((int64_t)correction) << 31) / 1000000000LL) * ref_freq) >> 31);
 800b700:	17cb      	asrs	r3, r1, #31
 800b702:	07de      	lsls	r6, r3, #31
 800b704:	a34a      	add	r3, pc, #296	; (adr r3, 800b830 <pll_calc+0x158>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	ea46 0151 	orr.w	r1, r6, r1, lsr #1
 800b70e:	f7f5 fb4b 	bl	8000da8 <__aeabi_ldivmod>
 800b712:	fb00 f305 	mul.w	r3, r0, r5
 800b716:	fb01 3304 	mla	r3, r1, r4, r3
 800b71a:	fba0 0104 	umull	r0, r1, r0, r4
 800b71e:	4419      	add	r1, r3
 800b720:	0fc3      	lsrs	r3, r0, #31
 800b722:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b726:	18e1      	adds	r1, r4, r3
 800b728:	eb45 72e3 	adc.w	r2, r5, r3, asr #31
 800b72c:	463b      	mov	r3, r7
 800b72e:	e9cd 1200 	strd	r1, r2, [sp]
 800b732:	a141      	add	r1, pc, #260	; (adr r1, 800b838 <pll_calc+0x160>)
 800b734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b738:	4642      	mov	r2, r8
 800b73a:	42b9      	cmp	r1, r7
 800b73c:	bf08      	it	eq
 800b73e:	4540      	cmpeq	r0, r8
 800b740:	bf3c      	itt	cc
 800b742:	4602      	movcc	r2, r0
 800b744:	460b      	movcc	r3, r1
 800b746:	4616      	mov	r6, r2
 800b748:	461f      	mov	r7, r3
 800b74a:	a33d      	add	r3, pc, #244	; (adr r3, 800b840 <pll_calc+0x168>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	429f      	cmp	r7, r3
 800b752:	bf08      	it	eq
 800b754:	4296      	cmpeq	r6, r2
 800b756:	bf3c      	itt	cc
 800b758:	4616      	movcc	r6, r2
 800b75a:	461f      	movcc	r7, r3
	{
		freq = SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT;
	}

	// Determine integer part of feedback equation
	a = freq / ref_freq;
 800b75c:	4630      	mov	r0, r6
 800b75e:	4639      	mov	r1, r7
 800b760:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b764:	f7f5 fb70 	bl	8000e48 <__aeabi_uldivmod>

	if (a < SI5351_PLL_A_MIN)
 800b768:	280e      	cmp	r0, #14
	a = freq / ref_freq;
 800b76a:	4604      	mov	r4, r0
	if (a < SI5351_PLL_A_MIN)
 800b76c:	d851      	bhi.n	800b812 <pll_calc+0x13a>
	{
		freq = ref_freq * SI5351_PLL_A_MIN;
 800b76e:	230f      	movs	r3, #15
	}
	if (a > SI5351_PLL_A_MAX)
	{
		freq = ref_freq * SI5351_PLL_A_MAX;
 800b770:	9a00      	ldr	r2, [sp, #0]
 800b772:	fba2 6703 	umull	r6, r7, r2, r3
 800b776:	9a01      	ldr	r2, [sp, #4]
 800b778:	fb03 7702 	mla	r7, r3, r2, r7
 800b77c:	4630      	mov	r0, r6
 800b77e:	4e34      	ldr	r6, [pc, #208]	; (800b850 <pll_calc+0x178>)
 800b780:	4639      	mov	r1, r7
 800b782:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b786:	f7f5 fb5f 	bl	8000e48 <__aeabi_uldivmod>
 800b78a:	fba2 0106 	umull	r0, r1, r2, r6
 800b78e:	fb06 1103 	mla	r1, r6, r3, r1
 800b792:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b796:	f7f5 fb57 	bl	8000e48 <__aeabi_uldivmod>
	// lltmp = freq % ref_freq;
	// lltmp *= denom;
	// do_div(lltmp, ref_freq);

	//b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
	if(vcxo)
 800b79a:	f1ba 0f00 	cmp.w	sl, #0
 800b79e:	d13c      	bne.n	800b81a <pll_calc+0x142>
	{
		b = (((uint64_t)(freq % ref_freq)) * 1000000ULL) / ref_freq;
		c = 1000000ULL;
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	bf0c      	ite	eq
 800b7a4:	2201      	moveq	r2, #1
 800b7a6:	4632      	movne	r2, r6
		b = (((uint64_t)(freq % ref_freq)) * RFRAC_DENOM) / ref_freq;
		c = b ? RFRAC_DENOM : 1;
	}

	// Calculate parameters
  p1 = 128 * a + ((128 * b) / c) - 512;
 800b7a8:	01c7      	lsls	r7, r0, #7
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	01e6      	lsls	r6, r4, #7
 800b7ae:	f04f 0900 	mov.w	r9, #0
 800b7b2:	fbb7 f3f2 	udiv	r3, r7, r2
 800b7b6:	f5a6 7c00 	sub.w	ip, r6, #512	; 0x200
 800b7ba:	449c      	add	ip, r3
  p2 = 128 * b - c * ((128 * b) / c);
 800b7bc:	fb02 7313 	mls	r3, r2, r3, r7
	lltmp *= b;
	do_div(lltmp, c);
	freq = lltmp;
	freq += ref_freq * a;

	reg->p1 = p1;
 800b7c0:	f8cb c000 	str.w	ip, [fp]
	reg->p2 = p2;
	reg->p3 = p3;
 800b7c4:	e9cb 3201 	strd	r3, r2, [fp, #4]

	if(vcxo)
 800b7c8:	f1ba 0f00 	cmp.w	sl, #0
 800b7cc:	d127      	bne.n	800b81e <pll_calc+0x146>
	lltmp *= b;
 800b7ce:	9b00      	ldr	r3, [sp, #0]
	freq += ref_freq * a;
 800b7d0:	46a0      	mov	r8, r4
	lltmp *= b;
 800b7d2:	9901      	ldr	r1, [sp, #4]
 800b7d4:	fb03 f309 	mul.w	r3, r3, r9
	freq += ref_freq * a;
 800b7d8:	f04f 0900 	mov.w	r9, #0
	lltmp *= b;
 800b7dc:	fb00 3301 	mla	r3, r0, r1, r3
 800b7e0:	9900      	ldr	r1, [sp, #0]
 800b7e2:	fba1 0100 	umull	r0, r1, r1, r0
 800b7e6:	4419      	add	r1, r3
	freq += ref_freq * a;
 800b7e8:	9b01      	ldr	r3, [sp, #4]
 800b7ea:	4363      	muls	r3, r4
 800b7ec:	9c00      	ldr	r4, [sp, #0]
 800b7ee:	fb04 3309 	mla	r3, r4, r9, r3
 800b7f2:	fba8 4504 	umull	r4, r5, r8, r4
 800b7f6:	441d      	add	r5, r3
	do_div(lltmp, c);
 800b7f8:	4653      	mov	r3, sl
 800b7fa:	f7f5 fb25 	bl	8000e48 <__aeabi_uldivmod>
	freq += ref_freq * a;
 800b7fe:	1902      	adds	r2, r0, r4
 800b800:	eb41 0305 	adc.w	r3, r1, r5
	}
	else
	{
		return freq;
	}
}
 800b804:	4610      	mov	r0, r2
 800b806:	4619      	mov	r1, r3
 800b808:	b003      	add	sp, #12
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ref_freq = xtal_freq[(uint8_t)pllb_ref_osc] * SI5351_FREQ_MULT;
 800b80e:	4a11      	ldr	r2, [pc, #68]	; (800b854 <pll_calc+0x17c>)
 800b810:	e76f      	b.n	800b6f2 <pll_calc+0x1a>
	if (a > SI5351_PLL_A_MAX)
 800b812:	285a      	cmp	r0, #90	; 0x5a
 800b814:	d9b2      	bls.n	800b77c <pll_calc+0xa4>
		freq = ref_freq * SI5351_PLL_A_MAX;
 800b816:	235a      	movs	r3, #90	; 0x5a
 800b818:	e7aa      	b.n	800b770 <pll_calc+0x98>
		c = 1000000ULL;
 800b81a:	4632      	mov	r2, r6
 800b81c:	e7c4      	b.n	800b7a8 <pll_calc+0xd0>
		return (uint64_t)(128 * a * 1000000ULL + b);
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <pll_calc+0x178>)
 800b820:	fbe3 8906 	umlal	r8, r9, r3, r6
 800b824:	4642      	mov	r2, r8
 800b826:	464b      	mov	r3, r9
 800b828:	e7ec      	b.n	800b804 <pll_calc+0x12c>
 800b82a:	bf00      	nop
 800b82c:	f3af 8000 	nop.w
 800b830:	3b9aca00 	.word	0x3b9aca00
 800b834:	00000000 	.word	0x00000000
 800b838:	f46b0400 	.word	0xf46b0400
 800b83c:	00000014 	.word	0x00000014
 800b840:	f8475800 	.word	0xf8475800
 800b844:	0000000d 	.word	0x0000000d
 800b848:	20043c2c 	.word	0x20043c2c
 800b84c:	20043c35 	.word	0x20043c35
 800b850:	000f4240 	.word	0x000f4240
 800b854:	20043c28 	.word	0x20043c28

0800b858 <set_pll>:
{
 800b858:	b570      	push	{r4, r5, r6, lr}
	if(target_pll == SI5351_PLLA)
 800b85a:	4616      	mov	r6, r2
{
 800b85c:	b08c      	sub	sp, #48	; 0x30
 800b85e:	4604      	mov	r4, r0
 800b860:	460d      	mov	r5, r1
 800b862:	4a26      	ldr	r2, [pc, #152]	; (800b8fc <set_pll+0xa4>)
 800b864:	ab04      	add	r3, sp, #16
	if(target_pll == SI5351_PLLA)
 800b866:	bba6      	cbnz	r6, 800b8d2 <set_pll+0x7a>
		pll_calc(SI5351_PLLA, pll_freq, &pll_reg, ref_correction[plla_ref_osc], 0);
 800b868:	4925      	ldr	r1, [pc, #148]	; (800b900 <set_pll+0xa8>)
 800b86a:	9602      	str	r6, [sp, #8]
 800b86c:	7809      	ldrb	r1, [r1, #0]
 800b86e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b872:	e9cd 3200 	strd	r3, r2, [sp]
 800b876:	4602      	mov	r2, r0
 800b878:	462b      	mov	r3, r5
 800b87a:	4630      	mov	r0, r6
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 800b87c:	f7ff ff2c 	bl	800b6d8 <pll_calc>
  temp = ((pll_reg.p3 >> 8) & 0xFF);
 800b880:	9b06      	ldr	r3, [sp, #24]
 800b882:	0a1a      	lsrs	r2, r3, #8
  temp = (uint8_t)(pll_reg.p3  & 0xFF);
 800b884:	f88d 301d 	strb.w	r3, [sp, #29]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 800b888:	0b1b      	lsrs	r3, r3, #12
  temp = ((pll_reg.p3 >> 8) & 0xFF);
 800b88a:	f88d 201c 	strb.w	r2, [sp, #28]
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 800b88e:	9a04      	ldr	r2, [sp, #16]
  temp = (uint8_t)((pll_reg.p3 >> 12) & 0xF0);
 800b890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  temp = (uint8_t)((pll_reg.p1 >> 16) & 0x03);
 800b894:	f3c2 4101 	ubfx	r1, r2, #16, #2
  temp = (uint8_t)(pll_reg.p1  & 0xFF);
 800b898:	f88d 2020 	strb.w	r2, [sp, #32]
  params[i++] = temp;
 800b89c:	f88d 101e 	strb.w	r1, [sp, #30]
  temp = (uint8_t)((pll_reg.p1 >> 8) & 0xFF);
 800b8a0:	0a11      	lsrs	r1, r2, #8
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 800b8a2:	9a05      	ldr	r2, [sp, #20]
  temp = (uint8_t)((pll_reg.p1 >> 8) & 0xFF);
 800b8a4:	f88d 101f 	strb.w	r1, [sp, #31]
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 800b8a8:	f3c2 4103 	ubfx	r1, r2, #16, #4
  temp = (uint8_t)(pll_reg.p2  & 0xFF);
 800b8ac:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
  temp += (uint8_t)((pll_reg.p2 >> 16) & 0x0F);
 800b8b0:	430b      	orrs	r3, r1
  params[i++] = temp;
 800b8b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  temp = (uint8_t)((pll_reg.p2 >> 8) & 0xFF);
 800b8b6:	0a13      	lsrs	r3, r2, #8
 800b8b8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
  if(target_pll == SI5351_PLLA)
 800b8bc:	b9ae      	cbnz	r6, 800b8ea <set_pll+0x92>
    si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
 800b8be:	aa07      	add	r2, sp, #28
 800b8c0:	2108      	movs	r1, #8
 800b8c2:	201a      	movs	r0, #26
 800b8c4:	f7ff fe7e 	bl	800b5c4 <si5351_write_bulk>
		plla_freq = pll_freq;
 800b8c8:	4b0e      	ldr	r3, [pc, #56]	; (800b904 <set_pll+0xac>)
		pllb_freq = pll_freq;
 800b8ca:	e9c3 4500 	strd	r4, r5, [r3]
}
 800b8ce:	b00c      	add	sp, #48	; 0x30
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
		pll_calc(SI5351_PLLB, pll_freq, &pll_reg, ref_correction[pllb_ref_osc], 0);
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	9102      	str	r1, [sp, #8]
 800b8d6:	490c      	ldr	r1, [pc, #48]	; (800b908 <set_pll+0xb0>)
 800b8d8:	7809      	ldrb	r1, [r1, #0]
 800b8da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b8de:	e9cd 3200 	strd	r3, r2, [sp]
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	462b      	mov	r3, r5
 800b8e6:	2001      	movs	r0, #1
 800b8e8:	e7c8      	b.n	800b87c <set_pll+0x24>
  else if(target_pll == SI5351_PLLB)
 800b8ea:	2e01      	cmp	r6, #1
 800b8ec:	d1ef      	bne.n	800b8ce <set_pll+0x76>
    si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
 800b8ee:	aa07      	add	r2, sp, #28
 800b8f0:	2108      	movs	r1, #8
 800b8f2:	2022      	movs	r0, #34	; 0x22
 800b8f4:	f7ff fe66 	bl	800b5c4 <si5351_write_bulk>
		pllb_freq = pll_freq;
 800b8f8:	4b04      	ldr	r3, [pc, #16]	; (800b90c <set_pll+0xb4>)
 800b8fa:	e7e6      	b.n	800b8ca <set_pll+0x72>
 800b8fc:	20043c98 	.word	0x20043c98
 800b900:	20043c35 	.word	0x20043c35
 800b904:	20043c38 	.word	0x20043c38
 800b908:	20043c28 	.word	0x20043c28
 800b90c:	20043c50 	.word	0x20043c50

0800b910 <reset>:
{
 800b910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	si5351_write(16, 0x80);
 800b914:	2180      	movs	r1, #128	; 0x80
 800b916:	2010      	movs	r0, #16
 800b918:	f7ff fe65 	bl	800b5e6 <si5351_write>
	si5351_write(17, 0x80);
 800b91c:	2180      	movs	r1, #128	; 0x80
 800b91e:	2011      	movs	r0, #17
	pll_assignment[0] = SI5351_PLLA;
 800b920:	2400      	movs	r4, #0
	si5351_write(17, 0x80);
 800b922:	f7ff fe60 	bl	800b5e6 <si5351_write>
	si5351_write(18, 0x80);
 800b926:	2180      	movs	r1, #128	; 0x80
 800b928:	2012      	movs	r0, #18
	pll_assignment[6] = SI5351_PLLB;
 800b92a:	2501      	movs	r5, #1
	si5351_write(18, 0x80);
 800b92c:	f7ff fe5b 	bl	800b5e6 <si5351_write>
	si5351_write(19, 0x80);
 800b930:	2180      	movs	r1, #128	; 0x80
 800b932:	2013      	movs	r0, #19
		clk_freq[i] = 0;
 800b934:	f04f 0800 	mov.w	r8, #0
	si5351_write(19, 0x80);
 800b938:	f7ff fe55 	bl	800b5e6 <si5351_write>
	si5351_write(20, 0x80);
 800b93c:	2180      	movs	r1, #128	; 0x80
 800b93e:	2014      	movs	r0, #20
		clk_freq[i] = 0;
 800b940:	f04f 0900 	mov.w	r9, #0
	si5351_write(20, 0x80);
 800b944:	f7ff fe4f 	bl	800b5e6 <si5351_write>
	si5351_write(21, 0x80);
 800b948:	2180      	movs	r1, #128	; 0x80
 800b94a:	2015      	movs	r0, #21
		output_enable((enum si5351_clock)i, 0);  //chh
 800b94c:	4627      	mov	r7, r4
	si5351_write(21, 0x80);
 800b94e:	f7ff fe4a 	bl	800b5e6 <si5351_write>
	si5351_write(22, 0x80);
 800b952:	2180      	movs	r1, #128	; 0x80
 800b954:	2016      	movs	r0, #22
		clk_first_set[i] = false;
 800b956:	4e40      	ldr	r6, [pc, #256]	; (800ba58 <reset+0x148>)
	si5351_write(22, 0x80);
 800b958:	f7ff fe45 	bl	800b5e6 <si5351_write>
	si5351_write(23, 0x80);
 800b95c:	2180      	movs	r1, #128	; 0x80
 800b95e:	2017      	movs	r0, #23
 800b960:	f7ff fe41 	bl	800b5e6 <si5351_write>
	si5351_write(16, 0x0c);
 800b964:	210c      	movs	r1, #12
 800b966:	2010      	movs	r0, #16
 800b968:	f7ff fe3d 	bl	800b5e6 <si5351_write>
	si5351_write(17, 0x0c);
 800b96c:	210c      	movs	r1, #12
 800b96e:	2011      	movs	r0, #17
 800b970:	f7ff fe39 	bl	800b5e6 <si5351_write>
	si5351_write(18, 0x0c);
 800b974:	210c      	movs	r1, #12
 800b976:	2012      	movs	r0, #18
 800b978:	f7ff fe35 	bl	800b5e6 <si5351_write>
	si5351_write(19, 0x0c);
 800b97c:	210c      	movs	r1, #12
 800b97e:	2013      	movs	r0, #19
 800b980:	f7ff fe31 	bl	800b5e6 <si5351_write>
	si5351_write(20, 0x0c);
 800b984:	210c      	movs	r1, #12
 800b986:	2014      	movs	r0, #20
 800b988:	f7ff fe2d 	bl	800b5e6 <si5351_write>
	si5351_write(21, 0x0c);
 800b98c:	210c      	movs	r1, #12
 800b98e:	2015      	movs	r0, #21
 800b990:	f7ff fe29 	bl	800b5e6 <si5351_write>
	si5351_write(22, 0x0c);
 800b994:	210c      	movs	r1, #12
 800b996:	2016      	movs	r0, #22
 800b998:	f7ff fe25 	bl	800b5e6 <si5351_write>
	si5351_write(23, 0x0c);
 800b99c:	210c      	movs	r1, #12
 800b99e:	2017      	movs	r0, #23
 800b9a0:	f7ff fe21 	bl	800b5e6 <si5351_write>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	a12a      	add	r1, pc, #168	; (adr r1, 800ba50 <reset+0x140>)
 800b9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ac:	f7ff ff54 	bl	800b858 <set_pll>
	set_pll(SI5351_PLL_FIXED, SI5351_PLLB);
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	a127      	add	r1, pc, #156	; (adr r1, 800ba50 <reset+0x140>)
 800b9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9b8:	f7ff ff4e 	bl	800b858 <set_pll>
	pll_assignment[0] = SI5351_PLLA;
 800b9bc:	4b27      	ldr	r3, [pc, #156]	; (800ba5c <reset+0x14c>)
	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4620      	mov	r0, r4
	pll_assignment[6] = SI5351_PLLB;
 800b9c2:	719d      	strb	r5, [r3, #6]
	pll_assignment[7] = SI5351_PLLB;
 800b9c4:	71dd      	strb	r5, [r3, #7]
	pll_assignment[0] = SI5351_PLLA;
 800b9c6:	701c      	strb	r4, [r3, #0]
	pll_assignment[1] = SI5351_PLLA;
 800b9c8:	705c      	strb	r4, [r3, #1]
	pll_assignment[2] = SI5351_PLLA;
 800b9ca:	709c      	strb	r4, [r3, #2]
	pll_assignment[3] = SI5351_PLLA;
 800b9cc:	70dc      	strb	r4, [r3, #3]
	pll_assignment[4] = SI5351_PLLA;
 800b9ce:	711c      	strb	r4, [r3, #4]
	pll_assignment[5] = SI5351_PLLA;
 800b9d0:	715c      	strb	r4, [r3, #5]
	set_ms_source(SI5351_CLK0, SI5351_PLLA);
 800b9d2:	f7ff fe51 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK1, SI5351_PLLA);
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	4621      	mov	r1, r4
 800b9da:	f7ff fe4d 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK2, SI5351_PLLA);
 800b9de:	4621      	mov	r1, r4
 800b9e0:	2002      	movs	r0, #2
 800b9e2:	f7ff fe49 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK3, SI5351_PLLA);
 800b9e6:	4621      	mov	r1, r4
 800b9e8:	2003      	movs	r0, #3
 800b9ea:	f7ff fe45 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK4, SI5351_PLLA);
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	2004      	movs	r0, #4
 800b9f2:	f7ff fe41 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK5, SI5351_PLLA);
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	2005      	movs	r0, #5
 800b9fa:	f7ff fe3d 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK6, SI5351_PLLB);
 800b9fe:	4629      	mov	r1, r5
 800ba00:	2006      	movs	r0, #6
 800ba02:	f7ff fe39 	bl	800b678 <set_ms_source>
	set_ms_source(SI5351_CLK7, SI5351_PLLB);
 800ba06:	4629      	mov	r1, r5
 800ba08:	2007      	movs	r0, #7
 800ba0a:	4d15      	ldr	r5, [pc, #84]	; (800ba60 <reset+0x150>)
 800ba0c:	f7ff fe34 	bl	800b678 <set_ms_source>
	si5351_write(SI5351_VXCO_PARAMETERS_LOW, 0);
 800ba10:	4621      	mov	r1, r4
 800ba12:	20a2      	movs	r0, #162	; 0xa2
 800ba14:	f7ff fde7 	bl	800b5e6 <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_MID, 0);
 800ba18:	4621      	mov	r1, r4
 800ba1a:	20a3      	movs	r0, #163	; 0xa3
 800ba1c:	f7ff fde3 	bl	800b5e6 <si5351_write>
	si5351_write(SI5351_VXCO_PARAMETERS_HIGH, 0);
 800ba20:	4621      	mov	r1, r4
 800ba22:	20a4      	movs	r0, #164	; 0xa4
 800ba24:	f7ff fddf 	bl	800b5e6 <si5351_write>
	pll_reset(SI5351_PLLA);
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f7ff fde5 	bl	800b5f8 <pll_reset>
	    si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
 800ba2e:	2180      	movs	r1, #128	; 0x80
 800ba30:	20b1      	movs	r0, #177	; 0xb1
 800ba32:	f7ff fdd8 	bl	800b5e6 <si5351_write>
		output_enable((enum si5351_clock)i, 0);  //chh
 800ba36:	b2e0      	uxtb	r0, r4
 800ba38:	2100      	movs	r1, #0
		clk_freq[i] = 0;
 800ba3a:	e9e5 8902 	strd	r8, r9, [r5, #8]!
		output_enable((enum si5351_clock)i, 0);  //chh
 800ba3e:	f7ff fde9 	bl	800b614 <output_enable>
		clk_first_set[i] = false;
 800ba42:	55a7      	strb	r7, [r4, r6]
 800ba44:	3401      	adds	r4, #1
	for(i = 0; i < 8; i++)
 800ba46:	2c08      	cmp	r4, #8
 800ba48:	d1f5      	bne.n	800ba36 <reset+0x126>
}
 800ba4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4e:	bf00      	nop
 800ba50:	a05f2000 	.word	0xa05f2000
 800ba54:	00000012 	.word	0x00000012
 800ba58:	20043c48 	.word	0x20043c48
 800ba5c:	20043c40 	.word	0x20043c40
 800ba60:	20043c50 	.word	0x20043c50

0800ba64 <set_correction>:
{
 800ba64:	b508      	push	{r3, lr}
	ref_correction[(uint8_t)ref_osc] = corr;
 800ba66:	4b08      	ldr	r3, [pc, #32]	; (800ba88 <set_correction+0x24>)
	set_pll(plla_freq, SI5351_PLLA);
 800ba68:	2200      	movs	r2, #0
	ref_correction[(uint8_t)ref_osc] = corr;
 800ba6a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
	set_pll(plla_freq, SI5351_PLLA);
 800ba6e:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <set_correction+0x28>)
 800ba70:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba74:	f7ff fef0 	bl	800b858 <set_pll>
	set_pll(pllb_freq, SI5351_PLLB);
 800ba78:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <set_correction+0x2c>)
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	e9d3 0100 	ldrd	r0, r1, [r3]
}
 800ba80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_pll(pllb_freq, SI5351_PLLB);
 800ba84:	f7ff bee8 	b.w	800b858 <set_pll>
 800ba88:	20043c98 	.word	0x20043c98
 800ba8c:	20043c38 	.word	0x20043c38
 800ba90:	20043c50 	.word	0x20043c50

0800ba94 <init>:
{
 800ba94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 800ba96:	2400      	movs	r4, #0
 800ba98:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <init+0x38>)
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800ba9a:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
{
 800ba9e:	4617      	mov	r7, r2
	plla_ref_osc = SI5351_PLL_INPUT_XO;
 800baa0:	701c      	strb	r4, [r3, #0]
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800baa2:	20b7      	movs	r0, #183	; 0xb7
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 800baa4:	4b0a      	ldr	r3, [pc, #40]	; (800bad0 <init+0x3c>)
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800baa6:	f041 0112 	orr.w	r1, r1, #18
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800baaa:	4d0a      	ldr	r5, [pc, #40]	; (800bad4 <init+0x40>)
	pllb_ref_osc = SI5351_PLL_INPUT_XO;
 800baac:	701c      	strb	r4, [r3, #0]
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800baae:	4e0a      	ldr	r6, [pc, #40]	; (800bad8 <init+0x44>)
	clkin_div = SI5351_CLKIN_DIV_1;
 800bab0:	4b0a      	ldr	r3, [pc, #40]	; (800badc <init+0x48>)
	xtal_freq[0] = SI5351_XTAL_FREQ;
 800bab2:	602e      	str	r6, [r5, #0]
	clkin_div = SI5351_CLKIN_DIV_1;
 800bab4:	701c      	strb	r4, [r3, #0]
	si5351_write(SI5351_CRYSTAL_LOAD, (xtal_load_c & SI5351_CRYSTAL_LOAD_MASK) | 0b00010010);
 800bab6:	f7ff fd96 	bl	800b5e6 <si5351_write>
	set_correction(corr, SI5351_PLL_INPUT_XO);
 800baba:	4621      	mov	r1, r4
 800babc:	4638      	mov	r0, r7
		xtal_freq[(uint8_t)ref_osc] = ref_freq;
 800babe:	602e      	str	r6, [r5, #0]
	set_correction(corr, SI5351_PLL_INPUT_XO);
 800bac0:	f7ff ffd0 	bl	800ba64 <set_correction>
}
 800bac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	reset();
 800bac8:	f7ff bf22 	b.w	800b910 <reset>
 800bacc:	20043c35 	.word	0x20043c35
 800bad0:	20043c28 	.word	0x20043c28
 800bad4:	20043c2c 	.word	0x20043c2c
 800bad8:	018cba80 	.word	0x018cba80
 800badc:	20043c29 	.word	0x20043c29

0800bae0 <multisynth_calc>:

uint64_t multisynth_calc(uint64_t freq, uint64_t pll_freq,  Si5351RegSet *reg)
{
 800bae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	4690      	mov	r8, r2
 800bae6:	4699      	mov	r9, r3
 800bae8:	4606      	mov	r6, r0
 800baea:	460f      	mov	r7, r1
 800baec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	uint32_t a, b, c, p1, p2, p3;
	uint8_t divby4 = 0;
	uint8_t ret_val = 0;

	// Multisynth bounds checking
	if (freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800baee:	a348      	add	r3, pc, #288	; (adr r3, 800bc10 <multisynth_calc+0x130>)
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	428b      	cmp	r3, r1
 800baf6:	bf08      	it	eq
 800baf8:	4282      	cmpeq	r2, r0
 800bafa:	d340      	bcc.n	800bb7e <multisynth_calc+0x9e>
	{
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
	}
	if (freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 800bafc:	a346      	add	r3, pc, #280	; (adr r3, 800bc18 <multisynth_calc+0x138>)
 800bafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb02:	428b      	cmp	r3, r1
 800bb04:	bf08      	it	eq
 800bb06:	4282      	cmpeq	r2, r0
 800bb08:	d279      	bcs.n	800bbfe <multisynth_calc+0x11e>
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
	}

	if (freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800bb0a:	a345      	add	r3, pc, #276	; (adr r3, 800bc20 <multisynth_calc+0x140>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf08      	it	eq
 800bb14:	4282      	cmpeq	r2, r0
 800bb16:	d266      	bcs.n	800bbe6 <multisynth_calc+0x106>
	{
		divby4 = 1;
	}

	if(pll_freq == 0)
 800bb18:	ea58 0309 	orrs.w	r3, r8, r9
 800bb1c:	d05a      	beq.n	800bbd4 <multisynth_calc+0xf4>
		divby4 = 1;
 800bb1e:	f04f 0b01 	mov.w	fp, #1
	{
		// Preset PLL, so return the actual freq for these params instead of PLL freq
		ret_val = 1;

		// Determine integer part of feedback equation
		a = pll_freq / freq;
 800bb22:	4632      	mov	r2, r6
 800bb24:	463b      	mov	r3, r7
 800bb26:	4640      	mov	r0, r8
 800bb28:	4649      	mov	r1, r9
 800bb2a:	f7f5 f98d 	bl	8000e48 <__aeabi_uldivmod>

		if (a < SI5351_MULTISYNTH_A_MIN)
 800bb2e:	2805      	cmp	r0, #5
		a = pll_freq / freq;
 800bb30:	4604      	mov	r4, r0
		if (a < SI5351_MULTISYNTH_A_MIN)
 800bb32:	d852      	bhi.n	800bbda <multisynth_calc+0xfa>
		{
			freq = pll_freq / SI5351_MULTISYNTH_A_MIN;
 800bb34:	2206      	movs	r2, #6
		}
		if (a > SI5351_MULTISYNTH_A_MAX)
		{
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 800bb36:	2300      	movs	r3, #0
 800bb38:	4640      	mov	r0, r8
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	f7f5 f984 	bl	8000e48 <__aeabi_uldivmod>
 800bb40:	4606      	mov	r6, r0
 800bb42:	460f      	mov	r7, r1
		}

		b = (pll_freq % freq * RFRAC_DENOM) / freq;
 800bb44:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 800bc38 <multisynth_calc+0x158>
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	4649      	mov	r1, r9
 800bb50:	f7f5 f97a 	bl	8000e48 <__aeabi_uldivmod>
 800bb54:	fba2 010a 	umull	r0, r1, r2, sl
 800bb58:	4632      	mov	r2, r6
 800bb5a:	fb0a 1103 	mla	r1, sl, r3, r1
 800bb5e:	463b      	mov	r3, r7
 800bb60:	f7f5 f972 	bl	8000e48 <__aeabi_uldivmod>
		c = b ? RFRAC_DENOM : 1;
 800bb64:	2800      	cmp	r0, #0
 800bb66:	bf14      	ite	ne
 800bb68:	4652      	movne	r2, sl
 800bb6a:	2201      	moveq	r2, #1
	}

	// Calculate parameters
	if (divby4 == 1)
 800bb6c:	f1bb 0f00 	cmp.w	fp, #0
 800bb70:	d03f      	beq.n	800bbf2 <multisynth_calc+0x112>
    p1 = 128 * a + ((128 * b) / c) - 512;
    p2 = 128 * b - c * ((128 * b) / c);
    p3 = c;
	}

	reg->p1 = p1;
 800bb72:	2300      	movs	r3, #0
	reg->p2 = p2;
	reg->p3 = p3;
 800bb74:	f8c5 b008 	str.w	fp, [r5, #8]
	reg->p2 = p2;
 800bb78:	e9c5 3300 	strd	r3, r3, [r5]
 800bb7c:	e024      	b.n	800bbc8 <multisynth_calc+0xe8>
		freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 800bb7e:	4616      	mov	r6, r2
 800bb80:	461f      	mov	r7, r3
 800bb82:	e7c9      	b.n	800bb18 <multisynth_calc+0x38>
			do_div(lltmp, freq);
 800bb84:	4632      	mov	r2, r6
 800bb86:	463b      	mov	r3, r7
 800bb88:	a127      	add	r1, pc, #156	; (adr r1, 800bc28 <multisynth_calc+0x148>)
 800bb8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb8e:	f7f5 f95b 	bl	8000e48 <__aeabi_uldivmod>
			else if(lltmp == 7)
 800bb92:	2900      	cmp	r1, #0
 800bb94:	bf08      	it	eq
 800bb96:	2807      	cmpeq	r0, #7
 800bb98:	d100      	bne.n	800bb9c <multisynth_calc+0xbc>
				lltmp = 6;
 800bb9a:	2006      	movs	r0, #6
			a = (uint32_t)lltmp;
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	2300      	movs	r3, #0
		pll_freq = a * freq;
 800bba0:	fba4 8906 	umull	r8, r9, r4, r6
 800bba4:	2000      	movs	r0, #0
 800bba6:	fb04 9907 	mla	r9, r4, r7, r9
	if (divby4 == 1)
 800bbaa:	bb23      	cbnz	r3, 800bbf6 <multisynth_calc+0x116>
		c = 1;
 800bbac:	2201      	movs	r2, #1
    p1 = 128 * a + ((128 * b) / c) - 512;
 800bbae:	01c0      	lsls	r0, r0, #7
 800bbb0:	01e4      	lsls	r4, r4, #7
 800bbb2:	fbb0 f1f2 	udiv	r1, r0, r2
 800bbb6:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
    p2 = 128 * b - c * ((128 * b) / c);
 800bbba:	fb02 0011 	mls	r0, r2, r1, r0
    p1 = 128 * a + ((128 * b) / c) - 512;
 800bbbe:	440c      	add	r4, r1
	reg->p3 = p3;
 800bbc0:	e9c5 0201 	strd	r0, r2, [r5, #4]
	reg->p1 = p1;
 800bbc4:	602c      	str	r4, [r5, #0]

	if(ret_val == 0)
 800bbc6:	b10b      	cbz	r3, 800bbcc <multisynth_calc+0xec>
	reg->p3 = p3;
 800bbc8:	46b0      	mov	r8, r6
 800bbca:	46b9      	mov	r9, r7
	}
	else
	{
		return freq;
	}
}
 800bbcc:	4640      	mov	r0, r8
 800bbce:	4649      	mov	r1, r9
 800bbd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		divby4 = 1;
 800bbd4:	2301      	movs	r3, #1
			a = 4;
 800bbd6:	2404      	movs	r4, #4
 800bbd8:	e7e2      	b.n	800bba0 <multisynth_calc+0xc0>
		if (a > SI5351_MULTISYNTH_A_MAX)
 800bbda:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 800bbde:	d9b1      	bls.n	800bb44 <multisynth_calc+0x64>
			freq = pll_freq / SI5351_MULTISYNTH_A_MAX;
 800bbe0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800bbe4:	e7a7      	b.n	800bb36 <multisynth_calc+0x56>
	if(pll_freq == 0)
 800bbe6:	ea58 0309 	orrs.w	r3, r8, r9
 800bbea:	d0cb      	beq.n	800bb84 <multisynth_calc+0xa4>
 800bbec:	f04f 0b00 	mov.w	fp, #0
 800bbf0:	e797      	b.n	800bb22 <multisynth_calc+0x42>
	if (divby4 == 1)
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e7db      	b.n	800bbae <multisynth_calc+0xce>
	reg->p2 = p2;
 800bbf6:	e9c5 0000 	strd	r0, r0, [r5]
	reg->p3 = p3;
 800bbfa:	60ab      	str	r3, [r5, #8]
 800bbfc:	e7e6      	b.n	800bbcc <multisynth_calc+0xec>
	if(pll_freq == 0)
 800bbfe:	ea58 0309 	orrs.w	r3, r8, r9
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 800bc02:	a70b      	add	r7, pc, #44	; (adr r7, 800bc30 <multisynth_calc+0x150>)
 800bc04:	e9d7 6700 	ldrd	r6, r7, [r7]
	if(pll_freq == 0)
 800bc08:	d1f0      	bne.n	800bbec <multisynth_calc+0x10c>
			do_div(lltmp, freq);
 800bc0a:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800bc0e:	e7c5      	b.n	800bb9c <multisynth_calc+0xbc>
 800bc10:	3d1ac100 	.word	0x3d1ac100
 800bc14:	00000005 	.word	0x00000005
 800bc18:	02faf07f 	.word	0x02faf07f
 800bc1c:	00000000 	.word	0x00000000
 800bc20:	7e11d5ff 	.word	0x7e11d5ff
 800bc24:	00000003 	.word	0x00000003
 800bc28:	f46b0400 	.word	0xf46b0400
 800bc2c:	00000014 	.word	0x00000014
 800bc30:	02faf080 	.word	0x02faf080
 800bc34:	00000000 	.word	0x00000000
 800bc38:	000f4240 	.word	0x000f4240
 800bc3c:	00000000 	.word	0x00000000

0800bc40 <multisynth67_calc>:

uint64_t multisynth67_calc(uint64_t freq, uint64_t pll_freq,  Si5351RegSet *reg)
{
 800bc40:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bc44:	460d      	mov	r5, r1
 800bc46:	4604      	mov	r4, r0
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	9e06      	ldr	r6, [sp, #24]
	// uint8_t ret_val = 0;
	uint32_t a;
	uint64_t lltmp;

	// Multisynth bounds checking
	if(freq > SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT)
 800bc4e:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 800bc52:	e9d9 8900 	ldrd	r8, r9, [r9]
 800bc56:	45a9      	cmp	r9, r5
 800bc58:	bf08      	it	eq
 800bc5a:	45a0      	cmpeq	r8, r4
 800bc5c:	d349      	bcc.n	800bcf2 <multisynth67_calc+0xb2>
	{
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
	}
	if(freq < SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT)
 800bc5e:	a338      	add	r3, pc, #224	; (adr r3, 800bd40 <multisynth67_calc+0x100>)
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	bf08      	it	eq
 800bc68:	42a2      	cmpeq	r2, r4
 800bc6a:	d25c      	bcs.n	800bd26 <multisynth67_calc+0xe6>
	{
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
	}

	if(pll_freq == 0)
 800bc6c:	ea50 0301 	orrs.w	r3, r0, r1
 800bc70:	d144      	bne.n	800bcfc <multisynth67_calc+0xbc>
	{
		// Find largest integer divider for max
		// VCO frequency and given target frequency
		lltmp = (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT) - 100000000UL; // margin needed?
		do_div(lltmp, freq);
 800bc72:	4622      	mov	r2, r4
 800bc74:	462b      	mov	r3, r5
 800bc76:	a134      	add	r1, pc, #208	; (adr r1, 800bd48 <multisynth67_calc+0x108>)
 800bc78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc7c:	f7f5 f8e4 	bl	8000e48 <__aeabi_uldivmod>
		a = (uint32_t)lltmp;

		// Divisor has to be even
		if(a % 2 != 0)
 800bc80:	07c2      	lsls	r2, r0, #31
		a = (uint32_t)lltmp;
 800bc82:	4603      	mov	r3, r0
		if(a % 2 != 0)
 800bc84:	d51f      	bpl.n	800bcc6 <multisynth67_calc+0x86>
		{
			a++;
 800bc86:	3301      	adds	r3, #1
 800bc88:	2bfe      	cmp	r3, #254	; 0xfe
 800bc8a:	bf28      	it	cs
 800bc8c:	23fe      	movcs	r3, #254	; 0xfe
		if(a > SI5351_MULTISYNTH67_A_MAX)
		{
			a = SI5351_MULTISYNTH67_A_MAX;
		}

		pll_freq = a * freq;
 800bc8e:	fba3 0104 	umull	r0, r1, r3, r4

		// PLL bounds checking
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 800bc92:	f20f 09bc 	addw	r9, pc, #188	; 0xbc
 800bc96:	e9d9 8900 	ldrd	r8, r9, [r9]
		pll_freq = a * freq;
 800bc9a:	fb03 1105 	mla	r1, r3, r5, r1
		if(pll_freq > (SI5351_PLL_VCO_MAX * SI5351_FREQ_MULT))
 800bc9e:	4589      	cmp	r9, r1
 800bca0:	bf08      	it	eq
 800bca2:	4580      	cmpeq	r8, r0
 800bca4:	d219      	bcs.n	800bcda <multisynth67_calc+0x9a>
		{
			a -= 2;
 800bca6:	3b02      	subs	r3, #2
			pll_freq = a * freq;
		}
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
		{
			a += 2;
			pll_freq = a * freq;
 800bca8:	fba3 0104 	umull	r0, r1, r3, r4
 800bcac:	fb03 1105 	mla	r1, r3, r5, r1
		}

		reg->p1 = (uint8_t)a;
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	6033      	str	r3, [r6, #0]
		reg->p2 = 0;
 800bcb4:	2300      	movs	r3, #0
		reg->p3 = 0;
 800bcb6:	e9c6 3301 	strd	r3, r3, [r6, #4]
				reg->p3 = 0;
				return 1;
			}
		}
	}
}
 800bcba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		a = (uint32_t)lltmp;
 800bcbe:	2305      	movs	r3, #5
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
 800bcc0:	4644      	mov	r4, r8
 800bcc2:	464d      	mov	r5, r9
 800bcc4:	e7df      	b.n	800bc86 <multisynth67_calc+0x46>
		if(a < SI5351_MULTISYNTH_A_MIN)
 800bcc6:	2805      	cmp	r0, #5
 800bcc8:	d1de      	bne.n	800bc88 <multisynth67_calc+0x48>
			a = SI5351_MULTISYNTH_A_MIN;
 800bcca:	2306      	movs	r3, #6
 800bccc:	e7df      	b.n	800bc8e <multisynth67_calc+0x4e>
		a = (uint32_t)lltmp;
 800bcce:	f240 7306 	movw	r3, #1798	; 0x706
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 800bcd2:	a521      	add	r5, pc, #132	; (adr r5, 800bd58 <multisynth67_calc+0x118>)
 800bcd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bcd8:	e7d6      	b.n	800bc88 <multisynth67_calc+0x48>
		else if(pll_freq < (SI5351_PLL_VCO_MIN * SI5351_FREQ_MULT))
 800bcda:	f04f 090d 	mov.w	r9, #13
 800bcde:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800bd60 <multisynth67_calc+0x120>
 800bce2:	4589      	cmp	r9, r1
 800bce4:	bf08      	it	eq
 800bce6:	4580      	cmpeq	r8, r0
 800bce8:	d3e2      	bcc.n	800bcb0 <multisynth67_calc+0x70>
			a += 2;
 800bcea:	3302      	adds	r3, #2
 800bcec:	e7dc      	b.n	800bca8 <multisynth67_calc+0x68>
			return 0;
 800bcee:	2000      	movs	r0, #0
 800bcf0:	e017      	b.n	800bd22 <multisynth67_calc+0xe2>
	if(pll_freq == 0)
 800bcf2:	ea50 0301 	orrs.w	r3, r0, r1
 800bcf6:	d0e2      	beq.n	800bcbe <multisynth67_calc+0x7e>
		freq = SI5351_MULTISYNTH67_MAX_FREQ * SI5351_FREQ_MULT;
 800bcf8:	4644      	mov	r4, r8
 800bcfa:	464d      	mov	r5, r9
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	462b      	mov	r3, r5
 800bd00:	f7f5 f8a2 	bl	8000e48 <__aeabi_uldivmod>
 800bd04:	4604      	mov	r4, r0
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
		if(pll_freq % freq)
 800bd0a:	ea50 0301 	orrs.w	r3, r0, r1
 800bd0e:	d1ee      	bne.n	800bcee <multisynth67_calc+0xae>
			if(a < SI5351_MULTISYNTH_A_MIN || a > SI5351_MULTISYNTH67_A_MAX)
 800bd10:	1fa3      	subs	r3, r4, #6
 800bd12:	2bf8      	cmp	r3, #248	; 0xf8
 800bd14:	d8d1      	bhi.n	800bcba <multisynth67_calc+0x7a>
				reg->p1 = (uint8_t)a;
 800bd16:	b2e4      	uxtb	r4, r4
				reg->p2 = 0;
 800bd18:	2300      	movs	r3, #0
				return 1;
 800bd1a:	2001      	movs	r0, #1
				reg->p1 = (uint8_t)a;
 800bd1c:	6034      	str	r4, [r6, #0]
				reg->p3 = 0;
 800bd1e:	e9c6 3301 	strd	r3, r3, [r6, #4]
			return 0;
 800bd22:	2100      	movs	r1, #0
 800bd24:	e7c9      	b.n	800bcba <multisynth67_calc+0x7a>
	if(pll_freq == 0)
 800bd26:	ea50 0301 	orrs.w	r3, r0, r1
 800bd2a:	d0d0      	beq.n	800bcce <multisynth67_calc+0x8e>
		freq = SI5351_MULTISYNTH_MIN_FREQ * SI5351_FREQ_MULT;
 800bd2c:	a50a      	add	r5, pc, #40	; (adr r5, 800bd58 <multisynth67_calc+0x118>)
 800bd2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bd32:	e7e3      	b.n	800bcfc <multisynth67_calc+0xbc>
 800bd34:	f3af 8000 	nop.w
 800bd38:	7e11d600 	.word	0x7e11d600
 800bd3c:	00000003 	.word	0x00000003
 800bd40:	02faf07f 	.word	0x02faf07f
 800bd44:	00000000 	.word	0x00000000
 800bd48:	ee752300 	.word	0xee752300
 800bd4c:	00000014 	.word	0x00000014
 800bd50:	f46b0400 	.word	0xf46b0400
 800bd54:	00000014 	.word	0x00000014
 800bd58:	02faf080 	.word	0x02faf080
 800bd5c:	00000000 	.word	0x00000000
 800bd60:	f84757ff 	.word	0xf84757ff

0800bd64 <ms_div>:
  int_status->LOL_A_STKY = (reg_val >> 5) & 0x01;
  int_status->LOS_STKY = (reg_val >> 4) & 0x01;
}

void ms_div(enum si5351_clock clk, uint8_t r_div, uint8_t div_by_4)
{
 800bd64:	2807      	cmp	r0, #7
 800bd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd68:	bf94      	ite	ls
 800bd6a:	4b12      	ldrls	r3, [pc, #72]	; (800bdb4 <ms_div+0x50>)
 800bd6c:	2500      	movhi	r5, #0
 800bd6e:	4604      	mov	r4, r0
 800bd70:	460e      	mov	r6, r1
 800bd72:	bf98      	it	ls
 800bd74:	5c1d      	ldrbls	r5, [r3, r0]
 800bd76:	4617      	mov	r7, r2
		case SI5351_CLK7:
			reg_addr = SI5351_CLK6_7_OUTPUT_DIVIDER;
			break;
	}

	reg_val = si5351_read(reg_addr);
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f7ff fc47 	bl	800b60c <si5351_read>

	if(clk <= (uint8_t)SI5351_CLK5)
 800bd7e:	2c05      	cmp	r4, #5
 800bd80:	d808      	bhi.n	800bd94 <ms_div+0x30>
	{
		// Clear the relevant bits
		reg_val &= ~(0x7c);
 800bd82:	f000 0083 	and.w	r0, r0, #131	; 0x83

		if(div_by_4 == 0)
 800bd86:	b10f      	cbz	r7, 800bd8c <ms_div+0x28>
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}
		else
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
 800bd88:	f040 000c 	orr.w	r0, r0, #12
	else if(clk == SI5351_CLK7)
	{
		// Clear the relevant bits
		reg_val &= ~(0x70);

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
 800bd8c:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
 800bd90:	b2c0      	uxtb	r0, r0
 800bd92:	e004      	b.n	800bd9e <ms_div+0x3a>
	else if(clk == SI5351_CLK6)
 800bd94:	2c06      	cmp	r4, #6
 800bd96:	d108      	bne.n	800bdaa <ms_div+0x46>
		reg_val &= ~(0x07);
 800bd98:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
		reg_val |= r_div;
 800bd9c:	4330      	orrs	r0, r6
	}

	si5351_write(reg_addr, reg_val);
 800bd9e:	4601      	mov	r1, r0
 800bda0:	4628      	mov	r0, r5
}
 800bda2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	si5351_write(reg_addr, reg_val);
 800bda6:	f7ff bc1e 	b.w	800b5e6 <si5351_write>
	else if(clk == SI5351_CLK7)
 800bdaa:	2c07      	cmp	r4, #7
 800bdac:	d1f7      	bne.n	800bd9e <ms_div+0x3a>
		reg_val &= ~(0x70);
 800bdae:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 800bdb2:	e7eb      	b.n	800bd8c <ms_div+0x28>
 800bdb4:	08051264 	.word	0x08051264

0800bdb8 <set_ms>:
{
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	b08b      	sub	sp, #44	; 0x2c
 800bdc0:	468a      	mov	sl, r1
 800bdc2:	fa5f f981 	uxtb.w	r9, r1
 800bdc6:	a801      	add	r0, sp, #4
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800bdc8:	f1b8 0f05 	cmp.w	r8, #5
{
 800bdcc:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 800bdd0:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800bdd4:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 800bdd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800bddc:	d834      	bhi.n	800be48 <set_ms+0x90>
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bdde:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 800bde2:	e9dd b402 	ldrd	fp, r4, [sp, #8]
 800bde6:	302c      	adds	r0, #44	; 0x2c
		temp = (uint8_t)((ms_reg.p3 >> 8) & 0xFF);
 800bde8:	0a23      	lsrs	r3, r4, #8
		temp = (uint8_t)(ms_reg.p3  & 0xFF);
 800bdea:	f88d 4015 	strb.w	r4, [sp, #21]
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bdee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 800bdf2:	0b24      	lsrs	r4, r4, #12
		temp = (uint8_t)((ms_reg.p3 >> 8) & 0xFF);
 800bdf4:	f88d 3014 	strb.w	r3, [sp, #20]
		reg_val = si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8));
 800bdf8:	f7ff fc08 	bl	800b60c <si5351_read>
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 800bdfc:	f3ca 4301 	ubfx	r3, sl, #16, #2
		reg_val &= ~(0x03);
 800be00:	f020 0003 	bic.w	r0, r0, #3
		temp = (uint8_t)((ms_reg.p3 >> 12) & 0xF0);
 800be04:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 800be08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
		temp = reg_val | ((uint8_t)((ms_reg.p1 >> 16) & 0x03));
 800be0c:	4303      	orrs	r3, r0
		params[i++] = temp;
 800be0e:	f88d 9018 	strb.w	r9, [sp, #24]
		params[i++] = temp;
 800be12:	2108      	movs	r1, #8
		temp = (uint8_t)(ms_reg.p2  & 0xFF);
 800be14:	fa5f f98b 	uxtb.w	r9, fp
		params[i++] = temp;
 800be18:	f88d 3016 	strb.w	r3, [sp, #22]
		temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 800be1c:	f3cb 4303 	ubfx	r3, fp, #16, #4
		temp = (uint8_t)((ms_reg.p1 >> 8) & 0xFF);
 800be20:	f88d a017 	strb.w	sl, [sp, #23]
		temp += (uint8_t)((ms_reg.p2 >> 16) & 0x0F);
 800be24:	431c      	orrs	r4, r3
		temp = (uint8_t)((ms_reg.p2 >> 8) & 0xFF);
 800be26:	ea4f 231b 	mov.w	r3, fp, lsr #8
		params[i++] = temp;
 800be2a:	f88d 901b 	strb.w	r9, [sp, #27]
		params[i++] = temp;
 800be2e:	f88d 4019 	strb.w	r4, [sp, #25]
		temp = (uint8_t)((ms_reg.p2 >> 8) & 0xFF);
 800be32:	f88d 301a 	strb.w	r3, [sp, #26]
	switch(clk)
 800be36:	f1b8 0f07 	cmp.w	r8, #7
 800be3a:	d814      	bhi.n	800be66 <set_ms+0xae>
 800be3c:	e8df f008 	tbb	[pc, r8]
 800be40:	2e221606 	.word	0x2e221606
 800be44:	5a52463a 	.word	0x5a52463a
	uint8_t i = 0;
 800be48:	2100      	movs	r1, #0
 800be4a:	e7f4      	b.n	800be36 <set_ms+0x7e>
			si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
 800be4c:	aa05      	add	r2, sp, #20
 800be4e:	202a      	movs	r0, #42	; 0x2a
 800be50:	f7ff fbb8 	bl	800b5c4 <si5351_write_bulk>
			set_int(clk, int_mode);
 800be54:	4639      	mov	r1, r7
 800be56:	2000      	movs	r0, #0
 800be58:	f7ff fc2a 	bl	800b6b0 <set_int>
			ms_div(clk, r_div, div_by_4);
 800be5c:	4632      	mov	r2, r6
 800be5e:	4629      	mov	r1, r5
 800be60:	2000      	movs	r0, #0
			ms_div(clk, r_div, div_by_4);
 800be62:	f7ff ff7f 	bl	800bd64 <ms_div>
}
 800be66:	b00b      	add	sp, #44	; 0x2c
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
 800be6c:	aa05      	add	r2, sp, #20
 800be6e:	2032      	movs	r0, #50	; 0x32
 800be70:	f7ff fba8 	bl	800b5c4 <si5351_write_bulk>
			set_int(clk, int_mode);
 800be74:	4639      	mov	r1, r7
 800be76:	2001      	movs	r0, #1
 800be78:	f7ff fc1a 	bl	800b6b0 <set_int>
			ms_div(clk, r_div, div_by_4);
 800be7c:	4632      	mov	r2, r6
 800be7e:	4629      	mov	r1, r5
 800be80:	2001      	movs	r0, #1
 800be82:	e7ee      	b.n	800be62 <set_ms+0xaa>
			si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
 800be84:	aa05      	add	r2, sp, #20
 800be86:	203a      	movs	r0, #58	; 0x3a
 800be88:	f7ff fb9c 	bl	800b5c4 <si5351_write_bulk>
			set_int(clk, int_mode);
 800be8c:	4639      	mov	r1, r7
 800be8e:	2002      	movs	r0, #2
 800be90:	f7ff fc0e 	bl	800b6b0 <set_int>
			ms_div(clk, r_div, div_by_4);
 800be94:	4632      	mov	r2, r6
 800be96:	4629      	mov	r1, r5
 800be98:	2002      	movs	r0, #2
 800be9a:	e7e2      	b.n	800be62 <set_ms+0xaa>
			si5351_write_bulk(SI5351_CLK3_PARAMETERS, i, params);
 800be9c:	aa05      	add	r2, sp, #20
 800be9e:	2042      	movs	r0, #66	; 0x42
 800bea0:	f7ff fb90 	bl	800b5c4 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bea4:	4639      	mov	r1, r7
 800bea6:	2003      	movs	r0, #3
 800bea8:	f7ff fc02 	bl	800b6b0 <set_int>
			ms_div(clk, r_div, div_by_4);
 800beac:	4632      	mov	r2, r6
 800beae:	4629      	mov	r1, r5
 800beb0:	2003      	movs	r0, #3
 800beb2:	e7d6      	b.n	800be62 <set_ms+0xaa>
			si5351_write_bulk(SI5351_CLK4_PARAMETERS, i, params);
 800beb4:	aa05      	add	r2, sp, #20
 800beb6:	204a      	movs	r0, #74	; 0x4a
 800beb8:	f7ff fb84 	bl	800b5c4 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bebc:	4639      	mov	r1, r7
 800bebe:	2004      	movs	r0, #4
 800bec0:	f7ff fbf6 	bl	800b6b0 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bec4:	4632      	mov	r2, r6
 800bec6:	4629      	mov	r1, r5
 800bec8:	2004      	movs	r0, #4
 800beca:	e7ca      	b.n	800be62 <set_ms+0xaa>
			si5351_write_bulk(SI5351_CLK5_PARAMETERS, i, params);
 800becc:	aa05      	add	r2, sp, #20
 800bece:	2052      	movs	r0, #82	; 0x52
 800bed0:	f7ff fb78 	bl	800b5c4 <si5351_write_bulk>
			set_int(clk, int_mode);
 800bed4:	4639      	mov	r1, r7
 800bed6:	2005      	movs	r0, #5
 800bed8:	f7ff fbea 	bl	800b6b0 <set_int>
			ms_div(clk, r_div, div_by_4);
 800bedc:	4632      	mov	r2, r6
 800bede:	4629      	mov	r1, r5
 800bee0:	2005      	movs	r0, #5
 800bee2:	e7be      	b.n	800be62 <set_ms+0xaa>
			si5351_write(SI5351_CLK6_PARAMETERS, temp);
 800bee4:	4649      	mov	r1, r9
 800bee6:	205a      	movs	r0, #90	; 0x5a
 800bee8:	f7ff fb7d 	bl	800b5e6 <si5351_write>
			ms_div(clk, r_div, div_by_4);
 800beec:	4632      	mov	r2, r6
 800beee:	4629      	mov	r1, r5
 800bef0:	2006      	movs	r0, #6
 800bef2:	e7b6      	b.n	800be62 <set_ms+0xaa>
			si5351_write(SI5351_CLK7_PARAMETERS, temp);
 800bef4:	4649      	mov	r1, r9
 800bef6:	205b      	movs	r0, #91	; 0x5b
 800bef8:	f7ff fb75 	bl	800b5e6 <si5351_write>
			ms_div(clk, r_div, div_by_4);
 800befc:	4632      	mov	r2, r6
 800befe:	4629      	mov	r1, r5
 800bf00:	2007      	movs	r0, #7
 800bf02:	e7ae      	b.n	800be62 <set_ms+0xaa>
 800bf04:	0000      	movs	r0, r0
	...

0800bf08 <select_r_div>:

uint8_t select_r_div(uint64_t *freq)
{
 800bf08:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800bf0c:	e9d0 bc00 	ldrd	fp, ip, [r0]
 800bf10:	4c63      	ldr	r4, [pc, #396]	; (800c0a0 <select_r_div+0x198>)
 800bf12:	f04f 35ff 	mov.w	r5, #4294967295
 800bf16:	2700      	movs	r7, #0
 800bf18:	4e62      	ldr	r6, [pc, #392]	; (800c0a4 <select_r_div+0x19c>)
 800bf1a:	eb14 020b 	adds.w	r2, r4, fp
 800bf1e:	eb45 030c 	adc.w	r3, r5, ip
 800bf22:	429f      	cmp	r7, r3
 800bf24:	bf08      	it	eq
 800bf26:	4296      	cmpeq	r6, r2
 800bf28:	d30a      	bcc.n	800bf40 <select_r_div+0x38>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
		*freq *= 128ULL;
 800bf2a:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800bf2e:	ea4f 12cb 	mov.w	r2, fp, lsl #7
 800bf32:	ea43 635b 	orr.w	r3, r3, fp, lsr #25
 800bf36:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 800bf3a:	2007      	movs	r0, #7
		r_div = SI5351_OUTPUT_CLK_DIV_2;
		*freq *= 2ULL;
	}

	return r_div;
}
 800bf3c:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4))
 800bf40:	4c59      	ldr	r4, [pc, #356]	; (800c0a8 <select_r_div+0x1a0>)
 800bf42:	f04f 35ff 	mov.w	r5, #4294967295
 800bf46:	2700      	movs	r7, #0
 800bf48:	4e58      	ldr	r6, [pc, #352]	; (800c0ac <select_r_div+0x1a4>)
 800bf4a:	eb14 020b 	adds.w	r2, r4, fp
 800bf4e:	eb45 030c 	adc.w	r3, r5, ip
 800bf52:	429f      	cmp	r7, r3
 800bf54:	bf08      	it	eq
 800bf56:	4296      	cmpeq	r6, r2
 800bf58:	d309      	bcc.n	800bf6e <select_r_div+0x66>
		*freq *= 64ULL;
 800bf5a:	ea4f 138c 	mov.w	r3, ip, lsl #6
 800bf5e:	ea4f 128b 	mov.w	r2, fp, lsl #6
 800bf62:	ea43 639b 	orr.w	r3, r3, fp, lsr #26
 800bf66:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800bf6a:	2006      	movs	r0, #6
 800bf6c:	e7e6      	b.n	800bf3c <select_r_div+0x34>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800bf6e:	4c50      	ldr	r4, [pc, #320]	; (800c0b0 <select_r_div+0x1a8>)
 800bf70:	f04f 35ff 	mov.w	r5, #4294967295
 800bf74:	2700      	movs	r7, #0
 800bf76:	4e4f      	ldr	r6, [pc, #316]	; (800c0b4 <select_r_div+0x1ac>)
 800bf78:	eb14 020b 	adds.w	r2, r4, fp
 800bf7c:	eb45 030c 	adc.w	r3, r5, ip
 800bf80:	429f      	cmp	r7, r3
 800bf82:	bf08      	it	eq
 800bf84:	4296      	cmpeq	r6, r2
 800bf86:	d309      	bcc.n	800bf9c <select_r_div+0x94>
		*freq *= 32ULL;
 800bf88:	ea4f 134c 	mov.w	r3, ip, lsl #5
 800bf8c:	ea4f 124b 	mov.w	r2, fp, lsl #5
 800bf90:	ea43 63db 	orr.w	r3, r3, fp, lsr #27
 800bf94:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800bf98:	2005      	movs	r0, #5
 800bf9a:	e7cf      	b.n	800bf3c <select_r_div+0x34>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16))
 800bf9c:	a530      	add	r5, pc, #192	; (adr r5, 800c060 <select_r_div+0x158>)
 800bf9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfa2:	a731      	add	r7, pc, #196	; (adr r7, 800c068 <select_r_div+0x160>)
 800bfa4:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bfa8:	eb14 020b 	adds.w	r2, r4, fp
 800bfac:	eb45 030c 	adc.w	r3, r5, ip
 800bfb0:	429f      	cmp	r7, r3
 800bfb2:	bf08      	it	eq
 800bfb4:	4296      	cmpeq	r6, r2
 800bfb6:	d309      	bcc.n	800bfcc <select_r_div+0xc4>
		*freq *= 16ULL;
 800bfb8:	ea4f 130c 	mov.w	r3, ip, lsl #4
 800bfbc:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800bfc0:	ea43 731b 	orr.w	r3, r3, fp, lsr #28
 800bfc4:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800bfc8:	2004      	movs	r0, #4
 800bfca:	e7b7      	b.n	800bf3c <select_r_div+0x34>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32))
 800bfcc:	a528      	add	r5, pc, #160	; (adr r5, 800c070 <select_r_div+0x168>)
 800bfce:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfd2:	a729      	add	r7, pc, #164	; (adr r7, 800c078 <select_r_div+0x170>)
 800bfd4:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bfd8:	eb14 020b 	adds.w	r2, r4, fp
 800bfdc:	eb45 030c 	adc.w	r3, r5, ip
 800bfe0:	429f      	cmp	r7, r3
 800bfe2:	bf08      	it	eq
 800bfe4:	4296      	cmpeq	r6, r2
 800bfe6:	d309      	bcc.n	800bffc <select_r_div+0xf4>
		*freq *= 8ULL;
 800bfe8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800bfec:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800bff0:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800bff4:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 800bff8:	2003      	movs	r0, #3
 800bffa:	e79f      	b.n	800bf3c <select_r_div+0x34>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64))
 800bffc:	a520      	add	r5, pc, #128	; (adr r5, 800c080 <select_r_div+0x178>)
 800bffe:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c002:	a721      	add	r7, pc, #132	; (adr r7, 800c088 <select_r_div+0x180>)
 800c004:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c008:	eb14 020b 	adds.w	r2, r4, fp
 800c00c:	eb45 030c 	adc.w	r3, r5, ip
 800c010:	429f      	cmp	r7, r3
 800c012:	bf08      	it	eq
 800c014:	4296      	cmpeq	r6, r2
 800c016:	d309      	bcc.n	800c02c <select_r_div+0x124>
		*freq *= 4ULL;
 800c018:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800c01c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800c020:	ea43 739b 	orr.w	r3, r3, fp, lsr #30
 800c024:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 800c028:	2002      	movs	r0, #2
 800c02a:	e787      	b.n	800bf3c <select_r_div+0x34>
	else if((*freq >= SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT * 128))
 800c02c:	a518      	add	r5, pc, #96	; (adr r5, 800c090 <select_r_div+0x188>)
 800c02e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c032:	a719      	add	r7, pc, #100	; (adr r7, 800c098 <select_r_div+0x190>)
 800c034:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c038:	eb14 020b 	adds.w	r2, r4, fp
 800c03c:	eb45 030c 	adc.w	r3, r5, ip
 800c040:	429f      	cmp	r7, r3
 800c042:	bf08      	it	eq
 800c044:	4296      	cmpeq	r6, r2
 800c046:	d307      	bcc.n	800c058 <select_r_div+0x150>
		*freq *= 2ULL;
 800c048:	eb1b 020b 	adds.w	r2, fp, fp
 800c04c:	eb4c 030c 	adc.w	r3, ip, ip
 800c050:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 800c054:	2001      	movs	r0, #1
 800c056:	e771      	b.n	800bf3c <select_r_div+0x34>
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 800c058:	2000      	movs	r0, #0
 800c05a:	e76f      	b.n	800bf3c <select_r_div+0x34>
 800c05c:	f3af 8000 	nop.w
 800c060:	ffcf2c00 	.word	0xffcf2c00
 800c064:	ffffffff 	.word	0xffffffff
 800c068:	0030d3ff 	.word	0x0030d3ff
 800c06c:	00000000 	.word	0x00000000
 800c070:	ff9e5800 	.word	0xff9e5800
 800c074:	ffffffff 	.word	0xffffffff
 800c078:	0061a7ff 	.word	0x0061a7ff
 800c07c:	00000000 	.word	0x00000000
 800c080:	ff3cb000 	.word	0xff3cb000
 800c084:	ffffffff 	.word	0xffffffff
 800c088:	00c34fff 	.word	0x00c34fff
 800c08c:	00000000 	.word	0x00000000
 800c090:	fe796000 	.word	0xfe796000
 800c094:	ffffffff 	.word	0xffffffff
 800c098:	01869fff 	.word	0x01869fff
 800c09c:	00000000 	.word	0x00000000
 800c0a0:	fff9e580 	.word	0xfff9e580
 800c0a4:	00061a7f 	.word	0x00061a7f
 800c0a8:	fff3cb00 	.word	0xfff3cb00
 800c0ac:	000c34ff 	.word	0x000c34ff
 800c0b0:	ffe79600 	.word	0xffe79600
 800c0b4:	001869ff 	.word	0x001869ff

0800c0b8 <select_r_div_ms67>:

uint8_t select_r_div_ms67(uint64_t *freq)
{
 800c0b8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;

	// Choose the correct R divider
	if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2))
 800c0bc:	e9d0 bc00 	ldrd	fp, ip, [r0]
 800c0c0:	4c6b      	ldr	r4, [pc, #428]	; (800c270 <select_r_div_ms67+0x1b8>)
 800c0c2:	f04f 35ff 	mov.w	r5, #4294967295
 800c0c6:	2700      	movs	r7, #0
 800c0c8:	4e6a      	ldr	r6, [pc, #424]	; (800c274 <select_r_div_ms67+0x1bc>)
 800c0ca:	eb14 020b 	adds.w	r2, r4, fp
 800c0ce:	eb45 030c 	adc.w	r3, r5, ip
 800c0d2:	429f      	cmp	r7, r3
 800c0d4:	bf08      	it	eq
 800c0d6:	4296      	cmpeq	r6, r2
 800c0d8:	d30a      	bcc.n	800c0f0 <select_r_div_ms67+0x38>
	{
		r_div = SI5351_OUTPUT_CLK_DIV_128;
		*freq *= 128ULL;
 800c0da:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800c0de:	ea4f 12cb 	mov.w	r2, fp, lsl #7
 800c0e2:	ea43 635b 	orr.w	r3, r3, fp, lsr #25
 800c0e6:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_128;
 800c0ea:	2007      	movs	r0, #7
		r_div = SI5351_OUTPUT_CLK_DIV_2;
		*freq *= 2ULL;
	}

	return r_div;
}
 800c0ec:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 2) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4))
 800c0f0:	a547      	add	r5, pc, #284	; (adr r5, 800c210 <select_r_div_ms67+0x158>)
 800c0f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0f6:	a748      	add	r7, pc, #288	; (adr r7, 800c218 <select_r_div_ms67+0x160>)
 800c0f8:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c0fc:	eb14 020b 	adds.w	r2, r4, fp
 800c100:	eb45 030c 	adc.w	r3, r5, ip
 800c104:	429f      	cmp	r7, r3
 800c106:	bf08      	it	eq
 800c108:	4296      	cmpeq	r6, r2
 800c10a:	d309      	bcc.n	800c120 <select_r_div_ms67+0x68>
		*freq *= 64ULL;
 800c10c:	ea4f 138c 	mov.w	r3, ip, lsl #6
 800c110:	ea4f 128b 	mov.w	r2, fp, lsl #6
 800c114:	ea43 639b 	orr.w	r3, r3, fp, lsr #26
 800c118:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_64;
 800c11c:	2006      	movs	r0, #6
 800c11e:	e7e5      	b.n	800c0ec <select_r_div_ms67+0x34>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 4) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8))
 800c120:	a53f      	add	r5, pc, #252	; (adr r5, 800c220 <select_r_div_ms67+0x168>)
 800c122:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c126:	a740      	add	r7, pc, #256	; (adr r7, 800c228 <select_r_div_ms67+0x170>)
 800c128:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c12c:	eb14 020b 	adds.w	r2, r4, fp
 800c130:	eb45 030c 	adc.w	r3, r5, ip
 800c134:	429f      	cmp	r7, r3
 800c136:	bf08      	it	eq
 800c138:	4296      	cmpeq	r6, r2
 800c13a:	d309      	bcc.n	800c150 <select_r_div_ms67+0x98>
		*freq *= 32ULL;
 800c13c:	ea4f 134c 	mov.w	r3, ip, lsl #5
 800c140:	ea4f 124b 	mov.w	r2, fp, lsl #5
 800c144:	ea43 63db 	orr.w	r3, r3, fp, lsr #27
 800c148:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_32;
 800c14c:	2005      	movs	r0, #5
 800c14e:	e7cd      	b.n	800c0ec <select_r_div_ms67+0x34>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 8) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16))
 800c150:	a537      	add	r5, pc, #220	; (adr r5, 800c230 <select_r_div_ms67+0x178>)
 800c152:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c156:	a738      	add	r7, pc, #224	; (adr r7, 800c238 <select_r_div_ms67+0x180>)
 800c158:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c15c:	eb14 020b 	adds.w	r2, r4, fp
 800c160:	eb45 030c 	adc.w	r3, r5, ip
 800c164:	429f      	cmp	r7, r3
 800c166:	bf08      	it	eq
 800c168:	4296      	cmpeq	r6, r2
 800c16a:	d309      	bcc.n	800c180 <select_r_div_ms67+0xc8>
		*freq *= 16ULL;
 800c16c:	ea4f 130c 	mov.w	r3, ip, lsl #4
 800c170:	ea4f 120b 	mov.w	r2, fp, lsl #4
 800c174:	ea43 731b 	orr.w	r3, r3, fp, lsr #28
 800c178:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_16;
 800c17c:	2004      	movs	r0, #4
 800c17e:	e7b5      	b.n	800c0ec <select_r_div_ms67+0x34>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 16) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32))
 800c180:	a52f      	add	r5, pc, #188	; (adr r5, 800c240 <select_r_div_ms67+0x188>)
 800c182:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c186:	a730      	add	r7, pc, #192	; (adr r7, 800c248 <select_r_div_ms67+0x190>)
 800c188:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c18c:	eb14 020b 	adds.w	r2, r4, fp
 800c190:	eb45 030c 	adc.w	r3, r5, ip
 800c194:	429f      	cmp	r7, r3
 800c196:	bf08      	it	eq
 800c198:	4296      	cmpeq	r6, r2
 800c19a:	d309      	bcc.n	800c1b0 <select_r_div_ms67+0xf8>
		*freq *= 8ULL;
 800c19c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800c1a0:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800c1a4:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 800c1a8:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_8;
 800c1ac:	2003      	movs	r0, #3
 800c1ae:	e79d      	b.n	800c0ec <select_r_div_ms67+0x34>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 32) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64))
 800c1b0:	a527      	add	r5, pc, #156	; (adr r5, 800c250 <select_r_div_ms67+0x198>)
 800c1b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1b6:	a728      	add	r7, pc, #160	; (adr r7, 800c258 <select_r_div_ms67+0x1a0>)
 800c1b8:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c1bc:	eb14 020b 	adds.w	r2, r4, fp
 800c1c0:	eb45 030c 	adc.w	r3, r5, ip
 800c1c4:	429f      	cmp	r7, r3
 800c1c6:	bf08      	it	eq
 800c1c8:	4296      	cmpeq	r6, r2
 800c1ca:	d309      	bcc.n	800c1e0 <select_r_div_ms67+0x128>
		*freq *= 4ULL;
 800c1cc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800c1d0:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800c1d4:	ea43 739b 	orr.w	r3, r3, fp, lsr #30
 800c1d8:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_4;
 800c1dc:	2002      	movs	r0, #2
 800c1de:	e785      	b.n	800c0ec <select_r_div_ms67+0x34>
	else if((*freq >= SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 64) && (*freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT * 128))
 800c1e0:	a51f      	add	r5, pc, #124	; (adr r5, 800c260 <select_r_div_ms67+0x1a8>)
 800c1e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1e6:	a720      	add	r7, pc, #128	; (adr r7, 800c268 <select_r_div_ms67+0x1b0>)
 800c1e8:	e9d7 6700 	ldrd	r6, r7, [r7]
 800c1ec:	eb14 020b 	adds.w	r2, r4, fp
 800c1f0:	eb45 030c 	adc.w	r3, r5, ip
 800c1f4:	429f      	cmp	r7, r3
 800c1f6:	bf08      	it	eq
 800c1f8:	4296      	cmpeq	r6, r2
 800c1fa:	d307      	bcc.n	800c20c <select_r_div_ms67+0x154>
		*freq *= 2ULL;
 800c1fc:	eb1b 020b 	adds.w	r2, fp, fp
 800c200:	eb4c 030c 	adc.w	r3, ip, ip
 800c204:	e9c0 2300 	strd	r2, r3, [r0]
		r_div = SI5351_OUTPUT_CLK_DIV_2;
 800c208:	2001      	movs	r0, #1
 800c20a:	e76f      	b.n	800c0ec <select_r_div_ms67+0x34>
	uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
 800c20c:	2000      	movs	r0, #0
 800c20e:	e76d      	b.n	800c0ec <select_r_div_ms67+0x34>
 800c210:	ffc7aed0 	.word	0xffc7aed0
 800c214:	ffffffff 	.word	0xffffffff
 800c218:	0038512f 	.word	0x0038512f
 800c21c:	00000000 	.word	0x00000000
 800c220:	ff8f5da0 	.word	0xff8f5da0
 800c224:	ffffffff 	.word	0xffffffff
 800c228:	0070a25f 	.word	0x0070a25f
 800c22c:	00000000 	.word	0x00000000
 800c230:	ff1ebb40 	.word	0xff1ebb40
 800c234:	ffffffff 	.word	0xffffffff
 800c238:	00e144bf 	.word	0x00e144bf
 800c23c:	00000000 	.word	0x00000000
 800c240:	fe3d7680 	.word	0xfe3d7680
 800c244:	ffffffff 	.word	0xffffffff
 800c248:	01c2897f 	.word	0x01c2897f
 800c24c:	00000000 	.word	0x00000000
 800c250:	fc7aed00 	.word	0xfc7aed00
 800c254:	ffffffff 	.word	0xffffffff
 800c258:	038512ff 	.word	0x038512ff
 800c25c:	00000000 	.word	0x00000000
 800c260:	f8f5da00 	.word	0xf8f5da00
 800c264:	ffffffff 	.word	0xffffffff
 800c268:	070a25ff 	.word	0x070a25ff
 800c26c:	00000000 	.word	0x00000000
 800c270:	ffe3d768 	.word	0xffe3d768
 800c274:	001c2897 	.word	0x001c2897

0800c278 <set_freq>:
{
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	f110 35ff 	adds.w	r5, r0, #4294967295
 800c280:	b091      	sub	sp, #68	; 0x44
 800c282:	4614      	mov	r4, r2
 800c284:	f141 36ff 	adc.w	r6, r1, #4294967295
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800c288:	2a05      	cmp	r2, #5
{
 800c28a:	e9cd 0106 	strd	r0, r1, [sp, #24]
	if((uint8_t)clk <= (uint8_t)SI5351_CLK5)
 800c28e:	f200 80b3 	bhi.w	800c3f8 <set_freq+0x180>
		if(freq > 0 && freq < SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT)
 800c292:	2300      	movs	r3, #0
 800c294:	4aa6      	ldr	r2, [pc, #664]	; (800c530 <set_freq+0x2b8>)
 800c296:	42b3      	cmp	r3, r6
 800c298:	bf08      	it	eq
 800c29a:	42aa      	cmpeq	r2, r5
 800c29c:	d303      	bcc.n	800c2a6 <set_freq+0x2e>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 800c29e:	4aa5      	ldr	r2, [pc, #660]	; (800c534 <set_freq+0x2bc>)
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(freq > SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT)
 800c2a6:	a39c      	add	r3, pc, #624	; (adr r3, 800c518 <set_freq+0x2a0>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2b0:	428b      	cmp	r3, r1
 800c2b2:	bf08      	it	eq
 800c2b4:	4282      	cmpeq	r2, r0
 800c2b6:	d201      	bcs.n	800c2bc <set_freq+0x44>
			freq = SI5351_MULTISYNTH_MAX_FREQ * SI5351_FREQ_MULT;
 800c2b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(freq > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800c2bc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800c2c0:	a197      	add	r1, pc, #604	; (adr r1, 800c520 <set_freq+0x2a8>)
 800c2c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2c6:	42b9      	cmp	r1, r7
 800c2c8:	bf08      	it	eq
 800c2ca:	42b0      	cmpeq	r0, r6
 800c2cc:	d26a      	bcs.n	800c3a4 <set_freq+0x12c>
 800c2ce:	f8df 8280 	ldr.w	r8, [pc, #640]	; 800c550 <set_freq+0x2d8>
 800c2d2:	2300      	movs	r3, #0
					if(i != (uint8_t)clk && pll_assignment[i] == pll_assignment[clk])
 800c2d4:	4d98      	ldr	r5, [pc, #608]	; (800c538 <set_freq+0x2c0>)
		if(freq > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800c2d6:	4642      	mov	r2, r8
				if(clk_freq[i] > (SI5351_MULTISYNTH_SHARE_MAX * SI5351_FREQ_MULT))
 800c2d8:	e9f2 6702 	ldrd	r6, r7, [r2, #8]!
 800c2dc:	42b9      	cmp	r1, r7
 800c2de:	bf08      	it	eq
 800c2e0:	42b0      	cmpeq	r0, r6
 800c2e2:	d20a      	bcs.n	800c2fa <set_freq+0x82>
					if(i != (uint8_t)clk && pll_assignment[i] == pll_assignment[clk])
 800c2e4:	b2de      	uxtb	r6, r3
 800c2e6:	42b4      	cmp	r4, r6
 800c2e8:	d007      	beq.n	800c2fa <set_freq+0x82>
 800c2ea:	5d5f      	ldrb	r7, [r3, r5]
 800c2ec:	5d2e      	ldrb	r6, [r5, r4]
 800c2ee:	42b7      	cmp	r7, r6
 800c2f0:	d103      	bne.n	800c2fa <set_freq+0x82>
						return 1; // won't set if any other clks already >100 MHz
 800c2f2:	2001      	movs	r0, #1
}
 800c2f4:	b011      	add	sp, #68	; 0x44
 800c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fa:	3301      	adds	r3, #1
			for(i = 0; i < 6; i++)
 800c2fc:	2b06      	cmp	r3, #6
 800c2fe:	d1eb      	bne.n	800c2d8 <set_freq+0x60>
			if(clk_first_set[(uint8_t)clk] == false)
 800c300:	4d8e      	ldr	r5, [pc, #568]	; (800c53c <set_freq+0x2c4>)
 800c302:	5d2b      	ldrb	r3, [r5, r4]
 800c304:	b92b      	cbnz	r3, 800c312 <set_freq+0x9a>
				output_enable(clk, 1);   //chh
 800c306:	2101      	movs	r1, #1
 800c308:	4620      	mov	r0, r4
 800c30a:	f7ff f983 	bl	800b614 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 800c30e:	2301      	movs	r3, #1
 800c310:	552b      	strb	r3, [r5, r4]
			clk_freq[(uint8_t)clk] = freq;
 800c312:	4b8b      	ldr	r3, [pc, #556]	; (800c540 <set_freq+0x2c8>)
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c314:	2200      	movs	r2, #0
			set_pll(pll_freq, pll_assignment[clk]);
 800c316:	4d88      	ldr	r5, [pc, #544]	; (800c538 <set_freq+0x2c0>)
 800c318:	2600      	movs	r6, #0
			clk_freq[(uint8_t)clk] = freq;
 800c31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800c31e:	af0d      	add	r7, sp, #52	; 0x34
			clk_freq[(uint8_t)clk] = freq;
 800c320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c324:	e9c3 0100 	strd	r0, r1, [r3]
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c328:	ab0a      	add	r3, sp, #40	; 0x28
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	2300      	movs	r3, #0
 800c32e:	f7ff fbd7 	bl	800bae0 <multisynth_calc>
			set_pll(pll_freq, pll_assignment[clk]);
 800c332:	5d2a      	ldrb	r2, [r5, r4]
			pll_freq = multisynth_calc(freq, 0, &ms_reg);
 800c334:	4682      	mov	sl, r0
 800c336:	468b      	mov	fp, r1
			set_pll(pll_freq, pll_assignment[clk]);
 800c338:	f7ff fa8e 	bl	800b858 <set_pll>
 800c33c:	fa5f f986 	uxtb.w	r9, r6
				if(clk_freq[i] != 0)
 800c340:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800c344:	ea52 0103 	orrs.w	r1, r2, r3
 800c348:	d024      	beq.n	800c394 <set_freq+0x11c>
					if(pll_assignment[i] == pll_assignment[clk])
 800c34a:	5da8      	ldrb	r0, [r5, r6]
 800c34c:	5d29      	ldrb	r1, [r5, r4]
 800c34e:	4288      	cmp	r0, r1
 800c350:	d120      	bne.n	800c394 <set_freq+0x11c>
						r_div = select_r_div(&temp_freq);
 800c352:	a808      	add	r0, sp, #32
						temp_freq = clk_freq[i];
 800c354:	e9cd 2308 	strd	r2, r3, [sp, #32]
						r_div = select_r_div(&temp_freq);
 800c358:	f7ff fdd6 	bl	800bf08 <select_r_div>
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800c35c:	4652      	mov	r2, sl
						r_div = select_r_div(&temp_freq);
 800c35e:	9005      	str	r0, [sp, #20]
						multisynth_calc(temp_freq, pll_freq, &temp_reg);
 800c360:	465b      	mov	r3, fp
 800c362:	9700      	str	r7, [sp, #0]
 800c364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c368:	f7ff fbba 	bl	800bae0 <multisynth_calc>
						if(temp_freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800c36c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c370:	a16d      	add	r1, pc, #436	; (adr r1, 800c528 <set_freq+0x2b0>)
 800c372:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c376:	4299      	cmp	r1, r3
 800c378:	bf08      	it	eq
 800c37a:	4290      	cmpeq	r0, r2
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 800c37c:	9a05      	ldr	r2, [sp, #20]
 800c37e:	4648      	mov	r0, r9
							int_mode = 1;
 800c380:	bf34      	ite	cc
 800c382:	2301      	movcc	r3, #1
 800c384:	2300      	movcs	r3, #0
						set_ms((enum si5351_clock)i, temp_reg, int_mode, r_div, div_by_4);
 800c386:	9302      	str	r3, [sp, #8]
 800c388:	e9cd 3200 	strd	r3, r2, [sp]
 800c38c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c390:	f7ff fd12 	bl	800bdb8 <set_ms>
 800c394:	3601      	adds	r6, #1
			for(i = 0; i < 6; i++)
 800c396:	2e06      	cmp	r6, #6
 800c398:	d1d0      	bne.n	800c33c <set_freq+0xc4>
			pll_reset(pll_assignment[clk]);
 800c39a:	5d28      	ldrb	r0, [r5, r4]
 800c39c:	f7ff f92c 	bl	800b5f8 <pll_reset>
		return 0;
 800c3a0:	2000      	movs	r0, #0
 800c3a2:	e7a7      	b.n	800c2f4 <set_freq+0x7c>
			clk_freq[(uint8_t)clk] = freq;
 800c3a4:	4b66      	ldr	r3, [pc, #408]	; (800c540 <set_freq+0x2c8>)
			if(clk_first_set[(uint8_t)clk] == false)
 800c3a6:	4d65      	ldr	r5, [pc, #404]	; (800c53c <set_freq+0x2c4>)
			clk_freq[(uint8_t)clk] = freq;
 800c3a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3ac:	e9c3 6700 	strd	r6, r7, [r3]
			if(clk_first_set[(uint8_t)clk] == false)
 800c3b0:	5d2b      	ldrb	r3, [r5, r4]
 800c3b2:	b92b      	cbnz	r3, 800c3c0 <set_freq+0x148>
				output_enable(clk, 1);  //chh
 800c3b4:	2101      	movs	r1, #1
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7ff f92c 	bl	800b614 <output_enable>
				clk_first_set[(uint8_t)clk] = true;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	552b      	strb	r3, [r5, r4]
			r_div = select_r_div(&freq);
 800c3c0:	a806      	add	r0, sp, #24
 800c3c2:	ae0a      	add	r6, sp, #40	; 0x28
 800c3c4:	f7ff fda0 	bl	800bf08 <select_r_div>
			if(pll_assignment[clk] == SI5351_PLLA)
 800c3c8:	4b5b      	ldr	r3, [pc, #364]	; (800c538 <set_freq+0x2c0>)
			r_div = select_r_div(&freq);
 800c3ca:	4607      	mov	r7, r0
			if(pll_assignment[clk] == SI5351_PLLA)
 800c3cc:	5d1b      	ldrb	r3, [r3, r4]
				multisynth_calc(freq, plla_freq, &ms_reg);
 800c3ce:	9600      	str	r6, [sp, #0]
 800c3d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
			if(pll_assignment[clk] == SI5351_PLLA)
 800c3d4:	b973      	cbnz	r3, 800c3f4 <set_freq+0x17c>
				multisynth_calc(freq, plla_freq, &ms_reg);
 800c3d6:	4b5b      	ldr	r3, [pc, #364]	; (800c544 <set_freq+0x2cc>)
			set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 800c3d8:	2500      	movs	r5, #0
				multisynth_calc(freq, pllb_freq, &ms_reg);
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	f7ff fb7f 	bl	800bae0 <multisynth_calc>
			set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 800c3e2:	9500      	str	r5, [sp, #0]
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	e9cd 7501 	strd	r7, r5, [sp, #4]
 800c3ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c3ee:	f7ff fce3 	bl	800bdb8 <set_ms>
 800c3f2:	e7d5      	b.n	800c3a0 <set_freq+0x128>
				multisynth_calc(freq, pllb_freq, &ms_reg);
 800c3f4:	4b54      	ldr	r3, [pc, #336]	; (800c548 <set_freq+0x2d0>)
 800c3f6:	e7ef      	b.n	800c3d8 <set_freq+0x160>
		if(freq > 0 && freq < SI5351_CLKOUT67_MIN_FREQ * SI5351_FREQ_MULT)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4a54      	ldr	r2, [pc, #336]	; (800c54c <set_freq+0x2d4>)
 800c3fc:	42b3      	cmp	r3, r6
 800c3fe:	bf08      	it	eq
 800c400:	42aa      	cmpeq	r2, r5
 800c402:	d303      	bcc.n	800c40c <set_freq+0x194>
			freq = SI5351_CLKOUT_MIN_FREQ * SI5351_FREQ_MULT;
 800c404:	4a4b      	ldr	r2, [pc, #300]	; (800c534 <set_freq+0x2bc>)
 800c406:	2300      	movs	r3, #0
 800c408:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(freq >= SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT)
 800c40c:	a346      	add	r3, pc, #280	; (adr r3, 800c528 <set_freq+0x2b0>)
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c416:	428b      	cmp	r3, r1
 800c418:	bf08      	it	eq
 800c41a:	4282      	cmpeq	r2, r0
 800c41c:	d201      	bcs.n	800c422 <set_freq+0x1aa>
			freq = SI5351_MULTISYNTH_DIVBY4_FREQ * SI5351_FREQ_MULT - 1;
 800c41e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(clk == SI5351_CLK6)
 800c422:	2c06      	cmp	r4, #6
 800c424:	4d46      	ldr	r5, [pc, #280]	; (800c540 <set_freq+0x2c8>)
 800c426:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800c42a:	d142      	bne.n	800c4b2 <set_freq+0x23a>
			if(clk_freq[7] != 0)
 800c42c:	e9d5 890e 	ldrd	r8, r9, [r5, #56]	; 0x38
 800c430:	ea58 0309 	orrs.w	r3, r8, r9
 800c434:	d02b      	beq.n	800c48e <set_freq+0x216>
				if(pllb_freq % freq == 0)
 800c436:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800c548 <set_freq+0x2d0>
 800c43a:	4632      	mov	r2, r6
 800c43c:	463b      	mov	r3, r7
 800c43e:	e9d8 0100 	ldrd	r0, r1, [r8]
 800c442:	f7f4 fd01 	bl	8000e48 <__aeabi_uldivmod>
 800c446:	4313      	orrs	r3, r2
 800c448:	4681      	mov	r9, r0
 800c44a:	f47f af52 	bne.w	800c2f2 <set_freq+0x7a>
					if((pllb_freq / freq) % 2 != 0)
 800c44e:	f009 0001 	and.w	r0, r9, #1
 800c452:	2100      	movs	r1, #0
 800c454:	ea50 0301 	orrs.w	r3, r0, r1
 800c458:	f47f af4b 	bne.w	800c2f2 <set_freq+0x7a>
						clk_freq[(uint8_t)clk] = freq;
 800c45c:	e9c5 670c 	strd	r6, r7, [r5, #48]	; 0x30
						r_div = select_r_div_ms67(&freq);
 800c460:	a806      	add	r0, sp, #24
 800c462:	f7ff fe29 	bl	800c0b8 <select_r_div_ms67>
						multisynth67_calc(freq, pllb_freq, &ms_reg);
 800c466:	ab0a      	add	r3, sp, #40	; 0x28
						r_div = select_r_div_ms67(&freq);
 800c468:	4606      	mov	r6, r0
						multisynth67_calc(freq, pllb_freq, &ms_reg);
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c470:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c474:	f7ff fbe4 	bl	800bc40 <multisynth67_calc>
		set_ms(clk, ms_reg, int_mode, r_div, div_by_4);
 800c478:	2500      	movs	r5, #0
 800c47a:	ab0a      	add	r3, sp, #40	; 0x28
 800c47c:	4620      	mov	r0, r4
 800c47e:	9500      	str	r5, [sp, #0]
 800c480:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800c484:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c486:	f7ff fc97 	bl	800bdb8 <set_ms>
		return 0;
 800c48a:	4628      	mov	r0, r5
 800c48c:	e732      	b.n	800c2f4 <set_freq+0x7c>
				r_div = select_r_div_ms67(&freq);
 800c48e:	a806      	add	r0, sp, #24
				clk_freq[(uint8_t)clk] = freq;
 800c490:	e9c5 670c 	strd	r6, r7, [r5, #48]	; 0x30
				r_div = select_r_div_ms67(&freq);
 800c494:	f7ff fe10 	bl	800c0b8 <select_r_div_ms67>
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c498:	ab0a      	add	r3, sp, #40	; 0x28
 800c49a:	4642      	mov	r2, r8
				r_div = select_r_div_ms67(&freq);
 800c49c:	4606      	mov	r6, r0
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	464b      	mov	r3, r9
 800c4a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4a6:	f7ff fbcb 	bl	800bc40 <multisynth67_calc>
				set_pll(pll_freq, SI5351_PLLB);
 800c4aa:	2201      	movs	r2, #1
				set_pll(pll_freq, pll_assignment[clk]);
 800c4ac:	f7ff f9d4 	bl	800b858 <set_pll>
 800c4b0:	e7e2      	b.n	800c478 <set_freq+0x200>
			if(clk_freq[6] != 0)
 800c4b2:	e9d5 890c 	ldrd	r8, r9, [r5, #48]	; 0x30
 800c4b6:	ea58 0309 	orrs.w	r3, r8, r9
 800c4ba:	d017      	beq.n	800c4ec <set_freq+0x274>
				if(pllb_freq % freq == 0)
 800c4bc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800c548 <set_freq+0x2d0>
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	e9d8 0100 	ldrd	r0, r1, [r8]
 800c4c8:	f7f4 fcbe 	bl	8000e48 <__aeabi_uldivmod>
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	4681      	mov	r9, r0
 800c4d0:	f47f af0f 	bne.w	800c2f2 <set_freq+0x7a>
					if((pllb_freq / freq) % 2 != 0)
 800c4d4:	f009 0001 	and.w	r0, r9, #1
 800c4d8:	2100      	movs	r1, #0
 800c4da:	ea50 0301 	orrs.w	r3, r0, r1
 800c4de:	f47f af08 	bne.w	800c2f2 <set_freq+0x7a>
						clk_freq[(uint8_t)clk] = freq;
 800c4e2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c4e6:	e9c5 6700 	strd	r6, r7, [r5]
 800c4ea:	e7b9      	b.n	800c460 <set_freq+0x1e8>
				clk_freq[(uint8_t)clk] = freq;
 800c4ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
				r_div = select_r_div_ms67(&freq);
 800c4f0:	a806      	add	r0, sp, #24
				clk_freq[(uint8_t)clk] = freq;
 800c4f2:	e9c5 6700 	strd	r6, r7, [r5]
				r_div = select_r_div_ms67(&freq);
 800c4f6:	f7ff fddf 	bl	800c0b8 <select_r_div_ms67>
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c4fa:	ab0a      	add	r3, sp, #40	; 0x28
 800c4fc:	4642      	mov	r2, r8
				r_div = select_r_div_ms67(&freq);
 800c4fe:	4606      	mov	r6, r0
				pll_freq = multisynth67_calc(freq, 0, &ms_reg);
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	464b      	mov	r3, r9
 800c504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c508:	f7ff fb9a 	bl	800bc40 <multisynth67_calc>
				set_pll(pll_freq, pll_assignment[clk]);
 800c50c:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <set_freq+0x2c0>)
 800c50e:	5d1a      	ldrb	r2, [r3, r4]
 800c510:	e7cc      	b.n	800c4ac <set_freq+0x234>
 800c512:	bf00      	nop
 800c514:	f3af 8000 	nop.w
 800c518:	3d1ac100 	.word	0x3d1ac100
 800c51c:	00000005 	.word	0x00000005
 800c520:	540be400 	.word	0x540be400
 800c524:	00000002 	.word	0x00000002
 800c528:	7e11d5ff 	.word	0x7e11d5ff
 800c52c:	00000003 	.word	0x00000003
 800c530:	00061a7e 	.word	0x00061a7e
 800c534:	00061a80 	.word	0x00061a80
 800c538:	20043c40 	.word	0x20043c40
 800c53c:	20043c48 	.word	0x20043c48
 800c540:	20043c58 	.word	0x20043c58
 800c544:	20043c38 	.word	0x20043c38
 800c548:	20043c50 	.word	0x20043c50
 800c54c:	001c2896 	.word	0x001c2896
 800c550:	20043c50 	.word	0x20043c50

0800c554 <drawButton>:

};  // end of button definition



void drawButton(uint16_t i) {
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4604      	mov	r4, r0

		BSP_LCD_SetFont (&Font16);
	if (sButtonData[i].Active > 0){
 800c558:	4d14      	ldr	r5, [pc, #80]	; (800c5ac <drawButton+0x58>)
		BSP_LCD_SetFont (&Font16);
 800c55a:	4815      	ldr	r0, [pc, #84]	; (800c5b0 <drawButton+0x5c>)
	if (sButtonData[i].Active > 0){
 800c55c:	0164      	lsls	r4, r4, #5
		BSP_LCD_SetFont (&Font16);
 800c55e:	f7f6 f9ad 	bl	80028bc <BSP_LCD_SetFont>
	if (sButtonData[i].Active > 0){
 800c562:	192b      	adds	r3, r5, r4
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	2a00      	cmp	r2, #0
 800c568:	dd1f      	ble.n	800c5aa <drawButton+0x56>
        if (sButtonData[i].state == 1)
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	2b01      	cmp	r3, #1
    	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800c56e:	bf0c      	ite	eq
 800c570:	4810      	ldreq	r0, [pc, #64]	; (800c5b4 <drawButton+0x60>)
      else
    	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800c572:	4811      	ldrne	r0, [pc, #68]	; (800c5b8 <drawButton+0x64>)
 800c574:	f7f6 f996 	bl	80028a4 <BSP_LCD_SetBackColor>

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	f7f6 f986 	bl	800288c <BSP_LCD_SetTextColor>

    if (sButtonData[i].state == 1)
 800c580:	192a      	adds	r2, r5, r4
 800c582:	6953      	ldr	r3, [r2, #20]
 800c584:	8b51      	ldrh	r1, [r2, #26]
 800c586:	2b01      	cmp	r3, #1
 800c588:	8b10      	ldrh	r0, [r2, #24]
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, sButtonData[i].text1, 0x03);
 800c58a:	f101 010f 	add.w	r1, r1, #15
 800c58e:	f04f 0303 	mov.w	r3, #3
    else
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, sButtonData[i].text0, 0x03);
 800c592:	bf14      	ite	ne
 800c594:	592a      	ldrne	r2, [r5, r4]
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, sButtonData[i].text1, 0x03);
 800c596:	6852      	ldreq	r2, [r2, #4]
    BSP_LCD_DisplayStringAt(sButtonData[i].x, sButtonData[i].y+15, sButtonData[i].text0, 0x03);
 800c598:	b289      	uxth	r1, r1
 800c59a:	f7f6 fa11 	bl	80029c0 <BSP_LCD_DisplayStringAt>

    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c59e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    }
}
 800c5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c5a6:	f7f6 b97d 	b.w	80028a4 <BSP_LCD_SetBackColor>
}
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	20000c40 	.word	0x20000c40
 800c5b0:	20000030 	.word	0x20000030
 800c5b4:	ffff0000 	.word	0xffff0000
 800c5b8:	ff0000ff 	.word	0xff0000ff

0800c5bc <executeCalibrationButton>:



   void executeCalibrationButton (uint16_t index){

      switch (index) {
 800c5bc:	380a      	subs	r0, #10
   void executeCalibrationButton (uint16_t index){
 800c5be:	b538      	push	{r3, r4, r5, lr}
      switch (index) {
 800c5c0:	2810      	cmp	r0, #16
 800c5c2:	f200 809b 	bhi.w	800c6fc <executeCalibrationButton+0x140>
 800c5c6:	e8df f000 	tbb	[pc, r0]
 800c5ca:	2509      	.short	0x2509
 800c5cc:	2b999999 	.word	0x2b999999
 800c5d0:	534a3f38 	.word	0x534a3f38
 800c5d4:	7b74675e 	.word	0x7b74675e
 800c5d8:	8a83      	.short	0x8a83
 800c5da:	92          	.byte	0x92
 800c5db:	00          	.byte	0x00

      case 10:  //Lower Band

      if (BandIndex > 0) {
 800c5dc:	4d48      	ldr	r5, [pc, #288]	; (800c700 <executeCalibrationButton+0x144>)
 800c5de:	682b      	ldr	r3, [r5, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f340 808b 	ble.w	800c6fc <executeCalibrationButton+0x140>
    	  BandIndex --;
 800c5e6:	3b01      	subs	r3, #1

      case 11:  //Raise Band

	  if (BandIndex < numBands-1) {
		  BandIndex ++;
		  show_wide(340, 60, sBand_Data[BandIndex].Frequency );
 800c5e8:	4c46      	ldr	r4, [pc, #280]	; (800c704 <executeCalibrationButton+0x148>)
 800c5ea:	213c      	movs	r1, #60	; 0x3c
		  BandIndex ++;
 800c5ec:	602b      	str	r3, [r5, #0]
		  show_wide(340, 60, sBand_Data[BandIndex].Frequency );
 800c5ee:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800c5f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c5f6:	f8b3 2380 	ldrh.w	r2, [r3, #896]	; 0x380
 800c5fa:	f7fe fae5 	bl	800abc8 <show_wide>
		  sprintf(display_frequency,"%s",sBand_Data[BandIndex].display);
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	f504 706a 	add.w	r0, r4, #936	; 0x3a8
 800c604:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c608:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384

		   break;

      }

   }
 800c60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  sprintf(display_frequency,"%s",sBand_Data[BandIndex].display);
 800c610:	f001 bf31 	b.w	800e476 <strcpy>
	  if (BandIndex < numBands-1) {
 800c614:	4d3a      	ldr	r5, [pc, #232]	; (800c700 <executeCalibrationButton+0x144>)
 800c616:	682b      	ldr	r3, [r5, #0]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	dc6f      	bgt.n	800c6fc <executeCalibrationButton+0x140>
		  BandIndex ++;
 800c61c:	3301      	adds	r3, #1
 800c61e:	e7e3      	b.n	800c5e8 <executeCalibrationButton+0x2c>
	  if (s_RTC_Data[3].data > s_RTC_Data[3].Minimum) {
 800c620:	4a39      	ldr	r2, [pc, #228]	; (800c708 <executeCalibrationButton+0x14c>)
 800c622:	7f93      	ldrb	r3, [r2, #30]
 800c624:	7f11      	ldrb	r1, [r2, #28]
 800c626:	4299      	cmp	r1, r3
 800c628:	d268      	bcs.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[3].data --;
 800c62a:	3b01      	subs	r3, #1
		  s_RTC_Data[3].data ++;
 800c62c:	7793      	strb	r3, [r2, #30]
		  display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c62e:	2137      	movs	r1, #55	; 0x37
 800c630:	2050      	movs	r0, #80	; 0x50
   }
 800c632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c636:	f7fe b905 	b.w	800a844 <display_RTC_TimeEdit>
	  if (s_RTC_Data[3].data< s_RTC_Data[3].Maximum) {
 800c63a:	4a33      	ldr	r2, [pc, #204]	; (800c708 <executeCalibrationButton+0x14c>)
 800c63c:	7f93      	ldrb	r3, [r2, #30]
 800c63e:	7f51      	ldrb	r1, [r2, #29]
 800c640:	4299      	cmp	r1, r3
 800c642:	d95b      	bls.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[3].data ++;
 800c644:	3301      	adds	r3, #1
 800c646:	e7f1      	b.n	800c62c <executeCalibrationButton+0x70>
	  if (s_RTC_Data[4].data > s_RTC_Data[4].Minimum) {
 800c648:	4a2f      	ldr	r2, [pc, #188]	; (800c708 <executeCalibrationButton+0x14c>)
 800c64a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800c64e:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 800c652:	4299      	cmp	r1, r3
 800c654:	d252      	bcs.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[4].data --;
 800c656:	3b01      	subs	r3, #1
		  s_RTC_Data[4].data ++;
 800c658:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 800c65c:	e7e7      	b.n	800c62e <executeCalibrationButton+0x72>
	  if (s_RTC_Data[4].data< s_RTC_Data[4].Maximum) {
 800c65e:	4a2a      	ldr	r2, [pc, #168]	; (800c708 <executeCalibrationButton+0x14c>)
 800c660:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800c664:	f892 1025 	ldrb.w	r1, [r2, #37]	; 0x25
 800c668:	4299      	cmp	r1, r3
 800c66a:	d947      	bls.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[4].data ++;
 800c66c:	3301      	adds	r3, #1
 800c66e:	e7f3      	b.n	800c658 <executeCalibrationButton+0x9c>
     	  if (s_RTC_Data[5].data > s_RTC_Data[5].Minimum) {
 800c670:	4a25      	ldr	r2, [pc, #148]	; (800c708 <executeCalibrationButton+0x14c>)
 800c672:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c676:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 800c67a:	4299      	cmp	r1, r3
 800c67c:	d23e      	bcs.n	800c6fc <executeCalibrationButton+0x140>
     		  s_RTC_Data[5].data --;
 800c67e:	3b01      	subs	r3, #1
     		  s_RTC_Data[5].data ++;
 800c680:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 800c684:	e7d3      	b.n	800c62e <executeCalibrationButton+0x72>
     	  if (s_RTC_Data[5].data< s_RTC_Data[5].Maximum) {
 800c686:	4a20      	ldr	r2, [pc, #128]	; (800c708 <executeCalibrationButton+0x14c>)
 800c688:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
 800c68c:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800c690:	4299      	cmp	r1, r3
 800c692:	d933      	bls.n	800c6fc <executeCalibrationButton+0x140>
     		  s_RTC_Data[5].data ++;
 800c694:	3301      	adds	r3, #1
 800c696:	e7f3      	b.n	800c680 <executeCalibrationButton+0xc4>
	  if (s_RTC_Data[0].data > s_RTC_Data[0].Minimum) {
 800c698:	4a1b      	ldr	r2, [pc, #108]	; (800c708 <executeCalibrationButton+0x14c>)
 800c69a:	7993      	ldrb	r3, [r2, #6]
 800c69c:	7911      	ldrb	r1, [r2, #4]
 800c69e:	4299      	cmp	r1, r3
 800c6a0:	d22c      	bcs.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[0].data --;
 800c6a2:	3b01      	subs	r3, #1
		  s_RTC_Data[0].data ++;
 800c6a4:	7193      	strb	r3, [r2, #6]
		  display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c6a6:	2191      	movs	r1, #145	; 0x91
 800c6a8:	2050      	movs	r0, #80	; 0x50
   }
 800c6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c6ae:	f7fe b911 	b.w	800a8d4 <display_RTC_DateEdit>
	  if (s_RTC_Data[0].data< s_RTC_Data[0].Maximum) {
 800c6b2:	4a15      	ldr	r2, [pc, #84]	; (800c708 <executeCalibrationButton+0x14c>)
 800c6b4:	7993      	ldrb	r3, [r2, #6]
 800c6b6:	7951      	ldrb	r1, [r2, #5]
 800c6b8:	4299      	cmp	r1, r3
 800c6ba:	d91f      	bls.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[0].data ++;
 800c6bc:	3301      	adds	r3, #1
 800c6be:	e7f1      	b.n	800c6a4 <executeCalibrationButton+0xe8>
	  if (s_RTC_Data[1].data > s_RTC_Data[1].Minimum) {
 800c6c0:	4a11      	ldr	r2, [pc, #68]	; (800c708 <executeCalibrationButton+0x14c>)
 800c6c2:	7b93      	ldrb	r3, [r2, #14]
 800c6c4:	7b11      	ldrb	r1, [r2, #12]
 800c6c6:	4299      	cmp	r1, r3
 800c6c8:	d218      	bcs.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[1].data --;
 800c6ca:	3b01      	subs	r3, #1
		  s_RTC_Data[1].data ++;
 800c6cc:	7393      	strb	r3, [r2, #14]
 800c6ce:	e7ea      	b.n	800c6a6 <executeCalibrationButton+0xea>
	  if (s_RTC_Data[1].data< s_RTC_Data[1].Maximum) {
 800c6d0:	4a0d      	ldr	r2, [pc, #52]	; (800c708 <executeCalibrationButton+0x14c>)
 800c6d2:	7b93      	ldrb	r3, [r2, #14]
 800c6d4:	7b51      	ldrb	r1, [r2, #13]
 800c6d6:	4299      	cmp	r1, r3
 800c6d8:	d910      	bls.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[1].data ++;
 800c6da:	3301      	adds	r3, #1
 800c6dc:	e7f6      	b.n	800c6cc <executeCalibrationButton+0x110>
	  if (s_RTC_Data[2].data > s_RTC_Data[2].Minimum) {
 800c6de:	4a0a      	ldr	r2, [pc, #40]	; (800c708 <executeCalibrationButton+0x14c>)
 800c6e0:	7d93      	ldrb	r3, [r2, #22]
 800c6e2:	7d11      	ldrb	r1, [r2, #20]
 800c6e4:	4299      	cmp	r1, r3
 800c6e6:	d209      	bcs.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[2].data --;
 800c6e8:	3b01      	subs	r3, #1
		  s_RTC_Data[2].data ++;
 800c6ea:	7593      	strb	r3, [r2, #22]
 800c6ec:	e7db      	b.n	800c6a6 <executeCalibrationButton+0xea>
	  if (s_RTC_Data[2].data< s_RTC_Data[2].Maximum) {
 800c6ee:	4a06      	ldr	r2, [pc, #24]	; (800c708 <executeCalibrationButton+0x14c>)
 800c6f0:	7d93      	ldrb	r3, [r2, #22]
 800c6f2:	7d51      	ldrb	r1, [r2, #21]
 800c6f4:	4299      	cmp	r1, r3
 800c6f6:	d901      	bls.n	800c6fc <executeCalibrationButton+0x140>
		  s_RTC_Data[2].data ++;
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	e7f6      	b.n	800c6ea <executeCalibrationButton+0x12e>
   }
 800c6fc:	bd38      	pop	{r3, r4, r5, pc}
 800c6fe:	bf00      	nop
 800c700:	2003a824 	.word	0x2003a824
 800c704:	20000c40 	.word	0x20000c40
 800c708:	200009d8 	.word	0x200009d8

0800c70c <testButton>:



uint16_t testButton(uint16_t x,uint16_t y,uint16_t w,uint16_t h) {
 800c70c:	b510      	push	{r4, lr}

	  y = y +15; // compensate for draw offset

	  if  ((valx < x+w && valx > x) && (valy > y && valy < y+h)){
 800c70e:	4c0a      	ldr	r4, [pc, #40]	; (800c738 <testButton+0x2c>)
 800c710:	4402      	add	r2, r0
 800c712:	8824      	ldrh	r4, [r4, #0]
 800c714:	4294      	cmp	r4, r2
 800c716:	da0d      	bge.n	800c734 <testButton+0x28>
 800c718:	4284      	cmp	r4, r0
 800c71a:	d90b      	bls.n	800c734 <testButton+0x28>
	  y = y +15; // compensate for draw offset
 800c71c:	310f      	adds	r1, #15
	  if  ((valx < x+w && valx > x) && (valy > y && valy < y+h)){
 800c71e:	4a07      	ldr	r2, [pc, #28]	; (800c73c <testButton+0x30>)
	  y = y +15; // compensate for draw offset
 800c720:	b289      	uxth	r1, r1
	  if  ((valx < x+w && valx > x) && (valy > y && valy < y+h)){
 800c722:	8810      	ldrh	r0, [r2, #0]
 800c724:	4288      	cmp	r0, r1
 800c726:	d905      	bls.n	800c734 <testButton+0x28>
 800c728:	4419      	add	r1, r3
	  return 1;
 800c72a:	4288      	cmp	r0, r1
 800c72c:	bfac      	ite	ge
 800c72e:	2000      	movge	r0, #0
 800c730:	2001      	movlt	r0, #1
	  }else{
	  return 0;
		}
}
 800c732:	bd10      	pop	{r4, pc}
	  return 0;
 800c734:	2000      	movs	r0, #0
 800c736:	e7fc      	b.n	800c732 <testButton+0x26>
 800c738:	2003a8b8 	.word	0x2003a8b8
 800c73c:	2003a88c 	.word	0x2003a88c

0800c740 <setup_Cal_Display>:




void setup_Cal_Display(void){
 800c740:	b570      	push	{r4, r5, r6, lr}

	//clear_messages();
	//clear_xmit_messages();

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c742:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
	BSP_LCD_FillRect(0, FFT_H, 480, 201);


	sButtonData[10].Active = 3;
 800c746:	4c25      	ldr	r4, [pc, #148]	; (800c7dc <setup_Cal_Display+0x9c>)
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c748:	f7f6 f8a0 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c74c:	2128      	movs	r1, #40	; 0x28
 800c74e:	23c9      	movs	r3, #201	; 0xc9
 800c750:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c754:	2000      	movs	r0, #0
	sButtonData[10].Active = 3;
 800c756:	2603      	movs	r6, #3
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c758:	f7f6 f9f2 	bl	8002b40 <BSP_LCD_FillRect>

	sButtonData[12].Active = 1;
	sButtonData[13].Active = 1;
	sButtonData[14].Active = 1;

	for(int i = 15; i < 27; i++) {
 800c75c:	250f      	movs	r5, #15
	sButtonData[12].Active = 1;
 800c75e:	2101      	movs	r1, #1
	sButtonData[10].Active = 3;
 800c760:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
	sButtonData[11].Active = 3;
 800c764:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
	sButtonData[12].Active = 1;
 800c768:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
	sButtonData[13].Active = 1;
 800c76c:	f8c4 11ac 	str.w	r1, [r4, #428]	; 0x1ac
	sButtonData[14].Active = 1;
 800c770:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		sButtonData[i].Active = 3;
 800c774:	eb04 1345 	add.w	r3, r4, r5, lsl #5
		drawButton(i);
 800c778:	b2a8      	uxth	r0, r5
	for(int i = 15; i < 27; i++) {
 800c77a:	3501      	adds	r5, #1
		sButtonData[i].Active = 3;
 800c77c:	60de      	str	r6, [r3, #12]
		drawButton(i);
 800c77e:	f7ff fee9 	bl	800c554 <drawButton>
	for(int i = 15; i < 27; i++) {
 800c782:	2d1b      	cmp	r5, #27
 800c784:	d1f6      	bne.n	800c774 <setup_Cal_Display+0x34>
	}

	sButtonData[27].Active = 1;
 800c786:	2301      	movs	r3, #1

	drawButton(10);
 800c788:	200a      	movs	r0, #10
	sButtonData[27].Active = 1;
 800c78a:	f8c4 336c 	str.w	r3, [r4, #876]	; 0x36c
	drawButton(10);
 800c78e:	f7ff fee1 	bl	800c554 <drawButton>
	drawButton(11);
 800c792:	200b      	movs	r0, #11
 800c794:	f7ff fede 	bl	800c554 <drawButton>
	drawButton(12);
 800c798:	200c      	movs	r0, #12
 800c79a:	f7ff fedb 	bl	800c554 <drawButton>
	drawButton(13);
 800c79e:	200d      	movs	r0, #13
 800c7a0:	f7ff fed8 	bl	800c554 <drawButton>
	drawButton(14);
 800c7a4:	200e      	movs	r0, #14
 800c7a6:	f7ff fed5 	bl	800c554 <drawButton>
	drawButton(27);
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f7ff fed2 	bl	800c554 <drawButton>

	show_wide(340, 60, (int) start_freq );
 800c7b0:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <setup_Cal_Display+0xa0>)
 800c7b2:	213c      	movs	r1, #60	; 0x3c
 800c7b4:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800c7b8:	881a      	ldrh	r2, [r3, #0]
 800c7ba:	f7fe fa05 	bl	800abc8 <show_wide>

	load_RealTime();
 800c7be:	f7fe f81f 	bl	800a800 <load_RealTime>
	display_RTC_TimeEdit(RTC_Button-20,RTC_line0 + 15);
 800c7c2:	2137      	movs	r1, #55	; 0x37
 800c7c4:	2050      	movs	r0, #80	; 0x50
 800c7c6:	f7fe f83d 	bl	800a844 <display_RTC_TimeEdit>

	load_RealDate();
 800c7ca:	f7fe f85d 	bl	800a888 <load_RealDate>
	display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c7ce:	2191      	movs	r1, #145	; 0x91
 800c7d0:	2050      	movs	r0, #80	; 0x50



}
 800c7d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	display_RTC_DateEdit(RTC_Button-20,RTC_line3 +15);
 800c7d6:	f7fe b87d 	b.w	800a8d4 <display_RTC_DateEdit>
 800c7da:	bf00      	nop
 800c7dc:	20000c40 	.word	0x20000c40
 800c7e0:	2003a820 	.word	0x2003a820

0800c7e4 <erase_Cal_Display>:

void erase_Cal_Display(void){
 800c7e4:	b508      	push	{r3, lr}
	//clear_messages();
	//clear_reply_message_box();

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c7e6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c7ea:	f7f6 f84f 	bl	800288c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, FFT_H, 480, 201);
 800c7ee:	23c9      	movs	r3, #201	; 0xc9
 800c7f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c7f4:	2128      	movs	r1, #40	; 0x28
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f7f6 f9a2 	bl	8002b40 <BSP_LCD_FillRect>
 800c7fc:	2100      	movs	r1, #0



	for(int i = 10; i < 28; i++) {
			sButtonData[i].Active = 0;
 800c7fe:	4b09      	ldr	r3, [pc, #36]	; (800c824 <erase_Cal_Display+0x40>)
 800c800:	460a      	mov	r2, r1
 800c802:	1858      	adds	r0, r3, r1
 800c804:	3120      	adds	r1, #32
	for(int i = 10; i < 28; i++) {
 800c806:	f5b1 7f10 	cmp.w	r1, #576	; 0x240
			sButtonData[i].Active = 0;
 800c80a:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
	for(int i = 10; i < 28; i++) {
 800c80e:	d1f8      	bne.n	800c802 <erase_Cal_Display+0x1e>
		}

	sButtonData[12].state = 0;
 800c810:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	sButtonData[13].state = 0;
 800c814:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	sButtonData[14].state = 0;
 800c818:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	sButtonData[27].state = 0;
 800c81c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
}
 800c820:	bd08      	pop	{r3, pc}
 800c822:	bf00      	nop
 800c824:	20000c40 	.word	0x20000c40

0800c828 <PTT_Out_Init>:


void PTT_Out_Init(void)
{
 800c828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    GPIO_InitTypeDef  gpio_init_structure;


	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c82c:	4c1e      	ldr	r4, [pc, #120]	; (800c8a8 <PTT_Out_Init+0x80>)
{
 800c82e:	b088      	sub	sp, #32
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c830:	2500      	movs	r5, #0
    gpio_init_structure.Pin = GPIO_PIN_2;
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;

    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c832:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800c8ac <PTT_Out_Init+0x84>
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c836:	2601      	movs	r6, #1
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c838:	f04f 0a04 	mov.w	sl, #4
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c83c:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c83e:	f04f 0811 	mov.w	r8, #17
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c842:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c844:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c846:	a903      	add	r1, sp, #12
 800c848:	4648      	mov	r0, r9
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800c84a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c84e:	6323      	str	r3, [r4, #48]	; 0x30
 800c850:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c85a:	e9cd a803 	strd	sl, r8, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c85e:	e9cd 6705 	strd	r6, r7, [sp, #20]
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c862:	f7f7 fdd3 	bl	800440c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET);  //Set = Receive connect
 800c866:	4632      	mov	r2, r6
 800c868:	4651      	mov	r1, sl
 800c86a:	4648      	mov	r0, r9
 800c86c:	f7f7 fec2 	bl	80045f4 <HAL_GPIO_WritePin>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c870:	9502      	str	r5, [sp, #8]
 800c872:	6b23      	ldr	r3, [r4, #48]	; 0x30

        gpio_init_structure.Pin = GPIO_PIN_15;
 800c874:	f44f 4900 	mov.w	r9, #32768	; 0x8000
        gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
        gpio_init_structure.Pull = GPIO_PULLUP;
        gpio_init_structure.Speed = GPIO_SPEED_HIGH;

        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c878:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c87a:	4333      	orrs	r3, r6
 800c87c:	6323      	str	r3, [r4, #48]	; 0x30
 800c87e:	6b23      	ldr	r3, [r4, #48]	; 0x30
        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c880:	f5a4 5460 	sub.w	r4, r4, #14336	; 0x3800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c884:	4033      	ands	r3, r6
        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c886:	4620      	mov	r0, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c888:	9302      	str	r3, [sp, #8]
 800c88a:	9b02      	ldr	r3, [sp, #8]
        gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 800c88c:	e9cd 9803 	strd	r9, r8, [sp, #12]
        gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800c890:	e9cd 6705 	strd	r6, r7, [sp, #20]
        HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c894:	f7f7 fdba 	bl	800440c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);  //Set = Receive short
 800c898:	462a      	mov	r2, r5
 800c89a:	4649      	mov	r1, r9
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7f7 fea9 	bl	80045f4 <HAL_GPIO_WritePin>

}
 800c8a2:	b008      	add	sp, #32
 800c8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a8:	40023800 	.word	0x40023800
 800c8ac:	40022000 	.word	0x40022000

0800c8b0 <PTT_Out_Set>:


void PTT_Out_Set(void)
{
 800c8b0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c8b8:	4806      	ldr	r0, [pc, #24]	; (800c8d4 <PTT_Out_Set+0x24>)
 800c8ba:	f7f7 fe9b 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800c8be:	2001      	movs	r0, #1
 800c8c0:	f001 f8c4 	bl	800da4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET);
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	2104      	movs	r1, #4
 800c8c8:	4803      	ldr	r0, [pc, #12]	; (800c8d8 <PTT_Out_Set+0x28>)
}
 800c8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET);
 800c8ce:	f7f7 be91 	b.w	80045f4 <HAL_GPIO_WritePin>
 800c8d2:	bf00      	nop
 800c8d4:	40020000 	.word	0x40020000
 800c8d8:	40022000 	.word	0x40022000

0800c8dc <PTT_Out_RST_Clr>:

void PTT_Out_RST_Clr(void)
	{
 800c8dc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET);
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2104      	movs	r1, #4
 800c8e2:	4807      	ldr	r0, [pc, #28]	; (800c900 <PTT_Out_RST_Clr+0x24>)
 800c8e4:	f7f7 fe86 	bl	80045f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800c8e8:	2001      	movs	r0, #1
 800c8ea:	f001 f8af 	bl	800da4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c8f4:	4803      	ldr	r0, [pc, #12]	; (800c904 <PTT_Out_RST_Clr+0x28>)
	}
 800c8f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800c8fa:	f7f7 be7b 	b.w	80045f4 <HAL_GPIO_WritePin>
 800c8fe:	bf00      	nop
 800c900:	40022000 	.word	0x40022000
 800c904:	40020000 	.word	0x40020000

0800c908 <set_codec_input_gain>:


void set_codec_input_gain(void){
 800c908:	b508      	push	{r3, lr}
	Set_PGA_Gain(AGC_Gain);
 800c90a:	4b06      	ldr	r3, [pc, #24]	; (800c924 <set_codec_input_gain+0x1c>)
 800c90c:	f8d3 03b0 	ldr.w	r0, [r3, #944]	; 0x3b0
 800c910:	f7fd fe5e 	bl	800a5d0 <Set_PGA_Gain>
	HAL_Delay(10);
 800c914:	200a      	movs	r0, #10
 800c916:	f001 f899 	bl	800da4c <HAL_Delay>
	Set_ADC_DVC(190);
 800c91a:	20be      	movs	r0, #190	; 0xbe
}
 800c91c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set_ADC_DVC(190);
 800c920:	f7fd be6e 	b.w	800a600 <Set_ADC_DVC>
 800c924:	20000c40 	.word	0x20000c40

0800c928 <receive_sequence>:


void receive_sequence(void) {
 800c928:	b508      	push	{r3, lr}

	PTT_Out_Set(); // set output high to connect receiver to antenna
 800c92a:	f7ff ffc1 	bl	800c8b0 <PTT_Out_Set>
	HAL_Delay(10);
 800c92e:	200a      	movs	r0, #10
 800c930:	f001 f88c 	bl	800da4c <HAL_Delay>

	sButtonData[3].state = 0;
 800c934:	4b03      	ldr	r3, [pc, #12]	; (800c944 <receive_sequence+0x1c>)
 800c936:	2200      	movs	r2, #0
	drawButton(3);
 800c938:	2003      	movs	r0, #3
	sButtonData[3].state = 0;
 800c93a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c93c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawButton(3);
 800c940:	f7ff be08 	b.w	800c554 <drawButton>
 800c944:	20000c40 	.word	0x20000c40

0800c948 <xmit_sequence>:


void xmit_sequence(void)  {
 800c948:	b508      	push	{r3, lr}

	PTT_Out_RST_Clr();  //set output low to disconnect receiver from antenna
 800c94a:	f7ff ffc7 	bl	800c8dc <PTT_Out_RST_Clr>

	HAL_Delay(10);
 800c94e:	200a      	movs	r0, #10
 800c950:	f001 f87c 	bl	800da4c <HAL_Delay>

	sButtonData[3].state = 1;
 800c954:	4b03      	ldr	r3, [pc, #12]	; (800c964 <xmit_sequence+0x1c>)
 800c956:	2201      	movs	r2, #1
	drawButton(3);
 800c958:	2003      	movs	r0, #3
	sButtonData[3].state = 1;
 800c95a:	675a      	str	r2, [r3, #116]	; 0x74

}
 800c95c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	drawButton(3);
 800c960:	f7ff bdf8 	b.w	800c554 <drawButton>
 800c964:	20000c40 	.word	0x20000c40

0800c968 <executeButton>:
void executeButton (uint16_t index){
 800c968:	b570      	push	{r4, r5, r6, lr}
   switch (index) {
 800c96a:	281b      	cmp	r0, #27
 800c96c:	d845      	bhi.n	800c9fa <executeButton+0x92>
 800c96e:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c972:	001c      	.short	0x001c
 800c974:	00450032 	.word	0x00450032
 800c978:	005d0044 	.word	0x005d0044
 800c97c:	0075006c 	.word	0x0075006c
 800c980:	0091008a 	.word	0x0091008a
 800c984:	004400ad 	.word	0x004400ad
 800c988:	00b50044 	.word	0x00b50044
 800c98c:	00f700ce 	.word	0x00f700ce
 800c990:	00440044 	.word	0x00440044
 800c994:	00440044 	.word	0x00440044
 800c998:	00440044 	.word	0x00440044
 800c99c:	00440044 	.word	0x00440044
 800c9a0:	00440044 	.word	0x00440044
 800c9a4:	00440044 	.word	0x00440044
 800c9a8:	010b      	.short	0x010b
	   FT8_Message_Touch = 0;
 800c9aa:	2400      	movs	r4, #0
	   clear_xmit_messages();
 800c9ac:	f000 fede 	bl	800d76c <clear_xmit_messages>
	   terminate_QSO();
 800c9b0:	f001 fb24 	bl	800dffc <terminate_QSO>
	   FT8_Message_Touch = 0;
 800c9b4:	4b7e      	ldr	r3, [pc, #504]	; (800cbb0 <executeButton+0x248>)
       sButtonData[0].state = 1;
 800c9b6:	4d7f      	ldr	r5, [pc, #508]	; (800cbb4 <executeButton+0x24c>)
       drawButton(0);
 800c9b8:	4620      	mov	r0, r4
	   FT8_Message_Touch = 0;
 800c9ba:	601c      	str	r4, [r3, #0]
       sButtonData[0].state = 1;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	616b      	str	r3, [r5, #20]
       drawButton(0);
 800c9c0:	f7ff fdc8 	bl	800c554 <drawButton>
       HAL_Delay(10);
 800c9c4:	200a      	movs	r0, #10
 800c9c6:	f001 f841 	bl	800da4c <HAL_Delay>
       drawButton(0);
 800c9ca:	4620      	mov	r0, r4
       sButtonData[0].state = 0;
 800c9cc:	616c      	str	r4, [r5, #20]
}
 800c9ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	   		drawButton(27);
 800c9d2:	f7ff bdbf 	b.w	800c554 <drawButton>
	   if (!sButtonData[1].state)
 800c9d6:	4b77      	ldr	r3, [pc, #476]	; (800cbb4 <executeButton+0x24c>)
 800c9d8:	4a77      	ldr	r2, [pc, #476]	; (800cbb8 <executeButton+0x250>)
 800c9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9dc:	4c77      	ldr	r4, [pc, #476]	; (800cbbc <executeButton+0x254>)
 800c9de:	b92b      	cbnz	r3, 800c9ec <executeButton+0x84>
	   Beacon_State = 0;
 800c9e0:	6023      	str	r3, [r4, #0]
	  { Beacon_On = 0;
 800c9e2:	6013      	str	r3, [r2, #0]
}
 800c9e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	   clear_reply_message_box();
 800c9e8:	f000 bf26 	b.w	800d838 <clear_reply_message_box>
	   Beacon_On = 1;
 800c9ec:	2501      	movs	r5, #1
 800c9ee:	6015      	str	r5, [r2, #0]
	   clear_reply_message_box();
 800c9f0:	f000 ff22 	bl	800d838 <clear_reply_message_box>
	   clear_log_stored_data();
 800c9f4:	f000 fb40 	bl	800d078 <clear_log_stored_data>
	   Beacon_State = 1;
 800c9f8:	6025      	str	r5, [r4, #0]
}
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
	   if (!sButtonData[2].state)
 800c9fc:	4b6d      	ldr	r3, [pc, #436]	; (800cbb4 <executeButton+0x24c>)
 800c9fe:	4e70      	ldr	r6, [pc, #448]	; (800cbc0 <executeButton+0x258>)
 800ca00:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800ca02:	4d70      	ldr	r5, [pc, #448]	; (800cbc4 <executeButton+0x25c>)
 800ca04:	b95c      	cbnz	r4, 800ca1e <executeButton+0xb6>
	   tune_Off_sequence();
 800ca06:	f001 fae9 	bl	800dfdc <tune_Off_sequence>
  	   xmit_flag = 0;
 800ca0a:	4b6f      	ldr	r3, [pc, #444]	; (800cbc8 <executeButton+0x260>)
	   Tune_On = 0;
 800ca0c:	6034      	str	r4, [r6, #0]
	   Arm_Tune = 0;
 800ca0e:	602c      	str	r4, [r5, #0]
  	   xmit_flag = 0;
 800ca10:	601c      	str	r4, [r3, #0]
  	   receive_sequence();
 800ca12:	f7ff ff89 	bl	800c928 <receive_sequence>
}
 800ca16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	   erase_Cal_Display();
 800ca1a:	f7ff bee3 	b.w	800c7e4 <erase_Cal_Display>
		Tune_On = 1;  //Turns off display of FT8 traffic
 800ca1e:	2301      	movs	r3, #1
 800ca20:	6033      	str	r3, [r6, #0]
		setup_Cal_Display();
 800ca22:	f7ff fe8d 	bl	800c740 <setup_Cal_Display>
		Arm_Tune = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	e7e6      	b.n	800c9fa <executeButton+0x92>
   	   if ( sButtonData[4].state == 1 ){
 800ca2c:	4b61      	ldr	r3, [pc, #388]	; (800cbb4 <executeButton+0x24c>)
 800ca2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d105      	bne.n	800ca42 <executeButton+0xda>
   	   make_File_Name();
 800ca36:	f7fd ffe1 	bl	800a9fc <make_File_Name>
}
 800ca3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   	   Open_Log_File();
 800ca3e:	f000 bf41 	b.w	800d8c4 <Open_Log_File>
}
 800ca42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   	   Close_Log_File();
 800ca46:	f000 bfa5 	b.w	800d994 <Close_Log_File>
	   if (!sButtonData[5].state)
 800ca4a:	4b5a      	ldr	r3, [pc, #360]	; (800cbb4 <executeButton+0x24c>)
 800ca4c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800ca50:	4b5e      	ldr	r3, [pc, #376]	; (800cbcc <executeButton+0x264>)
 800ca52:	b90a      	cbnz	r2, 800ca58 <executeButton+0xf0>
  	   		Auto_Sync = 1;
 800ca54:	601a      	str	r2, [r3, #0]
 800ca56:	e7d0      	b.n	800c9fa <executeButton+0x92>
 800ca58:	2201      	movs	r2, #1
 800ca5a:	e7fb      	b.n	800ca54 <executeButton+0xec>
	   if (AGC_Gain >= 3) AGC_Gain --;
 800ca5c:	4c55      	ldr	r4, [pc, #340]	; (800cbb4 <executeButton+0x24c>)
 800ca5e:	f8d4 33b0 	ldr.w	r3, [r4, #944]	; 0x3b0
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	dd02      	ble.n	800ca6c <executeButton+0x104>
 800ca66:	3b01      	subs	r3, #1
	   if (AGC_Gain < 31) AGC_Gain ++;
 800ca68:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
	   show_short(405, 255, AGC_Gain );
 800ca6c:	f894 23b0 	ldrb.w	r2, [r4, #944]	; 0x3b0
 800ca70:	f240 1095 	movw	r0, #405	; 0x195
 800ca74:	21ff      	movs	r1, #255	; 0xff
 800ca76:	f7fe f8db 	bl	800ac30 <show_short>
	   Set_PGA_Gain(AGC_Gain);
 800ca7a:	f8d4 03b0 	ldr.w	r0, [r4, #944]	; 0x3b0
}
 800ca7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	   Set_PGA_Gain(AGC_Gain);
 800ca82:	f7fd bda5 	b.w	800a5d0 <Set_PGA_Gain>
	   if (AGC_Gain < 31) AGC_Gain ++;
 800ca86:	4c4b      	ldr	r4, [pc, #300]	; (800cbb4 <executeButton+0x24c>)
 800ca88:	f8d4 33b0 	ldr.w	r3, [r4, #944]	; 0x3b0
 800ca8c:	2b1e      	cmp	r3, #30
 800ca8e:	dced      	bgt.n	800ca6c <executeButton+0x104>
 800ca90:	3301      	adds	r3, #1
 800ca92:	e7e9      	b.n	800ca68 <executeButton+0x100>
	   if (cursor > 0) {
 800ca94:	4b4e      	ldr	r3, [pc, #312]	; (800cbd0 <executeButton+0x268>)
 800ca96:	4c4f      	ldr	r4, [pc, #316]	; (800cbd4 <executeButton+0x26c>)
 800ca98:	8818      	ldrh	r0, [r3, #0]
 800ca9a:	b158      	cbz	r0, 800cab4 <executeButton+0x14c>
	    cursor --;
 800ca9c:	3801      	subs	r0, #1
	    cursor ++;
 800ca9e:	b280      	uxth	r0, r0
 800caa0:	8018      	strh	r0, [r3, #0]
	    NCO_Frequency = (double) (cursor+ ft8_min_bin) * FFT_Resolution;
 800caa2:	3030      	adds	r0, #48	; 0x30
 800caa4:	f7f3 fdce 	bl	8000644 <__aeabi_i2d>
 800caa8:	2200      	movs	r2, #0
 800caaa:	4b4b      	ldr	r3, [pc, #300]	; (800cbd8 <executeButton+0x270>)
 800caac:	f7f3 fe34 	bl	8000718 <__aeabi_dmul>
 800cab0:	e9c4 0100 	strd	r0, r1, [r4]
	    show_variable(400, 25,(int)  NCO_Frequency );
 800cab4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800cab8:	f7f4 f8de 	bl	8000c78 <__aeabi_d2iz>
 800cabc:	2119      	movs	r1, #25
 800cabe:	4602      	mov	r2, r0
 800cac0:	f44f 70c8 	mov.w	r0, #400	; 0x190
}
 800cac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    show_variable(400, 25,(int)  NCO_Frequency );
 800cac8:	f7fe b898 	b.w	800abfc <show_variable>
	    if (cursor <= (ft8_buffer - ft8_min_bin -2)) {  //limits highest NCO frequency to 3875 hz
 800cacc:	4b40      	ldr	r3, [pc, #256]	; (800cbd0 <executeButton+0x268>)
 800cace:	4c41      	ldr	r4, [pc, #260]	; (800cbd4 <executeButton+0x26c>)
 800cad0:	8818      	ldrh	r0, [r3, #0]
 800cad2:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
 800cad6:	d8ed      	bhi.n	800cab4 <executeButton+0x14c>
	    cursor ++;
 800cad8:	3001      	adds	r0, #1
 800cada:	e7e0      	b.n	800ca9e <executeButton+0x136>
	   if (!sButtonData[12].state)
 800cadc:	4b35      	ldr	r3, [pc, #212]	; (800cbb4 <executeButton+0x24c>)
 800cade:	4d39      	ldr	r5, [pc, #228]	; (800cbc4 <executeButton+0x25c>)
 800cae0:	f8d3 4194 	ldr.w	r4, [r3, #404]	; 0x194
 800cae4:	4e38      	ldr	r6, [pc, #224]	; (800cbc8 <executeButton+0x260>)
 800cae6:	b93c      	cbnz	r4, 800caf8 <executeButton+0x190>
	   tune_Off_sequence();
 800cae8:	f001 fa78 	bl	800dfdc <tune_Off_sequence>
	   Arm_Tune = 0;
 800caec:	602c      	str	r4, [r5, #0]
  	   xmit_flag = 0;
 800caee:	6034      	str	r4, [r6, #0]
}
 800caf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	   receive_sequence();
 800caf4:	f7ff bf18 	b.w	800c928 <receive_sequence>
		xmit_flag = 1;
 800caf8:	2401      	movs	r4, #1
  	   	xmit_sequence();
 800cafa:	f7ff ff25 	bl	800c948 <xmit_sequence>
  	   	HAL_Delay(10);
 800cafe:	200a      	movs	r0, #10
 800cb00:	f000 ffa4 	bl	800da4c <HAL_Delay>
		xmit_flag = 1;
 800cb04:	6034      	str	r4, [r6, #0]
		tune_On_sequence();
 800cb06:	f001 fb01 	bl	800e10c <tune_On_sequence>
		Arm_Tune = 1;
 800cb0a:	602c      	str	r4, [r5, #0]
 800cb0c:	e775      	b.n	800c9fa <executeButton+0x92>
	   Options_SetValue(0, BandIndex);
 800cb0e:	4d33      	ldr	r5, [pc, #204]	; (800cbdc <executeButton+0x274>)
 800cb10:	2000      	movs	r0, #0
		start_freq = sBand_Data[BandIndex].Frequency;
 800cb12:	4c28      	ldr	r4, [pc, #160]	; (800cbb4 <executeButton+0x24c>)
	   Options_SetValue(0, BandIndex);
 800cb14:	f9b5 1000 	ldrsh.w	r1, [r5]
 800cb18:	f001 f984 	bl	800de24 <Options_SetValue>
		Options_StoreValue(0);
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f001 f9cb 	bl	800deb8 <Options_StoreValue>
		start_freq = sBand_Data[BandIndex].Frequency;
 800cb22:	682b      	ldr	r3, [r5, #0]
		show_wide(380, 0,(int) start_freq );
 800cb24:	2100      	movs	r1, #0
 800cb26:	f44f 70be 	mov.w	r0, #380	; 0x17c
		start_freq = sBand_Data[BandIndex].Frequency;
 800cb2a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800cb2e:	f8b3 2380 	ldrh.w	r2, [r3, #896]	; 0x380
 800cb32:	4b2b      	ldr	r3, [pc, #172]	; (800cbe0 <executeButton+0x278>)
 800cb34:	801a      	strh	r2, [r3, #0]
		show_wide(380, 0,(int) start_freq );
 800cb36:	f7fe f847 	bl	800abc8 <show_wide>
		set_Rcvr_Freq();
 800cb3a:	f001 fb11 	bl	800e160 <set_Rcvr_Freq>
		HAL_Delay(10);
 800cb3e:	200a      	movs	r0, #10
 800cb40:	f000 ff84 	bl	800da4c <HAL_Delay>
		sButtonData[13].state = 1;
 800cb44:	2301      	movs	r3, #1
		drawButton(13);
 800cb46:	200d      	movs	r0, #13
		sButtonData[13].state = 1;
 800cb48:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
		drawButton(13);
 800cb4c:	f7ff fd02 	bl	800c554 <drawButton>
		HAL_Delay(10);
 800cb50:	200a      	movs	r0, #10
 800cb52:	f000 ff7b 	bl	800da4c <HAL_Delay>
		sButtonData[13].state = 0;
 800cb56:	2300      	movs	r3, #0
		drawButton(13);
 800cb58:	200d      	movs	r0, #13
		sButtonData[13].state = 0;
 800cb5a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
 800cb5e:	e736      	b.n	800c9ce <executeButton+0x66>
	   set_RTC_to_TimeEdit();
 800cb60:	f7fd fe82 	bl	800a868 <set_RTC_to_TimeEdit>
	   HAL_Delay(10);
 800cb64:	200a      	movs	r0, #10
 800cb66:	f000 ff71 	bl	800da4c <HAL_Delay>
	   		sButtonData[14].state = 1;
 800cb6a:	4c12      	ldr	r4, [pc, #72]	; (800cbb4 <executeButton+0x24c>)
 800cb6c:	2301      	movs	r3, #1
	   		drawButton(14);
 800cb6e:	200e      	movs	r0, #14
	   		sButtonData[14].state = 1;
 800cb70:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
	   		drawButton(14);
 800cb74:	f7ff fcee 	bl	800c554 <drawButton>
	   		HAL_Delay(10);
 800cb78:	200a      	movs	r0, #10
 800cb7a:	f000 ff67 	bl	800da4c <HAL_Delay>
	   		sButtonData[14].state = 0;
 800cb7e:	2300      	movs	r3, #0
	   		drawButton(14);
 800cb80:	200e      	movs	r0, #14
	   		sButtonData[14].state = 0;
 800cb82:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
 800cb86:	e722      	b.n	800c9ce <executeButton+0x66>
	   set_RTC_to_DateEdit();
 800cb88:	f7fd feb2 	bl	800a8f0 <set_RTC_to_DateEdit>
	   HAL_Delay(10);
 800cb8c:	200a      	movs	r0, #10
 800cb8e:	f000 ff5d 	bl	800da4c <HAL_Delay>
	   		sButtonData[27].state = 1;
 800cb92:	4c08      	ldr	r4, [pc, #32]	; (800cbb4 <executeButton+0x24c>)
 800cb94:	2301      	movs	r3, #1
	   		drawButton(27);
 800cb96:	201b      	movs	r0, #27
	   		sButtonData[27].state = 1;
 800cb98:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
	   		drawButton(27);
 800cb9c:	f7ff fcda 	bl	800c554 <drawButton>
	   		HAL_Delay(10);
 800cba0:	200a      	movs	r0, #10
 800cba2:	f000 ff53 	bl	800da4c <HAL_Delay>
	   		sButtonData[27].state = 0;
 800cba6:	2300      	movs	r3, #0
	   		drawButton(27);
 800cba8:	201b      	movs	r0, #27
	   		sButtonData[27].state = 0;
 800cbaa:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 800cbae:	e70e      	b.n	800c9ce <executeButton+0x66>
 800cbb0:	20001a28 	.word	0x20001a28
 800cbb4:	20000c40 	.word	0x20000c40
 800cbb8:	2003a678 	.word	0x2003a678
 800cbbc:	20043ca0 	.word	0x20043ca0
 800cbc0:	2003a650 	.word	0x2003a650
 800cbc4:	2003a66c 	.word	0x2003a66c
 800cbc8:	2000c750 	.word	0x2000c750
 800cbcc:	2003a670 	.word	0x2003a670
 800cbd0:	20001a1e 	.word	0x20001a1e
 800cbd4:	20007348 	.word	0x20007348
 800cbd8:	40190000 	.word	0x40190000
 800cbdc:	2003a824 	.word	0x2003a824
 800cbe0:	2003a820 	.word	0x2003a820

0800cbe4 <checkButton>:
void checkButton(void)  {
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	4c13      	ldr	r4, [pc, #76]	; (800cc34 <checkButton+0x50>)
 800cbe8:	2500      	movs	r5, #0
    		  if (testButton( sButtonData[i].x,sButtonData[i].y,sButtonData[i].w,sButtonData[i].h) == 1)  {
 800cbea:	8be3      	ldrh	r3, [r4, #30]
 800cbec:	b2ae      	uxth	r6, r5
 800cbee:	8ba2      	ldrh	r2, [r4, #28]
 800cbf0:	8b61      	ldrh	r1, [r4, #26]
 800cbf2:	8b20      	ldrh	r0, [r4, #24]
 800cbf4:	f7ff fd8a 	bl	800c70c <testButton>
 800cbf8:	2801      	cmp	r0, #1
 800cbfa:	d111      	bne.n	800cc20 <checkButton+0x3c>
    			  	switch (sButtonData[i].Active){
 800cbfc:	68e3      	ldr	r3, [r4, #12]
 800cbfe:	2b02      	cmp	r3, #2
 800cc00:	d00b      	beq.n	800cc1a <checkButton+0x36>
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d011      	beq.n	800cc2a <checkButton+0x46>
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d10a      	bne.n	800cc20 <checkButton+0x3c>
		    	    sButtonData[i].state =  !sButtonData[i].state;
 800cc0a:	6963      	ldr	r3, [r4, #20]
		    	    drawButton(i);
 800cc0c:	4630      	mov	r0, r6
		    	    sButtonData[i].state =  !sButtonData[i].state;
 800cc0e:	fab3 f383 	clz	r3, r3
 800cc12:	095b      	lsrs	r3, r3, #5
 800cc14:	6163      	str	r3, [r4, #20]
		    	    drawButton(i);
 800cc16:	f7ff fc9d 	bl	800c554 <drawButton>
		    	    executeButton(i);
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7ff fea4 	bl	800c968 <executeButton>
 800cc20:	3501      	adds	r5, #1
 800cc22:	3420      	adds	r4, #32
    		  for (i=0;i<numButtons;i++){
 800cc24:	2d1c      	cmp	r5, #28
 800cc26:	d1e0      	bne.n	800cbea <checkButton+0x6>
      	  }
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
					executeCalibrationButton (i);
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f7ff fcc6 	bl	800c5bc <executeCalibrationButton>
					break;
 800cc30:	e7f6      	b.n	800cc20 <checkButton+0x3c>
 800cc32:	bf00      	nop
 800cc34:	20000c40 	.word	0x20000c40

0800cc38 <start_Si5351>:

uint64_t F_boot = 11229600000ULL;

void start_Si5351(void){

	  init(SI5351_CRYSTAL_LOAD_0PF, SI5351_XTAL_FREQ, 0);
 800cc38:	2200      	movs	r2, #0
 800cc3a:	4912      	ldr	r1, [pc, #72]	; (800cc84 <start_Si5351+0x4c>)
void start_Si5351(void){
 800cc3c:	b508      	push	{r3, lr}
	  init(SI5351_CRYSTAL_LOAD_0PF, SI5351_XTAL_FREQ, 0);
 800cc3e:	4610      	mov	r0, r2
 800cc40:	f7fe ff28 	bl	800ba94 <init>

	  drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA);
 800cc44:	2103      	movs	r1, #3
 800cc46:	2000      	movs	r0, #0
 800cc48:	f7fe fcfa 	bl	800b640 <drive_strength>

	  drive_strength(SI5351_CLK1, SI5351_DRIVE_2MA);
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	2001      	movs	r0, #1
 800cc50:	f7fe fcf6 	bl	800b640 <drive_strength>

	  drive_strength(SI5351_CLK2, SI5351_DRIVE_2MA);
 800cc54:	2100      	movs	r1, #0
 800cc56:	2002      	movs	r0, #2
 800cc58:	f7fe fcf2 	bl	800b640 <drive_strength>

      set_freq(F_boot, SI5351_CLK1);
 800cc5c:	4b0a      	ldr	r3, [pc, #40]	; (800cc88 <start_Si5351+0x50>)
 800cc5e:	2201      	movs	r2, #1
 800cc60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc64:	f7ff fb08 	bl	800c278 <set_freq>
      HAL_Delay(10);
 800cc68:	200a      	movs	r0, #10
 800cc6a:	f000 feef 	bl	800da4c <HAL_Delay>
      output_enable(SI5351_CLK1, 1);
 800cc6e:	2101      	movs	r1, #1
 800cc70:	4608      	mov	r0, r1
 800cc72:	f7fe fccf 	bl	800b614 <output_enable>

      HAL_Delay(20);
 800cc76:	2014      	movs	r0, #20
 800cc78:	f000 fee8 	bl	800da4c <HAL_Delay>

	  set_Rcvr_Freq();

}
 800cc7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  set_Rcvr_Freq();
 800cc80:	f001 ba6e 	b.w	800e160 <set_Rcvr_Freq>
 800cc84:	018cba80 	.word	0x018cba80
 800cc88:	20000ff8 	.word	0x20000ff8

0800cc8c <FT8_Sync>:



void FT8_Sync(void) {
 800cc8c:	b508      	push	{r3, lr}
	start_time = HAL_GetTick();
 800cc8e:	f7f7 f87f 	bl	8003d90 <HAL_GetTick>
 800cc92:	4b05      	ldr	r3, [pc, #20]	; (800cca8 <FT8_Sync+0x1c>)
	ft8_flag = 1;
 800cc94:	4a05      	ldr	r2, [pc, #20]	; (800ccac <FT8_Sync+0x20>)
	FT_8_counter = 0;
 800cc96:	2100      	movs	r1, #0
	start_time = HAL_GetTick();
 800cc98:	6018      	str	r0, [r3, #0]
	ft8_flag = 1;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	6013      	str	r3, [r2, #0]
	FT_8_counter = 0;
 800cc9e:	4a04      	ldr	r2, [pc, #16]	; (800ccb0 <FT8_Sync+0x24>)
 800cca0:	6011      	str	r1, [r2, #0]
	ft8_marker = 1;
 800cca2:	4a04      	ldr	r2, [pc, #16]	; (800ccb4 <FT8_Sync+0x28>)
 800cca4:	6013      	str	r3, [r2, #0]
	}
 800cca6:	bd08      	pop	{r3, pc}
 800cca8:	2003a864 	.word	0x2003a864
 800ccac:	20007344 	.word	0x20007344
 800ccb0:	20016d78 	.word	0x20016d78
 800ccb4:	20006340 	.word	0x20006340

0800ccb8 <display_messages>:
}

void display_messages(int decoded_messages){

	char message[kMax_message_length];
	char CQ[] = "CQ";
 800ccb8:	4b35      	ldr	r3, [pc, #212]	; (800cd90 <display_messages+0xd8>)
void display_messages(int decoded_messages){
 800ccba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char CQ[] = "CQ";
 800ccbe:	881a      	ldrh	r2, [r3, #0]
void display_messages(int decoded_messages){
 800ccc0:	b088      	sub	sp, #32
	char CQ[] = "CQ";
 800ccc2:	789b      	ldrb	r3, [r3, #2]
void display_messages(int decoded_messages){
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	4f33      	ldr	r7, [pc, #204]	; (800cd94 <display_messages+0xdc>)

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ccc8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
	char CQ[] = "CQ";
 800cccc:	f8ad 2008 	strh.w	r2, [sp, #8]
	    BSP_LCD_FillRect(0, FFT_H, 240, 200);
		BSP_LCD_SetFont (&Font16);

		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800ccd0:	2400      	movs	r4, #0
	char CQ[] = "CQ";
 800ccd2:	f88d 300a 	strb.w	r3, [sp, #10]
		sprintf(message,"%s %s %s",new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800ccd6:	f107 0a0e 	add.w	sl, r7, #14
	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800ccda:	f7f5 fdd7 	bl	800288c <BSP_LCD_SetTextColor>
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800ccde:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800cda8 <display_messages+0xf0>
	    BSP_LCD_FillRect(0, FFT_H, 240, 200);
 800cce2:	23c8      	movs	r3, #200	; 0xc8
 800cce4:	22f0      	movs	r2, #240	; 0xf0
 800cce6:	2128      	movs	r1, #40	; 0x28
 800cce8:	2000      	movs	r0, #0
 800ccea:	f7f5 ff29 	bl	8002b40 <BSP_LCD_FillRect>
		BSP_LCD_SetFont (&Font16);
 800ccee:	482a      	ldr	r0, [pc, #168]	; (800cd98 <display_messages+0xe0>)
 800ccf0:	f7f5 fde4 	bl	80028bc <BSP_LCD_SetFont>
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800ccf4:	42b4      	cmp	r4, r6
 800ccf6:	da03      	bge.n	800cd00 <display_messages+0x48>
 800ccf8:	f8d9 3000 	ldr.w	r3, [r9]
 800ccfc:	429c      	cmp	r4, r3
 800ccfe:	db06      	blt.n	800cd0e <display_messages+0x56>
 800cd00:	2528      	movs	r5, #40	; 0x28
 800cd02:	2400      	movs	r4, #0
		else
		display[i].text_color = (int) 0;

		 }

		for (int j = 0; j<decoded_messages && j<message_limit; j++){
 800cd04:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800cda8 <display_messages+0xf0>
		if(display[j].text_color == 0)
 800cd08:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800cda4 <display_messages+0xec>
 800cd0c:	e033      	b.n	800cd76 <display_messages+0xbe>
 800cd0e:	2338      	movs	r3, #56	; 0x38
		sprintf(message,"%s %s %s",new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800cd10:	4a22      	ldr	r2, [pc, #136]	; (800cd9c <display_messages+0xe4>)
 800cd12:	4923      	ldr	r1, [pc, #140]	; (800cda0 <display_messages+0xe8>)
 800cd14:	a803      	add	r0, sp, #12
 800cd16:	4363      	muls	r3, r4
		strcpy(display[i].message, message);
 800cd18:	2518      	movs	r5, #24
 800cd1a:	eb03 0807 	add.w	r8, r3, r7
		sprintf(message,"%s %s %s",new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800cd1e:	441a      	add	r2, r3
 800cd20:	4453      	add	r3, sl
 800cd22:	9200      	str	r2, [sp, #0]
 800cd24:	4642      	mov	r2, r8
 800cd26:	f001 fb61 	bl	800e3ec <siprintf>
		strcpy(display[i].message, message);
 800cd2a:	4b1e      	ldr	r3, [pc, #120]	; (800cda4 <display_messages+0xec>)
 800cd2c:	a903      	add	r1, sp, #12
 800cd2e:	fb05 3504 	mla	r5, r5, r4, r3
 800cd32:	4628      	mov	r0, r5
 800cd34:	f001 fb9f 	bl	800e476 <strcpy>
		if(strcmp(CQ, new_decoded[i].field1) == 0 )
 800cd38:	4641      	mov	r1, r8
 800cd3a:	a802      	add	r0, sp, #8
 800cd3c:	f7f3 fac8 	bl	80002d0 <strcmp>
 800cd40:	b918      	cbnz	r0, 800cd4a <display_messages+0x92>
		display[i].text_color = (int)1;
 800cd42:	2301      	movs	r3, #1
		display[i].text_color = (int) 0;
 800cd44:	616b      	str	r3, [r5, #20]
		for (int i = 0; i<decoded_messages && i<message_limit; i++ ){
 800cd46:	3401      	adds	r4, #1
 800cd48:	e7d4      	b.n	800ccf4 <display_messages+0x3c>
		display[i].text_color = (int) 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e7fa      	b.n	800cd44 <display_messages+0x8c>
 800cd4e:	2718      	movs	r7, #24
 800cd50:	4367      	muls	r7, r4
		if(display[j].text_color == 0)
 800cd52:	eb07 0308 	add.w	r3, r7, r8
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	b9b3      	cbnz	r3, 800cd88 <display_messages+0xd0>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800cd5a:	f04f 30ff 	mov.w	r0, #4294967295
		else
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800cd5e:	f7f5 fd95 	bl	800288c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, 40+j*20, display[j].message,0x03);
 800cd62:	4629      	mov	r1, r5
 800cd64:	3514      	adds	r5, #20
		for (int j = 0; j<decoded_messages && j<message_limit; j++){
 800cd66:	3401      	adds	r4, #1
		BSP_LCD_DisplayStringAt(0, 40+j*20, display[j].message,0x03);
 800cd68:	2303      	movs	r3, #3
 800cd6a:	eb08 0207 	add.w	r2, r8, r7
 800cd6e:	b2ad      	uxth	r5, r5
 800cd70:	2000      	movs	r0, #0
 800cd72:	f7f5 fe25 	bl	80029c0 <BSP_LCD_DisplayStringAt>
		for (int j = 0; j<decoded_messages && j<message_limit; j++){
 800cd76:	42b4      	cmp	r4, r6
 800cd78:	da03      	bge.n	800cd82 <display_messages+0xca>
 800cd7a:	f8d9 3000 	ldr.w	r3, [r9]
 800cd7e:	429c      	cmp	r4, r3
 800cd80:	dbe5      	blt.n	800cd4e <display_messages+0x96>

		}
}
 800cd82:	b008      	add	sp, #32
 800cd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800cd88:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800cd8c:	e7e7      	b.n	800cd5e <display_messages+0xa6>
 800cd8e:	bf00      	nop
 800cd90:	0805529f 	.word	0x0805529f
 800cd94:	20043ca8 	.word	0x20043ca8
 800cd98:	20000030 	.word	0x20000030
 800cd9c:	20043cc4 	.word	0x20043cc4
 800cda0:	0805547b 	.word	0x0805547b
 800cda4:	20044108 	.word	0x20044108
 800cda8:	20001010 	.word	0x20001010

0800cdac <validate_locator>:
int validate_locator(char locator[]) {

	uint8_t A1, A2, N1, N2;
	uint8_t test = 0;

	A1 = locator[0] - 65;
 800cdac:	7803      	ldrb	r3, [r0, #0]
	A2 = locator[1] - 65;
	N1 = locator[2] - 48;
 800cdae:	7881      	ldrb	r1, [r0, #2]
	N2= locator [3] - 48;

	if (A1 >= 0 && A1 <= 17) test++;
 800cdb0:	3b41      	subs	r3, #65	; 0x41
	N2= locator [3] - 48;
 800cdb2:	78c2      	ldrb	r2, [r0, #3]
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800cdb4:	7840      	ldrb	r0, [r0, #1]
	N1 = locator[2] - 48;
 800cdb6:	3930      	subs	r1, #48	; 0x30
	uint8_t test = 0;
 800cdb8:	2b11      	cmp	r3, #17
	N2= locator [3] - 48;
 800cdba:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800cdbe:	f1a0 0042 	sub.w	r0, r0, #66	; 0x42
	N1 = locator[2] - 48;
 800cdc2:	b2c9      	uxtb	r1, r1
	uint8_t test = 0;
 800cdc4:	bf94      	ite	ls
 800cdc6:	2301      	movls	r3, #1
 800cdc8:	2300      	movhi	r3, #0
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800cdca:	280f      	cmp	r0, #15
	N2= locator [3] - 48;
 800cdcc:	b2d2      	uxtb	r2, r2
	if (A2 > 0 && A2 < 17) test++; //block RR73 Artic and Anartica
 800cdce:	bf98      	it	ls
 800cdd0:	3301      	addls	r3, #1
	if (N1 >= 0 && N1 <= 9) test++;
 800cdd2:	2909      	cmp	r1, #9
 800cdd4:	bf9c      	itt	ls
 800cdd6:	3301      	addls	r3, #1
 800cdd8:	b2db      	uxtbls	r3, r3
	if (N2 >= 0 && N2 <= 9) test++;
 800cdda:	2a09      	cmp	r2, #9
 800cddc:	d803      	bhi.n	800cde6 <validate_locator+0x3a>

	if (test == 4) return 1;
 800cdde:	3b03      	subs	r3, #3
 800cde0:	4258      	negs	r0, r3
 800cde2:	4158      	adcs	r0, r3
 800cde4:	4770      	bx	lr
	else
	return 0;
 800cde6:	2000      	movs	r0, #0
}
 800cde8:	4770      	bx	lr
	...

0800cdec <ft8_decode>:
int ft8_decode(void) {
 800cdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf0:	ed2d 8b02 	vpush	{d8}
 800cdf4:	b0c5      	sub	sp, #276	; 0x114
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800cdf6:	2328      	movs	r3, #40	; 0x28
 800cdf8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cdfc:	215b      	movs	r1, #91	; 0x5b
int ft8_decode(void) {
 800cdfe:	af04      	add	r7, sp, #16
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ce00:	9302      	str	r3, [sp, #8]
    for (int idx = 0; idx < num_candidates; ++idx) {
 800ce02:	2600      	movs	r6, #0
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ce04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ce08:	4891      	ldr	r0, [pc, #580]	; (800d050 <ft8_decode+0x264>)
    int     num_decoded = 0;
 800ce0a:	4635      	mov	r5, r6
        float   log174[N];
 800ce0c:	f8df a25c 	ldr.w	sl, [pc, #604]	; 800d06c <ft8_decode+0x280>
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	2314      	movs	r3, #20
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4b8f      	ldr	r3, [pc, #572]	; (800d054 <ft8_decode+0x268>)
 800ce18:	f7fa faf8 	bl	800740c <find_sync>
    char    decoded[kMax_decoded_messages][kMax_message_length];
 800ce1c:	b0e4      	sub	sp, #400	; 0x190
    int num_candidates = find_sync(export_fft_power, ft8_msg_samples, ft8_buffer, kCostas_map, kMax_candidates, candidate_list, kMin_score);
 800ce1e:	6038      	str	r0, [r7, #0]
    char    decoded[kMax_decoded_messages][kMax_message_length];
 800ce20:	f10d 0910 	add.w	r9, sp, #16
    for (int idx = 0; idx < num_candidates; ++idx) {
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	42b3      	cmp	r3, r6
 800ce28:	dc07      	bgt.n	800ce3a <ft8_decode+0x4e>
}
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800ce30:	46bd      	mov	sp, r7
 800ce32:	ecbd 8b02 	vpop	{d8}
 800ce36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Candidate cand = candidate_list[idx];
 800ce3a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800ce3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    for (int idx = 0; idx < num_candidates; ++idx) {
 800ce42:	f8c7 d008 	str.w	sp, [r7, #8]
        Candidate cand = candidate_list[idx];
 800ce46:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ce4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce4e:	e882 0003 	stmia.w	r2, {r0, r1}
 800ce52:	f934 1036 	ldrsh.w	r1, [r4, r6, lsl #3]
        int     n_errors = 0;
 800ce56:	2400      	movs	r4, #0
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800ce58:	487d      	ldr	r0, [pc, #500]	; (800d050 <ft8_decode+0x264>)
        Candidate cand = candidate_list[idx];
 800ce5a:	6079      	str	r1, [r7, #4]
 800ce5c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800ce60:	79db      	ldrb	r3, [r3, #7]
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800ce62:	8539      	strh	r1, [r7, #40]	; 0x28
        Candidate cand = candidate_list[idx];
 800ce64:	ee08 1a10 	vmov	s16, r1
 800ce68:	60fb      	str	r3, [r7, #12]
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800ce6a:	f44f 71c8 	mov.w	r1, #400	; 0x190
        float   log174[N];
 800ce6e:	f8da 3000 	ldr.w	r3, [sl]
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	330a      	adds	r3, #10
 800ce76:	f023 0307 	bic.w	r3, r3, #7
 800ce7a:	ebad 0d03 	sub.w	sp, sp, r3
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
        float   log174[N];
 800ce80:	f10d 0b10 	add.w	fp, sp, #16
        extract_likelihood(export_fft_power, ft8_buffer, cand, kGray_map, log174);
 800ce84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ce88:	4b73      	ldr	r3, [pc, #460]	; (800d058 <ft8_decode+0x26c>)
 800ce8a:	f8cd b004 	str.w	fp, [sp, #4]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	ca0c      	ldmia	r2, {r2, r3}
 800ce92:	f7fa fbdb 	bl	800764c <extract_likelihood>
        uint8_t plain[N];
 800ce96:	f8da 3000 	ldr.w	r3, [sl]
        bp_decode(log174, kLDPC_iterations, plain, &n_errors);
 800ce9a:	2114      	movs	r1, #20
 800ce9c:	4658      	mov	r0, fp
        uint8_t plain[N];
 800ce9e:	3307      	adds	r3, #7
 800cea0:	f023 0307 	bic.w	r3, r3, #7
 800cea4:	ebad 0d03 	sub.w	sp, sp, r3
        int     n_errors = 0;
 800cea8:	f507 7380 	add.w	r3, r7, #256	; 0x100
        uint8_t plain[N];
 800ceac:	f10d 0810 	add.w	r8, sp, #16
        int     n_errors = 0;
 800ceb0:	f843 4df0 	str.w	r4, [r3, #-240]!
        bp_decode(log174, kLDPC_iterations, plain, &n_errors);
 800ceb4:	4642      	mov	r2, r8
 800ceb6:	f7fa fe25 	bl	8007b04 <bp_decode>
        if (n_errors > 0)    continue;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	f300 80c4 	bgt.w	800d04a <ft8_decode+0x25e>
        uint8_t a91[K_BYTES];
 800cec2:	4b66      	ldr	r3, [pc, #408]	; (800d05c <ft8_decode+0x270>)
        pack_bits(plain, K, a91);
 800cec4:	4640      	mov	r0, r8
        uint8_t a91[K_BYTES];
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3307      	adds	r3, #7
 800ceca:	f023 0307 	bic.w	r3, r3, #7
 800cece:	ebad 0d03 	sub.w	sp, sp, r3
        pack_bits(plain, K, a91);
 800ced2:	4b63      	ldr	r3, [pc, #396]	; (800d060 <ft8_decode+0x274>)
        uint8_t a91[K_BYTES];
 800ced4:	f10d 0b10 	add.w	fp, sp, #16
        pack_bits(plain, K, a91);
 800ced8:	6819      	ldr	r1, [r3, #0]
 800ceda:	465a      	mov	r2, fp
 800cedc:	f7fa fdf4 	bl	8007ac8 <pack_bits>
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cee0:	f89b 800b 	ldrb.w	r8, [fp, #11]
 800cee4:	f89b 3009 	ldrb.w	r3, [fp, #9]
        uint16_t chksum2 = crc(a91, 96 - 14);
 800cee8:	2152      	movs	r1, #82	; 0x52
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800ceea:	f89b 200a 	ldrb.w	r2, [fp, #10]
 800ceee:	ea4f 1858 	mov.w	r8, r8, lsr #5
        a91[10] = 0;
 800cef2:	f88b 400a 	strb.w	r4, [fp, #10]
        uint16_t chksum2 = crc(a91, 96 - 14);
 800cef6:	4658      	mov	r0, fp
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cef8:	ea48 08c2 	orr.w	r8, r8, r2, lsl #3
        a91[11] = 0;
 800cefc:	f88b 400b 	strb.w	r4, [fp, #11]
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cf00:	02da      	lsls	r2, r3, #11
        a91[9] &= 0xF8;
 800cf02:	f023 0307 	bic.w	r3, r3, #7
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cf06:	f402 5260 	and.w	r2, r2, #14336	; 0x3800
        a91[9] &= 0xF8;
 800cf0a:	f88b 3009 	strb.w	r3, [fp, #9]
        uint16_t chksum = ((a91[9] & 0x07) << 11) | (a91[10] << 3) | (a91[11] >> 5);
 800cf0e:	ea48 0802 	orr.w	r8, r8, r2
        uint16_t chksum2 = crc(a91, 96 - 14);
 800cf12:	f7fa fcf3 	bl	80078fc <crc>
        if (chksum != chksum2)   continue;
 800cf16:	4580      	cmp	r8, r0
 800cf18:	f040 8097 	bne.w	800d04a <ft8_decode+0x25e>
        int rc = unpack77_fields(a91, field1, field2, field3);
 800cf1c:	f107 081c 	add.w	r8, r7, #28
 800cf20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cf24:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800cf28:	4658      	mov	r0, fp
 800cf2a:	4643      	mov	r3, r8
 800cf2c:	f7fb fc5a 	bl	80087e4 <unpack77_fields>
        if (rc < 0) continue;
 800cf30:	42a0      	cmp	r0, r4
 800cf32:	f2c0 808a 	blt.w	800d04a <ft8_decode+0x25e>
            if (0 == strcmp(decoded[i], message)) {
 800cf36:	f04f 0b14 	mov.w	fp, #20
        sprintf(message,"%s %s %s ",field1, field2, field3);
 800cf3a:	f8cd 8000 	str.w	r8, [sp]
 800cf3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cf42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800cf46:	4947      	ldr	r1, [pc, #284]	; (800d064 <ft8_decode+0x278>)
 800cf48:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800cf4c:	f001 fa4e 	bl	800e3ec <siprintf>
        for (int i = 0; i < num_decoded; ++i) {
 800cf50:	42ac      	cmp	r4, r5
 800cf52:	d16f      	bne.n	800d034 <ft8_decode+0x248>
        if (!found && num_decoded < kMax_decoded_messages) {
 800cf54:	2d13      	cmp	r5, #19
 800cf56:	dc68      	bgt.n	800d02a <ft8_decode+0x23e>
        	if(strlen(message) < kMax_message_length) {
 800cf58:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800cf5c:	f7f3 f9c2 	bl	80002e4 <strlen>
 800cf60:	2813      	cmp	r0, #19
 800cf62:	d862      	bhi.n	800d02a <ft8_decode+0x23e>
            strcpy(decoded[num_decoded], message);
 800cf64:	2014      	movs	r0, #20
 800cf66:	f107 014c 	add.w	r1, r7, #76	; 0x4c
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cf6a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            new_decoded[num_decoded].sync_score = cand.score;
 800cf6e:	2438      	movs	r4, #56	; 0x38
            strcpy(decoded[num_decoded], message);
 800cf70:	fb00 9005 	mla	r0, r0, r5, r9
            new_decoded[num_decoded].sync_score = cand.score;
 800cf74:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 800d070 <ft8_decode+0x284>
            strcpy(decoded[num_decoded], message);
 800cf78:	f001 fa7d 	bl	800e476 <strcpy>
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cf7c:	edd7 7a03 	vldr	s15, [r7, #12]
            new_decoded[num_decoded].sync_score = cand.score;
 800cf80:	436c      	muls	r4, r5
 800cf82:	687a      	ldr	r2, [r7, #4]
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cf84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
            strcpy(new_decoded[num_decoded].field1, field1);
 800cf88:	f107 012c 	add.w	r1, r7, #44	; 0x2c
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cf8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
            new_decoded[num_decoded].sync_score = cand.score;
 800cf90:	eb0b 0304 	add.w	r3, fp, r4
 800cf94:	629a      	str	r2, [r3, #40]	; 0x28
            strcpy(new_decoded[num_decoded].field1, field1);
 800cf96:	4618      	mov	r0, r3
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cf98:	eea7 8a27 	vfma.f32	s16, s14, s15
            strcpy(new_decoded[num_decoded].field1, field1);
 800cf9c:	60fb      	str	r3, [r7, #12]
        float freq_hz  = (  (float)    cand.freq_offset +  (float)    cand.freq_sub / 2.0f) * fsk_dev;
 800cf9e:	eef1 7a09 	vmov.f32	s15, #25	; 0x40c80000  6.250
 800cfa2:	ee28 8a27 	vmul.f32	s16, s16, s15
            new_decoded[num_decoded].freq_hz = (int)freq_hz;
 800cfa6:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 800cfaa:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
            strcpy(new_decoded[num_decoded].field1, field1);
 800cfae:	f001 fa62 	bl	800e476 <strcpy>
            strcpy(new_decoded[num_decoded].field2, field2);
 800cfb2:	f104 000e 	add.w	r0, r4, #14
 800cfb6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800cfba:	4458      	add	r0, fp
 800cfbc:	f001 fa5b 	bl	800e476 <strcpy>
            strcpy(new_decoded[num_decoded].field3, field3);
 800cfc0:	f104 021c 	add.w	r2, r4, #28
 800cfc4:	4641      	mov	r1, r8
			char Target_Locator[] = "    ";
 800cfc6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d074 <ft8_decode+0x288>
            strcpy(new_decoded[num_decoded].field3, field3);
 800cfca:	445a      	add	r2, fp
 800cfcc:	3430      	adds	r4, #48	; 0x30
 800cfce:	4610      	mov	r0, r2
 800cfd0:	44a3      	add	fp, r4
 800cfd2:	f001 fa50 	bl	800e476 <strcpy>
			raw_RSL = (float)new_decoded[num_decoded].sync_score;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
			display_RSL =(int)( (raw_RSL - 160 )) / 6;
 800cfd8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800d068 <ft8_decode+0x27c>
            strcpy(new_decoded[num_decoded].field3, field3);
 800cfdc:	4602      	mov	r2, r0
			raw_RSL = (float)new_decoded[num_decoded].sync_score;
 800cfde:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
			display_RSL =(int)( (raw_RSL - 160 )) / 6;
 800cfe2:	2106      	movs	r1, #6
            ++num_decoded;
 800cfe4:	1c6c      	adds	r4, r5, #1
			raw_RSL = (float)new_decoded[num_decoded].sync_score;
 800cfe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			display_RSL =(int)( (raw_RSL - 160 )) / 6;
 800cfea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cff2:	ee17 0a90 	vmov	r0, s15
 800cff6:	fb90 f1f1 	sdiv	r1, r0, r1
			char Target_Locator[] = "    ";
 800cffa:	f8d8 0000 	ldr.w	r0, [r8]
			new_decoded[num_decoded].snr = display_RSL;
 800cffe:	62d9      	str	r1, [r3, #44]	; 0x2c
			strcpy(Target_Locator, new_decoded[num_decoded].field3);
 800d000:	4611      	mov	r1, r2
			char Target_Locator[] = "    ";
 800d002:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d006:	6178      	str	r0, [r7, #20]
			strcpy(Target_Locator, new_decoded[num_decoded].field3);
 800d008:	f107 0014 	add.w	r0, r7, #20
			char Target_Locator[] = "    ";
 800d00c:	763b      	strb	r3, [r7, #24]
			strcpy(Target_Locator, new_decoded[num_decoded].field3);
 800d00e:	f001 fa32 	bl	800e476 <strcpy>
			if (validate_locator(Target_Locator)  == 1) {
 800d012:	f107 0014 	add.w	r0, r7, #20
 800d016:	f7ff fec9 	bl	800cdac <validate_locator>
 800d01a:	2801      	cmp	r0, #1
				strcpy(new_decoded[num_decoded].target,"    " );
 800d01c:	4658      	mov	r0, fp
				strcpy(new_decoded[num_decoded].target,Target_Locator );
 800d01e:	bf0c      	ite	eq
 800d020:	f107 0114 	addeq.w	r1, r7, #20
				strcpy(new_decoded[num_decoded].target,"    " );
 800d024:	4641      	movne	r1, r8
 800d026:	f001 fa26 	bl	800e476 <strcpy>
 800d02a:	4625      	mov	r5, r4
 800d02c:	f8d7 d008 	ldr.w	sp, [r7, #8]
    for (int idx = 0; idx < num_candidates; ++idx) {
 800d030:	3601      	adds	r6, #1
 800d032:	e6f7      	b.n	800ce24 <ft8_decode+0x38>
            if (0 == strcmp(decoded[i], message)) {
 800d034:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800d038:	fb0b 9004 	mla	r0, fp, r4, r9
 800d03c:	f7f3 f948 	bl	80002d0 <strcmp>
 800d040:	b108      	cbz	r0, 800d046 <ft8_decode+0x25a>
        for (int i = 0; i < num_decoded; ++i) {
 800d042:	3401      	adds	r4, #1
 800d044:	e784      	b.n	800cf50 <ft8_decode+0x164>
 800d046:	462c      	mov	r4, r5
 800d048:	e7ef      	b.n	800d02a <ft8_decode+0x23e>
 800d04a:	f8d7 d008 	ldr.w	sp, [r7, #8]
 800d04e:	e7ef      	b.n	800d030 <ft8_decode+0x244>
 800d050:	20016d7c 	.word	0x20016d7c
 800d054:	08050b2a 	.word	0x08050b2a
 800d058:	08050b22 	.word	0x08050b22
 800d05c:	20001ae8 	.word	0x20001ae8
 800d060:	20001a84 	.word	0x20001a84
 800d064:	08055470 	.word	0x08055470
 800d068:	43200000 	.word	0x43200000
 800d06c:	20001a7c 	.word	0x20001a7c
 800d070:	20043ca8 	.word	0x20043ca8
 800d074:	08055496 	.word	0x08055496

0800d078 <clear_log_stored_data>:


void clear_log_stored_data(void){
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}

	char call_blank[] = "       ";
 800d07a:	4a12      	ldr	r2, [pc, #72]	; (800d0c4 <clear_log_stored_data+0x4c>)
void clear_log_stored_data(void){
 800d07c:	b085      	sub	sp, #20
	char locator_blank[] = "    ";
	//char freq_blank[] = "    ";

	for(int i = 0; i < log_size; i++){
 800d07e:	2500      	movs	r5, #0
 800d080:	4c11      	ldr	r4, [pc, #68]	; (800d0c8 <clear_log_stored_data+0x50>)
	char call_blank[] = "       ";
 800d082:	6810      	ldr	r0, [r2, #0]
 800d084:	ab02      	add	r3, sp, #8
 800d086:	6851      	ldr	r1, [r2, #4]
		Answer_CQ[i].number_times_called = 0;
 800d088:	462e      	mov	r6, r5
	for(int i = 0; i < log_size; i++){
 800d08a:	4f10      	ldr	r7, [pc, #64]	; (800d0cc <clear_log_stored_data+0x54>)
	char call_blank[] = "       ";
 800d08c:	c303      	stmia	r3!, {r0, r1}
	char locator_blank[] = "    ";
 800d08e:	4b10      	ldr	r3, [pc, #64]	; (800d0d0 <clear_log_stored_data+0x58>)
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	791b      	ldrb	r3, [r3, #4]
 800d094:	9000      	str	r0, [sp, #0]
 800d096:	f88d 3004 	strb.w	r3, [sp, #4]
	for(int i = 0; i < log_size; i++){
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	42ab      	cmp	r3, r5
 800d09e:	dc01      	bgt.n	800d0a4 <clear_log_stored_data+0x2c>
		strcpy(Answer_CQ[i].call,call_blank);
		strcpy(Answer_CQ[i].locator,locator_blank);
		Answer_CQ[i].RSL = 0 ;
		Answer_CQ[i].RR73 = 0;
	}
}
 800d0a0:	b005      	add	sp, #20
 800d0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(Answer_CQ[i].call,call_blank);
 800d0a4:	a902      	add	r1, sp, #8
 800d0a6:	4620      	mov	r0, r4
		Answer_CQ[i].number_times_called = 0;
 800d0a8:	f844 6c04 	str.w	r6, [r4, #-4]
		strcpy(Answer_CQ[i].call,call_blank);
 800d0ac:	f001 f9e3 	bl	800e476 <strcpy>
		strcpy(Answer_CQ[i].locator,locator_blank);
 800d0b0:	1de0      	adds	r0, r4, #7
 800d0b2:	4669      	mov	r1, sp
 800d0b4:	f001 f9df 	bl	800e476 <strcpy>
	for(int i = 0; i < log_size; i++){
 800d0b8:	3501      	adds	r5, #1
		Answer_CQ[i].RR73 = 0;
 800d0ba:	e9c4 6603 	strd	r6, r6, [r4, #12]
 800d0be:	3418      	adds	r4, #24
 800d0c0:	e7eb      	b.n	800d09a <clear_log_stored_data+0x22>
 800d0c2:	bf00      	nop
 800d0c4:	08055493 	.word	0x08055493
 800d0c8:	200441fc 	.word	0x200441fc
 800d0cc:	20001010 	.word	0x20001010
 800d0d0:	08055496 	.word	0x08055496

0800d0d4 <process_selected_Station>:


void process_selected_Station(int stations_decoded, int TouchIndex){


	if(stations_decoded > 0 && TouchIndex <= stations_decoded ){
 800d0d4:	2800      	cmp	r0, #0
void process_selected_Station(int stations_decoded, int TouchIndex){
 800d0d6:	b538      	push	{r3, r4, r5, lr}
	if(stations_decoded > 0 && TouchIndex <= stations_decoded ){
 800d0d8:	dd17      	ble.n	800d10a <process_selected_Station+0x36>
 800d0da:	4288      	cmp	r0, r1
 800d0dc:	db15      	blt.n	800d10a <process_selected_Station+0x36>
 800d0de:	2438      	movs	r4, #56	; 0x38
	strcpy(Target_Call, new_decoded[TouchIndex].field2);
 800d0e0:	480c      	ldr	r0, [pc, #48]	; (800d114 <process_selected_Station+0x40>)
 800d0e2:	fb04 f501 	mul.w	r5, r4, r1
 800d0e6:	4c0c      	ldr	r4, [pc, #48]	; (800d118 <process_selected_Station+0x44>)
 800d0e8:	f105 010e 	add.w	r1, r5, #14
 800d0ec:	4421      	add	r1, r4
 800d0ee:	f001 f9c2 	bl	800e476 <strcpy>
	strcpy(Target_Locator, new_decoded[TouchIndex].target);
 800d0f2:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800d0f6:	4809      	ldr	r0, [pc, #36]	; (800d11c <process_selected_Station+0x48>)
 800d0f8:	4421      	add	r1, r4
	Target_RSL = new_decoded[TouchIndex].snr;
 800d0fa:	442c      	add	r4, r5
	strcpy(Target_Locator, new_decoded[TouchIndex].target);
 800d0fc:	f001 f9bb 	bl	800e476 <strcpy>
	Target_RSL = new_decoded[TouchIndex].snr;
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <process_selected_Station+0x4c>)
 800d102:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d104:	601a      	str	r2, [r3, #0]

	compose_messages();
 800d106:	f000 fa19 	bl	800d53c <compose_messages>
	}

	FT8_Touch_Flag = 0;
 800d10a:	4b06      	ldr	r3, [pc, #24]	; (800d124 <process_selected_Station+0x50>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]

}
 800d110:	bd38      	pop	{r3, r4, r5, pc}
 800d112:	bf00      	nop
 800d114:	2003a645 	.word	0x2003a645
 800d118:	20043ca8 	.word	0x20043ca8
 800d11c:	2003a82f 	.word	0x2003a82f
 800d120:	2003a808 	.word	0x2003a808
 800d124:	20001a20 	.word	0x20001a20

0800d128 <strindex>:

}


int strindex(char s[],char t[])
{
 800d128:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i,j,k, result;

    result = -1;

    for(i=0;s[i]!='\0';i++)
 800d12a:	4603      	mov	r3, r0
 800d12c:	4244      	negs	r4, r0
    result = -1;
 800d12e:	f04f 32ff 	mov.w	r2, #4294967295
    for(i=0;s[i]!='\0';i++)
 800d132:	781d      	ldrb	r5, [r3, #0]
 800d134:	eba3 0c00 	sub.w	ip, r3, r0
 800d138:	1c5f      	adds	r7, r3, #1
 800d13a:	b18d      	cbz	r5, 800d160 <strindex+0x38>
 800d13c:	1e4d      	subs	r5, r1, #1
    {
        for(j=i,k=0;t[k]!='\0' && s[j]==t[k];j++,k++)
 800d13e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d142:	eb03 0e04 	add.w	lr, r3, r4
 800d146:	b136      	cbz	r6, 800d156 <strindex+0x2e>
 800d148:	f813 eb01 	ldrb.w	lr, [r3], #1
 800d14c:	4576      	cmp	r6, lr
 800d14e:	d0f6      	beq.n	800d13e <strindex+0x16>
 800d150:	3c01      	subs	r4, #1
    result = -1;
 800d152:	463b      	mov	r3, r7
 800d154:	e7ed      	b.n	800d132 <strindex+0xa>
            ;
        if(k>0 && t[k] == '\0')
            result = i;
 800d156:	f1be 0f00 	cmp.w	lr, #0
 800d15a:	bf18      	it	ne
 800d15c:	4662      	movne	r2, ip
 800d15e:	e7f7      	b.n	800d150 <strindex+0x28>
    }
    return result;
}
 800d160:	4610      	mov	r0, r2
 800d162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d164 <Check_Calling_Stations>:
int Check_Calling_Stations(int num_decoded , int reply_state) {
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800d168:	f04f 0900 	mov.w	r9, #0
int Check_Calling_Stations(int num_decoded , int reply_state) {
 800d16c:	b08f      	sub	sp, #60	; 0x3c
	if(strcmp(Answer_CQ[j].call,new_decoded[i].field2)  == 0 ) {
 800d16e:	f8df a170 	ldr.w	sl, [pc, #368]	; 800d2e0 <Check_Calling_Stations+0x17c>
	int Beacon_Reply_Status = 0;
 800d172:	46c8      	mov	r8, r9
int Check_Calling_Stations(int num_decoded , int reply_state) {
 800d174:	9005      	str	r0, [sp, #20]
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800d176:	9b05      	ldr	r3, [sp, #20]
 800d178:	4599      	cmp	r9, r3
 800d17a:	da5b      	bge.n	800d234 <Check_Calling_Stations+0xd0>
 800d17c:	2438      	movs	r4, #56	; 0x38
 800d17e:	4e52      	ldr	r6, [pc, #328]	; (800d2c8 <Check_Calling_Stations+0x164>)
	if(strindex(new_decoded[i].field1, Station_Call)  >= 0 )	{
 800d180:	4952      	ldr	r1, [pc, #328]	; (800d2cc <Check_Calling_Stations+0x168>)
 800d182:	fb04 f409 	mul.w	r4, r4, r9
 800d186:	1932      	adds	r2, r6, r4
 800d188:	4610      	mov	r0, r2
 800d18a:	9206      	str	r2, [sp, #24]
 800d18c:	f7ff ffcc 	bl	800d128 <strindex>
 800d190:	2800      	cmp	r0, #0
 800d192:	f2c0 8095 	blt.w	800d2c0 <Check_Calling_Stations+0x15c>
	for (int j = 0; j<num_calls; j++) {
 800d196:	4b4e      	ldr	r3, [pc, #312]	; (800d2d0 <Check_Calling_Stations+0x16c>)
 800d198:	f106 050e 	add.w	r5, r6, #14
 800d19c:	f04f 0b00 	mov.w	fp, #0
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4425      	add	r5, r4
	old_call = 0;
 800d1a4:	465f      	mov	r7, fp
 800d1a6:	9302      	str	r3, [sp, #8]
	for (int j = 0; j<num_calls; j++) {
 800d1a8:	9203      	str	r2, [sp, #12]
 800d1aa:	9a06      	ldr	r2, [sp, #24]
 800d1ac:	9b03      	ldr	r3, [sp, #12]
 800d1ae:	455b      	cmp	r3, fp
 800d1b0:	dc44      	bgt.n	800d23c <Check_Calling_Stations+0xd8>
	if(old_call == 0) {
 800d1b2:	2f00      	cmp	r7, #0
 800d1b4:	d159      	bne.n	800d26a <Check_Calling_Stations+0x106>
    sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800d1b6:	f104 031c 	add.w	r3, r4, #28
 800d1ba:	4946      	ldr	r1, [pc, #280]	; (800d2d4 <Check_Calling_Stations+0x170>)
 800d1bc:	a809      	add	r0, sp, #36	; 0x24
	Target_RSL = new_decoded[i].snr;
 800d1be:	f8df a130 	ldr.w	sl, [pc, #304]	; 800d2f0 <Check_Calling_Stations+0x18c>
    sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800d1c2:	4433      	add	r3, r6
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	462b      	mov	r3, r5
 800d1c8:	f001 f910 	bl	800e3ec <siprintf>
    strcpy(current_Beacon_receive_message,little_gulp);
 800d1cc:	a909      	add	r1, sp, #36	; 0x24
 800d1ce:	4842      	ldr	r0, [pc, #264]	; (800d2d8 <Check_Calling_Stations+0x174>)
 800d1d0:	f001 f951 	bl	800e476 <strcpy>
    update_Beacon_log_display(0);
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	f7fd fc91 	bl	800aafc <update_Beacon_log_display>
	strcpy(Target_Call, new_decoded[i].field2);
 800d1da:	4629      	mov	r1, r5
 800d1dc:	483f      	ldr	r0, [pc, #252]	; (800d2dc <Check_Calling_Stations+0x178>)
 800d1de:	f001 f94a 	bl	800e476 <strcpy>
	Target_RSL = new_decoded[i].snr;
 800d1e2:	2338      	movs	r3, #56	; 0x38
	set_reply(0);
 800d1e4:	4638      	mov	r0, r7
 800d1e6:	2718      	movs	r7, #24
	Target_RSL = new_decoded[i].snr;
 800d1e8:	fb03 6909 	mla	r9, r3, r9, r6
 800d1ec:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800d1f0:	f8ca 3000 	str.w	r3, [sl]
	set_reply(0);
 800d1f4:	f000 f916 	bl	800d424 <set_reply>
	strcpy(Answer_CQ[num_calls].call, new_decoded[i].field2);
 800d1f8:	9b02      	ldr	r3, [sp, #8]
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	f8d3 9000 	ldr.w	r9, [r3]
 800d200:	fb07 f809 	mul.w	r8, r7, r9
 800d204:	4f36      	ldr	r7, [pc, #216]	; (800d2e0 <Check_Calling_Stations+0x17c>)
 800d206:	f108 0004 	add.w	r0, r8, #4
 800d20a:	4438      	add	r0, r7
 800d20c:	f001 f933 	bl	800e476 <strcpy>
	strcpy(Answer_CQ[num_calls].locator, new_decoded[i].target);
 800d210:	f108 000b 	add.w	r0, r8, #11
 800d214:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d218:	4438      	add	r0, r7
	Answer_CQ[num_calls].RSL = Target_RSL;
 800d21a:	4447      	add	r7, r8
	strcpy(Answer_CQ[num_calls].locator, new_decoded[i].target);
 800d21c:	4431      	add	r1, r6
	Beacon_Reply_Status = 1;
 800d21e:	f04f 0801 	mov.w	r8, #1
	strcpy(Answer_CQ[num_calls].locator, new_decoded[i].target);
 800d222:	f001 f928 	bl	800e476 <strcpy>
	Answer_CQ[num_calls].RSL = Target_RSL;
 800d226:	f8da 3000 	ldr.w	r3, [sl]
	num_calls++;
 800d22a:	9a02      	ldr	r2, [sp, #8]
	Answer_CQ[num_calls].RSL = Target_RSL;
 800d22c:	613b      	str	r3, [r7, #16]
	num_calls++;
 800d22e:	f109 0301 	add.w	r3, r9, #1
 800d232:	6013      	str	r3, [r2, #0]
}
 800d234:	4640      	mov	r0, r8
 800d236:	b00f      	add	sp, #60	; 0x3c
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	2318      	movs	r3, #24
 800d23e:	9207      	str	r2, [sp, #28]
	if(strcmp(Answer_CQ[j].call,new_decoded[i].field2)  == 0 ) {
 800d240:	4a28      	ldr	r2, [pc, #160]	; (800d2e4 <Check_Calling_Stations+0x180>)
 800d242:	4629      	mov	r1, r5
 800d244:	fb03 f30b 	mul.w	r3, r3, fp
 800d248:	18d0      	adds	r0, r2, r3
 800d24a:	9306      	str	r3, [sp, #24]
 800d24c:	f7f3 f840 	bl	80002d0 <strcmp>
 800d250:	9a07      	ldr	r2, [sp, #28]
 800d252:	b938      	cbnz	r0, 800d264 <Check_Calling_Stations+0x100>
	old_call = 	Answer_CQ[j].number_times_called;
 800d254:	9b06      	ldr	r3, [sp, #24]
	Answer_CQ[j].number_times_called = old_call;
 800d256:	f8cd b010 	str.w	fp, [sp, #16]
	old_call = 	Answer_CQ[j].number_times_called;
 800d25a:	f853 700a 	ldr.w	r7, [r3, sl]
	old_call ++;
 800d25e:	3701      	adds	r7, #1
	Answer_CQ[j].number_times_called = old_call;
 800d260:	f843 700a 	str.w	r7, [r3, sl]
	for (int j = 0; j<num_calls; j++) {
 800d264:	f10b 0b01 	add.w	fp, fp, #1
 800d268:	e7a0      	b.n	800d1ac <Check_Calling_Stations+0x48>
	if(old_call >= 1) {
 800d26a:	dd29      	ble.n	800d2c0 <Check_Calling_Stations+0x15c>
		sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800d26c:	491e      	ldr	r1, [pc, #120]	; (800d2e8 <Check_Calling_Stations+0x184>)
 800d26e:	462b      	mov	r3, r5
 800d270:	a809      	add	r0, sp, #36	; 0x24
 800d272:	440c      	add	r4, r1
 800d274:	4917      	ldr	r1, [pc, #92]	; (800d2d4 <Check_Calling_Stations+0x170>)
 800d276:	9400      	str	r4, [sp, #0]
		if(Answer_CQ[old_call_address].RR73 == 0){
 800d278:	2418      	movs	r4, #24
		sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800d27a:	f001 f8b7 	bl	800e3ec <siprintf>
	    strcpy(current_Beacon_receive_message,little_gulp);
 800d27e:	a909      	add	r1, sp, #36	; 0x24
 800d280:	4815      	ldr	r0, [pc, #84]	; (800d2d8 <Check_Calling_Stations+0x174>)
 800d282:	f001 f8f8 	bl	800e476 <strcpy>
	    update_Beacon_log_display(0);
 800d286:	2000      	movs	r0, #0
 800d288:	f7fd fc38 	bl	800aafc <update_Beacon_log_display>
		if(Answer_CQ[old_call_address].RR73 == 0){
 800d28c:	9b04      	ldr	r3, [sp, #16]
 800d28e:	435c      	muls	r4, r3
 800d290:	eb0a 0504 	add.w	r5, sl, r4
 800d294:	696b      	ldr	r3, [r5, #20]
 800d296:	b99b      	cbnz	r3, 800d2c0 <Check_Calling_Stations+0x15c>
		strcpy(Target_Call, Answer_CQ[old_call_address].call);
 800d298:	1d21      	adds	r1, r4, #4
 800d29a:	4810      	ldr	r0, [pc, #64]	; (800d2dc <Check_Calling_Stations+0x178>)
 800d29c:	4451      	add	r1, sl
 800d29e:	f001 f8ea 	bl	800e476 <strcpy>
		strcpy(Target_Locator, Answer_CQ[old_call_address].locator);
 800d2a2:	f104 010b 	add.w	r1, r4, #11
 800d2a6:	4811      	ldr	r0, [pc, #68]	; (800d2ec <Check_Calling_Stations+0x188>)
 800d2a8:	4451      	add	r1, sl
 800d2aa:	f001 f8e4 	bl	800e476 <strcpy>
		Target_RSL = Answer_CQ[old_call_address].RSL;
 800d2ae:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <Check_Calling_Stations+0x18c>)
 800d2b0:	692a      	ldr	r2, [r5, #16]
		set_reply(1);
 800d2b2:	2001      	movs	r0, #1
		Target_RSL = Answer_CQ[old_call_address].RSL;
 800d2b4:	601a      	str	r2, [r3, #0]
		set_reply(1);
 800d2b6:	f000 f8b5 	bl	800d424 <set_reply>
		Answer_CQ[old_call_address].RR73 = 1;
 800d2ba:	2301      	movs	r3, #1
		Beacon_Reply_Status = 1;
 800d2bc:	4698      	mov	r8, r3
		Answer_CQ[old_call_address].RR73 = 1;
 800d2be:	616b      	str	r3, [r5, #20]
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800d2c0:	f109 0901 	add.w	r9, r9, #1
 800d2c4:	e757      	b.n	800d176 <Check_Calling_Stations+0x12>
 800d2c6:	bf00      	nop
 800d2c8:	20043ca8 	.word	0x20043ca8
 800d2cc:	2003a7f0 	.word	0x2003a7f0
 800d2d0:	200446a8 	.word	0x200446a8
 800d2d4:	0805547a 	.word	0x0805547a
 800d2d8:	2003a878 	.word	0x2003a878
 800d2dc:	2003a645 	.word	0x2003a645
 800d2e0:	200441f8 	.word	0x200441f8
 800d2e4:	200441fc 	.word	0x200441fc
 800d2e8:	20043cc4 	.word	0x20043cc4
 800d2ec:	2003a82f 	.word	0x2003a82f
 800d2f0:	2003a808 	.word	0x2003a808

0800d2f4 <Check_QSO_Calling_Stations>:
int Check_QSO_Calling_Stations(int num_decoded, int reply_state) {
 800d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	b088      	sub	sp, #32
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800d2fc:	2500      	movs	r5, #0
 800d2fe:	f04f 0938 	mov.w	r9, #56	; 0x38
 800d302:	4e14      	ldr	r6, [pc, #80]	; (800d354 <Check_QSO_Calling_Stations+0x60>)
	if(strindex(new_decoded[i].field1, Station_Call)  >= 0 )	{
 800d304:	f8df a058 	ldr.w	sl, [pc, #88]	; 800d360 <Check_QSO_Calling_Stations+0x6c>
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800d308:	4545      	cmp	r5, r8
 800d30a:	db01      	blt.n	800d310 <Check_QSO_Calling_Stations+0x1c>
 800d30c:	2000      	movs	r0, #0
	return QSO_Status;
 800d30e:	e01b      	b.n	800d348 <Check_QSO_Calling_Stations+0x54>
 800d310:	fb09 f405 	mul.w	r4, r9, r5
	if(strindex(new_decoded[i].field1, Station_Call)  >= 0 )	{
 800d314:	4651      	mov	r1, sl
 800d316:	19a7      	adds	r7, r4, r6
 800d318:	4638      	mov	r0, r7
 800d31a:	f7ff ff05 	bl	800d128 <strindex>
 800d31e:	2800      	cmp	r0, #0
 800d320:	db15      	blt.n	800d34e <Check_QSO_Calling_Stations+0x5a>
	sprintf(little_gulp," %s %s %s", new_decoded[i].field1, new_decoded[i].field2, new_decoded[i].field3);
 800d322:	f104 030e 	add.w	r3, r4, #14
 800d326:	341c      	adds	r4, #28
 800d328:	463a      	mov	r2, r7
 800d32a:	490b      	ldr	r1, [pc, #44]	; (800d358 <Check_QSO_Calling_Stations+0x64>)
 800d32c:	4434      	add	r4, r6
 800d32e:	4433      	add	r3, r6
 800d330:	a803      	add	r0, sp, #12
 800d332:	9400      	str	r4, [sp, #0]
 800d334:	f001 f85a 	bl	800e3ec <siprintf>
    strcpy(current_QSO_receive_message, little_gulp);
 800d338:	a903      	add	r1, sp, #12
 800d33a:	4808      	ldr	r0, [pc, #32]	; (800d35c <Check_QSO_Calling_Stations+0x68>)
 800d33c:	f001 f89b 	bl	800e476 <strcpy>
    update_log_display(0);
 800d340:	2000      	movs	r0, #0
 800d342:	f7fd fb75 	bl	800aa30 <update_log_display>
    QSO_Status = 1; //we already have a reply!!
 800d346:	2001      	movs	r0, #1
}
 800d348:	b008      	add	sp, #32
 800d34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(int i = 0; i < num_decoded ; i++) {  //check to see if being called
 800d34e:	3501      	adds	r5, #1
 800d350:	e7da      	b.n	800d308 <Check_QSO_Calling_Stations+0x14>
 800d352:	bf00      	nop
 800d354:	20043ca8 	.word	0x20043ca8
 800d358:	0805547a 	.word	0x0805547a
 800d35c:	2003a88e 	.word	0x2003a88e
 800d360:	2003a7f0 	.word	0x2003a7f0

0800d364 <set_cq>:

/* Fatfs structure */
FATFS FS;
FIL fil;

void  set_cq(void) {
 800d364:	b5f0      	push	{r4, r5, r6, r7, lr}
	char CQ[] = "CQ";
 800d366:	4b27      	ldr	r3, [pc, #156]	; (800d404 <set_cq+0xa0>)
void  set_cq(void) {
 800d368:	b08f      	sub	sp, #60	; 0x3c
 800d36a:	af02      	add	r7, sp, #8
	char CQ[] = "CQ";
 800d36c:	881a      	ldrh	r2, [r3, #0]
 800d36e:	789b      	ldrb	r3, [r3, #2]
 800d370:	803a      	strh	r2, [r7, #0]
    char message[18];
    uint8_t packed[K_BYTES];
    char blank[] = "                      ";
 800d372:	f107 0218 	add.w	r2, r7, #24
	char CQ[] = "CQ";
 800d376:	70bb      	strb	r3, [r7, #2]
    uint8_t packed[K_BYTES];
 800d378:	4b23      	ldr	r3, [pc, #140]	; (800d408 <set_cq+0xa4>)
 800d37a:	4616      	mov	r6, r2
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	3307      	adds	r3, #7
 800d380:	f023 0307 	bic.w	r3, r3, #7
 800d384:	ebad 0d03 	sub.w	sp, sp, r3
    char blank[] = "                      ";
 800d388:	4b20      	ldr	r3, [pc, #128]	; (800d40c <set_cq+0xa8>)
    uint8_t packed[K_BYTES];
 800d38a:	ad02      	add	r5, sp, #8
    char blank[] = "                      ";
 800d38c:	f103 0c10 	add.w	ip, r3, #16
 800d390:	6818      	ldr	r0, [r3, #0]
 800d392:	3308      	adds	r3, #8
 800d394:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d398:	4614      	mov	r4, r2
 800d39a:	4563      	cmp	r3, ip
 800d39c:	c403      	stmia	r4!, {r0, r1}
 800d39e:	4622      	mov	r2, r4
 800d3a0:	d1f6      	bne.n	800d390 <set_cq+0x2c>
 800d3a2:	6818      	ldr	r0, [r3, #0]

    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800d3a4:	463a      	mov	r2, r7
    char blank[] = "                      ";
 800d3a6:	8899      	ldrh	r1, [r3, #4]
 800d3a8:	799b      	ldrb	r3, [r3, #6]
 800d3aa:	6020      	str	r0, [r4, #0]
    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800d3ac:	1d38      	adds	r0, r7, #4
    char blank[] = "                      ";
 800d3ae:	71a3      	strb	r3, [r4, #6]
    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800d3b0:	4b17      	ldr	r3, [pc, #92]	; (800d410 <set_cq+0xac>)
    char blank[] = "                      ";
 800d3b2:	80a1      	strh	r1, [r4, #4]
    sprintf(message,"%s %s %s",CQ,Station_Call,Locator);
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	4917      	ldr	r1, [pc, #92]	; (800d414 <set_cq+0xb0>)
 800d3b8:	4b17      	ldr	r3, [pc, #92]	; (800d418 <set_cq+0xb4>)
 800d3ba:	f001 f817 	bl	800e3ec <siprintf>

    pack77(message, packed);
 800d3be:	4629      	mov	r1, r5
 800d3c0:	1d38      	adds	r0, r7, #4
 800d3c2:	f7fa fe7f 	bl	80080c4 <pack77>
    genft8(packed, tones);
 800d3c6:	4915      	ldr	r1, [pc, #84]	; (800d41c <set_cq+0xb8>)
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f7fa fac3 	bl	8007954 <genft8>

    BSP_LCD_SetFont (&Font16);
 800d3ce:	4814      	ldr	r0, [pc, #80]	; (800d420 <set_cq+0xbc>)
 800d3d0:	f7f5 fa74 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d3d4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d3d8:	f7f5 fa58 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 240, blank,0x03);
 800d3dc:	21f0      	movs	r1, #240	; 0xf0
 800d3de:	4632      	mov	r2, r6
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	f7f5 faec 	bl	80029c0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	f7f5 fa4e 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 240, message,0x03);
 800d3f0:	21f0      	movs	r1, #240	; 0xf0
 800d3f2:	1d3a      	adds	r2, r7, #4
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	f7f5 fae2 	bl	80029c0 <BSP_LCD_DisplayStringAt>

}
 800d3fc:	3734      	adds	r7, #52	; 0x34
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d402:	bf00      	nop
 800d404:	0805529f 	.word	0x0805529f
 800d408:	20001ae8 	.word	0x20001ae8
 800d40c:	08055484 	.word	0x08055484
 800d410:	2003a731 	.word	0x2003a731
 800d414:	0805547b 	.word	0x0805547b
 800d418:	2003a7f0 	.word	0x2003a7f0
 800d41c:	20001a8c 	.word	0x20001a8c
 800d420:	20000030 	.word	0x20000030

0800d424 <set_reply>:

extern char current_Beacon_xmit_message[20];

//void  set_reply(uint16_t index, uint16_t vector ) {

void  set_reply(uint16_t index ) {
 800d424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//char big_gulp[60];
    char seventy_three[] = "RR73";
 800d428:	4b37      	ldr	r3, [pc, #220]	; (800d508 <set_reply+0xe4>)
void  set_reply(uint16_t index ) {
 800d42a:	b08c      	sub	sp, #48	; 0x30
 800d42c:	4605      	mov	r5, r0
 800d42e:	af02      	add	r7, sp, #8
    char seventy_three[] = "RR73";
 800d430:	6818      	ldr	r0, [r3, #0]
 800d432:	791b      	ldrb	r3, [r3, #4]
    uint8_t packed[K_BYTES];
    char blank[] = "                      ";
 800d434:	f107 0210 	add.w	r2, r7, #16
    char seventy_three[] = "RR73";
 800d438:	6038      	str	r0, [r7, #0]
 800d43a:	713b      	strb	r3, [r7, #4]
 800d43c:	4690      	mov	r8, r2
    uint8_t packed[K_BYTES];
 800d43e:	4b33      	ldr	r3, [pc, #204]	; (800d50c <set_reply+0xe8>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	3307      	adds	r3, #7
 800d444:	f023 0307 	bic.w	r3, r3, #7
 800d448:	ebad 0d03 	sub.w	sp, sp, r3
    char blank[] = "                      ";
 800d44c:	4b30      	ldr	r3, [pc, #192]	; (800d510 <set_reply+0xec>)
    uint8_t packed[K_BYTES];
 800d44e:	ae02      	add	r6, sp, #8
    char blank[] = "                      ";
 800d450:	f103 0c10 	add.w	ip, r3, #16
 800d454:	6818      	ldr	r0, [r3, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d45c:	4614      	mov	r4, r2
 800d45e:	4563      	cmp	r3, ip
 800d460:	c403      	stmia	r4!, {r0, r1}
 800d462:	4622      	mov	r2, r4
 800d464:	d1f6      	bne.n	800d454 <set_reply+0x30>
 800d466:	6818      	ldr	r0, [r3, #0]
    char RSL[] = "     ";

    itoa(Target_RSL, RSL, 10 );
 800d468:	220a      	movs	r2, #10
    char blank[] = "                      ";
 800d46a:	8899      	ldrh	r1, [r3, #4]
 800d46c:	799b      	ldrb	r3, [r3, #6]
 800d46e:	6020      	str	r0, [r4, #0]
 800d470:	71a3      	strb	r3, [r4, #6]
    char RSL[] = "     ";
 800d472:	4b28      	ldr	r3, [pc, #160]	; (800d514 <set_reply+0xf0>)
    char blank[] = "                      ";
 800d474:	80a1      	strh	r1, [r4, #4]
    char RSL[] = "     ";
 800d476:	f107 0408 	add.w	r4, r7, #8
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	889b      	ldrh	r3, [r3, #4]
    itoa(Target_RSL, RSL, 10 );
 800d47e:	4621      	mov	r1, r4
    char RSL[] = "     ";
 800d480:	60b8      	str	r0, [r7, #8]
 800d482:	81bb      	strh	r3, [r7, #12]
    itoa(Target_RSL, RSL, 10 );
 800d484:	4b24      	ldr	r3, [pc, #144]	; (800d518 <set_reply+0xf4>)
 800d486:	6818      	ldr	r0, [r3, #0]
 800d488:	f000 fecc 	bl	800e224 <itoa>

    if (index == 0) sprintf(reply_message,"%s %s %R%s",Target_Call,Station_Call,RSL);
 800d48c:	bb85      	cbnz	r5, 800d4f0 <set_reply+0xcc>
 800d48e:	9400      	str	r4, [sp, #0]
 800d490:	4b22      	ldr	r3, [pc, #136]	; (800d51c <set_reply+0xf8>)
 800d492:	4a23      	ldr	r2, [pc, #140]	; (800d520 <set_reply+0xfc>)
 800d494:	4923      	ldr	r1, [pc, #140]	; (800d524 <set_reply+0x100>)
 800d496:	4824      	ldr	r0, [pc, #144]	; (800d528 <set_reply+0x104>)
 800d498:	f000 ffa8 	bl	800e3ec <siprintf>
    if (index == 1) {
    sprintf(reply_message,"%s %s %s",Target_Call,Station_Call,seventy_three);
    write_ADIF_Log();
    }

	strcpy(current_Beacon_xmit_message,reply_message);
 800d49c:	4922      	ldr	r1, [pc, #136]	; (800d528 <set_reply+0x104>)
 800d49e:	4823      	ldr	r0, [pc, #140]	; (800d52c <set_reply+0x108>)
 800d4a0:	f000 ffe9 	bl	800e476 <strcpy>
	update_Beacon_log_display(1);
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	f7fd fb29 	bl	800aafc <update_Beacon_log_display>

    pack77(reply_message, packed);
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	481e      	ldr	r0, [pc, #120]	; (800d528 <set_reply+0x104>)
 800d4ae:	f7fa fe09 	bl	80080c4 <pack77>
    genft8(packed, tones);
 800d4b2:	491f      	ldr	r1, [pc, #124]	; (800d530 <set_reply+0x10c>)
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7fa fa4d 	bl	8007954 <genft8>

     BSP_LCD_SetFont (&Font16);
 800d4ba:	481e      	ldr	r0, [pc, #120]	; (800d534 <set_reply+0x110>)
 800d4bc:	f7f5 f9fe 	bl	80028bc <BSP_LCD_SetFont>
     BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d4c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d4c4:	f7f5 f9e2 	bl	800288c <BSP_LCD_SetTextColor>
     BSP_LCD_DisplayStringAt(240, 240, blank,0x03);
 800d4c8:	21f0      	movs	r1, #240	; 0xf0
 800d4ca:	4642      	mov	r2, r8
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	4608      	mov	r0, r1
 800d4d0:	f7f5 fa76 	bl	80029c0 <BSP_LCD_DisplayStringAt>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	f7f5 f9d8 	bl	800288c <BSP_LCD_SetTextColor>
     BSP_LCD_DisplayStringAt(240, 240, reply_message,0x03);
 800d4dc:	21f0      	movs	r1, #240	; 0xf0
 800d4de:	2303      	movs	r3, #3
 800d4e0:	4a11      	ldr	r2, [pc, #68]	; (800d528 <set_reply+0x104>)
 800d4e2:	4608      	mov	r0, r1
 800d4e4:	f7f5 fa6c 	bl	80029c0 <BSP_LCD_DisplayStringAt>

}
 800d4e8:	3728      	adds	r7, #40	; 0x28
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (index == 1) {
 800d4f0:	2d01      	cmp	r5, #1
 800d4f2:	d1d3      	bne.n	800d49c <set_reply+0x78>
    sprintf(reply_message,"%s %s %s",Target_Call,Station_Call,seventy_three);
 800d4f4:	4b09      	ldr	r3, [pc, #36]	; (800d51c <set_reply+0xf8>)
 800d4f6:	4a0a      	ldr	r2, [pc, #40]	; (800d520 <set_reply+0xfc>)
 800d4f8:	490f      	ldr	r1, [pc, #60]	; (800d538 <set_reply+0x114>)
 800d4fa:	9700      	str	r7, [sp, #0]
 800d4fc:	480a      	ldr	r0, [pc, #40]	; (800d528 <set_reply+0x104>)
 800d4fe:	f000 ff75 	bl	800e3ec <siprintf>
    write_ADIF_Log();
 800d502:	f7fd f821 	bl	800a548 <write_ADIF_Log>
 800d506:	e7c9      	b.n	800d49c <set_reply+0x78>
 800d508:	0805528d 	.word	0x0805528d
 800d50c:	20001ae8 	.word	0x20001ae8
 800d510:	08055484 	.word	0x08055484
 800d514:	08055495 	.word	0x08055495
 800d518:	2003a808 	.word	0x2003a808
 800d51c:	2003a7f0 	.word	0x2003a7f0
 800d520:	2003a645 	.word	0x2003a645
 800d524:	0805549b 	.word	0x0805549b
 800d528:	2003a80d 	.word	0x2003a80d
 800d52c:	200416c0 	.word	0x200416c0
 800d530:	20001a8c 	.word	0x20001a8c
 800d534:	20000030 	.word	0x20000030
 800d538:	0805547b 	.word	0x0805547b

0800d53c <compose_messages>:


char    xmit_messages[4][19];

void compose_messages(void) {
	char seventy_three[] = "RR73";
 800d53c:	4b3b      	ldr	r3, [pc, #236]	; (800d62c <compose_messages+0xf0>)
void compose_messages(void) {
 800d53e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char seventy_three[] = "RR73";
 800d542:	6818      	ldr	r0, [r3, #0]
void compose_messages(void) {
 800d544:	b089      	sub	sp, #36	; 0x24
	char seventy_three[] = "RR73";
 800d546:	791b      	ldrb	r3, [r3, #4]
 800d548:	9004      	str	r0, [sp, #16]
	char CQ[] = "CQ";
    char RSL[] = "     ";
 800d54a:	af06      	add	r7, sp, #24
	char seventy_three[] = "RR73";
 800d54c:	f88d 3014 	strb.w	r3, [sp, #20]
 800d550:	f10d 0b10 	add.w	fp, sp, #16
	char CQ[] = "CQ";
 800d554:	4b36      	ldr	r3, [pc, #216]	; (800d630 <compose_messages+0xf4>)

    itoa(Target_RSL, RSL, 10 );
 800d556:	4639      	mov	r1, r7


	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d558:	4c36      	ldr	r4, [pc, #216]	; (800d634 <compose_messages+0xf8>)
	char CQ[] = "CQ";
 800d55a:	881a      	ldrh	r2, [r3, #0]
 800d55c:	789b      	ldrb	r3, [r3, #2]
	sprintf(xmit_messages[1],"%s %s %R%s", Target_Call,Station_Call,RSL);
 800d55e:	f104 0813 	add.w	r8, r4, #19
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d562:	4d35      	ldr	r5, [pc, #212]	; (800d638 <compose_messages+0xfc>)
	char CQ[] = "CQ";
 800d564:	f88d 300e 	strb.w	r3, [sp, #14]
    char RSL[] = "     ";
 800d568:	4b34      	ldr	r3, [pc, #208]	; (800d63c <compose_messages+0x100>)
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d56a:	4e35      	ldr	r6, [pc, #212]	; (800d640 <compose_messages+0x104>)
    char RSL[] = "     ";
 800d56c:	6818      	ldr	r0, [r3, #0]
 800d56e:	889b      	ldrh	r3, [r3, #4]
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d570:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800d654 <compose_messages+0x118>
    char RSL[] = "     ";
 800d574:	f8ad 301c 	strh.w	r3, [sp, #28]
    itoa(Target_RSL, RSL, 10 );
 800d578:	4b32      	ldr	r3, [pc, #200]	; (800d644 <compose_messages+0x108>)
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d57a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800d658 <compose_messages+0x11c>
	char CQ[] = "CQ";
 800d57e:	f8ad 200c 	strh.w	r2, [sp, #12]
    itoa(Target_RSL, RSL, 10 );
 800d582:	220a      	movs	r2, #10
    char RSL[] = "     ";
 800d584:	9006      	str	r0, [sp, #24]
    itoa(Target_RSL, RSL, 10 );
 800d586:	6818      	ldr	r0, [r3, #0]
 800d588:	f000 fe4c 	bl	800e224 <itoa>
	sprintf(xmit_messages[0],"%s %s %s", Target_Call,Station_Call,Locator);
 800d58c:	462b      	mov	r3, r5
 800d58e:	4632      	mov	r2, r6
 800d590:	4649      	mov	r1, r9
 800d592:	f8cd a000 	str.w	sl, [sp]
 800d596:	4620      	mov	r0, r4
 800d598:	f000 ff28 	bl	800e3ec <siprintf>
	sprintf(xmit_messages[1],"%s %s %R%s", Target_Call,Station_Call,RSL);
 800d59c:	9700      	str	r7, [sp, #0]
 800d59e:	462b      	mov	r3, r5
 800d5a0:	4632      	mov	r2, r6
	sprintf(xmit_messages[2],"%s %s %3s", Target_Call,Station_Call,seventy_three);
 800d5a2:	f104 0726 	add.w	r7, r4, #38	; 0x26
	sprintf(xmit_messages[1],"%s %s %R%s", Target_Call,Station_Call,RSL);
 800d5a6:	4928      	ldr	r1, [pc, #160]	; (800d648 <compose_messages+0x10c>)
 800d5a8:	4640      	mov	r0, r8
 800d5aa:	f000 ff1f 	bl	800e3ec <siprintf>
	sprintf(xmit_messages[2],"%s %s %3s", Target_Call,Station_Call,seventy_three);
 800d5ae:	4632      	mov	r2, r6
	sprintf(xmit_messages[3],"%s %s %s", CQ,Station_Call,Locator);
 800d5b0:	f104 0639 	add.w	r6, r4, #57	; 0x39
	sprintf(xmit_messages[2],"%s %s %3s", Target_Call,Station_Call,seventy_three);
 800d5b4:	462b      	mov	r3, r5
 800d5b6:	f8cd b000 	str.w	fp, [sp]
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	4923      	ldr	r1, [pc, #140]	; (800d64c <compose_messages+0x110>)
 800d5be:	f000 ff15 	bl	800e3ec <siprintf>
	sprintf(xmit_messages[3],"%s %s %s", CQ,Station_Call,Locator);
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	aa03      	add	r2, sp, #12
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	f8cd a000 	str.w	sl, [sp]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f000 ff0d 	bl	800e3ec <siprintf>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d5d2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d5d6:	f7f5 f959 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 130, 240, 123);
 800d5da:	22f0      	movs	r2, #240	; 0xf0
 800d5dc:	237b      	movs	r3, #123	; 0x7b
 800d5de:	2182      	movs	r1, #130	; 0x82
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	f7f5 faad 	bl	8002b40 <BSP_LCD_FillRect>
	BSP_LCD_SetFont (&Font16);
 800d5e6:	481a      	ldr	r0, [pc, #104]	; (800d650 <compose_messages+0x114>)
 800d5e8:	f7f5 f968 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f0:	f7f5 f94c 	bl	800288c <BSP_LCD_SetTextColor>

    BSP_LCD_DisplayStringAt(240, 160, xmit_messages[0],0x03);
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	21a0      	movs	r1, #160	; 0xa0
 800d5fa:	20f0      	movs	r0, #240	; 0xf0
 800d5fc:	f7f5 f9e0 	bl	80029c0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(240, 180, xmit_messages[1],0x03);
 800d600:	4642      	mov	r2, r8
 800d602:	2303      	movs	r3, #3
 800d604:	21b4      	movs	r1, #180	; 0xb4
 800d606:	20f0      	movs	r0, #240	; 0xf0
 800d608:	f7f5 f9da 	bl	80029c0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(240, 200, xmit_messages[2],0x03);
 800d60c:	463a      	mov	r2, r7
 800d60e:	2303      	movs	r3, #3
 800d610:	21c8      	movs	r1, #200	; 0xc8
 800d612:	20f0      	movs	r0, #240	; 0xf0
 800d614:	f7f5 f9d4 	bl	80029c0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(240, 220, xmit_messages[3],0x03);
 800d618:	2303      	movs	r3, #3
 800d61a:	4632      	mov	r2, r6
 800d61c:	21dc      	movs	r1, #220	; 0xdc
 800d61e:	20f0      	movs	r0, #240	; 0xf0
 800d620:	f7f5 f9ce 	bl	80029c0 <BSP_LCD_DisplayStringAt>

    }
 800d624:	b009      	add	sp, #36	; 0x24
 800d626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d62a:	bf00      	nop
 800d62c:	0805528d 	.word	0x0805528d
 800d630:	0805529f 	.word	0x0805529f
 800d634:	200448fc 	.word	0x200448fc
 800d638:	2003a7f0 	.word	0x2003a7f0
 800d63c:	08055495 	.word	0x08055495
 800d640:	2003a645 	.word	0x2003a645
 800d644:	2003a808 	.word	0x2003a808
 800d648:	0805549b 	.word	0x0805549b
 800d64c:	080554a6 	.word	0x080554a6
 800d650:	20000030 	.word	0x20000030
 800d654:	0805547b 	.word	0x0805547b
 800d658:	2003a731 	.word	0x2003a731

0800d65c <que_message>:

extern char current_QSO_xmit_message[];

void que_message(int index ) {
 800d65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	uint8_t packed[K_BYTES];
 800d660:	4b26      	ldr	r3, [pc, #152]	; (800d6fc <que_message+0xa0>)
void que_message(int index ) {
 800d662:	b087      	sub	sp, #28
 800d664:	4605      	mov	r5, r0
	uint8_t packed[K_BYTES];
 800d666:	681b      	ldr	r3, [r3, #0]
void que_message(int index ) {
 800d668:	af00      	add	r7, sp, #0
	uint8_t packed[K_BYTES];
 800d66a:	3307      	adds	r3, #7

	char blank[] = "                      ";
 800d66c:	463c      	mov	r4, r7
 800d66e:	46b9      	mov	r9, r7
	uint8_t packed[K_BYTES];
 800d670:	f023 0307 	bic.w	r3, r3, #7
 800d674:	ebad 0d03 	sub.w	sp, sp, r3
	char blank[] = "                      ";
 800d678:	4b21      	ldr	r3, [pc, #132]	; (800d700 <que_message+0xa4>)
	uint8_t packed[K_BYTES];
 800d67a:	46e8      	mov	r8, sp
	char blank[] = "                      ";
 800d67c:	f103 0210 	add.w	r2, r3, #16
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	3308      	adds	r3, #8
 800d684:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d688:	4626      	mov	r6, r4
 800d68a:	4293      	cmp	r3, r2
 800d68c:	c603      	stmia	r6!, {r0, r1}
 800d68e:	4634      	mov	r4, r6
 800d690:	d1f6      	bne.n	800d680 <que_message+0x24>
 800d692:	889a      	ldrh	r2, [r3, #4]

    pack77(xmit_messages[index], packed);
 800d694:	2413      	movs	r4, #19
	char blank[] = "                      ";
 800d696:	6818      	ldr	r0, [r3, #0]
    pack77(xmit_messages[index], packed);
 800d698:	4641      	mov	r1, r8
	char blank[] = "                      ";
 800d69a:	799b      	ldrb	r3, [r3, #6]
 800d69c:	80b2      	strh	r2, [r6, #4]
 800d69e:	71b3      	strb	r3, [r6, #6]
    pack77(xmit_messages[index], packed);
 800d6a0:	4b18      	ldr	r3, [pc, #96]	; (800d704 <que_message+0xa8>)
	char blank[] = "                      ";
 800d6a2:	6030      	str	r0, [r6, #0]
    pack77(xmit_messages[index], packed);
 800d6a4:	fb04 3405 	mla	r4, r4, r5, r3
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7fa fd0b 	bl	80080c4 <pack77>
    genft8(packed, tones);
 800d6ae:	4916      	ldr	r1, [pc, #88]	; (800d708 <que_message+0xac>)
 800d6b0:	4640      	mov	r0, r8
 800d6b2:	f7fa f94f 	bl	8007954 <genft8>

    BSP_LCD_SetFont (&Font16);
 800d6b6:	4815      	ldr	r0, [pc, #84]	; (800d70c <que_message+0xb0>)
 800d6b8:	f7f5 f900 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d6bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d6c0:	f7f5 f8e4 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 140, blank,0x03);
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	464a      	mov	r2, r9
 800d6c8:	218c      	movs	r1, #140	; 0x8c
 800d6ca:	20f0      	movs	r0, #240	; 0xf0
 800d6cc:	f7f5 f978 	bl	80029c0 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d6d0:	480f      	ldr	r0, [pc, #60]	; (800d710 <que_message+0xb4>)
 800d6d2:	f7f5 f8db 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 140, xmit_messages[index],0x03);
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	4622      	mov	r2, r4
 800d6da:	218c      	movs	r1, #140	; 0x8c
 800d6dc:	20f0      	movs	r0, #240	; 0xf0
 800d6de:	f7f5 f96f 	bl	80029c0 <BSP_LCD_DisplayStringAt>

	strcpy(current_QSO_xmit_message, xmit_messages[index]);
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	480b      	ldr	r0, [pc, #44]	; (800d714 <que_message+0xb8>)
 800d6e6:	f000 fec6 	bl	800e476 <strcpy>

	if(index == 2)write_ADIF_Log();
 800d6ea:	2d02      	cmp	r5, #2
 800d6ec:	d101      	bne.n	800d6f2 <que_message+0x96>
 800d6ee:	f7fc ff2b 	bl	800a548 <write_ADIF_Log>

   }
 800d6f2:	371c      	adds	r7, #28
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20001ae8 	.word	0x20001ae8
 800d700:	08055484 	.word	0x08055484
 800d704:	200448fc 	.word	0x200448fc
 800d708:	20001a8c 	.word	0x20001a8c
 800d70c:	20000030 	.word	0x20000030
 800d710:	ffff0000 	.word	0xffff0000
 800d714:	200417c4 	.word	0x200417c4

0800d718 <clear_qued_message>:


void clear_qued_message(void) {
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	b086      	sub	sp, #24

	char blank[] = "                      ";
 800d71c:	4b11      	ldr	r3, [pc, #68]	; (800d764 <clear_qued_message+0x4c>)
 800d71e:	466c      	mov	r4, sp
 800d720:	f103 0210 	add.w	r2, r3, #16
 800d724:	4626      	mov	r6, r4
 800d726:	6818      	ldr	r0, [r3, #0]
 800d728:	3308      	adds	r3, #8
 800d72a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800d72e:	4625      	mov	r5, r4
 800d730:	4293      	cmp	r3, r2
 800d732:	c503      	stmia	r5!, {r0, r1}
 800d734:	462c      	mov	r4, r5
 800d736:	d1f6      	bne.n	800d726 <clear_qued_message+0xe>
 800d738:	889a      	ldrh	r2, [r3, #4]
 800d73a:	6818      	ldr	r0, [r3, #0]
 800d73c:	799b      	ldrb	r3, [r3, #6]
 800d73e:	80aa      	strh	r2, [r5, #4]
 800d740:	71ab      	strb	r3, [r5, #6]
 800d742:	6028      	str	r0, [r5, #0]

    BSP_LCD_SetFont (&Font16);
 800d744:	4808      	ldr	r0, [pc, #32]	; (800d768 <clear_qued_message+0x50>)
 800d746:	f7f5 f8b9 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d74a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d74e:	f7f5 f89d 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(240, 140, blank,0x03);
 800d752:	2303      	movs	r3, #3
 800d754:	4632      	mov	r2, r6
 800d756:	218c      	movs	r1, #140	; 0x8c
 800d758:	20f0      	movs	r0, #240	; 0xf0
 800d75a:	f7f5 f931 	bl	80029c0 <BSP_LCD_DisplayStringAt>
}
 800d75e:	b006      	add	sp, #24
 800d760:	bd70      	pop	{r4, r5, r6, pc}
 800d762:	bf00      	nop
 800d764:	08055484 	.word	0x08055484
 800d768:	20000030 	.word	0x20000030

0800d76c <clear_xmit_messages>:


void clear_xmit_messages(void){
 800d76c:	b510      	push	{r4, lr}
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d76e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d772:	f7f5 f88b 	bl	800288c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(240, 130, 240, 120);
 800d776:	22f0      	movs	r2, #240	; 0xf0
 800d778:	2378      	movs	r3, #120	; 0x78
 800d77a:	2182      	movs	r1, #130	; 0x82
 800d77c:	4610      	mov	r0, r2
    }
 800d77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    BSP_LCD_FillRect(240, 130, 240, 120);
 800d782:	f7f5 b9dd 	b.w	8002b40 <BSP_LCD_FillRect>
	...

0800d788 <Read_Station_File>:

char *CurrentStationName;
char StationFileName[32];

void Read_Station_File( void ){
 800d788:	b570      	push	{r4, r5, r6, lr}

	uint8_t i,j;
	char read_buffer[132];
	char* Station_Data;
   	strcpy(CurrentStationName,"StationData");
 800d78a:	4c21      	ldr	r4, [pc, #132]	; (800d810 <Read_Station_File+0x88>)
void Read_Station_File( void ){
 800d78c:	b0a2      	sub	sp, #136	; 0x88
   	strcpy(CurrentStationName,"StationData");
 800d78e:	4921      	ldr	r1, [pc, #132]	; (800d814 <Read_Station_File+0x8c>)
 800d790:	6820      	ldr	r0, [r4, #0]
 800d792:	f000 fe70 	bl	800e476 <strcpy>
	sprintf(StationFileName,"%s.txt",CurrentStationName);
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	491f      	ldr	r1, [pc, #124]	; (800d818 <Read_Station_File+0x90>)
 800d79a:	4820      	ldr	r0, [pc, #128]	; (800d81c <Read_Station_File+0x94>)
 800d79c:	f000 fe26 	bl	800e3ec <siprintf>

	f_mount(&FS, SDPath, 1);
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	491f      	ldr	r1, [pc, #124]	; (800d820 <Read_Station_File+0x98>)
 800d7a4:	481f      	ldr	r0, [pc, #124]	; (800d824 <Read_Station_File+0x9c>)
 800d7a6:	f7fb fe19 	bl	80093dc <f_mount>
	   	if ( f_open(&fil, StationFileName, FA_OPEN_ALWAYS | FA_READ) == FR_OK){
 800d7aa:	2211      	movs	r2, #17
 800d7ac:	491b      	ldr	r1, [pc, #108]	; (800d81c <Read_Station_File+0x94>)
 800d7ae:	481e      	ldr	r0, [pc, #120]	; (800d828 <Read_Station_File+0xa0>)
 800d7b0:	f7fc fd56 	bl	800a260 <f_open>
 800d7b4:	bb50      	cbnz	r0, 800d80c <Read_Station_File+0x84>
 800d7b6:	4604      	mov	r4, r0

			for(j=0;j<64;j++)read_buffer[j]=0;
 800d7b8:	ad01      	add	r5, sp, #4
 800d7ba:	4606      	mov	r6, r0
 800d7bc:	5566      	strb	r6, [r4, r5]
 800d7be:	3401      	adds	r4, #1
 800d7c0:	2c40      	cmp	r4, #64	; 0x40
 800d7c2:	d1fb      	bne.n	800d7bc <Read_Station_File+0x34>
			f_lseek(&fil,0);
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	4818      	ldr	r0, [pc, #96]	; (800d828 <Read_Station_File+0xa0>)
 800d7c8:	f7fc f882 	bl	80098d0 <f_lseek>
			f_gets(read_buffer,64,&fil);
 800d7cc:	4a16      	ldr	r2, [pc, #88]	; (800d828 <Read_Station_File+0xa0>)
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f7fc f9ca 	bl	8009b6a <f_gets>
	   		i = strlen(read_buffer);
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f7f2 fd84 	bl	80002e4 <strlen>
	   		read_buffer[i] = 0;
 800d7dc:	ab22      	add	r3, sp, #136	; 0x88

	   		Station_Data = strtok(read_buffer,":");
 800d7de:	4913      	ldr	r1, [pc, #76]	; (800d82c <Read_Station_File+0xa4>)
	   		read_buffer[i] = 0;
 800d7e0:	fa53 f080 	uxtab	r0, r3, r0
 800d7e4:	f800 6c84 	strb.w	r6, [r0, #-132]
	   		Station_Data = strtok(read_buffer,":");
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f000 fe4d 	bl	800e488 <strtok>
	   		strcpy(Station_Call, Station_Data);
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	480f      	ldr	r0, [pc, #60]	; (800d830 <Read_Station_File+0xa8>)
 800d7f2:	f000 fe40 	bl	800e476 <strcpy>
	   		Station_Data = strtok(NULL,":");
 800d7f6:	490d      	ldr	r1, [pc, #52]	; (800d82c <Read_Station_File+0xa4>)
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	f000 fe45 	bl	800e488 <strtok>
		   	strcpy(Locator, Station_Data);
 800d7fe:	4601      	mov	r1, r0
 800d800:	480c      	ldr	r0, [pc, #48]	; (800d834 <Read_Station_File+0xac>)
 800d802:	f000 fe38 	bl	800e476 <strcpy>

   		f_close(&fil);
 800d806:	4808      	ldr	r0, [pc, #32]	; (800d828 <Read_Station_File+0xa0>)
 800d808:	f7fc f851 	bl	80098ae <f_close>
	   	}



}
 800d80c:	b022      	add	sp, #136	; 0x88
 800d80e:	bd70      	pop	{r4, r5, r6, pc}
 800d810:	20044b74 	.word	0x20044b74
 800d814:	080554b0 	.word	0x080554b0
 800d818:	080554bc 	.word	0x080554bc
 800d81c:	200446ac 	.word	0x200446ac
 800d820:	2003a7eb 	.word	0x2003a7eb
 800d824:	200446cc 	.word	0x200446cc
 800d828:	20044948 	.word	0x20044948
 800d82c:	080554dc 	.word	0x080554dc
 800d830:	2003a7f0 	.word	0x2003a7f0
 800d834:	2003a731 	.word	0x2003a731

0800d838 <clear_reply_message_box>:


void clear_reply_message_box(void) {
 800d838:	b510      	push	{r4, lr}

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d83a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d83e:	f7f5 f825 	bl	800288c <BSP_LCD_SetTextColor>
	    BSP_LCD_FillRect(240, 40, 240, 201);
 800d842:	22f0      	movs	r2, #240	; 0xf0
 800d844:	23c9      	movs	r3, #201	; 0xc9
 800d846:	2128      	movs	r1, #40	; 0x28
 800d848:	4610      	mov	r0, r2
 }
 800d84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    BSP_LCD_FillRect(240, 40, 240, 201);
 800d84e:	f7f5 b977 	b.w	8002b40 <BSP_LCD_FillRect>
	...

0800d854 <SD_Initialize>:


void SD_Initialize(void)
	  {
 800d854:	b570      	push	{r4, r5, r6, lr}

    BSP_LCD_SetFont (&Font16);
 800d856:	4814      	ldr	r0, [pc, #80]	; (800d8a8 <SD_Initialize+0x54>)
    BSP_LCD_SetTextColor(LCD_COLOR_RED);

	    if (isInitialized == 0)
 800d858:	4d14      	ldr	r5, [pc, #80]	; (800d8ac <SD_Initialize+0x58>)
    BSP_LCD_SetFont (&Font16);
 800d85a:	f7f5 f82f 	bl	80028bc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d85e:	4814      	ldr	r0, [pc, #80]	; (800d8b0 <SD_Initialize+0x5c>)
 800d860:	f7f5 f814 	bl	800288c <BSP_LCD_SetTextColor>
	    if (isInitialized == 0)
 800d864:	782c      	ldrb	r4, [r5, #0]
 800d866:	b9f4      	cbnz	r4, 800d8a6 <SD_Initialize+0x52>
	    {
	      if (BSP_SD_Init() == MSD_OK)
 800d868:	f7f5 fbfe 	bl	8003068 <BSP_SD_Init>
 800d86c:	b948      	cbnz	r0, 800d882 <SD_Initialize+0x2e>
	      {
	        BSP_SD_ITConfig();
 800d86e:	f7f5 fabf 	bl	8002df0 <BSP_SD_ITConfig>
	        isInitialized = 1;
 800d872:	2301      	movs	r3, #1
	        FATFS_LinkDriver(&SD_Driver, SDPath);
 800d874:	490f      	ldr	r1, [pc, #60]	; (800d8b4 <SD_Initialize+0x60>)
	        isInitialized = 1;
 800d876:	702b      	strb	r3, [r5, #0]
	        FATFS_LinkDriver(&SD_Driver, SDPath);
 800d878:	480f      	ldr	r0, [pc, #60]	; (800d8b8 <SD_Initialize+0x64>)
	        {}
	        BSP_LCD_DisplayStringAt(0, 100, "Reboot Now.",0x03);

	      }
	    }
	  }
 800d87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	        FATFS_LinkDriver(&SD_Driver, SDPath);
 800d87e:	f7fc bdf3 	b.w	800a468 <FATFS_LinkDriver>
	    	 BSP_LCD_DisplayStringAt(0, 100, "Insert SD.",0x03);
 800d882:	2303      	movs	r3, #3
 800d884:	4a0d      	ldr	r2, [pc, #52]	; (800d8bc <SD_Initialize+0x68>)
 800d886:	2164      	movs	r1, #100	; 0x64
 800d888:	4620      	mov	r0, r4
 800d88a:	f7f5 f899 	bl	80029c0 <BSP_LCD_DisplayStringAt>
	        while (BSP_SD_IsDetected() != SD_PRESENT)
 800d88e:	f7f5 facd 	bl	8002e2c <BSP_SD_IsDetected>
 800d892:	2801      	cmp	r0, #1
 800d894:	d1fb      	bne.n	800d88e <SD_Initialize+0x3a>
	        BSP_LCD_DisplayStringAt(0, 100, "Reboot Now.",0x03);
 800d896:	2303      	movs	r3, #3
 800d898:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <SD_Initialize+0x6c>)
 800d89a:	2164      	movs	r1, #100	; 0x64
 800d89c:	2000      	movs	r0, #0
	  }
 800d89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	        BSP_LCD_DisplayStringAt(0, 100, "Reboot Now.",0x03);
 800d8a2:	f7f5 b88d 	b.w	80029c0 <BSP_LCD_DisplayStringAt>
	  }
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	20000030 	.word	0x20000030
 800d8ac:	20001a00 	.word	0x20001a00
 800d8b0:	ffff0000 	.word	0xffff0000
 800d8b4:	2003a7eb 	.word	0x2003a7eb
 800d8b8:	08051150 	.word	0x08051150
 800d8bc:	080554c3 	.word	0x080554c3
 800d8c0:	080554ce 	.word	0x080554ce

0800d8c4 <Open_Log_File>:





void Open_Log_File( void ){
 800d8c4:	b510      	push	{r4, lr}

		//char header[] = "ADIF EXPORT";


		f_mount(&FS, "SD:", 1);
		if ( f_open(&LogFile, file_name_string, FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 800d8c6:	4c13      	ldr	r4, [pc, #76]	; (800d914 <Open_Log_File+0x50>)
		f_mount(&FS, "SD:", 1);
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	4913      	ldr	r1, [pc, #76]	; (800d918 <Open_Log_File+0x54>)
 800d8cc:	4813      	ldr	r0, [pc, #76]	; (800d91c <Open_Log_File+0x58>)
 800d8ce:	f7fb fd85 	bl	80093dc <f_mount>
		if ( f_open(&LogFile, file_name_string, FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 800d8d2:	2232      	movs	r2, #50	; 0x32
 800d8d4:	4912      	ldr	r1, [pc, #72]	; (800d920 <Open_Log_File+0x5c>)
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f7fc fcc2 	bl	800a260 <f_open>
 800d8dc:	b9a8      	cbnz	r0, 800d90a <Open_Log_File+0x46>

			if(f_size(&LogFile) == 0){
 800d8de:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800d8e2:	b991      	cbnz	r1, 800d90a <Open_Log_File+0x46>
			f_lseek(&LogFile, f_size(&LogFile));
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f7fb fff3 	bl	80098d0 <f_lseek>
			f_puts("ADIF EXPORT",&LogFile);
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	480d      	ldr	r0, [pc, #52]	; (800d924 <Open_Log_File+0x60>)
 800d8ee:	f7fc f961 	bl	8009bb4 <f_puts>
			f_puts("\n",&LogFile);
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	480c      	ldr	r0, [pc, #48]	; (800d928 <Open_Log_File+0x64>)
 800d8f6:	f7fc f95d 	bl	8009bb4 <f_puts>
			f_puts("<eoh>",&LogFile);
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	480b      	ldr	r0, [pc, #44]	; (800d92c <Open_Log_File+0x68>)
 800d8fe:	f7fc f959 	bl	8009bb4 <f_puts>
			f_puts("\n",&LogFile);
 800d902:	4621      	mov	r1, r4
 800d904:	4808      	ldr	r0, [pc, #32]	; (800d928 <Open_Log_File+0x64>)
 800d906:	f7fc f955 	bl	8009bb4 <f_puts>
			}

		 	}

		f_close(&LogFile);
 800d90a:	4802      	ldr	r0, [pc, #8]	; (800d914 <Open_Log_File+0x50>)



}
 800d90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		f_close(&LogFile);
 800d910:	f7fb bfcd 	b.w	80098ae <f_close>
 800d914:	20044b78 	.word	0x20044b78
 800d918:	080554da 	.word	0x080554da
 800d91c:	200446cc 	.word	0x200446cc
 800d920:	2003a743 	.word	0x2003a743
 800d924:	080554de 	.word	0x080554de
 800d928:	080554ea 	.word	0x080554ea
 800d92c:	080554ec 	.word	0x080554ec

0800d930 <Write_Log_Data>:





void Write_Log_Data( char *ch ){
 800d930:	b538      	push	{r3, r4, r5, lr}
	if ( sButtonData[4].state == 1 ){
 800d932:	4b12      	ldr	r3, [pc, #72]	; (800d97c <Write_Log_Data+0x4c>)
void Write_Log_Data( char *ch ){
 800d934:	4605      	mov	r5, r0
	if ( sButtonData[4].state == 1 ){
 800d936:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800d93a:	2a01      	cmp	r2, #1
 800d93c:	d11c      	bne.n	800d978 <Write_Log_Data+0x48>

		f_mount(&FS, "SD:", 1);
		if ( f_open(&LogFile, file_name_string, FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 800d93e:	4c10      	ldr	r4, [pc, #64]	; (800d980 <Write_Log_Data+0x50>)
		f_mount(&FS, "SD:", 1);
 800d940:	4910      	ldr	r1, [pc, #64]	; (800d984 <Write_Log_Data+0x54>)
 800d942:	4811      	ldr	r0, [pc, #68]	; (800d988 <Write_Log_Data+0x58>)
 800d944:	f7fb fd4a 	bl	80093dc <f_mount>
		if ( f_open(&LogFile, file_name_string, FA_OPEN_ALWAYS | FA_WRITE | FA_OPEN_APPEND) == FR_OK){
 800d948:	2232      	movs	r2, #50	; 0x32
 800d94a:	4910      	ldr	r1, [pc, #64]	; (800d98c <Write_Log_Data+0x5c>)
 800d94c:	4620      	mov	r0, r4
 800d94e:	f7fc fc87 	bl	800a260 <f_open>
 800d952:	b960      	cbnz	r0, 800d96e <Write_Log_Data+0x3e>
			f_lseek(&LogFile, f_size(&LogFile));
 800d954:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 800d958:	4620      	mov	r0, r4
 800d95a:	f7fb ffb9 	bl	80098d0 <f_lseek>
			f_puts(ch,&LogFile);
 800d95e:	4621      	mov	r1, r4
 800d960:	4628      	mov	r0, r5
 800d962:	f7fc f927 	bl	8009bb4 <f_puts>
			f_puts("\n",&LogFile);
 800d966:	4621      	mov	r1, r4
 800d968:	4809      	ldr	r0, [pc, #36]	; (800d990 <Write_Log_Data+0x60>)
 800d96a:	f7fc f923 	bl	8009bb4 <f_puts>

		 	}

		f_close(&LogFile);
 800d96e:	4804      	ldr	r0, [pc, #16]	; (800d980 <Write_Log_Data+0x50>)

	}

}
 800d970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		f_close(&LogFile);
 800d974:	f7fb bf9b 	b.w	80098ae <f_close>
}
 800d978:	bd38      	pop	{r3, r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	20000c40 	.word	0x20000c40
 800d980:	20044b78 	.word	0x20044b78
 800d984:	080554da 	.word	0x080554da
 800d988:	200446cc 	.word	0x200446cc
 800d98c:	2003a743 	.word	0x2003a743
 800d990:	080554ea 	.word	0x080554ea

0800d994 <Close_Log_File>:

void Close_Log_File( void){

	f_close(&LogFile);
 800d994:	4801      	ldr	r0, [pc, #4]	; (800d99c <Close_Log_File+0x8>)
 800d996:	f7fb bf8a 	b.w	80098ae <f_close>
 800d99a:	bf00      	nop
 800d99c:	20044b78 	.word	0x20044b78

0800d9a0 <update_synchronization>:
	    }
}



void update_synchronization(void) {
 800d9a0:	b510      	push	{r4, lr}
	current_time = HAL_GetTick();
 800d9a2:	f7f6 f9f5 	bl	8003d90 <HAL_GetTick>
 800d9a6:	4b1d      	ldr	r3, [pc, #116]	; (800da1c <update_synchronization+0x7c>)
    ft8_time = current_time  - start_time;

    ft8_hours =  (int8_t)(ft8_time/3600000);
 800d9a8:	4a1d      	ldr	r2, [pc, #116]	; (800da20 <update_synchronization+0x80>)
	current_time = HAL_GetTick();
 800d9aa:	6018      	str	r0, [r3, #0]
    ft8_time = current_time  - start_time;
 800d9ac:	4b1d      	ldr	r3, [pc, #116]	; (800da24 <update_synchronization+0x84>)
    ft8_hours =  (int8_t)(ft8_time/3600000);
 800d9ae:	491e      	ldr	r1, [pc, #120]	; (800da28 <update_synchronization+0x88>)
    ft8_time = current_time  - start_time;
 800d9b0:	681b      	ldr	r3, [r3, #0]
    hours_fraction = ft8_time % 3600000;
    ft8_minutes = (int8_t)  (hours_fraction/60000);
 800d9b2:	4c1e      	ldr	r4, [pc, #120]	; (800da2c <update_synchronization+0x8c>)
    ft8_time = current_time  - start_time;
 800d9b4:	1ac0      	subs	r0, r0, r3
 800d9b6:	4b1e      	ldr	r3, [pc, #120]	; (800da30 <update_synchronization+0x90>)
 800d9b8:	6018      	str	r0, [r3, #0]
    ft8_hours =  (int8_t)(ft8_time/3600000);
 800d9ba:	fbb0 f3f2 	udiv	r3, r0, r2
    hours_fraction = ft8_time % 3600000;
 800d9be:	fb02 0213 	mls	r2, r2, r3, r0
    ft8_hours =  (int8_t)(ft8_time/3600000);
 800d9c2:	700b      	strb	r3, [r1, #0]
    ft8_minutes = (int8_t)  (hours_fraction/60000);
 800d9c4:	f64e 2160 	movw	r1, #60000	; 0xea60
    hours_fraction = ft8_time % 3600000;
 800d9c8:	4b1a      	ldr	r3, [pc, #104]	; (800da34 <update_synchronization+0x94>)
 800d9ca:	601a      	str	r2, [r3, #0]
    ft8_minutes = (int8_t)  (hours_fraction/60000);
 800d9cc:	fbb2 f3f1 	udiv	r3, r2, r1
 800d9d0:	7023      	strb	r3, [r4, #0]
    ft8_seconds = (int8_t)((hours_fraction % 60000)/1000);
 800d9d2:	fb01 2313 	mls	r3, r1, r3, r2
 800d9d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9da:	4917      	ldr	r1, [pc, #92]	; (800da38 <update_synchronization+0x98>)
 800d9dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9e0:	4a16      	ldr	r2, [pc, #88]	; (800da3c <update_synchronization+0x9c>)
 800d9e2:	7013      	strb	r3, [r2, #0]

		if( ft8_time % 15000 <= 160 || FT_8_counter > 90 )    {
 800d9e4:	f643 2298 	movw	r2, #15000	; 0x3a98
 800d9e8:	fbb0 f3f2 	udiv	r3, r0, r2
 800d9ec:	fb02 0013 	mls	r0, r2, r3, r0
 800d9f0:	28a0      	cmp	r0, #160	; 0xa0
 800d9f2:	d902      	bls.n	800d9fa <update_synchronization+0x5a>
 800d9f4:	680b      	ldr	r3, [r1, #0]
 800d9f6:	2b5a      	cmp	r3, #90	; 0x5a
 800d9f8:	dd0e      	ble.n	800da18 <update_synchronization+0x78>

		ft8_flag = 1;
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	4b10      	ldr	r3, [pc, #64]	; (800da40 <update_synchronization+0xa0>)
		FT_8_counter = 0;
		ft8_marker = 1;
		decode_flag = 0;
		display_RealTime(100, 240);
 800d9fe:	2064      	movs	r0, #100	; 0x64
		ft8_flag = 1;
 800da00:	601a      	str	r2, [r3, #0]
		FT_8_counter = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	600b      	str	r3, [r1, #0]
		ft8_marker = 1;
 800da06:	490f      	ldr	r1, [pc, #60]	; (800da44 <update_synchronization+0xa4>)
 800da08:	600a      	str	r2, [r1, #0]
		display_RealTime(100, 240);
 800da0a:	21f0      	movs	r1, #240	; 0xf0
		decode_flag = 0;
 800da0c:	4a0e      	ldr	r2, [pc, #56]	; (800da48 <update_synchronization+0xa8>)
		}

}
 800da0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		decode_flag = 0;
 800da12:	6013      	str	r3, [r2, #0]
		display_RealTime(100, 240);
 800da14:	f7fc bece 	b.w	800a7b4 <display_RealTime>
}
 800da18:	bd10      	pop	{r4, pc}
 800da1a:	bf00      	nop
 800da1c:	2003a854 	.word	0x2003a854
 800da20:	0036ee80 	.word	0x0036ee80
 800da24:	2003a864 	.word	0x2003a864
 800da28:	2003a869 	.word	0x2003a869
 800da2c:	2003a850 	.word	0x2003a850
 800da30:	2003a860 	.word	0x2003a860
 800da34:	2003a86c 	.word	0x2003a86c
 800da38:	20016d78 	.word	0x20016d78
 800da3c:	2003a868 	.word	0x2003a868
 800da40:	20007344 	.word	0x20007344
 800da44:	20006340 	.word	0x20006340
 800da48:	20001a10 	.word	0x20001a10

0800da4c <HAL_Delay>:
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */

void HAL_Delay(__IO uint32_t Delay)
{
 800da4c:	b082      	sub	sp, #8
  while(Delay) 
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) 
 800da4e:	4a06      	ldr	r2, [pc, #24]	; (800da68 <HAL_Delay+0x1c>)
{
 800da50:	9001      	str	r0, [sp, #4]
  while(Delay) 
 800da52:	9b01      	ldr	r3, [sp, #4]
 800da54:	b90b      	cbnz	r3, 800da5a <HAL_Delay+0xe>
    {
      Delay--;
    }
  }
}
 800da56:	b002      	add	sp, #8
 800da58:	4770      	bx	lr
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) 
 800da5a:	6813      	ldr	r3, [r2, #0]
 800da5c:	03db      	lsls	r3, r3, #15
 800da5e:	d5f8      	bpl.n	800da52 <HAL_Delay+0x6>
      Delay--;
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	3b01      	subs	r3, #1
 800da64:	9301      	str	r3, [sp, #4]
 800da66:	e7f4      	b.n	800da52 <HAL_Delay+0x6>
 800da68:	e000e010 	.word	0xe000e010
 800da6c:	00000000 	.word	0x00000000

0800da70 <main>:
 {
 800da70:	b580      	push	{r7, lr}
 800da72:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("dsb 0xF":::"memory");
 800da74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800da78:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800da7c:	4b3b      	ldr	r3, [pc, #236]	; (800db6c <main+0xfc>)
 800da7e:	2100      	movs	r1, #0
 800da80:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800da84:	695a      	ldr	r2, [r3, #20]
 800da86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800da8a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800da8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800da90:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800da94:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800da98:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800da9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800daa0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800daa4:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800daa8:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800daac:	07a5      	lsls	r5, r4, #30
 800daae:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800dab0:	ea02 0c06 	and.w	ip, r2, r6
 800dab4:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800dab6:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800dab8:	ea4c 0700 	orr.w	r7, ip, r0
      } while (ways--);
 800dabc:	3901      	subs	r1, #1
 800dabe:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800dac2:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways--);
 800dac6:	1c4f      	adds	r7, r1, #1
 800dac8:	d1f6      	bne.n	800dab8 <main+0x48>
 800daca:	3a20      	subs	r2, #32
    } while(sets--);
 800dacc:	f112 0f20 	cmn.w	r2, #32
 800dad0:	d1ee      	bne.n	800dab0 <main+0x40>
 800dad2:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800dad6:	695a      	ldr	r2, [r3, #20]
 800dad8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dadc:	615a      	str	r2, [r3, #20]
 800dade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800dae2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800dae6:	f7f6 f939 	bl	8003d5c <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800daea:	2501      	movs	r5, #1
  PTT_Out_Init();
 800daec:	f7fe fe9c 	bl	800c828 <PTT_Out_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800daf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800daf4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;  
 800daf6:	2719      	movs	r7, #25
 800daf8:	f44f 76c8 	mov.w	r6, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dafc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dafe:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800db00:	e9cd 5305 	strd	r5, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800db04:	2300      	movs	r3, #0
 800db06:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800db08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db0c:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800db10:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;  
 800db12:	e9cd 760d 	strd	r7, r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800db16:	9310      	str	r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800db18:	f7f7 f996 	bl	8004e48 <HAL_RCC_OscConfig>
 800db1c:	b100      	cbz	r0, 800db20 <main+0xb0>
 800db1e:	e7fe      	b.n	800db1e <main+0xae>
  {
    Error_Handler();
  }
  
  /* Activate the OverDrive to reach the 200 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800db20:	f7f7 f958 	bl	8004dd4 <HAL_PWREx_EnableOverDrive>
 800db24:	b100      	cbz	r0, 800db28 <main+0xb8>
 800db26:	e7fe      	b.n	800db26 <main+0xb6>
  {
    Error_Handler();
  }
  
  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800db28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
 800db2c:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800db30:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800db32:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800db34:	9311      	str	r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800db36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db3a:	9330      	str	r3, [sp, #192]	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 4; 
 800db3c:	2304      	movs	r3, #4
 800db3e:	e9cd e316 	strd	lr, r3, [sp, #88]	; 0x58
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 800db42:	f7f7 fc93 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 800db46:	b100      	cbz	r0, 800db4a <main+0xda>
 800db48:	e7fe      	b.n	800db48 <main+0xd8>
    Error_Handler();
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800db4a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800db4c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800db50:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800db52:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800db54:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800db58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db5c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800db60:	2106      	movs	r1, #6
 800db62:	f7f7 fb53 	bl	800520c <HAL_RCC_ClockConfig>
 800db66:	4604      	mov	r4, r0
 800db68:	b110      	cbz	r0, 800db70 <main+0x100>
 800db6a:	e7fe      	b.n	800db6a <main+0xfa>
 800db6c:	e000ed00 	.word	0xe000ed00
  start_audio_I2C ();
 800db70:	f7fd fbfa 	bl	800b368 <start_audio_I2C>
  HAL_Delay(10);
 800db74:	200a      	movs	r0, #10
 800db76:	f7ff ff69 	bl	800da4c <HAL_Delay>
  BSP_PB_Init(BUTTON_TAMPER, BUTTON_MODE_GPIO);
 800db7a:	4621      	mov	r1, r4
 800db7c:	4628      	mov	r0, r5
 800db7e:	f7f4 fa31 	bl	8001fe4 <BSP_PB_Init>
  BSP_LED_Init(LED1);
 800db82:	4620      	mov	r0, r4
 800db84:	f7f4 fa08 	bl	8001f98 <BSP_LED_Init>
  BSP_LCD_Init();
 800db88:	f7f5 f8d6 	bl	8002d38 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS); 
 800db8c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800db90:	4628      	mov	r0, r5
 800db92:	f7f4 fe39 	bl	8002808 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800db96:	4628      	mov	r0, r5
 800db98:	f7f4 fe72 	bl	8002880 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800db9c:	f7f4 fff4 	bl	8002b88 <BSP_LCD_DisplayOn>
  HAL_Delay(10);
 800dba0:	200a      	movs	r0, #10
 800dba2:	f7ff ff53 	bl	800da4c <HAL_Delay>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800dba6:	f7f4 fe17 	bl	80027d8 <BSP_LCD_GetXSize>
 800dbaa:	4680      	mov	r8, r0
 800dbac:	f7f4 fe20 	bl	80027f0 <BSP_LCD_GetYSize>
 800dbb0:	b281      	uxth	r1, r0
 800dbb2:	fa1f f088 	uxth.w	r0, r8
	   if (DSP_Flag == 1) {
 800dbb6:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800de20 <main+0x3b0>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800dbba:	f7f5 fbdf 	bl	800337c <BSP_TS_Init>
  setup_display();
 800dbbe:	f7fd f8a1 	bl	800ad04 <setup_display>
  initalize_constants();
 800dbc2:	f7f9 fbf3 	bl	80073ac <initalize_constants>
  init_DSP();
 800dbc6:	f7fd faa9 	bl	800b11c <init_DSP>
  SD_Initialize();
 800dbca:	f7ff fe43 	bl	800d854 <SD_Initialize>
  Options_Initialize();
 800dbce:	f000 f9b7 	bl	800df40 <Options_Initialize>
  EXT_I2C_Init();
 800dbd2:	f7f4 fafb 	bl	80021cc <EXT_I2C_Init>
  HAL_Delay(10);
 800dbd6:	200a      	movs	r0, #10
 800dbd8:	f7ff ff38 	bl	800da4c <HAL_Delay>
  DS3231_init();
 800dbdc:	f7fc fd49 	bl	800a672 <DS3231_init>
  display_Real_Date(0, 240);
 800dbe0:	21f0      	movs	r1, #240	; 0xf0
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f7fc fe8e 	bl	800a904 <display_Real_Date>
  start_Si5351();
 800dbe8:	f7ff f826 	bl	800cc38 <start_Si5351>
  cursor = 112;  // 1000 Hz
 800dbec:	2070      	movs	r0, #112	; 0x70
 800dbee:	4b76      	ldr	r3, [pc, #472]	; (800ddc8 <main+0x358>)
 800dbf0:	8018      	strh	r0, [r3, #0]
  Set_Cursor_Frequency(cursor);
 800dbf2:	f7fd f8b9 	bl	800ad68 <Set_Cursor_Frequency>
  show_variable(400, 25,(int)  NCO_Frequency );
 800dbf6:	4b75      	ldr	r3, [pc, #468]	; (800ddcc <main+0x35c>)
 800dbf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbfc:	f7f3 f83c 	bl	8000c78 <__aeabi_d2iz>
 800dc00:	4639      	mov	r1, r7
 800dc02:	4602      	mov	r2, r0
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7fc fff9 	bl	800abfc <show_variable>
  show_short(405, 255, AGC_Gain );
 800dc0a:	4b71      	ldr	r3, [pc, #452]	; (800ddd0 <main+0x360>)
 800dc0c:	21ff      	movs	r1, #255	; 0xff
 800dc0e:	f240 1095 	movw	r0, #405	; 0x195
 800dc12:	781a      	ldrb	r2, [r3, #0]
 800dc14:	f7fd f80c 	bl	800ac30 <show_short>
  HAL_Delay(1);
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f7ff ff17 	bl	800da4c <HAL_Delay>
  Xmit_Mode = 0;
 800dc1e:	4b6d      	ldr	r3, [pc, #436]	; (800ddd4 <main+0x364>)
 800dc20:	601c      	str	r4, [r3, #0]
  Read_Station_File();
 800dc22:	f7ff fdb1 	bl	800d788 <Read_Station_File>
  HAL_Delay(10);
 800dc26:	200a      	movs	r0, #10
 800dc28:	f7ff ff10 	bl	800da4c <HAL_Delay>
  start_duplex(0);
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	f7fd fba9 	bl	800b384 <start_duplex>
  HAL_Delay(10);
 800dc32:	200a      	movs	r0, #10
 800dc34:	f7ff ff0a 	bl	800da4c <HAL_Delay>
  set_codec_input_gain();
 800dc38:	f7fe fe66 	bl	800c908 <set_codec_input_gain>
  HAL_Delay(10);
 800dc3c:	200a      	movs	r0, #10
 800dc3e:	f7ff ff05 	bl	800da4c <HAL_Delay>
  receive_sequence();
 800dc42:	f7fe fe71 	bl	800c928 <receive_sequence>
  HAL_Delay(10);
 800dc46:	200a      	movs	r0, #10
 800dc48:	f7ff ff00 	bl	800da4c <HAL_Delay>
  Init_Waterfall ();
 800dc4c:	f7fd f962 	bl	800af14 <Init_Waterfall>
  HAL_Delay(10);
 800dc50:	200a      	movs	r0, #10
 800dc52:	f7ff fefb 	bl	800da4c <HAL_Delay>
  Set_HP_Gain(30);
 800dc56:	201e      	movs	r0, #30
 800dc58:	f7fc fca6 	bl	800a5a8 <Set_HP_Gain>
  HAL_Delay(10);
 800dc5c:	200a      	movs	r0, #10
 800dc5e:	f7ff fef5 	bl	800da4c <HAL_Delay>
  FT8_Sync();
 800dc62:	f7ff f813 	bl	800cc8c <FT8_Sync>
  HAL_Delay(10);
 800dc66:	200a      	movs	r0, #10
 800dc68:	f7ff fef0 	bl	800da4c <HAL_Delay>
							ft8_shift = 0;
 800dc6c:	ed9f 8b54 	vldr	d8, [pc, #336]	; 800ddc0 <main+0x350>
	   if (DSP_Flag == 1) {
 800dc70:	f8d8 3000 	ldr.w	r3, [r8]
 800dc74:	4c58      	ldr	r4, [pc, #352]	; (800ddd8 <main+0x368>)
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d14e      	bne.n	800dd18 <main+0x2a8>
		   I2S2_RX_ProcessBuffer(buff_offset);
 800dc7a:	4b58      	ldr	r3, [pc, #352]	; (800dddc <main+0x36c>)
			if(xmit_flag == 1  ){
 800dc7c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800de00 <main+0x390>
		   I2S2_RX_ProcessBuffer(buff_offset);
 800dc80:	8818      	ldrh	r0, [r3, #0]
 800dc82:	f7fd fbc5 	bl	800b410 <I2S2_RX_ProcessBuffer>
			if(xmit_flag == 1  ){
 800dc86:	f8d9 1000 	ldr.w	r1, [r9]
 800dc8a:	2901      	cmp	r1, #1
 800dc8c:	d136      	bne.n	800dcfc <main+0x28c>
				if(ft8_xmit_delay>= 20) {
 800dc8e:	4e54      	ldr	r6, [pc, #336]	; (800dde0 <main+0x370>)
 800dc90:	6833      	ldr	r3, [r6, #0]
 800dc92:	2b13      	cmp	r3, #19
 800dc94:	f340 808c 	ble.w	800ddb0 <main+0x340>
							if( Tune_On == 0  )
 800dc98:	6823      	ldr	r3, [r4, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f040 8084 	bne.w	800dda8 <main+0x338>
								if(ft8_xmit_counter < 79 ){
 800dca0:	4d50      	ldr	r5, [pc, #320]	; (800dde4 <main+0x374>)
 800dca2:	4f51      	ldr	r7, [pc, #324]	; (800dde8 <main+0x378>)
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	2b4e      	cmp	r3, #78	; 0x4e
 800dca8:	dc15      	bgt.n	800dcd6 <main+0x266>
									if (Xmit_DSP_counter % 4 == 0) {
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	0792      	lsls	r2, r2, #30
 800dcae:	d112      	bne.n	800dcd6 <main+0x266>
									ft8_shift = ft8_hz 	* (double) tones[ft8_xmit_counter];
 800dcb0:	4a4e      	ldr	r2, [pc, #312]	; (800ddec <main+0x37c>)
 800dcb2:	f812 a003 	ldrb.w	sl, [r2, r3]
 800dcb6:	4650      	mov	r0, sl
 800dcb8:	f7f2 fcb4 	bl	8000624 <__aeabi_ui2d>
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	4b4c      	ldr	r3, [pc, #304]	; (800ddf0 <main+0x380>)
 800dcc0:	f7f2 fd2a 	bl	8000718 <__aeabi_dmul>
 800dcc4:	4b4b      	ldr	r3, [pc, #300]	; (800ddf4 <main+0x384>)
 800dcc6:	e9c3 0100 	strd	r0, r1, [r3]
									set_FT8_Tone(tones[ft8_xmit_counter ]);
 800dcca:	4650      	mov	r0, sl
 800dccc:	f000 fa34 	bl	800e138 <set_FT8_Tone>
									ft8_xmit_counter++;
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	602b      	str	r3, [r5, #0]
								Xmit_DSP_counter++;
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	603b      	str	r3, [r7, #0]
								if(ft8_xmit_counter == 79){
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	2b4f      	cmp	r3, #79	; 0x4f
 800dce0:	d10c      	bne.n	800dcfc <main+0x28c>
								xmit_flag = 0;
 800dce2:	2500      	movs	r5, #0
 800dce4:	f8c9 5000 	str.w	r5, [r9]
								ft8_receive_sequence();
 800dce8:	f000 f994 	bl	800e014 <ft8_receive_sequence>
								receive_sequence();
 800dcec:	f7fe fe1c 	bl	800c928 <receive_sequence>
								if( Beacon_On == 0 ) clear_qued_message();
 800dcf0:	4b41      	ldr	r3, [pc, #260]	; (800ddf8 <main+0x388>)
								ft8_xmit_delay =0;
 800dcf2:	6035      	str	r5, [r6, #0]
								if( Beacon_On == 0 ) clear_qued_message();
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	b90b      	cbnz	r3, 800dcfc <main+0x28c>
 800dcf8:	f7ff fd0e 	bl	800d718 <clear_qued_message>
		  if(Tune_On == 1)  {
 800dcfc:	6823      	ldr	r3, [r4, #0]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d107      	bne.n	800dd12 <main+0x2a2>
			  display_RealTime(100, 240);
 800dd02:	21f0      	movs	r1, #240	; 0xf0
 800dd04:	2064      	movs	r0, #100	; 0x64
 800dd06:	f7fc fd55 	bl	800a7b4 <display_RealTime>
			  display_Real_Date(0, 240);
 800dd0a:	21f0      	movs	r1, #240	; 0xf0
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	f7fc fdf9 	bl	800a904 <display_Real_Date>
		   DSP_Flag = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	f8c8 3000 	str.w	r3, [r8]
 	    if(decode_flag == 1 && Tune_On == 0 && xmit_flag == 0)  {
 800dd18:	4e38      	ldr	r6, [pc, #224]	; (800ddfc <main+0x38c>)
 800dd1a:	6833      	ldr	r3, [r6, #0]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d11a      	bne.n	800dd56 <main+0x2e6>
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	b9c3      	cbnz	r3, 800dd56 <main+0x2e6>
 800dd24:	4b36      	ldr	r3, [pc, #216]	; (800de00 <main+0x390>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	b9ab      	cbnz	r3, 800dd56 <main+0x2e6>
 	    master_decoded = ft8_decode();
 800dd2a:	f7ff f85f 	bl	800cdec <ft8_decode>
 800dd2e:	4d35      	ldr	r5, [pc, #212]	; (800de04 <main+0x394>)
 	    if (master_decoded > 0) {
 800dd30:	2800      	cmp	r0, #0
 	    master_decoded = ft8_decode();
 800dd32:	6028      	str	r0, [r5, #0]
 	    if (master_decoded > 0) {
 800dd34:	dd0d      	ble.n	800dd52 <main+0x2e2>
 	    	if(Beacon_On == 1)  service_Beacon_mode(master_decoded);
 800dd36:	4f30      	ldr	r7, [pc, #192]	; (800ddf8 <main+0x388>)
 	    	display_messages(master_decoded);
 800dd38:	f7fe ffbe 	bl	800ccb8 <display_messages>
 	    	if(Beacon_On == 1)  service_Beacon_mode(master_decoded);
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d102      	bne.n	800dd48 <main+0x2d8>
 800dd42:	6828      	ldr	r0, [r5, #0]
 800dd44:	f000 f9c2 	bl	800e0cc <service_Beacon_mode>
 	    	if( Beacon_On == 0 ) service_QSO_mode(master_decoded, 0);
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	b911      	cbnz	r1, 800dd52 <main+0x2e2>
 800dd4c:	6828      	ldr	r0, [r5, #0]
 800dd4e:	f000 f9ab 	bl	800e0a8 <service_QSO_mode>
 	  	decode_flag = 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	6033      	str	r3, [r6, #0]
 	   if( FT_8_counter  > 0 && FT_8_counter < 90) Process_Touch();
 800dd56:	4b2c      	ldr	r3, [pc, #176]	; (800de08 <main+0x398>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	2b58      	cmp	r3, #88	; 0x58
 800dd5e:	d801      	bhi.n	800dd64 <main+0x2f4>
 800dd60:	f7fd f870 	bl	800ae44 <Process_Touch>
	     if(  Tune_On == 0 && FT8_Touch_Flag == 1 && Beacon_On == 0 ) process_selected_Station(master_decoded, FT_8_TouchIndex);
 800dd64:	6823      	ldr	r3, [r4, #0]
 800dd66:	b963      	cbnz	r3, 800dd82 <main+0x312>
 800dd68:	4b28      	ldr	r3, [pc, #160]	; (800de0c <main+0x39c>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d108      	bne.n	800dd82 <main+0x312>
 800dd70:	4b21      	ldr	r3, [pc, #132]	; (800ddf8 <main+0x388>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	b92b      	cbnz	r3, 800dd82 <main+0x312>
 800dd76:	4b26      	ldr	r3, [pc, #152]	; (800de10 <main+0x3a0>)
 800dd78:	6819      	ldr	r1, [r3, #0]
 800dd7a:	4b22      	ldr	r3, [pc, #136]	; (800de04 <main+0x394>)
 800dd7c:	6818      	ldr	r0, [r3, #0]
 800dd7e:	f7ff f9a9 	bl	800d0d4 <process_selected_Station>
	     if(  Tune_On == 0 && FT8_Message_Touch == 1 && Beacon_On == 0 ) 	{
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	b96b      	cbnz	r3, 800dda2 <main+0x332>
 800dd86:	4d23      	ldr	r5, [pc, #140]	; (800de14 <main+0x3a4>)
 800dd88:	682c      	ldr	r4, [r5, #0]
 800dd8a:	2c01      	cmp	r4, #1
 800dd8c:	d109      	bne.n	800dda2 <main+0x332>
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <main+0x388>)
 800dd90:	681e      	ldr	r6, [r3, #0]
 800dd92:	b936      	cbnz	r6, 800dda2 <main+0x332>
	    	 que_message(FT_8_MessageIndex );
 800dd94:	4b20      	ldr	r3, [pc, #128]	; (800de18 <main+0x3a8>)
 800dd96:	6818      	ldr	r0, [r3, #0]
 800dd98:	f7ff fc60 	bl	800d65c <que_message>
	    	 QSO_xmit = 1;
 800dd9c:	4b1f      	ldr	r3, [pc, #124]	; (800de1c <main+0x3ac>)
	    	 FT8_Message_Touch = 0;
 800dd9e:	602e      	str	r6, [r5, #0]
	    	 QSO_xmit = 1;
 800dda0:	601c      	str	r4, [r3, #0]
	    update_synchronization();
 800dda2:	f7ff fdfd 	bl	800d9a0 <update_synchronization>
	   if (DSP_Flag == 1) {
 800dda6:	e763      	b.n	800dc70 <main+0x200>
							ft8_shift = 0;
 800dda8:	4b12      	ldr	r3, [pc, #72]	; (800ddf4 <main+0x384>)
 800ddaa:	ed83 8b00 	vstr	d8, [r3]
 800ddae:	e7a5      	b.n	800dcfc <main+0x28c>
					ft8_xmit_delay++;
 800ddb0:	3301      	adds	r3, #1
					if(ft8_xmit_delay == 16)  output_enable(SI5351_CLK0, 1);
 800ddb2:	2b10      	cmp	r3, #16
					ft8_xmit_delay++;
 800ddb4:	6033      	str	r3, [r6, #0]
					if(ft8_xmit_delay == 16)  output_enable(SI5351_CLK0, 1);
 800ddb6:	d1a1      	bne.n	800dcfc <main+0x28c>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	f7fd fc2b 	bl	800b614 <output_enable>
 800ddbe:	e79d      	b.n	800dcfc <main+0x28c>
	...
 800ddc8:	20001a1e 	.word	0x20001a1e
 800ddcc:	20007348 	.word	0x20007348
 800ddd0:	20000ff0 	.word	0x20000ff0
 800ddd4:	20013d6c 	.word	0x20013d6c
 800ddd8:	2003a650 	.word	0x2003a650
 800dddc:	20013d70 	.word	0x20013d70
 800dde0:	20011d68 	.word	0x20011d68
 800dde4:	20013d74 	.word	0x20013d74
 800dde8:	20044da4 	.word	0x20044da4
 800ddec:	20001a8c 	.word	0x20001a8c
 800ddf0:	40190000 	.word	0x40190000
 800ddf4:	20003b38 	.word	0x20003b38
 800ddf8:	2003a678 	.word	0x2003a678
 800ddfc:	20001a10 	.word	0x20001a10
 800de00:	2000c750 	.word	0x2000c750
 800de04:	20044da8 	.word	0x20044da8
 800de08:	20016d78 	.word	0x20016d78
 800de0c:	20001a20 	.word	0x20001a20
 800de10:	20001a24 	.word	0x20001a24
 800de14:	20001a28 	.word	0x20001a28
 800de18:	20001a38 	.word	0x20001a38
 800de1c:	20044dac 	.word	0x20044dac
 800de20:	2000f158 	.word	0x2000f158

0800de24 <Options_SetValue>:
*/


void Options_SetValue(int optionIdx, int16_t newValue)
{
	s_optionsData[optionIdx].CurrentValue = newValue;
 800de24:	4b02      	ldr	r3, [pc, #8]	; (800de30 <Options_SetValue+0xc>)
 800de26:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800de2a:	8181      	strh	r1, [r0, #12]

    }
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	20001018 	.word	0x20001018

0800de34 <Options_ResetToDefaults>:
	s_optionsData[optionIdx].CurrentValue = newValue;
 800de34:	4b01      	ldr	r3, [pc, #4]	; (800de3c <Options_ResetToDefaults+0x8>)
 800de36:	889a      	ldrh	r2, [r3, #4]
 800de38:	819a      	strh	r2, [r3, #12]
{
	int i;
	for (i = 0; i < NUM_OPTIONS; i++) {
		Options_SetValue(i, s_optionsData[i].Initial);
	}
}
 800de3a:	4770      	bx	lr
 800de3c:	20001018 	.word	0x20001018

0800de40 <Write_Int_MicroSD>:
//      return newValue;
//}

//Routine to write a integer value to the MicroSD starting at MicroSD address MicroSD_Addr
void Write_Int_MicroSD(uint16_t DiskBlock, int16_t value)
{
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	2300      	movs	r3, #0
 800de44:	b0a2      	sub	sp, #136	; 0x88
 800de46:	4606      	mov	r6, r0
 800de48:	460d      	mov	r5, r1

	uint8_t i;
	char read_buffer[132];

	for(i=0;i<32;i++)read_buffer[i]=0;
 800de4a:	ac01      	add	r4, sp, #4
 800de4c:	461a      	mov	r2, r3
 800de4e:	551a      	strb	r2, [r3, r4]
 800de50:	3301      	adds	r3, #1
 800de52:	2b20      	cmp	r3, #32
 800de54:	d1fb      	bne.n	800de4e <Write_Int_MicroSD+0xe>
	f_mount(&SDFatFs, SDPath, 1);
 800de56:	2201      	movs	r2, #1
 800de58:	490e      	ldr	r1, [pc, #56]	; (800de94 <Write_Int_MicroSD+0x54>)
 800de5a:	480f      	ldr	r0, [pc, #60]	; (800de98 <Write_Int_MicroSD+0x58>)
 800de5c:	f7fb fabe 	bl	80093dc <f_mount>
	f_open(&MyFile, "SaveParams.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800de60:	2213      	movs	r2, #19
 800de62:	490e      	ldr	r1, [pc, #56]	; (800de9c <Write_Int_MicroSD+0x5c>)
 800de64:	480e      	ldr	r0, [pc, #56]	; (800dea0 <Write_Int_MicroSD+0x60>)
 800de66:	f7fc f9fb 	bl	800a260 <f_open>
	HAL_Delay(1);
 800de6a:	2001      	movs	r0, #1
 800de6c:	f7ff fdee 	bl	800da4c <HAL_Delay>
	f_lseek(&MyFile,DiskBlock*32);
 800de70:	480b      	ldr	r0, [pc, #44]	; (800dea0 <Write_Int_MicroSD+0x60>)
 800de72:	0171      	lsls	r1, r6, #5
 800de74:	f7fb fd2c 	bl	80098d0 <f_lseek>
	sprintf(read_buffer,"%2i",value);
 800de78:	462a      	mov	r2, r5
 800de7a:	490a      	ldr	r1, [pc, #40]	; (800dea4 <Write_Int_MicroSD+0x64>)
 800de7c:	4620      	mov	r0, r4
 800de7e:	f000 fab5 	bl	800e3ec <siprintf>
   	f_puts(read_buffer,&MyFile);
 800de82:	4907      	ldr	r1, [pc, #28]	; (800dea0 <Write_Int_MicroSD+0x60>)
 800de84:	4620      	mov	r0, r4
 800de86:	f7fb fe95 	bl	8009bb4 <f_puts>
   	f_close(&MyFile);
 800de8a:	4805      	ldr	r0, [pc, #20]	; (800dea0 <Write_Int_MicroSD+0x60>)
 800de8c:	f7fb fd0f 	bl	80098ae <f_close>

}
 800de90:	b022      	add	sp, #136	; 0x88
 800de92:	bd70      	pop	{r4, r5, r6, pc}
 800de94:	2003a7eb 	.word	0x2003a7eb
 800de98:	20044dec 	.word	0x20044dec
 800de9c:	080554f2 	.word	0x080554f2
 800dea0:	2004501c 	.word	0x2004501c
 800dea4:	080553bd 	.word	0x080553bd

0800dea8 <Options_WriteToMicroSD>:
		Write_Int_MicroSD(i, Options_GetValue(i));
 800dea8:	4b02      	ldr	r3, [pc, #8]	; (800deb4 <Options_WriteToMicroSD+0xc>)
 800deaa:	2000      	movs	r0, #0
 800deac:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800deb0:	f7ff bfc6 	b.w	800de40 <Write_Int_MicroSD>
 800deb4:	20001018 	.word	0x20001018

0800deb8 <Options_StoreValue>:
	return s_optionsData[optionIdx].CurrentValue;
 800deb8:	4b03      	ldr	r3, [pc, #12]	; (800dec8 <Options_StoreValue+0x10>)
 800deba:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    Write_Int_MicroSD((int16_t)optionIdx, option_value);
 800debe:	b280      	uxth	r0, r0
 800dec0:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800dec4:	f7ff bfbc 	b.w	800de40 <Write_Int_MicroSD>
 800dec8:	20001018 	.word	0x20001018

0800decc <Read_Int_MicroSD>:

int16_t Read_Int_MicroSD(uint16_t DiskBlock)
{
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	2400      	movs	r4, #0
 800ded0:	b0a2      	sub	sp, #136	; 0x88
 800ded2:	4606      	mov	r6, r0
	int16_t result = 0;
	uint8_t i;
	char read_buffer[132];

	for(i=0;i<32;i++)read_buffer[i]=0;
 800ded4:	ad01      	add	r5, sp, #4
 800ded6:	4623      	mov	r3, r4
 800ded8:	5563      	strb	r3, [r4, r5]
 800deda:	3401      	adds	r4, #1
 800dedc:	2c20      	cmp	r4, #32
 800dede:	d1fb      	bne.n	800ded8 <Read_Int_MicroSD+0xc>
	f_mount(&SDFatFs, SDPath, 1);
 800dee0:	2201      	movs	r2, #1
 800dee2:	490e      	ldr	r1, [pc, #56]	; (800df1c <Read_Int_MicroSD+0x50>)
 800dee4:	480e      	ldr	r0, [pc, #56]	; (800df20 <Read_Int_MicroSD+0x54>)
 800dee6:	f7fb fa79 	bl	80093dc <f_mount>
	f_open(&MyFile, "SaveParams.txt", FA_READ );
 800deea:	2201      	movs	r2, #1
 800deec:	490d      	ldr	r1, [pc, #52]	; (800df24 <Read_Int_MicroSD+0x58>)
 800deee:	480e      	ldr	r0, [pc, #56]	; (800df28 <Read_Int_MicroSD+0x5c>)
 800def0:	f7fc f9b6 	bl	800a260 <f_open>
   	f_lseek(&MyFile,DiskBlock*32);
 800def4:	480c      	ldr	r0, [pc, #48]	; (800df28 <Read_Int_MicroSD+0x5c>)
 800def6:	0171      	lsls	r1, r6, #5
 800def8:	f7fb fcea 	bl	80098d0 <f_lseek>
   	f_gets(read_buffer,32,&MyFile);
 800defc:	4621      	mov	r1, r4
 800defe:	4a0a      	ldr	r2, [pc, #40]	; (800df28 <Read_Int_MicroSD+0x5c>)
 800df00:	4628      	mov	r0, r5
 800df02:	f7fb fe32 	bl	8009b6a <f_gets>
    result = atoi(read_buffer);
 800df06:	4628      	mov	r0, r5
 800df08:	f000 f94c 	bl	800e1a4 <atoi>
 800df0c:	4604      	mov	r4, r0
   	f_close(&MyFile);
 800df0e:	4806      	ldr	r0, [pc, #24]	; (800df28 <Read_Int_MicroSD+0x5c>)
 800df10:	f7fb fccd 	bl	80098ae <f_close>
	return result;
}
 800df14:	b220      	sxth	r0, r4
 800df16:	b022      	add	sp, #136	; 0x88
 800df18:	bd70      	pop	{r4, r5, r6, pc}
 800df1a:	bf00      	nop
 800df1c:	2003a7eb 	.word	0x2003a7eb
 800df20:	20044dec 	.word	0x20044dec
 800df24:	080554f2 	.word	0x080554f2
 800df28:	2004501c 	.word	0x2004501c

0800df2c <Options_ReadFromMicroSD>:
{
 800df2c:	b508      	push	{r3, lr}
		int16_t newValue = Read_Int_MicroSD(i);
 800df2e:	2000      	movs	r0, #0
 800df30:	f7ff ffcc 	bl	800decc <Read_Int_MicroSD>
	s_optionsData[optionIdx].CurrentValue = newValue;
 800df34:	4b01      	ldr	r3, [pc, #4]	; (800df3c <Options_ReadFromMicroSD+0x10>)
 800df36:	8198      	strh	r0, [r3, #12]
}
 800df38:	bd08      	pop	{r3, pc}
 800df3a:	bf00      	nop
 800df3c:	20001018 	.word	0x20001018

0800df40 <Options_Initialize>:
{
 800df40:	b508      	push	{r3, lr}
	fres = f_mount(&SDFatFs, SDPath, 1);
 800df42:	2201      	movs	r2, #1
 800df44:	4912      	ldr	r1, [pc, #72]	; (800df90 <Options_Initialize+0x50>)
 800df46:	4813      	ldr	r0, [pc, #76]	; (800df94 <Options_Initialize+0x54>)
 800df48:	f7fb fa48 	bl	80093dc <f_mount>
	fres = f_open(&MyFile, "SaveParams.txt",  FA_READ  );
 800df4c:	2201      	movs	r2, #1
 800df4e:	4912      	ldr	r1, [pc, #72]	; (800df98 <Options_Initialize+0x58>)
 800df50:	4812      	ldr	r0, [pc, #72]	; (800df9c <Options_Initialize+0x5c>)
 800df52:	f7fc f985 	bl	800a260 <f_open>
	if ( fres == FR_OK) {
 800df56:	b9a8      	cbnz	r0, 800df84 <Options_Initialize+0x44>
		f_close(&MyFile);
 800df58:	4810      	ldr	r0, [pc, #64]	; (800df9c <Options_Initialize+0x5c>)
 800df5a:	f7fb fca8 	bl	80098ae <f_close>
		Options_ReadFromMicroSD();
 800df5e:	f7ff ffe5 	bl	800df2c <Options_ReadFromMicroSD>
	return s_optionsData[optionIdx].CurrentValue;
 800df62:	4b0f      	ldr	r3, [pc, #60]	; (800dfa0 <Options_Initialize+0x60>)
   	show_wide(380, 0,(int) start_freq );
 800df64:	2100      	movs	r1, #0
	BandIndex = Options_GetValue(0);
 800df66:	4a0f      	ldr	r2, [pc, #60]	; (800dfa4 <Options_Initialize+0x64>)
   	show_wide(380, 0,(int) start_freq );
 800df68:	f44f 70be 	mov.w	r0, #380	; 0x17c
	BandIndex = Options_GetValue(0);
 800df6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800df70:	6013      	str	r3, [r2, #0]
	start_freq = sBand_Data[BandIndex].Frequency;
 800df72:	4a0d      	ldr	r2, [pc, #52]	; (800dfa8 <Options_Initialize+0x68>)
 800df74:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800df78:	4b0c      	ldr	r3, [pc, #48]	; (800dfac <Options_Initialize+0x6c>)
 800df7a:	801a      	strh	r2, [r3, #0]
    }
 800df7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   	show_wide(380, 0,(int) start_freq );
 800df80:	f7fc be22 	b.w	800abc8 <show_wide>
		Options_ResetToDefaults();
 800df84:	f7ff ff56 	bl	800de34 <Options_ResetToDefaults>
		Options_WriteToMicroSD();
 800df88:	f7ff ff8e 	bl	800dea8 <Options_WriteToMicroSD>
 800df8c:	e7e9      	b.n	800df62 <Options_Initialize+0x22>
 800df8e:	bf00      	nop
 800df90:	2003a7eb 	.word	0x2003a7eb
 800df94:	20044dec 	.word	0x20044dec
 800df98:	080554f2 	.word	0x080554f2
 800df9c:	2004501c 	.word	0x2004501c
 800dfa0:	20001018 	.word	0x20001018
 800dfa4:	2003a824 	.word	0x2003a824
 800dfa8:	20000fc0 	.word	0x20000fc0
 800dfac:	2003a820 	.word	0x2003a820

0800dfb0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800dfb0:	4770      	bx	lr

0800dfb2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800dfb2:	e7fe      	b.n	800dfb2 <HardFault_Handler>

0800dfb4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800dfb4:	e7fe      	b.n	800dfb4 <MemManage_Handler>

0800dfb6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800dfb6:	e7fe      	b.n	800dfb6 <BusFault_Handler>

0800dfb8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800dfb8:	e7fe      	b.n	800dfb8 <UsageFault_Handler>

0800dfba <SVC_Handler>:
 800dfba:	4770      	bx	lr

0800dfbc <DebugMon_Handler>:
 800dfbc:	4770      	bx	lr

0800dfbe <PendSV_Handler>:
 800dfbe:	4770      	bx	lr

0800dfc0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick(); 
 800dfc0:	f7f5 bede 	b.w	8003d80 <HAL_IncTick>

0800dfc4 <DMA2_Stream4_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800dfc4:	4b01      	ldr	r3, [pc, #4]	; (800dfcc <DMA2_Stream4_IRQHandler+0x8>)
 800dfc6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dfc8:	f7f6 b820 	b.w	800400c <HAL_DMA_IRQHandler>
 800dfcc:	20001294 	.word	0x20001294

0800dfd0 <DMA2_Stream7_IRQHandler>:
}

void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800dfd0:	4b01      	ldr	r3, [pc, #4]	; (800dfd8 <DMA2_Stream7_IRQHandler+0x8>)
 800dfd2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800dfd4:	f7f6 b81a 	b.w	800400c <HAL_DMA_IRQHandler>
 800dfd8:	20001318 	.word	0x20001318

0800dfdc <tune_Off_sequence>:
	      HAL_Delay(10);
	      output_enable(SI5351_CLK0, 1);
   }

      void tune_Off_sequence(void){
          output_enable(SI5351_CLK0, 0);
 800dfdc:	2100      	movs	r1, #0
      void tune_Off_sequence(void){
 800dfde:	b508      	push	{r3, lr}
          output_enable(SI5351_CLK0, 0);
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	f7fd fb17 	bl	800b614 <output_enable>
          HAL_Delay(10);
 800dfe6:	200a      	movs	r0, #10
 800dfe8:	f7ff fd30 	bl	800da4c <HAL_Delay>
          Set_ADC_DVC(ADC_DVC_Gain);
 800dfec:	4b02      	ldr	r3, [pc, #8]	; (800dff8 <tune_Off_sequence+0x1c>)
 800dfee:	6818      	ldr	r0, [r3, #0]
   }
 800dff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          Set_ADC_DVC(ADC_DVC_Gain);
 800dff4:	f7fc bb04 	b.w	800a600 <Set_ADC_DVC>
 800dff8:	2000100c 	.word	0x2000100c

0800dffc <terminate_QSO>:
void terminate_QSO(void) {
 800dffc:	b508      	push	{r3, lr}
	ft8_receive_sequence();
 800dffe:	f7ff ffed 	bl	800dfdc <tune_Off_sequence>
	receive_sequence();
 800e002:	f7fe fc91 	bl	800c928 <receive_sequence>
	xmit_flag = 0;
 800e006:	4b02      	ldr	r3, [pc, #8]	; (800e010 <terminate_QSO+0x14>)
 800e008:	2200      	movs	r2, #0
 800e00a:	601a      	str	r2, [r3, #0]
}
 800e00c:	bd08      	pop	{r3, pc}
 800e00e:	bf00      	nop
 800e010:	2000c750 	.word	0x2000c750

0800e014 <ft8_receive_sequence>:
 800e014:	f7ff bfe2 	b.w	800dfdc <tune_Off_sequence>

0800e018 <set_Xmit_Freq>:


   void  set_Xmit_Freq(void){
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800e018:	4b0d      	ldr	r3, [pc, #52]	; (800e050 <set_Xmit_Freq+0x38>)
   void  set_Xmit_Freq(void){
 800e01a:	b510      	push	{r4, lr}
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800e01c:	881c      	ldrh	r4, [r3, #0]
 800e01e:	4b0d      	ldr	r3, [pc, #52]	; (800e054 <set_Xmit_Freq+0x3c>)
 800e020:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e024:	f7f2 fe50 	bl	8000cc8 <__aeabi_d2uiz>
 800e028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e02c:	b282      	uxth	r2, r0
 800e02e:	2300      	movs	r3, #0
 800e030:	fbe4 2301 	umlal	r2, r3, r4, r1
 800e034:	2464      	movs	r4, #100	; 0x64
 800e036:	fba2 0104 	umull	r0, r1, r2, r4
      set_freq(F_Long, SI5351_CLK0);
 800e03a:	2200      	movs	r2, #0
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800e03c:	fb04 1103 	mla	r1, r4, r3, r1
 800e040:	4b05      	ldr	r3, [pc, #20]	; (800e058 <set_Xmit_Freq+0x40>)
}
 800e042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      F_Long = ((start_freq * 1000ULL + (uint16_t) NCO_Frequency) * 100ULL  );
 800e046:	e9c3 0100 	strd	r0, r1, [r3]
      set_freq(F_Long, SI5351_CLK0);
 800e04a:	f7fe b915 	b.w	800c278 <set_freq>
 800e04e:	bf00      	nop
 800e050:	2003a820 	.word	0x2003a820
 800e054:	20007348 	.word	0x20007348
 800e058:	20045250 	.word	0x20045250

0800e05c <ft8_transmit_sequence>:
   void ft8_transmit_sequence(void){
 800e05c:	b508      	push	{r3, lr}
	      Set_ADC_DVC(ADC_DVC_Off);
 800e05e:	4b07      	ldr	r3, [pc, #28]	; (800e07c <ft8_transmit_sequence+0x20>)
 800e060:	6818      	ldr	r0, [r3, #0]
 800e062:	f7fc facd 	bl	800a600 <Set_ADC_DVC>
	      HAL_Delay(10);
 800e066:	200a      	movs	r0, #10
 800e068:	f7ff fcf0 	bl	800da4c <HAL_Delay>
	      set_Xmit_Freq();
 800e06c:	f7ff ffd4 	bl	800e018 <set_Xmit_Freq>
	      HAL_Delay(10);
 800e070:	200a      	movs	r0, #10
   }
 800e072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	      HAL_Delay(10);
 800e076:	f7ff bce9 	b.w	800da4c <HAL_Delay>
 800e07a:	bf00      	nop
 800e07c:	20001008 	.word	0x20001008

0800e080 <setup_to_transmit_on_next_DSP_Flag>:
void setup_to_transmit_on_next_DSP_Flag(void){
 800e080:	b510      	push	{r4, lr}
		ft8_xmit_counter = 0;
 800e082:	4b06      	ldr	r3, [pc, #24]	; (800e09c <setup_to_transmit_on_next_DSP_Flag+0x1c>)
 800e084:	2400      	movs	r4, #0
 800e086:	601c      	str	r4, [r3, #0]
		xmit_sequence();
 800e088:	f7fe fc5e 	bl	800c948 <xmit_sequence>
		ft8_transmit_sequence();
 800e08c:	f7ff ffe6 	bl	800e05c <ft8_transmit_sequence>
		xmit_flag = 1;
 800e090:	4b03      	ldr	r3, [pc, #12]	; (800e0a0 <setup_to_transmit_on_next_DSP_Flag+0x20>)
 800e092:	2201      	movs	r2, #1
 800e094:	601a      	str	r2, [r3, #0]
		Xmit_DSP_counter = 0;
 800e096:	4b03      	ldr	r3, [pc, #12]	; (800e0a4 <setup_to_transmit_on_next_DSP_Flag+0x24>)
 800e098:	601c      	str	r4, [r3, #0]
}
 800e09a:	bd10      	pop	{r4, pc}
 800e09c:	20013d74 	.word	0x20013d74
 800e0a0:	2000c750 	.word	0x2000c750
 800e0a4:	20044da4 	.word	0x20044da4

0800e0a8 <service_QSO_mode>:
void service_QSO_mode(int decoded_signals, int message_touch){
 800e0a8:	b538      	push	{r3, r4, r5, lr}
	if(QSO_xmit == 1 ) {
 800e0aa:	4c07      	ldr	r4, [pc, #28]	; (800e0c8 <service_QSO_mode+0x20>)
	Check_QSO_Calling_Stations(decoded_signals, 0);
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	f7ff f921 	bl	800d2f4 <Check_QSO_Calling_Stations>
	if(QSO_xmit == 1 ) {
 800e0b2:	6825      	ldr	r5, [r4, #0]
 800e0b4:	2d01      	cmp	r5, #1
 800e0b6:	d106      	bne.n	800e0c6 <service_QSO_mode+0x1e>
		setup_to_transmit_on_next_DSP_Flag();
 800e0b8:	f7ff ffe2 	bl	800e080 <setup_to_transmit_on_next_DSP_Flag>
		update_log_display(1);
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f7fc fcb7 	bl	800aa30 <update_log_display>
		QSO_xmit = 0;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	6023      	str	r3, [r4, #0]
	}
 800e0c6:	bd38      	pop	{r3, r4, r5, pc}
 800e0c8:	20044dac 	.word	0x20044dac

0800e0cc <service_Beacon_mode>:
void service_Beacon_mode(int decoded_signals){
 800e0cc:	b510      	push	{r4, lr}
	switch (Beacon_State){
 800e0ce:	4c0e      	ldr	r4, [pc, #56]	; (800e108 <service_Beacon_mode+0x3c>)
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d002      	beq.n	800e0dc <service_Beacon_mode+0x10>
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d00d      	beq.n	800e0f6 <service_Beacon_mode+0x2a>
}  //end of service_Beacon_mode
 800e0da:	bd10      	pop	{r4, pc}
	case 1:    receive_status = Check_Calling_Stations(decoded_signals, 0);
 800e0dc:	2100      	movs	r1, #0
 800e0de:	f7ff f841 	bl	800d164 <Check_Calling_Stations>
			   if(receive_status == 1) {
 800e0e2:	2801      	cmp	r0, #1
 800e0e4:	d104      	bne.n	800e0f0 <service_Beacon_mode+0x24>
			    setup_to_transmit_on_next_DSP_Flag();
 800e0e6:	f7ff ffcb 	bl	800e080 <setup_to_transmit_on_next_DSP_Flag>
			    Beacon_State = 2;
 800e0ea:	2302      	movs	r3, #2
			  Beacon_State = 1;
 800e0ec:	6023      	str	r3, [r4, #0]
}  //end of service_Beacon_mode
 800e0ee:	e7f4      	b.n	800e0da <service_Beacon_mode+0xe>
				set_cq();
 800e0f0:	f7ff f938 	bl	800d364 <set_cq>
 800e0f4:	e7f7      	b.n	800e0e6 <service_Beacon_mode+0x1a>
	case 2:   receive_status = Check_Calling_Stations(decoded_signals, 0);
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	f7ff f834 	bl	800d164 <Check_Calling_Stations>
			  if(receive_status == 1) {
 800e0fc:	2801      	cmp	r0, #1
 800e0fe:	d101      	bne.n	800e104 <service_Beacon_mode+0x38>
			  setup_to_transmit_on_next_DSP_Flag();
 800e100:	f7ff ffbe 	bl	800e080 <setup_to_transmit_on_next_DSP_Flag>
			  Beacon_State = 1;
 800e104:	2301      	movs	r3, #1
 800e106:	e7f1      	b.n	800e0ec <service_Beacon_mode+0x20>
 800e108:	20043ca0 	.word	0x20043ca0

0800e10c <tune_On_sequence>:
   void tune_On_sequence(void){
 800e10c:	b508      	push	{r3, lr}
	      Set_ADC_DVC(ADC_DVC_Off);
 800e10e:	4b09      	ldr	r3, [pc, #36]	; (800e134 <tune_On_sequence+0x28>)
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	f7fc fa75 	bl	800a600 <Set_ADC_DVC>
	      HAL_Delay(10);
 800e116:	200a      	movs	r0, #10
 800e118:	f7ff fc98 	bl	800da4c <HAL_Delay>
	      set_Xmit_Freq();
 800e11c:	f7ff ff7c 	bl	800e018 <set_Xmit_Freq>
	      HAL_Delay(10);
 800e120:	200a      	movs	r0, #10
 800e122:	f7ff fc93 	bl	800da4c <HAL_Delay>
	      output_enable(SI5351_CLK0, 1);
 800e126:	2101      	movs	r1, #1
 800e128:	2000      	movs	r0, #0
   }
 800e12a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	      output_enable(SI5351_CLK0, 1);
 800e12e:	f7fd ba71 	b.w	800b614 <output_enable>
 800e132:	bf00      	nop
 800e134:	20001008 	.word	0x20001008

0800e138 <set_FT8_Tone>:



    void set_FT8_Tone( uint8_t ft8_tone) {
          F_FT8 =  F_Long + (uint64_t)ft8_tone * FT8_TONE_SPACING;
 800e138:	4b07      	ldr	r3, [pc, #28]	; (800e158 <set_FT8_Tone+0x20>)
 800e13a:	f240 2171 	movw	r1, #625	; 0x271
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	fbe1 2300 	umlal	r2, r3, r1, r0
 800e146:	4610      	mov	r0, r2
 800e148:	4619      	mov	r1, r3
 800e14a:	4b04      	ldr	r3, [pc, #16]	; (800e15c <set_FT8_Tone+0x24>)
          set_freq(F_FT8, SI5351_CLK0);
 800e14c:	2200      	movs	r2, #0
          F_FT8 =  F_Long + (uint64_t)ft8_tone * FT8_TONE_SPACING;
 800e14e:	e9c3 0100 	strd	r0, r1, [r3]
          set_freq(F_FT8, SI5351_CLK0);
 800e152:	f7fe b891 	b.w	800c278 <set_freq>
 800e156:	bf00      	nop
 800e158:	20045250 	.word	0x20045250
 800e15c:	20045248 	.word	0x20045248

0800e160 <set_Rcvr_Freq>:
    }


  void set_Rcvr_Freq(void) {
	  F_Receive =  (  (  start_freq * 1000ULL - 10000ULL )   * 100ULL * 4ULL );
 800e160:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <set_Rcvr_Freq+0x34>)
 800e162:	4a0d      	ldr	r2, [pc, #52]	; (800e198 <set_Rcvr_Freq+0x38>)
 800e164:	8818      	ldrh	r0, [r3, #0]
 800e166:	4b0d      	ldr	r3, [pc, #52]	; (800e19c <set_Rcvr_Freq+0x3c>)
 800e168:	fba0 0103 	umull	r0, r1, r0, r3
 800e16c:	f04f 33ff 	mov.w	r3, #4294967295
  void set_Rcvr_Freq(void) {
 800e170:	f84d bd04 	str.w	fp, [sp, #-4]!
	  F_Receive =  (  (  start_freq * 1000ULL - 10000ULL )   * 100ULL * 4ULL );
 800e174:	eb10 0b02 	adds.w	fp, r0, r2
      set_freq(F_Receive, SI5351_CLK1);
 800e178:	f04f 0201 	mov.w	r2, #1
	  F_Receive =  (  (  start_freq * 1000ULL - 10000ULL )   * 100ULL * 4ULL );
 800e17c:	eb41 0c03 	adc.w	ip, r1, r3
 800e180:	4b07      	ldr	r3, [pc, #28]	; (800e1a0 <set_Rcvr_Freq+0x40>)
      set_freq(F_Receive, SI5351_CLK1);
 800e182:	4658      	mov	r0, fp
 800e184:	4661      	mov	r1, ip
	  F_Receive =  (  (  start_freq * 1000ULL - 10000ULL )   * 100ULL * 4ULL );
 800e186:	e9c3 bc00 	strd	fp, ip, [r3]

  }
 800e18a:	f85d bb04 	ldr.w	fp, [sp], #4
      set_freq(F_Receive, SI5351_CLK1);
 800e18e:	f7fe b873 	b.w	800c278 <set_freq>
 800e192:	bf00      	nop
 800e194:	2003a820 	.word	0x2003a820
 800e198:	ffc2f700 	.word	0xffc2f700
 800e19c:	00061a80 	.word	0x00061a80
 800e1a0:	20045258 	.word	0x20045258

0800e1a4 <atoi>:
 800e1a4:	220a      	movs	r2, #10
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	f000 ba3e 	b.w	800e628 <strtol>

0800e1ac <__libc_init_array>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	4e0d      	ldr	r6, [pc, #52]	; (800e1e4 <__libc_init_array+0x38>)
 800e1b0:	4c0d      	ldr	r4, [pc, #52]	; (800e1e8 <__libc_init_array+0x3c>)
 800e1b2:	1ba4      	subs	r4, r4, r6
 800e1b4:	10a4      	asrs	r4, r4, #2
 800e1b6:	2500      	movs	r5, #0
 800e1b8:	42a5      	cmp	r5, r4
 800e1ba:	d109      	bne.n	800e1d0 <__libc_init_array+0x24>
 800e1bc:	4e0b      	ldr	r6, [pc, #44]	; (800e1ec <__libc_init_array+0x40>)
 800e1be:	4c0c      	ldr	r4, [pc, #48]	; (800e1f0 <__libc_init_array+0x44>)
 800e1c0:	f001 fdbc 	bl	800fd3c <_init>
 800e1c4:	1ba4      	subs	r4, r4, r6
 800e1c6:	10a4      	asrs	r4, r4, #2
 800e1c8:	2500      	movs	r5, #0
 800e1ca:	42a5      	cmp	r5, r4
 800e1cc:	d105      	bne.n	800e1da <__libc_init_array+0x2e>
 800e1ce:	bd70      	pop	{r4, r5, r6, pc}
 800e1d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1d4:	4798      	blx	r3
 800e1d6:	3501      	adds	r5, #1
 800e1d8:	e7ee      	b.n	800e1b8 <__libc_init_array+0xc>
 800e1da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e1de:	4798      	blx	r3
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	e7f2      	b.n	800e1ca <__libc_init_array+0x1e>
 800e1e4:	08055a54 	.word	0x08055a54
 800e1e8:	08055a54 	.word	0x08055a54
 800e1ec:	08055a54 	.word	0x08055a54
 800e1f0:	08055a58 	.word	0x08055a58

0800e1f4 <__itoa>:
 800e1f4:	1e93      	subs	r3, r2, #2
 800e1f6:	2b22      	cmp	r3, #34	; 0x22
 800e1f8:	b510      	push	{r4, lr}
 800e1fa:	460c      	mov	r4, r1
 800e1fc:	d904      	bls.n	800e208 <__itoa+0x14>
 800e1fe:	2300      	movs	r3, #0
 800e200:	700b      	strb	r3, [r1, #0]
 800e202:	461c      	mov	r4, r3
 800e204:	4620      	mov	r0, r4
 800e206:	bd10      	pop	{r4, pc}
 800e208:	2a0a      	cmp	r2, #10
 800e20a:	d109      	bne.n	800e220 <__itoa+0x2c>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	da07      	bge.n	800e220 <__itoa+0x2c>
 800e210:	232d      	movs	r3, #45	; 0x2d
 800e212:	700b      	strb	r3, [r1, #0]
 800e214:	4240      	negs	r0, r0
 800e216:	2101      	movs	r1, #1
 800e218:	4421      	add	r1, r4
 800e21a:	f000 fa1b 	bl	800e654 <__utoa>
 800e21e:	e7f1      	b.n	800e204 <__itoa+0x10>
 800e220:	2100      	movs	r1, #0
 800e222:	e7f9      	b.n	800e218 <__itoa+0x24>

0800e224 <itoa>:
 800e224:	f7ff bfe6 	b.w	800e1f4 <__itoa>

0800e228 <malloc>:
 800e228:	4b02      	ldr	r3, [pc, #8]	; (800e234 <malloc+0xc>)
 800e22a:	4601      	mov	r1, r0
 800e22c:	6818      	ldr	r0, [r3, #0]
 800e22e:	f000 b873 	b.w	800e318 <_malloc_r>
 800e232:	bf00      	nop
 800e234:	20001028 	.word	0x20001028

0800e238 <free>:
 800e238:	4b02      	ldr	r3, [pc, #8]	; (800e244 <free+0xc>)
 800e23a:	4601      	mov	r1, r0
 800e23c:	6818      	ldr	r0, [r3, #0]
 800e23e:	f000 b81d 	b.w	800e27c <_free_r>
 800e242:	bf00      	nop
 800e244:	20001028 	.word	0x20001028

0800e248 <memcmp>:
 800e248:	b530      	push	{r4, r5, lr}
 800e24a:	2400      	movs	r4, #0
 800e24c:	42a2      	cmp	r2, r4
 800e24e:	d101      	bne.n	800e254 <memcmp+0xc>
 800e250:	2000      	movs	r0, #0
 800e252:	e007      	b.n	800e264 <memcmp+0x1c>
 800e254:	5d03      	ldrb	r3, [r0, r4]
 800e256:	3401      	adds	r4, #1
 800e258:	190d      	adds	r5, r1, r4
 800e25a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e25e:	42ab      	cmp	r3, r5
 800e260:	d0f4      	beq.n	800e24c <memcmp+0x4>
 800e262:	1b58      	subs	r0, r3, r5
 800e264:	bd30      	pop	{r4, r5, pc}

0800e266 <memcpy>:
 800e266:	b510      	push	{r4, lr}
 800e268:	1e43      	subs	r3, r0, #1
 800e26a:	440a      	add	r2, r1
 800e26c:	4291      	cmp	r1, r2
 800e26e:	d100      	bne.n	800e272 <memcpy+0xc>
 800e270:	bd10      	pop	{r4, pc}
 800e272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e27a:	e7f7      	b.n	800e26c <memcpy+0x6>

0800e27c <_free_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4605      	mov	r5, r0
 800e280:	2900      	cmp	r1, #0
 800e282:	d045      	beq.n	800e310 <_free_r+0x94>
 800e284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e288:	1f0c      	subs	r4, r1, #4
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	bfb8      	it	lt
 800e28e:	18e4      	addlt	r4, r4, r3
 800e290:	f000 fa33 	bl	800e6fa <__malloc_lock>
 800e294:	4a1f      	ldr	r2, [pc, #124]	; (800e314 <_free_r+0x98>)
 800e296:	6813      	ldr	r3, [r2, #0]
 800e298:	4610      	mov	r0, r2
 800e29a:	b933      	cbnz	r3, 800e2aa <_free_r+0x2e>
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	6014      	str	r4, [r2, #0]
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2a6:	f000 ba29 	b.w	800e6fc <__malloc_unlock>
 800e2aa:	42a3      	cmp	r3, r4
 800e2ac:	d90c      	bls.n	800e2c8 <_free_r+0x4c>
 800e2ae:	6821      	ldr	r1, [r4, #0]
 800e2b0:	1862      	adds	r2, r4, r1
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	bf04      	itt	eq
 800e2b6:	681a      	ldreq	r2, [r3, #0]
 800e2b8:	685b      	ldreq	r3, [r3, #4]
 800e2ba:	6063      	str	r3, [r4, #4]
 800e2bc:	bf04      	itt	eq
 800e2be:	1852      	addeq	r2, r2, r1
 800e2c0:	6022      	streq	r2, [r4, #0]
 800e2c2:	6004      	str	r4, [r0, #0]
 800e2c4:	e7ec      	b.n	800e2a0 <_free_r+0x24>
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	685a      	ldr	r2, [r3, #4]
 800e2ca:	b10a      	cbz	r2, 800e2d0 <_free_r+0x54>
 800e2cc:	42a2      	cmp	r2, r4
 800e2ce:	d9fa      	bls.n	800e2c6 <_free_r+0x4a>
 800e2d0:	6819      	ldr	r1, [r3, #0]
 800e2d2:	1858      	adds	r0, r3, r1
 800e2d4:	42a0      	cmp	r0, r4
 800e2d6:	d10b      	bne.n	800e2f0 <_free_r+0x74>
 800e2d8:	6820      	ldr	r0, [r4, #0]
 800e2da:	4401      	add	r1, r0
 800e2dc:	1858      	adds	r0, r3, r1
 800e2de:	4282      	cmp	r2, r0
 800e2e0:	6019      	str	r1, [r3, #0]
 800e2e2:	d1dd      	bne.n	800e2a0 <_free_r+0x24>
 800e2e4:	6810      	ldr	r0, [r2, #0]
 800e2e6:	6852      	ldr	r2, [r2, #4]
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	4401      	add	r1, r0
 800e2ec:	6019      	str	r1, [r3, #0]
 800e2ee:	e7d7      	b.n	800e2a0 <_free_r+0x24>
 800e2f0:	d902      	bls.n	800e2f8 <_free_r+0x7c>
 800e2f2:	230c      	movs	r3, #12
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	e7d3      	b.n	800e2a0 <_free_r+0x24>
 800e2f8:	6820      	ldr	r0, [r4, #0]
 800e2fa:	1821      	adds	r1, r4, r0
 800e2fc:	428a      	cmp	r2, r1
 800e2fe:	bf04      	itt	eq
 800e300:	6811      	ldreq	r1, [r2, #0]
 800e302:	6852      	ldreq	r2, [r2, #4]
 800e304:	6062      	str	r2, [r4, #4]
 800e306:	bf04      	itt	eq
 800e308:	1809      	addeq	r1, r1, r0
 800e30a:	6021      	streq	r1, [r4, #0]
 800e30c:	605c      	str	r4, [r3, #4]
 800e30e:	e7c7      	b.n	800e2a0 <_free_r+0x24>
 800e310:	bd38      	pop	{r3, r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	20001a04 	.word	0x20001a04

0800e318 <_malloc_r>:
 800e318:	b570      	push	{r4, r5, r6, lr}
 800e31a:	1ccd      	adds	r5, r1, #3
 800e31c:	f025 0503 	bic.w	r5, r5, #3
 800e320:	3508      	adds	r5, #8
 800e322:	2d0c      	cmp	r5, #12
 800e324:	bf38      	it	cc
 800e326:	250c      	movcc	r5, #12
 800e328:	2d00      	cmp	r5, #0
 800e32a:	4606      	mov	r6, r0
 800e32c:	db01      	blt.n	800e332 <_malloc_r+0x1a>
 800e32e:	42a9      	cmp	r1, r5
 800e330:	d903      	bls.n	800e33a <_malloc_r+0x22>
 800e332:	230c      	movs	r3, #12
 800e334:	6033      	str	r3, [r6, #0]
 800e336:	2000      	movs	r0, #0
 800e338:	bd70      	pop	{r4, r5, r6, pc}
 800e33a:	f000 f9de 	bl	800e6fa <__malloc_lock>
 800e33e:	4a21      	ldr	r2, [pc, #132]	; (800e3c4 <_malloc_r+0xac>)
 800e340:	6814      	ldr	r4, [r2, #0]
 800e342:	4621      	mov	r1, r4
 800e344:	b991      	cbnz	r1, 800e36c <_malloc_r+0x54>
 800e346:	4c20      	ldr	r4, [pc, #128]	; (800e3c8 <_malloc_r+0xb0>)
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	b91b      	cbnz	r3, 800e354 <_malloc_r+0x3c>
 800e34c:	4630      	mov	r0, r6
 800e34e:	f000 f83d 	bl	800e3cc <_sbrk_r>
 800e352:	6020      	str	r0, [r4, #0]
 800e354:	4629      	mov	r1, r5
 800e356:	4630      	mov	r0, r6
 800e358:	f000 f838 	bl	800e3cc <_sbrk_r>
 800e35c:	1c43      	adds	r3, r0, #1
 800e35e:	d124      	bne.n	800e3aa <_malloc_r+0x92>
 800e360:	230c      	movs	r3, #12
 800e362:	6033      	str	r3, [r6, #0]
 800e364:	4630      	mov	r0, r6
 800e366:	f000 f9c9 	bl	800e6fc <__malloc_unlock>
 800e36a:	e7e4      	b.n	800e336 <_malloc_r+0x1e>
 800e36c:	680b      	ldr	r3, [r1, #0]
 800e36e:	1b5b      	subs	r3, r3, r5
 800e370:	d418      	bmi.n	800e3a4 <_malloc_r+0x8c>
 800e372:	2b0b      	cmp	r3, #11
 800e374:	d90f      	bls.n	800e396 <_malloc_r+0x7e>
 800e376:	600b      	str	r3, [r1, #0]
 800e378:	50cd      	str	r5, [r1, r3]
 800e37a:	18cc      	adds	r4, r1, r3
 800e37c:	4630      	mov	r0, r6
 800e37e:	f000 f9bd 	bl	800e6fc <__malloc_unlock>
 800e382:	f104 000b 	add.w	r0, r4, #11
 800e386:	1d23      	adds	r3, r4, #4
 800e388:	f020 0007 	bic.w	r0, r0, #7
 800e38c:	1ac3      	subs	r3, r0, r3
 800e38e:	d0d3      	beq.n	800e338 <_malloc_r+0x20>
 800e390:	425a      	negs	r2, r3
 800e392:	50e2      	str	r2, [r4, r3]
 800e394:	e7d0      	b.n	800e338 <_malloc_r+0x20>
 800e396:	428c      	cmp	r4, r1
 800e398:	684b      	ldr	r3, [r1, #4]
 800e39a:	bf16      	itet	ne
 800e39c:	6063      	strne	r3, [r4, #4]
 800e39e:	6013      	streq	r3, [r2, #0]
 800e3a0:	460c      	movne	r4, r1
 800e3a2:	e7eb      	b.n	800e37c <_malloc_r+0x64>
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	6849      	ldr	r1, [r1, #4]
 800e3a8:	e7cc      	b.n	800e344 <_malloc_r+0x2c>
 800e3aa:	1cc4      	adds	r4, r0, #3
 800e3ac:	f024 0403 	bic.w	r4, r4, #3
 800e3b0:	42a0      	cmp	r0, r4
 800e3b2:	d005      	beq.n	800e3c0 <_malloc_r+0xa8>
 800e3b4:	1a21      	subs	r1, r4, r0
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f000 f808 	bl	800e3cc <_sbrk_r>
 800e3bc:	3001      	adds	r0, #1
 800e3be:	d0cf      	beq.n	800e360 <_malloc_r+0x48>
 800e3c0:	6025      	str	r5, [r4, #0]
 800e3c2:	e7db      	b.n	800e37c <_malloc_r+0x64>
 800e3c4:	20001a04 	.word	0x20001a04
 800e3c8:	20001a08 	.word	0x20001a08

0800e3cc <_sbrk_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4c06      	ldr	r4, [pc, #24]	; (800e3e8 <_sbrk_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	f001 fca2 	bl	800fd20 <_sbrk>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_sbrk_r+0x1a>
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_sbrk_r+0x1a>
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20045260 	.word	0x20045260

0800e3ec <siprintf>:
 800e3ec:	b40e      	push	{r1, r2, r3}
 800e3ee:	b500      	push	{lr}
 800e3f0:	b09c      	sub	sp, #112	; 0x70
 800e3f2:	ab1d      	add	r3, sp, #116	; 0x74
 800e3f4:	9002      	str	r0, [sp, #8]
 800e3f6:	9006      	str	r0, [sp, #24]
 800e3f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e3fc:	4809      	ldr	r0, [pc, #36]	; (800e424 <siprintf+0x38>)
 800e3fe:	9107      	str	r1, [sp, #28]
 800e400:	9104      	str	r1, [sp, #16]
 800e402:	4909      	ldr	r1, [pc, #36]	; (800e428 <siprintf+0x3c>)
 800e404:	f853 2b04 	ldr.w	r2, [r3], #4
 800e408:	9105      	str	r1, [sp, #20]
 800e40a:	6800      	ldr	r0, [r0, #0]
 800e40c:	9301      	str	r3, [sp, #4]
 800e40e:	a902      	add	r1, sp, #8
 800e410:	f000 f9d0 	bl	800e7b4 <_svfiprintf_r>
 800e414:	9b02      	ldr	r3, [sp, #8]
 800e416:	2200      	movs	r2, #0
 800e418:	701a      	strb	r2, [r3, #0]
 800e41a:	b01c      	add	sp, #112	; 0x70
 800e41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e420:	b003      	add	sp, #12
 800e422:	4770      	bx	lr
 800e424:	20001028 	.word	0x20001028
 800e428:	ffff0208 	.word	0xffff0208

0800e42c <stpcpy>:
 800e42c:	4603      	mov	r3, r0
 800e42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e432:	4618      	mov	r0, r3
 800e434:	f803 2b01 	strb.w	r2, [r3], #1
 800e438:	2a00      	cmp	r2, #0
 800e43a:	d1f8      	bne.n	800e42e <stpcpy+0x2>
 800e43c:	4770      	bx	lr

0800e43e <strcat>:
 800e43e:	b510      	push	{r4, lr}
 800e440:	4603      	mov	r3, r0
 800e442:	781a      	ldrb	r2, [r3, #0]
 800e444:	1c5c      	adds	r4, r3, #1
 800e446:	b93a      	cbnz	r2, 800e458 <strcat+0x1a>
 800e448:	3b01      	subs	r3, #1
 800e44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e452:	2a00      	cmp	r2, #0
 800e454:	d1f9      	bne.n	800e44a <strcat+0xc>
 800e456:	bd10      	pop	{r4, pc}
 800e458:	4623      	mov	r3, r4
 800e45a:	e7f2      	b.n	800e442 <strcat+0x4>

0800e45c <strchr>:
 800e45c:	b2c9      	uxtb	r1, r1
 800e45e:	4603      	mov	r3, r0
 800e460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e464:	b11a      	cbz	r2, 800e46e <strchr+0x12>
 800e466:	428a      	cmp	r2, r1
 800e468:	d1f9      	bne.n	800e45e <strchr+0x2>
 800e46a:	4618      	mov	r0, r3
 800e46c:	4770      	bx	lr
 800e46e:	2900      	cmp	r1, #0
 800e470:	bf18      	it	ne
 800e472:	2300      	movne	r3, #0
 800e474:	e7f9      	b.n	800e46a <strchr+0xe>

0800e476 <strcpy>:
 800e476:	4603      	mov	r3, r0
 800e478:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e47c:	f803 2b01 	strb.w	r2, [r3], #1
 800e480:	2a00      	cmp	r2, #0
 800e482:	d1f9      	bne.n	800e478 <strcpy+0x2>
 800e484:	4770      	bx	lr
	...

0800e488 <strtok>:
 800e488:	4b13      	ldr	r3, [pc, #76]	; (800e4d8 <strtok+0x50>)
 800e48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e48e:	681d      	ldr	r5, [r3, #0]
 800e490:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	b9b4      	cbnz	r4, 800e4c6 <strtok+0x3e>
 800e498:	2050      	movs	r0, #80	; 0x50
 800e49a:	f7ff fec5 	bl	800e228 <malloc>
 800e49e:	65a8      	str	r0, [r5, #88]	; 0x58
 800e4a0:	e9c0 4400 	strd	r4, r4, [r0]
 800e4a4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e4a8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e4ac:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e4b0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e4b4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e4b8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e4bc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e4c0:	6184      	str	r4, [r0, #24]
 800e4c2:	7704      	strb	r4, [r0, #28]
 800e4c4:	6244      	str	r4, [r0, #36]	; 0x24
 800e4c6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d2:	f000 b803 	b.w	800e4dc <__strtok_r>
 800e4d6:	bf00      	nop
 800e4d8:	20001028 	.word	0x20001028

0800e4dc <__strtok_r>:
 800e4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4de:	b918      	cbnz	r0, 800e4e8 <__strtok_r+0xc>
 800e4e0:	6810      	ldr	r0, [r2, #0]
 800e4e2:	b908      	cbnz	r0, 800e4e8 <__strtok_r+0xc>
 800e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	4604      	mov	r4, r0
 800e4ea:	460f      	mov	r7, r1
 800e4ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e4f0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e4f4:	b91e      	cbnz	r6, 800e4fe <__strtok_r+0x22>
 800e4f6:	b96d      	cbnz	r5, 800e514 <__strtok_r+0x38>
 800e4f8:	6015      	str	r5, [r2, #0]
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	e7f2      	b.n	800e4e4 <__strtok_r+0x8>
 800e4fe:	42b5      	cmp	r5, r6
 800e500:	d1f6      	bne.n	800e4f0 <__strtok_r+0x14>
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1ef      	bne.n	800e4e6 <__strtok_r+0xa>
 800e506:	6014      	str	r4, [r2, #0]
 800e508:	7003      	strb	r3, [r0, #0]
 800e50a:	e7eb      	b.n	800e4e4 <__strtok_r+0x8>
 800e50c:	462b      	mov	r3, r5
 800e50e:	e00d      	b.n	800e52c <__strtok_r+0x50>
 800e510:	b926      	cbnz	r6, 800e51c <__strtok_r+0x40>
 800e512:	461c      	mov	r4, r3
 800e514:	4623      	mov	r3, r4
 800e516:	460f      	mov	r7, r1
 800e518:	f813 5b01 	ldrb.w	r5, [r3], #1
 800e51c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e520:	42b5      	cmp	r5, r6
 800e522:	d1f5      	bne.n	800e510 <__strtok_r+0x34>
 800e524:	2d00      	cmp	r5, #0
 800e526:	d0f1      	beq.n	800e50c <__strtok_r+0x30>
 800e528:	2100      	movs	r1, #0
 800e52a:	7021      	strb	r1, [r4, #0]
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	e7d9      	b.n	800e4e4 <__strtok_r+0x8>

0800e530 <_strtol_l.isra.0>:
 800e530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e534:	4680      	mov	r8, r0
 800e536:	4689      	mov	r9, r1
 800e538:	4692      	mov	sl, r2
 800e53a:	461e      	mov	r6, r3
 800e53c:	460f      	mov	r7, r1
 800e53e:	463d      	mov	r5, r7
 800e540:	9808      	ldr	r0, [sp, #32]
 800e542:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e546:	f000 f8c3 	bl	800e6d0 <__locale_ctype_ptr_l>
 800e54a:	4420      	add	r0, r4
 800e54c:	7843      	ldrb	r3, [r0, #1]
 800e54e:	f013 0308 	ands.w	r3, r3, #8
 800e552:	d132      	bne.n	800e5ba <_strtol_l.isra.0+0x8a>
 800e554:	2c2d      	cmp	r4, #45	; 0x2d
 800e556:	d132      	bne.n	800e5be <_strtol_l.isra.0+0x8e>
 800e558:	787c      	ldrb	r4, [r7, #1]
 800e55a:	1cbd      	adds	r5, r7, #2
 800e55c:	2201      	movs	r2, #1
 800e55e:	2e00      	cmp	r6, #0
 800e560:	d05d      	beq.n	800e61e <_strtol_l.isra.0+0xee>
 800e562:	2e10      	cmp	r6, #16
 800e564:	d109      	bne.n	800e57a <_strtol_l.isra.0+0x4a>
 800e566:	2c30      	cmp	r4, #48	; 0x30
 800e568:	d107      	bne.n	800e57a <_strtol_l.isra.0+0x4a>
 800e56a:	782b      	ldrb	r3, [r5, #0]
 800e56c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e570:	2b58      	cmp	r3, #88	; 0x58
 800e572:	d14f      	bne.n	800e614 <_strtol_l.isra.0+0xe4>
 800e574:	786c      	ldrb	r4, [r5, #1]
 800e576:	2610      	movs	r6, #16
 800e578:	3502      	adds	r5, #2
 800e57a:	2a00      	cmp	r2, #0
 800e57c:	bf14      	ite	ne
 800e57e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e582:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e586:	2700      	movs	r7, #0
 800e588:	fbb1 fcf6 	udiv	ip, r1, r6
 800e58c:	4638      	mov	r0, r7
 800e58e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e592:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e596:	2b09      	cmp	r3, #9
 800e598:	d817      	bhi.n	800e5ca <_strtol_l.isra.0+0x9a>
 800e59a:	461c      	mov	r4, r3
 800e59c:	42a6      	cmp	r6, r4
 800e59e:	dd23      	ble.n	800e5e8 <_strtol_l.isra.0+0xb8>
 800e5a0:	1c7b      	adds	r3, r7, #1
 800e5a2:	d007      	beq.n	800e5b4 <_strtol_l.isra.0+0x84>
 800e5a4:	4584      	cmp	ip, r0
 800e5a6:	d31c      	bcc.n	800e5e2 <_strtol_l.isra.0+0xb2>
 800e5a8:	d101      	bne.n	800e5ae <_strtol_l.isra.0+0x7e>
 800e5aa:	45a6      	cmp	lr, r4
 800e5ac:	db19      	blt.n	800e5e2 <_strtol_l.isra.0+0xb2>
 800e5ae:	fb00 4006 	mla	r0, r0, r6, r4
 800e5b2:	2701      	movs	r7, #1
 800e5b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5b8:	e7eb      	b.n	800e592 <_strtol_l.isra.0+0x62>
 800e5ba:	462f      	mov	r7, r5
 800e5bc:	e7bf      	b.n	800e53e <_strtol_l.isra.0+0xe>
 800e5be:	2c2b      	cmp	r4, #43	; 0x2b
 800e5c0:	bf04      	itt	eq
 800e5c2:	1cbd      	addeq	r5, r7, #2
 800e5c4:	787c      	ldrbeq	r4, [r7, #1]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	e7c9      	b.n	800e55e <_strtol_l.isra.0+0x2e>
 800e5ca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e5ce:	2b19      	cmp	r3, #25
 800e5d0:	d801      	bhi.n	800e5d6 <_strtol_l.isra.0+0xa6>
 800e5d2:	3c37      	subs	r4, #55	; 0x37
 800e5d4:	e7e2      	b.n	800e59c <_strtol_l.isra.0+0x6c>
 800e5d6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e5da:	2b19      	cmp	r3, #25
 800e5dc:	d804      	bhi.n	800e5e8 <_strtol_l.isra.0+0xb8>
 800e5de:	3c57      	subs	r4, #87	; 0x57
 800e5e0:	e7dc      	b.n	800e59c <_strtol_l.isra.0+0x6c>
 800e5e2:	f04f 37ff 	mov.w	r7, #4294967295
 800e5e6:	e7e5      	b.n	800e5b4 <_strtol_l.isra.0+0x84>
 800e5e8:	1c7b      	adds	r3, r7, #1
 800e5ea:	d108      	bne.n	800e5fe <_strtol_l.isra.0+0xce>
 800e5ec:	2322      	movs	r3, #34	; 0x22
 800e5ee:	f8c8 3000 	str.w	r3, [r8]
 800e5f2:	4608      	mov	r0, r1
 800e5f4:	f1ba 0f00 	cmp.w	sl, #0
 800e5f8:	d107      	bne.n	800e60a <_strtol_l.isra.0+0xda>
 800e5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fe:	b102      	cbz	r2, 800e602 <_strtol_l.isra.0+0xd2>
 800e600:	4240      	negs	r0, r0
 800e602:	f1ba 0f00 	cmp.w	sl, #0
 800e606:	d0f8      	beq.n	800e5fa <_strtol_l.isra.0+0xca>
 800e608:	b10f      	cbz	r7, 800e60e <_strtol_l.isra.0+0xde>
 800e60a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e60e:	f8ca 9000 	str.w	r9, [sl]
 800e612:	e7f2      	b.n	800e5fa <_strtol_l.isra.0+0xca>
 800e614:	2430      	movs	r4, #48	; 0x30
 800e616:	2e00      	cmp	r6, #0
 800e618:	d1af      	bne.n	800e57a <_strtol_l.isra.0+0x4a>
 800e61a:	2608      	movs	r6, #8
 800e61c:	e7ad      	b.n	800e57a <_strtol_l.isra.0+0x4a>
 800e61e:	2c30      	cmp	r4, #48	; 0x30
 800e620:	d0a3      	beq.n	800e56a <_strtol_l.isra.0+0x3a>
 800e622:	260a      	movs	r6, #10
 800e624:	e7a9      	b.n	800e57a <_strtol_l.isra.0+0x4a>
	...

0800e628 <strtol>:
 800e628:	4b08      	ldr	r3, [pc, #32]	; (800e64c <strtol+0x24>)
 800e62a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e62c:	681c      	ldr	r4, [r3, #0]
 800e62e:	4d08      	ldr	r5, [pc, #32]	; (800e650 <strtol+0x28>)
 800e630:	6a23      	ldr	r3, [r4, #32]
 800e632:	2b00      	cmp	r3, #0
 800e634:	bf08      	it	eq
 800e636:	462b      	moveq	r3, r5
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	4613      	mov	r3, r2
 800e63c:	460a      	mov	r2, r1
 800e63e:	4601      	mov	r1, r0
 800e640:	4620      	mov	r0, r4
 800e642:	f7ff ff75 	bl	800e530 <_strtol_l.isra.0>
 800e646:	b003      	add	sp, #12
 800e648:	bd30      	pop	{r4, r5, pc}
 800e64a:	bf00      	nop
 800e64c:	20001028 	.word	0x20001028
 800e650:	2000108c 	.word	0x2000108c

0800e654 <__utoa>:
 800e654:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e656:	4b1d      	ldr	r3, [pc, #116]	; (800e6cc <__utoa+0x78>)
 800e658:	b08b      	sub	sp, #44	; 0x2c
 800e65a:	4605      	mov	r5, r0
 800e65c:	460c      	mov	r4, r1
 800e65e:	466e      	mov	r6, sp
 800e660:	f103 0c20 	add.w	ip, r3, #32
 800e664:	6818      	ldr	r0, [r3, #0]
 800e666:	6859      	ldr	r1, [r3, #4]
 800e668:	4637      	mov	r7, r6
 800e66a:	c703      	stmia	r7!, {r0, r1}
 800e66c:	3308      	adds	r3, #8
 800e66e:	4563      	cmp	r3, ip
 800e670:	463e      	mov	r6, r7
 800e672:	d1f7      	bne.n	800e664 <__utoa+0x10>
 800e674:	6818      	ldr	r0, [r3, #0]
 800e676:	791b      	ldrb	r3, [r3, #4]
 800e678:	713b      	strb	r3, [r7, #4]
 800e67a:	1e93      	subs	r3, r2, #2
 800e67c:	2b22      	cmp	r3, #34	; 0x22
 800e67e:	6038      	str	r0, [r7, #0]
 800e680:	f04f 0300 	mov.w	r3, #0
 800e684:	d904      	bls.n	800e690 <__utoa+0x3c>
 800e686:	7023      	strb	r3, [r4, #0]
 800e688:	461c      	mov	r4, r3
 800e68a:	4620      	mov	r0, r4
 800e68c:	b00b      	add	sp, #44	; 0x2c
 800e68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e690:	1e66      	subs	r6, r4, #1
 800e692:	fbb5 f0f2 	udiv	r0, r5, r2
 800e696:	af0a      	add	r7, sp, #40	; 0x28
 800e698:	fb02 5510 	mls	r5, r2, r0, r5
 800e69c:	443d      	add	r5, r7
 800e69e:	1c59      	adds	r1, r3, #1
 800e6a0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800e6a4:	f806 5f01 	strb.w	r5, [r6, #1]!
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	b968      	cbnz	r0, 800e6c8 <__utoa+0x74>
 800e6ac:	5460      	strb	r0, [r4, r1]
 800e6ae:	4423      	add	r3, r4
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	1b19      	subs	r1, r3, r4
 800e6b4:	1b10      	subs	r0, r2, r4
 800e6b6:	4281      	cmp	r1, r0
 800e6b8:	dde7      	ble.n	800e68a <__utoa+0x36>
 800e6ba:	7811      	ldrb	r1, [r2, #0]
 800e6bc:	7818      	ldrb	r0, [r3, #0]
 800e6be:	f802 0b01 	strb.w	r0, [r2], #1
 800e6c2:	f803 1901 	strb.w	r1, [r3], #-1
 800e6c6:	e7f4      	b.n	800e6b2 <__utoa+0x5e>
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	e7e2      	b.n	800e692 <__utoa+0x3e>
 800e6cc:	0805550f 	.word	0x0805550f

0800e6d0 <__locale_ctype_ptr_l>:
 800e6d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e6d4:	4770      	bx	lr

0800e6d6 <__ascii_mbtowc>:
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	b901      	cbnz	r1, 800e6dc <__ascii_mbtowc+0x6>
 800e6da:	a901      	add	r1, sp, #4
 800e6dc:	b142      	cbz	r2, 800e6f0 <__ascii_mbtowc+0x1a>
 800e6de:	b14b      	cbz	r3, 800e6f4 <__ascii_mbtowc+0x1e>
 800e6e0:	7813      	ldrb	r3, [r2, #0]
 800e6e2:	600b      	str	r3, [r1, #0]
 800e6e4:	7812      	ldrb	r2, [r2, #0]
 800e6e6:	1c10      	adds	r0, r2, #0
 800e6e8:	bf18      	it	ne
 800e6ea:	2001      	movne	r0, #1
 800e6ec:	b002      	add	sp, #8
 800e6ee:	4770      	bx	lr
 800e6f0:	4610      	mov	r0, r2
 800e6f2:	e7fb      	b.n	800e6ec <__ascii_mbtowc+0x16>
 800e6f4:	f06f 0001 	mvn.w	r0, #1
 800e6f8:	e7f8      	b.n	800e6ec <__ascii_mbtowc+0x16>

0800e6fa <__malloc_lock>:
 800e6fa:	4770      	bx	lr

0800e6fc <__malloc_unlock>:
 800e6fc:	4770      	bx	lr

0800e6fe <__ssputs_r>:
 800e6fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e702:	688e      	ldr	r6, [r1, #8]
 800e704:	429e      	cmp	r6, r3
 800e706:	4682      	mov	sl, r0
 800e708:	460c      	mov	r4, r1
 800e70a:	4690      	mov	r8, r2
 800e70c:	4699      	mov	r9, r3
 800e70e:	d837      	bhi.n	800e780 <__ssputs_r+0x82>
 800e710:	898a      	ldrh	r2, [r1, #12]
 800e712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e716:	d031      	beq.n	800e77c <__ssputs_r+0x7e>
 800e718:	6825      	ldr	r5, [r4, #0]
 800e71a:	6909      	ldr	r1, [r1, #16]
 800e71c:	1a6f      	subs	r7, r5, r1
 800e71e:	6965      	ldr	r5, [r4, #20]
 800e720:	2302      	movs	r3, #2
 800e722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e726:	fb95 f5f3 	sdiv	r5, r5, r3
 800e72a:	f109 0301 	add.w	r3, r9, #1
 800e72e:	443b      	add	r3, r7
 800e730:	429d      	cmp	r5, r3
 800e732:	bf38      	it	cc
 800e734:	461d      	movcc	r5, r3
 800e736:	0553      	lsls	r3, r2, #21
 800e738:	d530      	bpl.n	800e79c <__ssputs_r+0x9e>
 800e73a:	4629      	mov	r1, r5
 800e73c:	f7ff fdec 	bl	800e318 <_malloc_r>
 800e740:	4606      	mov	r6, r0
 800e742:	b950      	cbnz	r0, 800e75a <__ssputs_r+0x5c>
 800e744:	230c      	movs	r3, #12
 800e746:	f8ca 3000 	str.w	r3, [sl]
 800e74a:	89a3      	ldrh	r3, [r4, #12]
 800e74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e750:	81a3      	strh	r3, [r4, #12]
 800e752:	f04f 30ff 	mov.w	r0, #4294967295
 800e756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e75a:	463a      	mov	r2, r7
 800e75c:	6921      	ldr	r1, [r4, #16]
 800e75e:	f7ff fd82 	bl	800e266 <memcpy>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e76c:	81a3      	strh	r3, [r4, #12]
 800e76e:	6126      	str	r6, [r4, #16]
 800e770:	6165      	str	r5, [r4, #20]
 800e772:	443e      	add	r6, r7
 800e774:	1bed      	subs	r5, r5, r7
 800e776:	6026      	str	r6, [r4, #0]
 800e778:	60a5      	str	r5, [r4, #8]
 800e77a:	464e      	mov	r6, r9
 800e77c:	454e      	cmp	r6, r9
 800e77e:	d900      	bls.n	800e782 <__ssputs_r+0x84>
 800e780:	464e      	mov	r6, r9
 800e782:	4632      	mov	r2, r6
 800e784:	4641      	mov	r1, r8
 800e786:	6820      	ldr	r0, [r4, #0]
 800e788:	f000 faa1 	bl	800ecce <memmove>
 800e78c:	68a3      	ldr	r3, [r4, #8]
 800e78e:	1b9b      	subs	r3, r3, r6
 800e790:	60a3      	str	r3, [r4, #8]
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	441e      	add	r6, r3
 800e796:	6026      	str	r6, [r4, #0]
 800e798:	2000      	movs	r0, #0
 800e79a:	e7dc      	b.n	800e756 <__ssputs_r+0x58>
 800e79c:	462a      	mov	r2, r5
 800e79e:	f000 faaf 	bl	800ed00 <_realloc_r>
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d1e2      	bne.n	800e76e <__ssputs_r+0x70>
 800e7a8:	6921      	ldr	r1, [r4, #16]
 800e7aa:	4650      	mov	r0, sl
 800e7ac:	f7ff fd66 	bl	800e27c <_free_r>
 800e7b0:	e7c8      	b.n	800e744 <__ssputs_r+0x46>
	...

0800e7b4 <_svfiprintf_r>:
 800e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b8:	461d      	mov	r5, r3
 800e7ba:	898b      	ldrh	r3, [r1, #12]
 800e7bc:	061f      	lsls	r7, r3, #24
 800e7be:	b09d      	sub	sp, #116	; 0x74
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	d50f      	bpl.n	800e7e8 <_svfiprintf_r+0x34>
 800e7c8:	690b      	ldr	r3, [r1, #16]
 800e7ca:	b96b      	cbnz	r3, 800e7e8 <_svfiprintf_r+0x34>
 800e7cc:	2140      	movs	r1, #64	; 0x40
 800e7ce:	f7ff fda3 	bl	800e318 <_malloc_r>
 800e7d2:	6020      	str	r0, [r4, #0]
 800e7d4:	6120      	str	r0, [r4, #16]
 800e7d6:	b928      	cbnz	r0, 800e7e4 <_svfiprintf_r+0x30>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	f8c8 3000 	str.w	r3, [r8]
 800e7de:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e2:	e0c8      	b.n	800e976 <_svfiprintf_r+0x1c2>
 800e7e4:	2340      	movs	r3, #64	; 0x40
 800e7e6:	6163      	str	r3, [r4, #20]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ec:	2320      	movs	r3, #32
 800e7ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7f2:	2330      	movs	r3, #48	; 0x30
 800e7f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7f8:	9503      	str	r5, [sp, #12]
 800e7fa:	f04f 0b01 	mov.w	fp, #1
 800e7fe:	4637      	mov	r7, r6
 800e800:	463d      	mov	r5, r7
 800e802:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e806:	b10b      	cbz	r3, 800e80c <_svfiprintf_r+0x58>
 800e808:	2b25      	cmp	r3, #37	; 0x25
 800e80a:	d13e      	bne.n	800e88a <_svfiprintf_r+0xd6>
 800e80c:	ebb7 0a06 	subs.w	sl, r7, r6
 800e810:	d00b      	beq.n	800e82a <_svfiprintf_r+0x76>
 800e812:	4653      	mov	r3, sl
 800e814:	4632      	mov	r2, r6
 800e816:	4621      	mov	r1, r4
 800e818:	4640      	mov	r0, r8
 800e81a:	f7ff ff70 	bl	800e6fe <__ssputs_r>
 800e81e:	3001      	adds	r0, #1
 800e820:	f000 80a4 	beq.w	800e96c <_svfiprintf_r+0x1b8>
 800e824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e826:	4453      	add	r3, sl
 800e828:	9309      	str	r3, [sp, #36]	; 0x24
 800e82a:	783b      	ldrb	r3, [r7, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 809d 	beq.w	800e96c <_svfiprintf_r+0x1b8>
 800e832:	2300      	movs	r3, #0
 800e834:	f04f 32ff 	mov.w	r2, #4294967295
 800e838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e83c:	9304      	str	r3, [sp, #16]
 800e83e:	9307      	str	r3, [sp, #28]
 800e840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e844:	931a      	str	r3, [sp, #104]	; 0x68
 800e846:	462f      	mov	r7, r5
 800e848:	2205      	movs	r2, #5
 800e84a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e84e:	4850      	ldr	r0, [pc, #320]	; (800e990 <_svfiprintf_r+0x1dc>)
 800e850:	f7f1 fd56 	bl	8000300 <memchr>
 800e854:	9b04      	ldr	r3, [sp, #16]
 800e856:	b9d0      	cbnz	r0, 800e88e <_svfiprintf_r+0xda>
 800e858:	06d9      	lsls	r1, r3, #27
 800e85a:	bf44      	itt	mi
 800e85c:	2220      	movmi	r2, #32
 800e85e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e862:	071a      	lsls	r2, r3, #28
 800e864:	bf44      	itt	mi
 800e866:	222b      	movmi	r2, #43	; 0x2b
 800e868:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e86c:	782a      	ldrb	r2, [r5, #0]
 800e86e:	2a2a      	cmp	r2, #42	; 0x2a
 800e870:	d015      	beq.n	800e89e <_svfiprintf_r+0xea>
 800e872:	9a07      	ldr	r2, [sp, #28]
 800e874:	462f      	mov	r7, r5
 800e876:	2000      	movs	r0, #0
 800e878:	250a      	movs	r5, #10
 800e87a:	4639      	mov	r1, r7
 800e87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e880:	3b30      	subs	r3, #48	; 0x30
 800e882:	2b09      	cmp	r3, #9
 800e884:	d94d      	bls.n	800e922 <_svfiprintf_r+0x16e>
 800e886:	b1b8      	cbz	r0, 800e8b8 <_svfiprintf_r+0x104>
 800e888:	e00f      	b.n	800e8aa <_svfiprintf_r+0xf6>
 800e88a:	462f      	mov	r7, r5
 800e88c:	e7b8      	b.n	800e800 <_svfiprintf_r+0x4c>
 800e88e:	4a40      	ldr	r2, [pc, #256]	; (800e990 <_svfiprintf_r+0x1dc>)
 800e890:	1a80      	subs	r0, r0, r2
 800e892:	fa0b f000 	lsl.w	r0, fp, r0
 800e896:	4318      	orrs	r0, r3
 800e898:	9004      	str	r0, [sp, #16]
 800e89a:	463d      	mov	r5, r7
 800e89c:	e7d3      	b.n	800e846 <_svfiprintf_r+0x92>
 800e89e:	9a03      	ldr	r2, [sp, #12]
 800e8a0:	1d11      	adds	r1, r2, #4
 800e8a2:	6812      	ldr	r2, [r2, #0]
 800e8a4:	9103      	str	r1, [sp, #12]
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	db01      	blt.n	800e8ae <_svfiprintf_r+0xfa>
 800e8aa:	9207      	str	r2, [sp, #28]
 800e8ac:	e004      	b.n	800e8b8 <_svfiprintf_r+0x104>
 800e8ae:	4252      	negs	r2, r2
 800e8b0:	f043 0302 	orr.w	r3, r3, #2
 800e8b4:	9207      	str	r2, [sp, #28]
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	783b      	ldrb	r3, [r7, #0]
 800e8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e8bc:	d10c      	bne.n	800e8d8 <_svfiprintf_r+0x124>
 800e8be:	787b      	ldrb	r3, [r7, #1]
 800e8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c2:	d133      	bne.n	800e92c <_svfiprintf_r+0x178>
 800e8c4:	9b03      	ldr	r3, [sp, #12]
 800e8c6:	1d1a      	adds	r2, r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	9203      	str	r2, [sp, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	bfb8      	it	lt
 800e8d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8d4:	3702      	adds	r7, #2
 800e8d6:	9305      	str	r3, [sp, #20]
 800e8d8:	4d2e      	ldr	r5, [pc, #184]	; (800e994 <_svfiprintf_r+0x1e0>)
 800e8da:	7839      	ldrb	r1, [r7, #0]
 800e8dc:	2203      	movs	r2, #3
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f7f1 fd0e 	bl	8000300 <memchr>
 800e8e4:	b138      	cbz	r0, 800e8f6 <_svfiprintf_r+0x142>
 800e8e6:	2340      	movs	r3, #64	; 0x40
 800e8e8:	1b40      	subs	r0, r0, r5
 800e8ea:	fa03 f000 	lsl.w	r0, r3, r0
 800e8ee:	9b04      	ldr	r3, [sp, #16]
 800e8f0:	4303      	orrs	r3, r0
 800e8f2:	3701      	adds	r7, #1
 800e8f4:	9304      	str	r3, [sp, #16]
 800e8f6:	7839      	ldrb	r1, [r7, #0]
 800e8f8:	4827      	ldr	r0, [pc, #156]	; (800e998 <_svfiprintf_r+0x1e4>)
 800e8fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8fe:	2206      	movs	r2, #6
 800e900:	1c7e      	adds	r6, r7, #1
 800e902:	f7f1 fcfd 	bl	8000300 <memchr>
 800e906:	2800      	cmp	r0, #0
 800e908:	d038      	beq.n	800e97c <_svfiprintf_r+0x1c8>
 800e90a:	4b24      	ldr	r3, [pc, #144]	; (800e99c <_svfiprintf_r+0x1e8>)
 800e90c:	bb13      	cbnz	r3, 800e954 <_svfiprintf_r+0x1a0>
 800e90e:	9b03      	ldr	r3, [sp, #12]
 800e910:	3307      	adds	r3, #7
 800e912:	f023 0307 	bic.w	r3, r3, #7
 800e916:	3308      	adds	r3, #8
 800e918:	9303      	str	r3, [sp, #12]
 800e91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91c:	444b      	add	r3, r9
 800e91e:	9309      	str	r3, [sp, #36]	; 0x24
 800e920:	e76d      	b.n	800e7fe <_svfiprintf_r+0x4a>
 800e922:	fb05 3202 	mla	r2, r5, r2, r3
 800e926:	2001      	movs	r0, #1
 800e928:	460f      	mov	r7, r1
 800e92a:	e7a6      	b.n	800e87a <_svfiprintf_r+0xc6>
 800e92c:	2300      	movs	r3, #0
 800e92e:	3701      	adds	r7, #1
 800e930:	9305      	str	r3, [sp, #20]
 800e932:	4619      	mov	r1, r3
 800e934:	250a      	movs	r5, #10
 800e936:	4638      	mov	r0, r7
 800e938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e93c:	3a30      	subs	r2, #48	; 0x30
 800e93e:	2a09      	cmp	r2, #9
 800e940:	d903      	bls.n	800e94a <_svfiprintf_r+0x196>
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0c8      	beq.n	800e8d8 <_svfiprintf_r+0x124>
 800e946:	9105      	str	r1, [sp, #20]
 800e948:	e7c6      	b.n	800e8d8 <_svfiprintf_r+0x124>
 800e94a:	fb05 2101 	mla	r1, r5, r1, r2
 800e94e:	2301      	movs	r3, #1
 800e950:	4607      	mov	r7, r0
 800e952:	e7f0      	b.n	800e936 <_svfiprintf_r+0x182>
 800e954:	ab03      	add	r3, sp, #12
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	4622      	mov	r2, r4
 800e95a:	4b11      	ldr	r3, [pc, #68]	; (800e9a0 <_svfiprintf_r+0x1ec>)
 800e95c:	a904      	add	r1, sp, #16
 800e95e:	4640      	mov	r0, r8
 800e960:	f3af 8000 	nop.w
 800e964:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e968:	4681      	mov	r9, r0
 800e96a:	d1d6      	bne.n	800e91a <_svfiprintf_r+0x166>
 800e96c:	89a3      	ldrh	r3, [r4, #12]
 800e96e:	065b      	lsls	r3, r3, #25
 800e970:	f53f af35 	bmi.w	800e7de <_svfiprintf_r+0x2a>
 800e974:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e976:	b01d      	add	sp, #116	; 0x74
 800e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e97c:	ab03      	add	r3, sp, #12
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	4622      	mov	r2, r4
 800e982:	4b07      	ldr	r3, [pc, #28]	; (800e9a0 <_svfiprintf_r+0x1ec>)
 800e984:	a904      	add	r1, sp, #16
 800e986:	4640      	mov	r0, r8
 800e988:	f000 f882 	bl	800ea90 <_printf_i>
 800e98c:	e7ea      	b.n	800e964 <_svfiprintf_r+0x1b0>
 800e98e:	bf00      	nop
 800e990:	0805553c 	.word	0x0805553c
 800e994:	08055542 	.word	0x08055542
 800e998:	08055546 	.word	0x08055546
 800e99c:	00000000 	.word	0x00000000
 800e9a0:	0800e6ff 	.word	0x0800e6ff

0800e9a4 <_printf_common>:
 800e9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a8:	4691      	mov	r9, r2
 800e9aa:	461f      	mov	r7, r3
 800e9ac:	688a      	ldr	r2, [r1, #8]
 800e9ae:	690b      	ldr	r3, [r1, #16]
 800e9b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	bfb8      	it	lt
 800e9b8:	4613      	movlt	r3, r2
 800e9ba:	f8c9 3000 	str.w	r3, [r9]
 800e9be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	b112      	cbz	r2, 800e9ce <_printf_common+0x2a>
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	f8c9 3000 	str.w	r3, [r9]
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	0699      	lsls	r1, r3, #26
 800e9d2:	bf42      	ittt	mi
 800e9d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e9d8:	3302      	addmi	r3, #2
 800e9da:	f8c9 3000 	strmi.w	r3, [r9]
 800e9de:	6825      	ldr	r5, [r4, #0]
 800e9e0:	f015 0506 	ands.w	r5, r5, #6
 800e9e4:	d107      	bne.n	800e9f6 <_printf_common+0x52>
 800e9e6:	f104 0a19 	add.w	sl, r4, #25
 800e9ea:	68e3      	ldr	r3, [r4, #12]
 800e9ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e9f0:	1a9b      	subs	r3, r3, r2
 800e9f2:	42ab      	cmp	r3, r5
 800e9f4:	dc28      	bgt.n	800ea48 <_printf_common+0xa4>
 800e9f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e9fa:	6822      	ldr	r2, [r4, #0]
 800e9fc:	3300      	adds	r3, #0
 800e9fe:	bf18      	it	ne
 800ea00:	2301      	movne	r3, #1
 800ea02:	0692      	lsls	r2, r2, #26
 800ea04:	d42d      	bmi.n	800ea62 <_printf_common+0xbe>
 800ea06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea0a:	4639      	mov	r1, r7
 800ea0c:	4630      	mov	r0, r6
 800ea0e:	47c0      	blx	r8
 800ea10:	3001      	adds	r0, #1
 800ea12:	d020      	beq.n	800ea56 <_printf_common+0xb2>
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	68e5      	ldr	r5, [r4, #12]
 800ea18:	f8d9 2000 	ldr.w	r2, [r9]
 800ea1c:	f003 0306 	and.w	r3, r3, #6
 800ea20:	2b04      	cmp	r3, #4
 800ea22:	bf08      	it	eq
 800ea24:	1aad      	subeq	r5, r5, r2
 800ea26:	68a3      	ldr	r3, [r4, #8]
 800ea28:	6922      	ldr	r2, [r4, #16]
 800ea2a:	bf0c      	ite	eq
 800ea2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea30:	2500      	movne	r5, #0
 800ea32:	4293      	cmp	r3, r2
 800ea34:	bfc4      	itt	gt
 800ea36:	1a9b      	subgt	r3, r3, r2
 800ea38:	18ed      	addgt	r5, r5, r3
 800ea3a:	f04f 0900 	mov.w	r9, #0
 800ea3e:	341a      	adds	r4, #26
 800ea40:	454d      	cmp	r5, r9
 800ea42:	d11a      	bne.n	800ea7a <_printf_common+0xd6>
 800ea44:	2000      	movs	r0, #0
 800ea46:	e008      	b.n	800ea5a <_printf_common+0xb6>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	4652      	mov	r2, sl
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4630      	mov	r0, r6
 800ea50:	47c0      	blx	r8
 800ea52:	3001      	adds	r0, #1
 800ea54:	d103      	bne.n	800ea5e <_printf_common+0xba>
 800ea56:	f04f 30ff 	mov.w	r0, #4294967295
 800ea5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5e:	3501      	adds	r5, #1
 800ea60:	e7c3      	b.n	800e9ea <_printf_common+0x46>
 800ea62:	18e1      	adds	r1, r4, r3
 800ea64:	1c5a      	adds	r2, r3, #1
 800ea66:	2030      	movs	r0, #48	; 0x30
 800ea68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea6c:	4422      	add	r2, r4
 800ea6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea76:	3302      	adds	r3, #2
 800ea78:	e7c5      	b.n	800ea06 <_printf_common+0x62>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	4639      	mov	r1, r7
 800ea80:	4630      	mov	r0, r6
 800ea82:	47c0      	blx	r8
 800ea84:	3001      	adds	r0, #1
 800ea86:	d0e6      	beq.n	800ea56 <_printf_common+0xb2>
 800ea88:	f109 0901 	add.w	r9, r9, #1
 800ea8c:	e7d8      	b.n	800ea40 <_printf_common+0x9c>
	...

0800ea90 <_printf_i>:
 800ea90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ea98:	460c      	mov	r4, r1
 800ea9a:	7e09      	ldrb	r1, [r1, #24]
 800ea9c:	b085      	sub	sp, #20
 800ea9e:	296e      	cmp	r1, #110	; 0x6e
 800eaa0:	4617      	mov	r7, r2
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	4698      	mov	r8, r3
 800eaa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eaa8:	f000 80b3 	beq.w	800ec12 <_printf_i+0x182>
 800eaac:	d822      	bhi.n	800eaf4 <_printf_i+0x64>
 800eaae:	2963      	cmp	r1, #99	; 0x63
 800eab0:	d036      	beq.n	800eb20 <_printf_i+0x90>
 800eab2:	d80a      	bhi.n	800eaca <_printf_i+0x3a>
 800eab4:	2900      	cmp	r1, #0
 800eab6:	f000 80b9 	beq.w	800ec2c <_printf_i+0x19c>
 800eaba:	2958      	cmp	r1, #88	; 0x58
 800eabc:	f000 8083 	beq.w	800ebc6 <_printf_i+0x136>
 800eac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eac4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800eac8:	e032      	b.n	800eb30 <_printf_i+0xa0>
 800eaca:	2964      	cmp	r1, #100	; 0x64
 800eacc:	d001      	beq.n	800ead2 <_printf_i+0x42>
 800eace:	2969      	cmp	r1, #105	; 0x69
 800ead0:	d1f6      	bne.n	800eac0 <_printf_i+0x30>
 800ead2:	6820      	ldr	r0, [r4, #0]
 800ead4:	6813      	ldr	r3, [r2, #0]
 800ead6:	0605      	lsls	r5, r0, #24
 800ead8:	f103 0104 	add.w	r1, r3, #4
 800eadc:	d52a      	bpl.n	800eb34 <_printf_i+0xa4>
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	6011      	str	r1, [r2, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	da03      	bge.n	800eaee <_printf_i+0x5e>
 800eae6:	222d      	movs	r2, #45	; 0x2d
 800eae8:	425b      	negs	r3, r3
 800eaea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800eaee:	486f      	ldr	r0, [pc, #444]	; (800ecac <_printf_i+0x21c>)
 800eaf0:	220a      	movs	r2, #10
 800eaf2:	e039      	b.n	800eb68 <_printf_i+0xd8>
 800eaf4:	2973      	cmp	r1, #115	; 0x73
 800eaf6:	f000 809d 	beq.w	800ec34 <_printf_i+0x1a4>
 800eafa:	d808      	bhi.n	800eb0e <_printf_i+0x7e>
 800eafc:	296f      	cmp	r1, #111	; 0x6f
 800eafe:	d020      	beq.n	800eb42 <_printf_i+0xb2>
 800eb00:	2970      	cmp	r1, #112	; 0x70
 800eb02:	d1dd      	bne.n	800eac0 <_printf_i+0x30>
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	f043 0320 	orr.w	r3, r3, #32
 800eb0a:	6023      	str	r3, [r4, #0]
 800eb0c:	e003      	b.n	800eb16 <_printf_i+0x86>
 800eb0e:	2975      	cmp	r1, #117	; 0x75
 800eb10:	d017      	beq.n	800eb42 <_printf_i+0xb2>
 800eb12:	2978      	cmp	r1, #120	; 0x78
 800eb14:	d1d4      	bne.n	800eac0 <_printf_i+0x30>
 800eb16:	2378      	movs	r3, #120	; 0x78
 800eb18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb1c:	4864      	ldr	r0, [pc, #400]	; (800ecb0 <_printf_i+0x220>)
 800eb1e:	e055      	b.n	800ebcc <_printf_i+0x13c>
 800eb20:	6813      	ldr	r3, [r2, #0]
 800eb22:	1d19      	adds	r1, r3, #4
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6011      	str	r1, [r2, #0]
 800eb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb30:	2301      	movs	r3, #1
 800eb32:	e08c      	b.n	800ec4e <_printf_i+0x1be>
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	6011      	str	r1, [r2, #0]
 800eb38:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eb3c:	bf18      	it	ne
 800eb3e:	b21b      	sxthne	r3, r3
 800eb40:	e7cf      	b.n	800eae2 <_printf_i+0x52>
 800eb42:	6813      	ldr	r3, [r2, #0]
 800eb44:	6825      	ldr	r5, [r4, #0]
 800eb46:	1d18      	adds	r0, r3, #4
 800eb48:	6010      	str	r0, [r2, #0]
 800eb4a:	0628      	lsls	r0, r5, #24
 800eb4c:	d501      	bpl.n	800eb52 <_printf_i+0xc2>
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	e002      	b.n	800eb58 <_printf_i+0xc8>
 800eb52:	0668      	lsls	r0, r5, #25
 800eb54:	d5fb      	bpl.n	800eb4e <_printf_i+0xbe>
 800eb56:	881b      	ldrh	r3, [r3, #0]
 800eb58:	4854      	ldr	r0, [pc, #336]	; (800ecac <_printf_i+0x21c>)
 800eb5a:	296f      	cmp	r1, #111	; 0x6f
 800eb5c:	bf14      	ite	ne
 800eb5e:	220a      	movne	r2, #10
 800eb60:	2208      	moveq	r2, #8
 800eb62:	2100      	movs	r1, #0
 800eb64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb68:	6865      	ldr	r5, [r4, #4]
 800eb6a:	60a5      	str	r5, [r4, #8]
 800eb6c:	2d00      	cmp	r5, #0
 800eb6e:	f2c0 8095 	blt.w	800ec9c <_printf_i+0x20c>
 800eb72:	6821      	ldr	r1, [r4, #0]
 800eb74:	f021 0104 	bic.w	r1, r1, #4
 800eb78:	6021      	str	r1, [r4, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d13d      	bne.n	800ebfa <_printf_i+0x16a>
 800eb7e:	2d00      	cmp	r5, #0
 800eb80:	f040 808e 	bne.w	800eca0 <_printf_i+0x210>
 800eb84:	4665      	mov	r5, ip
 800eb86:	2a08      	cmp	r2, #8
 800eb88:	d10b      	bne.n	800eba2 <_printf_i+0x112>
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	07db      	lsls	r3, r3, #31
 800eb8e:	d508      	bpl.n	800eba2 <_printf_i+0x112>
 800eb90:	6923      	ldr	r3, [r4, #16]
 800eb92:	6862      	ldr	r2, [r4, #4]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	bfde      	ittt	le
 800eb98:	2330      	movle	r3, #48	; 0x30
 800eb9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eba2:	ebac 0305 	sub.w	r3, ip, r5
 800eba6:	6123      	str	r3, [r4, #16]
 800eba8:	f8cd 8000 	str.w	r8, [sp]
 800ebac:	463b      	mov	r3, r7
 800ebae:	aa03      	add	r2, sp, #12
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff fef6 	bl	800e9a4 <_printf_common>
 800ebb8:	3001      	adds	r0, #1
 800ebba:	d14d      	bne.n	800ec58 <_printf_i+0x1c8>
 800ebbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc0:	b005      	add	sp, #20
 800ebc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebc6:	4839      	ldr	r0, [pc, #228]	; (800ecac <_printf_i+0x21c>)
 800ebc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ebcc:	6813      	ldr	r3, [r2, #0]
 800ebce:	6821      	ldr	r1, [r4, #0]
 800ebd0:	1d1d      	adds	r5, r3, #4
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6015      	str	r5, [r2, #0]
 800ebd6:	060a      	lsls	r2, r1, #24
 800ebd8:	d50b      	bpl.n	800ebf2 <_printf_i+0x162>
 800ebda:	07ca      	lsls	r2, r1, #31
 800ebdc:	bf44      	itt	mi
 800ebde:	f041 0120 	orrmi.w	r1, r1, #32
 800ebe2:	6021      	strmi	r1, [r4, #0]
 800ebe4:	b91b      	cbnz	r3, 800ebee <_printf_i+0x15e>
 800ebe6:	6822      	ldr	r2, [r4, #0]
 800ebe8:	f022 0220 	bic.w	r2, r2, #32
 800ebec:	6022      	str	r2, [r4, #0]
 800ebee:	2210      	movs	r2, #16
 800ebf0:	e7b7      	b.n	800eb62 <_printf_i+0xd2>
 800ebf2:	064d      	lsls	r5, r1, #25
 800ebf4:	bf48      	it	mi
 800ebf6:	b29b      	uxthmi	r3, r3
 800ebf8:	e7ef      	b.n	800ebda <_printf_i+0x14a>
 800ebfa:	4665      	mov	r5, ip
 800ebfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec00:	fb02 3311 	mls	r3, r2, r1, r3
 800ec04:	5cc3      	ldrb	r3, [r0, r3]
 800ec06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	2900      	cmp	r1, #0
 800ec0e:	d1f5      	bne.n	800ebfc <_printf_i+0x16c>
 800ec10:	e7b9      	b.n	800eb86 <_printf_i+0xf6>
 800ec12:	6813      	ldr	r3, [r2, #0]
 800ec14:	6825      	ldr	r5, [r4, #0]
 800ec16:	6961      	ldr	r1, [r4, #20]
 800ec18:	1d18      	adds	r0, r3, #4
 800ec1a:	6010      	str	r0, [r2, #0]
 800ec1c:	0628      	lsls	r0, r5, #24
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	d501      	bpl.n	800ec26 <_printf_i+0x196>
 800ec22:	6019      	str	r1, [r3, #0]
 800ec24:	e002      	b.n	800ec2c <_printf_i+0x19c>
 800ec26:	066a      	lsls	r2, r5, #25
 800ec28:	d5fb      	bpl.n	800ec22 <_printf_i+0x192>
 800ec2a:	8019      	strh	r1, [r3, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	6123      	str	r3, [r4, #16]
 800ec30:	4665      	mov	r5, ip
 800ec32:	e7b9      	b.n	800eba8 <_printf_i+0x118>
 800ec34:	6813      	ldr	r3, [r2, #0]
 800ec36:	1d19      	adds	r1, r3, #4
 800ec38:	6011      	str	r1, [r2, #0]
 800ec3a:	681d      	ldr	r5, [r3, #0]
 800ec3c:	6862      	ldr	r2, [r4, #4]
 800ec3e:	2100      	movs	r1, #0
 800ec40:	4628      	mov	r0, r5
 800ec42:	f7f1 fb5d 	bl	8000300 <memchr>
 800ec46:	b108      	cbz	r0, 800ec4c <_printf_i+0x1bc>
 800ec48:	1b40      	subs	r0, r0, r5
 800ec4a:	6060      	str	r0, [r4, #4]
 800ec4c:	6863      	ldr	r3, [r4, #4]
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	2300      	movs	r3, #0
 800ec52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec56:	e7a7      	b.n	800eba8 <_printf_i+0x118>
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	462a      	mov	r2, r5
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	4630      	mov	r0, r6
 800ec60:	47c0      	blx	r8
 800ec62:	3001      	adds	r0, #1
 800ec64:	d0aa      	beq.n	800ebbc <_printf_i+0x12c>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	079b      	lsls	r3, r3, #30
 800ec6a:	d413      	bmi.n	800ec94 <_printf_i+0x204>
 800ec6c:	68e0      	ldr	r0, [r4, #12]
 800ec6e:	9b03      	ldr	r3, [sp, #12]
 800ec70:	4298      	cmp	r0, r3
 800ec72:	bfb8      	it	lt
 800ec74:	4618      	movlt	r0, r3
 800ec76:	e7a3      	b.n	800ebc0 <_printf_i+0x130>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	464a      	mov	r2, r9
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	4630      	mov	r0, r6
 800ec80:	47c0      	blx	r8
 800ec82:	3001      	adds	r0, #1
 800ec84:	d09a      	beq.n	800ebbc <_printf_i+0x12c>
 800ec86:	3501      	adds	r5, #1
 800ec88:	68e3      	ldr	r3, [r4, #12]
 800ec8a:	9a03      	ldr	r2, [sp, #12]
 800ec8c:	1a9b      	subs	r3, r3, r2
 800ec8e:	42ab      	cmp	r3, r5
 800ec90:	dcf2      	bgt.n	800ec78 <_printf_i+0x1e8>
 800ec92:	e7eb      	b.n	800ec6c <_printf_i+0x1dc>
 800ec94:	2500      	movs	r5, #0
 800ec96:	f104 0919 	add.w	r9, r4, #25
 800ec9a:	e7f5      	b.n	800ec88 <_printf_i+0x1f8>
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1ac      	bne.n	800ebfa <_printf_i+0x16a>
 800eca0:	7803      	ldrb	r3, [r0, #0]
 800eca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eca6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecaa:	e76c      	b.n	800eb86 <_printf_i+0xf6>
 800ecac:	0805554d 	.word	0x0805554d
 800ecb0:	0805555e 	.word	0x0805555e

0800ecb4 <__ascii_wctomb>:
 800ecb4:	b149      	cbz	r1, 800ecca <__ascii_wctomb+0x16>
 800ecb6:	2aff      	cmp	r2, #255	; 0xff
 800ecb8:	bf85      	ittet	hi
 800ecba:	238a      	movhi	r3, #138	; 0x8a
 800ecbc:	6003      	strhi	r3, [r0, #0]
 800ecbe:	700a      	strbls	r2, [r1, #0]
 800ecc0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ecc4:	bf98      	it	ls
 800ecc6:	2001      	movls	r0, #1
 800ecc8:	4770      	bx	lr
 800ecca:	4608      	mov	r0, r1
 800eccc:	4770      	bx	lr

0800ecce <memmove>:
 800ecce:	4288      	cmp	r0, r1
 800ecd0:	b510      	push	{r4, lr}
 800ecd2:	eb01 0302 	add.w	r3, r1, r2
 800ecd6:	d807      	bhi.n	800ece8 <memmove+0x1a>
 800ecd8:	1e42      	subs	r2, r0, #1
 800ecda:	4299      	cmp	r1, r3
 800ecdc:	d00a      	beq.n	800ecf4 <memmove+0x26>
 800ecde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ece2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ece6:	e7f8      	b.n	800ecda <memmove+0xc>
 800ece8:	4283      	cmp	r3, r0
 800ecea:	d9f5      	bls.n	800ecd8 <memmove+0xa>
 800ecec:	1881      	adds	r1, r0, r2
 800ecee:	1ad2      	subs	r2, r2, r3
 800ecf0:	42d3      	cmn	r3, r2
 800ecf2:	d100      	bne.n	800ecf6 <memmove+0x28>
 800ecf4:	bd10      	pop	{r4, pc}
 800ecf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecfa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ecfe:	e7f7      	b.n	800ecf0 <memmove+0x22>

0800ed00 <_realloc_r>:
 800ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed02:	4607      	mov	r7, r0
 800ed04:	4614      	mov	r4, r2
 800ed06:	460e      	mov	r6, r1
 800ed08:	b921      	cbnz	r1, 800ed14 <_realloc_r+0x14>
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed10:	f7ff bb02 	b.w	800e318 <_malloc_r>
 800ed14:	b922      	cbnz	r2, 800ed20 <_realloc_r+0x20>
 800ed16:	f7ff fab1 	bl	800e27c <_free_r>
 800ed1a:	4625      	mov	r5, r4
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed20:	f000 f814 	bl	800ed4c <_malloc_usable_size_r>
 800ed24:	42a0      	cmp	r0, r4
 800ed26:	d20f      	bcs.n	800ed48 <_realloc_r+0x48>
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	f7ff faf4 	bl	800e318 <_malloc_r>
 800ed30:	4605      	mov	r5, r0
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d0f2      	beq.n	800ed1c <_realloc_r+0x1c>
 800ed36:	4631      	mov	r1, r6
 800ed38:	4622      	mov	r2, r4
 800ed3a:	f7ff fa94 	bl	800e266 <memcpy>
 800ed3e:	4631      	mov	r1, r6
 800ed40:	4638      	mov	r0, r7
 800ed42:	f7ff fa9b 	bl	800e27c <_free_r>
 800ed46:	e7e9      	b.n	800ed1c <_realloc_r+0x1c>
 800ed48:	4635      	mov	r5, r6
 800ed4a:	e7e7      	b.n	800ed1c <_realloc_r+0x1c>

0800ed4c <_malloc_usable_size_r>:
 800ed4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed50:	1f18      	subs	r0, r3, #4
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	bfbc      	itt	lt
 800ed56:	580b      	ldrlt	r3, [r1, r0]
 800ed58:	18c0      	addlt	r0, r0, r3
 800ed5a:	4770      	bx	lr

0800ed5c <cosf>:
 800ed5c:	ee10 3a10 	vmov	r3, s0
 800ed60:	b507      	push	{r0, r1, r2, lr}
 800ed62:	4a1c      	ldr	r2, [pc, #112]	; (800edd4 <cosf+0x78>)
 800ed64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	dc04      	bgt.n	800ed76 <cosf+0x1a>
 800ed6c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800edd8 <cosf+0x7c>
 800ed70:	f000 fbe8 	bl	800f544 <__kernel_cosf>
 800ed74:	e004      	b.n	800ed80 <cosf+0x24>
 800ed76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ed7a:	db04      	blt.n	800ed86 <cosf+0x2a>
 800ed7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ed80:	b003      	add	sp, #12
 800ed82:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed86:	4668      	mov	r0, sp
 800ed88:	f000 faac 	bl	800f2e4 <__ieee754_rem_pio2f>
 800ed8c:	f000 0003 	and.w	r0, r0, #3
 800ed90:	2801      	cmp	r0, #1
 800ed92:	d007      	beq.n	800eda4 <cosf+0x48>
 800ed94:	2802      	cmp	r0, #2
 800ed96:	d00e      	beq.n	800edb6 <cosf+0x5a>
 800ed98:	b9a0      	cbnz	r0, 800edc4 <cosf+0x68>
 800ed9a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ed9e:	ed9d 0a00 	vldr	s0, [sp]
 800eda2:	e7e5      	b.n	800ed70 <cosf+0x14>
 800eda4:	eddd 0a01 	vldr	s1, [sp, #4]
 800eda8:	ed9d 0a00 	vldr	s0, [sp]
 800edac:	f000 feaa 	bl	800fb04 <__kernel_sinf>
 800edb0:	eeb1 0a40 	vneg.f32	s0, s0
 800edb4:	e7e4      	b.n	800ed80 <cosf+0x24>
 800edb6:	eddd 0a01 	vldr	s1, [sp, #4]
 800edba:	ed9d 0a00 	vldr	s0, [sp]
 800edbe:	f000 fbc1 	bl	800f544 <__kernel_cosf>
 800edc2:	e7f5      	b.n	800edb0 <cosf+0x54>
 800edc4:	2001      	movs	r0, #1
 800edc6:	eddd 0a01 	vldr	s1, [sp, #4]
 800edca:	ed9d 0a00 	vldr	s0, [sp]
 800edce:	f000 fe99 	bl	800fb04 <__kernel_sinf>
 800edd2:	e7d5      	b.n	800ed80 <cosf+0x24>
 800edd4:	3f490fd8 	.word	0x3f490fd8
 800edd8:	00000000 	.word	0x00000000

0800eddc <log>:
 800eddc:	b570      	push	{r4, r5, r6, lr}
 800edde:	ed2d 8b02 	vpush	{d8}
 800ede2:	b08a      	sub	sp, #40	; 0x28
 800ede4:	ec55 4b10 	vmov	r4, r5, d0
 800ede8:	f000 f8ca 	bl	800ef80 <__ieee754_log>
 800edec:	4b36      	ldr	r3, [pc, #216]	; (800eec8 <log+0xec>)
 800edee:	eeb0 8a40 	vmov.f32	s16, s0
 800edf2:	eef0 8a60 	vmov.f32	s17, s1
 800edf6:	f993 6000 	ldrsb.w	r6, [r3]
 800edfa:	1c73      	adds	r3, r6, #1
 800edfc:	d05b      	beq.n	800eeb6 <log+0xda>
 800edfe:	4622      	mov	r2, r4
 800ee00:	462b      	mov	r3, r5
 800ee02:	4620      	mov	r0, r4
 800ee04:	4629      	mov	r1, r5
 800ee06:	f7f1 ff21 	bl	8000c4c <__aeabi_dcmpun>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d153      	bne.n	800eeb6 <log+0xda>
 800ee0e:	2200      	movs	r2, #0
 800ee10:	2300      	movs	r3, #0
 800ee12:	4620      	mov	r0, r4
 800ee14:	4629      	mov	r1, r5
 800ee16:	f7f1 ff0f 	bl	8000c38 <__aeabi_dcmpgt>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d14b      	bne.n	800eeb6 <log+0xda>
 800ee1e:	4b2b      	ldr	r3, [pc, #172]	; (800eecc <log+0xf0>)
 800ee20:	9301      	str	r3, [sp, #4]
 800ee22:	9008      	str	r0, [sp, #32]
 800ee24:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ee28:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ee2c:	b9a6      	cbnz	r6, 800ee58 <log+0x7c>
 800ee2e:	4b28      	ldr	r3, [pc, #160]	; (800eed0 <log+0xf4>)
 800ee30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ee34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ee38:	4620      	mov	r0, r4
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	4629      	mov	r1, r5
 800ee40:	f7f1 fed2 	bl	8000be8 <__aeabi_dcmpeq>
 800ee44:	bb40      	cbnz	r0, 800ee98 <log+0xbc>
 800ee46:	2301      	movs	r3, #1
 800ee48:	2e02      	cmp	r6, #2
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	d119      	bne.n	800ee82 <log+0xa6>
 800ee4e:	f000 ff61 	bl	800fd14 <__errno>
 800ee52:	2321      	movs	r3, #33	; 0x21
 800ee54:	6003      	str	r3, [r0, #0]
 800ee56:	e019      	b.n	800ee8c <log+0xb0>
 800ee58:	4b1e      	ldr	r3, [pc, #120]	; (800eed4 <log+0xf8>)
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ee60:	4620      	mov	r0, r4
 800ee62:	2200      	movs	r2, #0
 800ee64:	2300      	movs	r3, #0
 800ee66:	4629      	mov	r1, r5
 800ee68:	f7f1 febe 	bl	8000be8 <__aeabi_dcmpeq>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0ea      	beq.n	800ee46 <log+0x6a>
 800ee70:	2302      	movs	r3, #2
 800ee72:	429e      	cmp	r6, r3
 800ee74:	9300      	str	r3, [sp, #0]
 800ee76:	d111      	bne.n	800ee9c <log+0xc0>
 800ee78:	f000 ff4c 	bl	800fd14 <__errno>
 800ee7c:	2322      	movs	r3, #34	; 0x22
 800ee7e:	6003      	str	r3, [r0, #0]
 800ee80:	e011      	b.n	800eea6 <log+0xca>
 800ee82:	4668      	mov	r0, sp
 800ee84:	f000 fe86 	bl	800fb94 <matherr>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d0e0      	beq.n	800ee4e <log+0x72>
 800ee8c:	4812      	ldr	r0, [pc, #72]	; (800eed8 <log+0xfc>)
 800ee8e:	f000 fe83 	bl	800fb98 <nan>
 800ee92:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ee96:	e006      	b.n	800eea6 <log+0xca>
 800ee98:	2302      	movs	r3, #2
 800ee9a:	9300      	str	r3, [sp, #0]
 800ee9c:	4668      	mov	r0, sp
 800ee9e:	f000 fe79 	bl	800fb94 <matherr>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d0e8      	beq.n	800ee78 <log+0x9c>
 800eea6:	9b08      	ldr	r3, [sp, #32]
 800eea8:	b11b      	cbz	r3, 800eeb2 <log+0xd6>
 800eeaa:	f000 ff33 	bl	800fd14 <__errno>
 800eeae:	9b08      	ldr	r3, [sp, #32]
 800eeb0:	6003      	str	r3, [r0, #0]
 800eeb2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800eeb6:	eeb0 0a48 	vmov.f32	s0, s16
 800eeba:	eef0 0a68 	vmov.f32	s1, s17
 800eebe:	b00a      	add	sp, #40	; 0x28
 800eec0:	ecbd 8b02 	vpop	{d8}
 800eec4:	bd70      	pop	{r4, r5, r6, pc}
 800eec6:	bf00      	nop
 800eec8:	200011f8 	.word	0x200011f8
 800eecc:	08055670 	.word	0x08055670
 800eed0:	c7efffff 	.word	0xc7efffff
 800eed4:	fff00000 	.word	0xfff00000
 800eed8:	080554eb 	.word	0x080554eb

0800eedc <sqrtf>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	ed2d 8b02 	vpush	{d8}
 800eee2:	b08a      	sub	sp, #40	; 0x28
 800eee4:	eeb0 8a40 	vmov.f32	s16, s0
 800eee8:	f000 fb28 	bl	800f53c <__ieee754_sqrtf>
 800eeec:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <sqrtf+0x98>)
 800eeee:	f993 4000 	ldrsb.w	r4, [r3]
 800eef2:	1c63      	adds	r3, r4, #1
 800eef4:	d02c      	beq.n	800ef50 <sqrtf+0x74>
 800eef6:	eeb4 8a48 	vcmp.f32	s16, s16
 800eefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefe:	d627      	bvs.n	800ef50 <sqrtf+0x74>
 800ef00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef08:	d522      	bpl.n	800ef50 <sqrtf+0x74>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	4b1a      	ldr	r3, [pc, #104]	; (800ef78 <sqrtf+0x9c>)
 800ef10:	9301      	str	r3, [sp, #4]
 800ef12:	ee18 0a10 	vmov	r0, s16
 800ef16:	2300      	movs	r3, #0
 800ef18:	9308      	str	r3, [sp, #32]
 800ef1a:	f7f1 fba5 	bl	8000668 <__aeabi_f2d>
 800ef1e:	2200      	movs	r2, #0
 800ef20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef28:	2300      	movs	r3, #0
 800ef2a:	b9ac      	cbnz	r4, 800ef58 <sqrtf+0x7c>
 800ef2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef30:	4668      	mov	r0, sp
 800ef32:	f000 fe2f 	bl	800fb94 <matherr>
 800ef36:	b1b8      	cbz	r0, 800ef68 <sqrtf+0x8c>
 800ef38:	9b08      	ldr	r3, [sp, #32]
 800ef3a:	b11b      	cbz	r3, 800ef44 <sqrtf+0x68>
 800ef3c:	f000 feea 	bl	800fd14 <__errno>
 800ef40:	9b08      	ldr	r3, [sp, #32]
 800ef42:	6003      	str	r3, [r0, #0]
 800ef44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef48:	f7f1 fede 	bl	8000d08 <__aeabi_d2f>
 800ef4c:	ee00 0a10 	vmov	s0, r0
 800ef50:	b00a      	add	sp, #40	; 0x28
 800ef52:	ecbd 8b02 	vpop	{d8}
 800ef56:	bd10      	pop	{r4, pc}
 800ef58:	4610      	mov	r0, r2
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	f7f1 fd06 	bl	800096c <__aeabi_ddiv>
 800ef60:	2c02      	cmp	r4, #2
 800ef62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef66:	d1e3      	bne.n	800ef30 <sqrtf+0x54>
 800ef68:	f000 fed4 	bl	800fd14 <__errno>
 800ef6c:	2321      	movs	r3, #33	; 0x21
 800ef6e:	6003      	str	r3, [r0, #0]
 800ef70:	e7e2      	b.n	800ef38 <sqrtf+0x5c>
 800ef72:	bf00      	nop
 800ef74:	200011f8 	.word	0x200011f8
 800ef78:	08055674 	.word	0x08055674
 800ef7c:	00000000 	.word	0x00000000

0800ef80 <__ieee754_log>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ec51 0b10 	vmov	r0, r1, d0
 800ef88:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ef8c:	b087      	sub	sp, #28
 800ef8e:	460d      	mov	r5, r1
 800ef90:	da27      	bge.n	800efe2 <__ieee754_log+0x62>
 800ef92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ef96:	4303      	orrs	r3, r0
 800ef98:	ee10 2a10 	vmov	r2, s0
 800ef9c:	d10a      	bne.n	800efb4 <__ieee754_log+0x34>
 800ef9e:	49cc      	ldr	r1, [pc, #816]	; (800f2d0 <__ieee754_log+0x350>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	2300      	movs	r3, #0
 800efa4:	2000      	movs	r0, #0
 800efa6:	f7f1 fce1 	bl	800096c <__aeabi_ddiv>
 800efaa:	ec41 0b10 	vmov	d0, r0, r1
 800efae:	b007      	add	sp, #28
 800efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb4:	2900      	cmp	r1, #0
 800efb6:	da05      	bge.n	800efc4 <__ieee754_log+0x44>
 800efb8:	460b      	mov	r3, r1
 800efba:	f7f1 f9f5 	bl	80003a8 <__aeabi_dsub>
 800efbe:	2200      	movs	r2, #0
 800efc0:	2300      	movs	r3, #0
 800efc2:	e7f0      	b.n	800efa6 <__ieee754_log+0x26>
 800efc4:	4bc3      	ldr	r3, [pc, #780]	; (800f2d4 <__ieee754_log+0x354>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	f7f1 fba6 	bl	8000718 <__aeabi_dmul>
 800efcc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800efd0:	460d      	mov	r5, r1
 800efd2:	4ac1      	ldr	r2, [pc, #772]	; (800f2d8 <__ieee754_log+0x358>)
 800efd4:	4295      	cmp	r5, r2
 800efd6:	dd06      	ble.n	800efe6 <__ieee754_log+0x66>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	f7f1 f9e6 	bl	80003ac <__adddf3>
 800efe0:	e7e3      	b.n	800efaa <__ieee754_log+0x2a>
 800efe2:	2300      	movs	r3, #0
 800efe4:	e7f5      	b.n	800efd2 <__ieee754_log+0x52>
 800efe6:	152c      	asrs	r4, r5, #20
 800efe8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800efec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800eff0:	441c      	add	r4, r3
 800eff2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800eff6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800effa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800effe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800f002:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800f006:	ea42 0105 	orr.w	r1, r2, r5
 800f00a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f00e:	2200      	movs	r2, #0
 800f010:	4bb2      	ldr	r3, [pc, #712]	; (800f2dc <__ieee754_log+0x35c>)
 800f012:	f7f1 f9c9 	bl	80003a8 <__aeabi_dsub>
 800f016:	1cab      	adds	r3, r5, #2
 800f018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	4682      	mov	sl, r0
 800f020:	468b      	mov	fp, r1
 800f022:	f04f 0200 	mov.w	r2, #0
 800f026:	dc53      	bgt.n	800f0d0 <__ieee754_log+0x150>
 800f028:	2300      	movs	r3, #0
 800f02a:	f7f1 fddd 	bl	8000be8 <__aeabi_dcmpeq>
 800f02e:	b1d0      	cbz	r0, 800f066 <__ieee754_log+0xe6>
 800f030:	2c00      	cmp	r4, #0
 800f032:	f000 8120 	beq.w	800f276 <__ieee754_log+0x2f6>
 800f036:	4620      	mov	r0, r4
 800f038:	f7f1 fb04 	bl	8000644 <__aeabi_i2d>
 800f03c:	a390      	add	r3, pc, #576	; (adr r3, 800f280 <__ieee754_log+0x300>)
 800f03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f042:	4606      	mov	r6, r0
 800f044:	460f      	mov	r7, r1
 800f046:	f7f1 fb67 	bl	8000718 <__aeabi_dmul>
 800f04a:	a38f      	add	r3, pc, #572	; (adr r3, 800f288 <__ieee754_log+0x308>)
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	4604      	mov	r4, r0
 800f052:	460d      	mov	r5, r1
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 fb5e 	bl	8000718 <__aeabi_dmul>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4620      	mov	r0, r4
 800f062:	4629      	mov	r1, r5
 800f064:	e7ba      	b.n	800efdc <__ieee754_log+0x5c>
 800f066:	a38a      	add	r3, pc, #552	; (adr r3, 800f290 <__ieee754_log+0x310>)
 800f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06c:	4650      	mov	r0, sl
 800f06e:	4659      	mov	r1, fp
 800f070:	f7f1 fb52 	bl	8000718 <__aeabi_dmul>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	2000      	movs	r0, #0
 800f07a:	4999      	ldr	r1, [pc, #612]	; (800f2e0 <__ieee754_log+0x360>)
 800f07c:	f7f1 f994 	bl	80003a8 <__aeabi_dsub>
 800f080:	4652      	mov	r2, sl
 800f082:	4606      	mov	r6, r0
 800f084:	460f      	mov	r7, r1
 800f086:	465b      	mov	r3, fp
 800f088:	4650      	mov	r0, sl
 800f08a:	4659      	mov	r1, fp
 800f08c:	f7f1 fb44 	bl	8000718 <__aeabi_dmul>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	4630      	mov	r0, r6
 800f096:	4639      	mov	r1, r7
 800f098:	f7f1 fb3e 	bl	8000718 <__aeabi_dmul>
 800f09c:	4606      	mov	r6, r0
 800f09e:	460f      	mov	r7, r1
 800f0a0:	b914      	cbnz	r4, 800f0a8 <__ieee754_log+0x128>
 800f0a2:	4632      	mov	r2, r6
 800f0a4:	463b      	mov	r3, r7
 800f0a6:	e0a0      	b.n	800f1ea <__ieee754_log+0x26a>
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f7f1 facb 	bl	8000644 <__aeabi_i2d>
 800f0ae:	a374      	add	r3, pc, #464	; (adr r3, 800f280 <__ieee754_log+0x300>)
 800f0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b4:	4680      	mov	r8, r0
 800f0b6:	4689      	mov	r9, r1
 800f0b8:	f7f1 fb2e 	bl	8000718 <__aeabi_dmul>
 800f0bc:	a372      	add	r3, pc, #456	; (adr r3, 800f288 <__ieee754_log+0x308>)
 800f0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	460d      	mov	r5, r1
 800f0c6:	4640      	mov	r0, r8
 800f0c8:	4649      	mov	r1, r9
 800f0ca:	f7f1 fb25 	bl	8000718 <__aeabi_dmul>
 800f0ce:	e0a5      	b.n	800f21c <__ieee754_log+0x29c>
 800f0d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f0d4:	f7f1 f96a 	bl	80003ac <__adddf3>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	460b      	mov	r3, r1
 800f0dc:	4650      	mov	r0, sl
 800f0de:	4659      	mov	r1, fp
 800f0e0:	f7f1 fc44 	bl	800096c <__aeabi_ddiv>
 800f0e4:	e9cd 0100 	strd	r0, r1, [sp]
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7f1 faab 	bl	8000644 <__aeabi_i2d>
 800f0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0f6:	4610      	mov	r0, r2
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	f7f1 fb0d 	bl	8000718 <__aeabi_dmul>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f106:	f7f1 fb07 	bl	8000718 <__aeabi_dmul>
 800f10a:	a363      	add	r3, pc, #396	; (adr r3, 800f298 <__ieee754_log+0x318>)
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	4680      	mov	r8, r0
 800f112:	4689      	mov	r9, r1
 800f114:	f7f1 fb00 	bl	8000718 <__aeabi_dmul>
 800f118:	a361      	add	r3, pc, #388	; (adr r3, 800f2a0 <__ieee754_log+0x320>)
 800f11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11e:	f7f1 f945 	bl	80003ac <__adddf3>
 800f122:	4642      	mov	r2, r8
 800f124:	464b      	mov	r3, r9
 800f126:	f7f1 faf7 	bl	8000718 <__aeabi_dmul>
 800f12a:	a35f      	add	r3, pc, #380	; (adr r3, 800f2a8 <__ieee754_log+0x328>)
 800f12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f130:	f7f1 f93c 	bl	80003ac <__adddf3>
 800f134:	4642      	mov	r2, r8
 800f136:	464b      	mov	r3, r9
 800f138:	f7f1 faee 	bl	8000718 <__aeabi_dmul>
 800f13c:	a35c      	add	r3, pc, #368	; (adr r3, 800f2b0 <__ieee754_log+0x330>)
 800f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f142:	f7f1 f933 	bl	80003ac <__adddf3>
 800f146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f14a:	f7f1 fae5 	bl	8000718 <__aeabi_dmul>
 800f14e:	a35a      	add	r3, pc, #360	; (adr r3, 800f2b8 <__ieee754_log+0x338>)
 800f150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f154:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f158:	4640      	mov	r0, r8
 800f15a:	4649      	mov	r1, r9
 800f15c:	f7f1 fadc 	bl	8000718 <__aeabi_dmul>
 800f160:	a357      	add	r3, pc, #348	; (adr r3, 800f2c0 <__ieee754_log+0x340>)
 800f162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f166:	f7f1 f921 	bl	80003ac <__adddf3>
 800f16a:	4642      	mov	r2, r8
 800f16c:	464b      	mov	r3, r9
 800f16e:	f7f1 fad3 	bl	8000718 <__aeabi_dmul>
 800f172:	a355      	add	r3, pc, #340	; (adr r3, 800f2c8 <__ieee754_log+0x348>)
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f7f1 f918 	bl	80003ac <__adddf3>
 800f17c:	4642      	mov	r2, r8
 800f17e:	464b      	mov	r3, r9
 800f180:	f7f1 faca 	bl	8000718 <__aeabi_dmul>
 800f184:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800f188:	4602      	mov	r2, r0
 800f18a:	460b      	mov	r3, r1
 800f18c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f194:	f7f1 f90a 	bl	80003ac <__adddf3>
 800f198:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800f19c:	3551      	adds	r5, #81	; 0x51
 800f19e:	4335      	orrs	r5, r6
 800f1a0:	2d00      	cmp	r5, #0
 800f1a2:	4680      	mov	r8, r0
 800f1a4:	4689      	mov	r9, r1
 800f1a6:	dd48      	ble.n	800f23a <__ieee754_log+0x2ba>
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	4b4d      	ldr	r3, [pc, #308]	; (800f2e0 <__ieee754_log+0x360>)
 800f1ac:	4650      	mov	r0, sl
 800f1ae:	4659      	mov	r1, fp
 800f1b0:	f7f1 fab2 	bl	8000718 <__aeabi_dmul>
 800f1b4:	4652      	mov	r2, sl
 800f1b6:	465b      	mov	r3, fp
 800f1b8:	f7f1 faae 	bl	8000718 <__aeabi_dmul>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	460f      	mov	r7, r1
 800f1c4:	4640      	mov	r0, r8
 800f1c6:	4649      	mov	r1, r9
 800f1c8:	f7f1 f8f0 	bl	80003ac <__adddf3>
 800f1cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1d0:	f7f1 faa2 	bl	8000718 <__aeabi_dmul>
 800f1d4:	4680      	mov	r8, r0
 800f1d6:	4689      	mov	r9, r1
 800f1d8:	b964      	cbnz	r4, 800f1f4 <__ieee754_log+0x274>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	460b      	mov	r3, r1
 800f1de:	4630      	mov	r0, r6
 800f1e0:	4639      	mov	r1, r7
 800f1e2:	f7f1 f8e1 	bl	80003a8 <__aeabi_dsub>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	4650      	mov	r0, sl
 800f1ec:	4659      	mov	r1, fp
 800f1ee:	f7f1 f8db 	bl	80003a8 <__aeabi_dsub>
 800f1f2:	e6da      	b.n	800efaa <__ieee754_log+0x2a>
 800f1f4:	a322      	add	r3, pc, #136	; (adr r3, 800f280 <__ieee754_log+0x300>)
 800f1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1fe:	f7f1 fa8b 	bl	8000718 <__aeabi_dmul>
 800f202:	a321      	add	r3, pc, #132	; (adr r3, 800f288 <__ieee754_log+0x308>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	4604      	mov	r4, r0
 800f20a:	460d      	mov	r5, r1
 800f20c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f210:	f7f1 fa82 	bl	8000718 <__aeabi_dmul>
 800f214:	4642      	mov	r2, r8
 800f216:	464b      	mov	r3, r9
 800f218:	f7f1 f8c8 	bl	80003ac <__adddf3>
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	4630      	mov	r0, r6
 800f222:	4639      	mov	r1, r7
 800f224:	f7f1 f8c0 	bl	80003a8 <__aeabi_dsub>
 800f228:	4652      	mov	r2, sl
 800f22a:	465b      	mov	r3, fp
 800f22c:	f7f1 f8bc 	bl	80003a8 <__aeabi_dsub>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	4620      	mov	r0, r4
 800f236:	4629      	mov	r1, r5
 800f238:	e7d9      	b.n	800f1ee <__ieee754_log+0x26e>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4650      	mov	r0, sl
 800f240:	4659      	mov	r1, fp
 800f242:	f7f1 f8b1 	bl	80003a8 <__aeabi_dsub>
 800f246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f24a:	f7f1 fa65 	bl	8000718 <__aeabi_dmul>
 800f24e:	4606      	mov	r6, r0
 800f250:	460f      	mov	r7, r1
 800f252:	2c00      	cmp	r4, #0
 800f254:	f43f af25 	beq.w	800f0a2 <__ieee754_log+0x122>
 800f258:	a309      	add	r3, pc, #36	; (adr r3, 800f280 <__ieee754_log+0x300>)
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f262:	f7f1 fa59 	bl	8000718 <__aeabi_dmul>
 800f266:	a308      	add	r3, pc, #32	; (adr r3, 800f288 <__ieee754_log+0x308>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	4604      	mov	r4, r0
 800f26e:	460d      	mov	r5, r1
 800f270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f274:	e729      	b.n	800f0ca <__ieee754_log+0x14a>
 800f276:	2000      	movs	r0, #0
 800f278:	2100      	movs	r1, #0
 800f27a:	e696      	b.n	800efaa <__ieee754_log+0x2a>
 800f27c:	f3af 8000 	nop.w
 800f280:	fee00000 	.word	0xfee00000
 800f284:	3fe62e42 	.word	0x3fe62e42
 800f288:	35793c76 	.word	0x35793c76
 800f28c:	3dea39ef 	.word	0x3dea39ef
 800f290:	55555555 	.word	0x55555555
 800f294:	3fd55555 	.word	0x3fd55555
 800f298:	df3e5244 	.word	0xdf3e5244
 800f29c:	3fc2f112 	.word	0x3fc2f112
 800f2a0:	96cb03de 	.word	0x96cb03de
 800f2a4:	3fc74664 	.word	0x3fc74664
 800f2a8:	94229359 	.word	0x94229359
 800f2ac:	3fd24924 	.word	0x3fd24924
 800f2b0:	55555593 	.word	0x55555593
 800f2b4:	3fe55555 	.word	0x3fe55555
 800f2b8:	d078c69f 	.word	0xd078c69f
 800f2bc:	3fc39a09 	.word	0x3fc39a09
 800f2c0:	1d8e78af 	.word	0x1d8e78af
 800f2c4:	3fcc71c5 	.word	0x3fcc71c5
 800f2c8:	9997fa04 	.word	0x9997fa04
 800f2cc:	3fd99999 	.word	0x3fd99999
 800f2d0:	c3500000 	.word	0xc3500000
 800f2d4:	43500000 	.word	0x43500000
 800f2d8:	7fefffff 	.word	0x7fefffff
 800f2dc:	3ff00000 	.word	0x3ff00000
 800f2e0:	3fe00000 	.word	0x3fe00000

0800f2e4 <__ieee754_rem_pio2f>:
 800f2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2e6:	ee10 6a10 	vmov	r6, s0
 800f2ea:	4b86      	ldr	r3, [pc, #536]	; (800f504 <__ieee754_rem_pio2f+0x220>)
 800f2ec:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800f2f0:	429c      	cmp	r4, r3
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	dc05      	bgt.n	800f304 <__ieee754_rem_pio2f+0x20>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	ed85 0a00 	vstr	s0, [r5]
 800f2fe:	6043      	str	r3, [r0, #4]
 800f300:	2000      	movs	r0, #0
 800f302:	e020      	b.n	800f346 <__ieee754_rem_pio2f+0x62>
 800f304:	4b80      	ldr	r3, [pc, #512]	; (800f508 <__ieee754_rem_pio2f+0x224>)
 800f306:	429c      	cmp	r4, r3
 800f308:	dc38      	bgt.n	800f37c <__ieee754_rem_pio2f+0x98>
 800f30a:	2e00      	cmp	r6, #0
 800f30c:	f024 040f 	bic.w	r4, r4, #15
 800f310:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800f50c <__ieee754_rem_pio2f+0x228>
 800f314:	4b7e      	ldr	r3, [pc, #504]	; (800f510 <__ieee754_rem_pio2f+0x22c>)
 800f316:	dd18      	ble.n	800f34a <__ieee754_rem_pio2f+0x66>
 800f318:	429c      	cmp	r4, r3
 800f31a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f31e:	bf09      	itett	eq
 800f320:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800f514 <__ieee754_rem_pio2f+0x230>
 800f324:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800f518 <__ieee754_rem_pio2f+0x234>
 800f328:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f32c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800f51c <__ieee754_rem_pio2f+0x238>
 800f330:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f334:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f338:	edc0 6a00 	vstr	s13, [r0]
 800f33c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f340:	edc0 7a01 	vstr	s15, [r0, #4]
 800f344:	2001      	movs	r0, #1
 800f346:	b007      	add	sp, #28
 800f348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f34a:	429c      	cmp	r4, r3
 800f34c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f350:	bf09      	itett	eq
 800f352:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800f514 <__ieee754_rem_pio2f+0x230>
 800f356:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800f518 <__ieee754_rem_pio2f+0x234>
 800f35a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f35e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800f51c <__ieee754_rem_pio2f+0x238>
 800f362:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f366:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f36a:	edc0 6a00 	vstr	s13, [r0]
 800f36e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f372:	edc0 7a01 	vstr	s15, [r0, #4]
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	e7e4      	b.n	800f346 <__ieee754_rem_pio2f+0x62>
 800f37c:	4b68      	ldr	r3, [pc, #416]	; (800f520 <__ieee754_rem_pio2f+0x23c>)
 800f37e:	429c      	cmp	r4, r3
 800f380:	dc71      	bgt.n	800f466 <__ieee754_rem_pio2f+0x182>
 800f382:	f000 fc11 	bl	800fba8 <fabsf>
 800f386:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f524 <__ieee754_rem_pio2f+0x240>
 800f38a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f38e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f396:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800f39a:	ee17 0a90 	vmov	r0, s15
 800f39e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f50c <__ieee754_rem_pio2f+0x228>
 800f3a2:	eeb1 7a46 	vneg.f32	s14, s12
 800f3a6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f3aa:	281f      	cmp	r0, #31
 800f3ac:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f518 <__ieee754_rem_pio2f+0x234>
 800f3b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f3b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f3b8:	ee16 3a90 	vmov	r3, s13
 800f3bc:	dc1c      	bgt.n	800f3f8 <__ieee754_rem_pio2f+0x114>
 800f3be:	1e47      	subs	r7, r0, #1
 800f3c0:	4959      	ldr	r1, [pc, #356]	; (800f528 <__ieee754_rem_pio2f+0x244>)
 800f3c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f3c6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800f3ca:	428a      	cmp	r2, r1
 800f3cc:	d014      	beq.n	800f3f8 <__ieee754_rem_pio2f+0x114>
 800f3ce:	602b      	str	r3, [r5, #0]
 800f3d0:	ed95 7a00 	vldr	s14, [r5]
 800f3d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f3d8:	2e00      	cmp	r6, #0
 800f3da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f3de:	ed85 0a01 	vstr	s0, [r5, #4]
 800f3e2:	dab0      	bge.n	800f346 <__ieee754_rem_pio2f+0x62>
 800f3e4:	eeb1 7a47 	vneg.f32	s14, s14
 800f3e8:	eeb1 0a40 	vneg.f32	s0, s0
 800f3ec:	ed85 7a00 	vstr	s14, [r5]
 800f3f0:	ed85 0a01 	vstr	s0, [r5, #4]
 800f3f4:	4240      	negs	r0, r0
 800f3f6:	e7a6      	b.n	800f346 <__ieee754_rem_pio2f+0x62>
 800f3f8:	15e4      	asrs	r4, r4, #23
 800f3fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f3fe:	1aa2      	subs	r2, r4, r2
 800f400:	2a08      	cmp	r2, #8
 800f402:	dde4      	ble.n	800f3ce <__ieee754_rem_pio2f+0xea>
 800f404:	eddf 7a43 	vldr	s15, [pc, #268]	; 800f514 <__ieee754_rem_pio2f+0x230>
 800f408:	eef0 6a40 	vmov.f32	s13, s0
 800f40c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f410:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f414:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f418:	eddf 7a40 	vldr	s15, [pc, #256]	; 800f51c <__ieee754_rem_pio2f+0x238>
 800f41c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800f420:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800f424:	eef0 7a40 	vmov.f32	s15, s0
 800f428:	ee15 3a90 	vmov	r3, s11
 800f42c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f430:	1aa4      	subs	r4, r4, r2
 800f432:	2c19      	cmp	r4, #25
 800f434:	dc04      	bgt.n	800f440 <__ieee754_rem_pio2f+0x15c>
 800f436:	edc5 5a00 	vstr	s11, [r5]
 800f43a:	eeb0 0a66 	vmov.f32	s0, s13
 800f43e:	e7c7      	b.n	800f3d0 <__ieee754_rem_pio2f+0xec>
 800f440:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f52c <__ieee754_rem_pio2f+0x248>
 800f444:	eeb0 0a66 	vmov.f32	s0, s13
 800f448:	eea7 0a25 	vfma.f32	s0, s14, s11
 800f44c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f450:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f454:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f530 <__ieee754_rem_pio2f+0x24c>
 800f458:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800f45c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f460:	ed85 7a00 	vstr	s14, [r5]
 800f464:	e7b4      	b.n	800f3d0 <__ieee754_rem_pio2f+0xec>
 800f466:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f46a:	db06      	blt.n	800f47a <__ieee754_rem_pio2f+0x196>
 800f46c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f470:	edc0 7a01 	vstr	s15, [r0, #4]
 800f474:	edc0 7a00 	vstr	s15, [r0]
 800f478:	e742      	b.n	800f300 <__ieee754_rem_pio2f+0x1c>
 800f47a:	15e2      	asrs	r2, r4, #23
 800f47c:	3a86      	subs	r2, #134	; 0x86
 800f47e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800f482:	ee07 3a90 	vmov	s15, r3
 800f486:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f48a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800f534 <__ieee754_rem_pio2f+0x250>
 800f48e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f496:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f49a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f49e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f4a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4aa:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f4ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f4b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ba:	edcd 7a05 	vstr	s15, [sp, #20]
 800f4be:	d11e      	bne.n	800f4fe <__ieee754_rem_pio2f+0x21a>
 800f4c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c8:	bf0c      	ite	eq
 800f4ca:	2301      	moveq	r3, #1
 800f4cc:	2302      	movne	r3, #2
 800f4ce:	491a      	ldr	r1, [pc, #104]	; (800f538 <__ieee754_rem_pio2f+0x254>)
 800f4d0:	9101      	str	r1, [sp, #4]
 800f4d2:	2102      	movs	r1, #2
 800f4d4:	9100      	str	r1, [sp, #0]
 800f4d6:	a803      	add	r0, sp, #12
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f000 f891 	bl	800f600 <__kernel_rem_pio2f>
 800f4de:	2e00      	cmp	r6, #0
 800f4e0:	f6bf af31 	bge.w	800f346 <__ieee754_rem_pio2f+0x62>
 800f4e4:	edd5 7a00 	vldr	s15, [r5]
 800f4e8:	eef1 7a67 	vneg.f32	s15, s15
 800f4ec:	edc5 7a00 	vstr	s15, [r5]
 800f4f0:	edd5 7a01 	vldr	s15, [r5, #4]
 800f4f4:	eef1 7a67 	vneg.f32	s15, s15
 800f4f8:	edc5 7a01 	vstr	s15, [r5, #4]
 800f4fc:	e77a      	b.n	800f3f4 <__ieee754_rem_pio2f+0x110>
 800f4fe:	2303      	movs	r3, #3
 800f500:	e7e5      	b.n	800f4ce <__ieee754_rem_pio2f+0x1ea>
 800f502:	bf00      	nop
 800f504:	3f490fd8 	.word	0x3f490fd8
 800f508:	4016cbe3 	.word	0x4016cbe3
 800f50c:	3fc90f80 	.word	0x3fc90f80
 800f510:	3fc90fd0 	.word	0x3fc90fd0
 800f514:	37354400 	.word	0x37354400
 800f518:	37354443 	.word	0x37354443
 800f51c:	2e85a308 	.word	0x2e85a308
 800f520:	43490f80 	.word	0x43490f80
 800f524:	3f22f984 	.word	0x3f22f984
 800f528:	0805567c 	.word	0x0805567c
 800f52c:	2e85a300 	.word	0x2e85a300
 800f530:	248d3132 	.word	0x248d3132
 800f534:	43800000 	.word	0x43800000
 800f538:	080556fc 	.word	0x080556fc

0800f53c <__ieee754_sqrtf>:
 800f53c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f540:	4770      	bx	lr
	...

0800f544 <__kernel_cosf>:
 800f544:	ee10 3a10 	vmov	r3, s0
 800f548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f54c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f554:	da05      	bge.n	800f562 <__kernel_cosf+0x1e>
 800f556:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f55a:	ee17 2a90 	vmov	r2, s15
 800f55e:	2a00      	cmp	r2, #0
 800f560:	d03b      	beq.n	800f5da <__kernel_cosf+0x96>
 800f562:	ee20 6a00 	vmul.f32	s12, s0, s0
 800f566:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f56a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f5e0 <__kernel_cosf+0x9c>
 800f56e:	4a1d      	ldr	r2, [pc, #116]	; (800f5e4 <__kernel_cosf+0xa0>)
 800f570:	ee66 7a07 	vmul.f32	s15, s12, s14
 800f574:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f5e8 <__kernel_cosf+0xa4>
 800f578:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f57c:	4293      	cmp	r3, r2
 800f57e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800f5ec <__kernel_cosf+0xa8>
 800f582:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f586:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f5f0 <__kernel_cosf+0xac>
 800f58a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f58e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800f5f4 <__kernel_cosf+0xb0>
 800f592:	eee7 5a06 	vfma.f32	s11, s14, s12
 800f596:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f5f8 <__kernel_cosf+0xb4>
 800f59a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f59e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800f5a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f5a6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f5aa:	dc04      	bgt.n	800f5b6 <__kernel_cosf+0x72>
 800f5ac:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800f5b0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800f5b4:	4770      	bx	lr
 800f5b6:	4a11      	ldr	r2, [pc, #68]	; (800f5fc <__kernel_cosf+0xb8>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	bfda      	itte	le
 800f5bc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f5c0:	ee07 3a10 	vmovle	s14, r3
 800f5c4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800f5c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5cc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800f5d0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f5d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f5d8:	4770      	bx	lr
 800f5da:	eeb0 0a66 	vmov.f32	s0, s13
 800f5de:	4770      	bx	lr
 800f5e0:	ad47d74e 	.word	0xad47d74e
 800f5e4:	3e999999 	.word	0x3e999999
 800f5e8:	310f74f6 	.word	0x310f74f6
 800f5ec:	b493f27c 	.word	0xb493f27c
 800f5f0:	37d00d01 	.word	0x37d00d01
 800f5f4:	bab60b61 	.word	0xbab60b61
 800f5f8:	3d2aaaab 	.word	0x3d2aaaab
 800f5fc:	3f480000 	.word	0x3f480000

0800f600 <__kernel_rem_pio2f>:
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	ed2d 8b04 	vpush	{d8-d9}
 800f608:	b0d7      	sub	sp, #348	; 0x15c
 800f60a:	469b      	mov	fp, r3
 800f60c:	460e      	mov	r6, r1
 800f60e:	4bbe      	ldr	r3, [pc, #760]	; (800f908 <__kernel_rem_pio2f+0x308>)
 800f610:	9964      	ldr	r1, [sp, #400]	; 0x190
 800f612:	9002      	str	r0, [sp, #8]
 800f614:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f618:	9865      	ldr	r0, [sp, #404]	; 0x194
 800f61a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800f918 <__kernel_rem_pio2f+0x318>
 800f61e:	1ed1      	subs	r1, r2, #3
 800f620:	2308      	movs	r3, #8
 800f622:	fb91 f1f3 	sdiv	r1, r1, r3
 800f626:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f62a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f62e:	1c4c      	adds	r4, r1, #1
 800f630:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800f634:	eba1 050a 	sub.w	r5, r1, sl
 800f638:	aa1a      	add	r2, sp, #104	; 0x68
 800f63a:	eb09 070a 	add.w	r7, r9, sl
 800f63e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f642:	4696      	mov	lr, r2
 800f644:	2300      	movs	r3, #0
 800f646:	42bb      	cmp	r3, r7
 800f648:	dd0f      	ble.n	800f66a <__kernel_rem_pio2f+0x6a>
 800f64a:	af42      	add	r7, sp, #264	; 0x108
 800f64c:	2200      	movs	r2, #0
 800f64e:	454a      	cmp	r2, r9
 800f650:	dc27      	bgt.n	800f6a2 <__kernel_rem_pio2f+0xa2>
 800f652:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f656:	eb0b 0302 	add.w	r3, fp, r2
 800f65a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800f65e:	9d02      	ldr	r5, [sp, #8]
 800f660:	eddf 7aad 	vldr	s15, [pc, #692]	; 800f918 <__kernel_rem_pio2f+0x318>
 800f664:	f04f 0c00 	mov.w	ip, #0
 800f668:	e015      	b.n	800f696 <__kernel_rem_pio2f+0x96>
 800f66a:	42dd      	cmn	r5, r3
 800f66c:	bf5d      	ittte	pl
 800f66e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800f672:	ee07 2a90 	vmovpl	s15, r2
 800f676:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f67a:	eef0 7a47 	vmovmi.f32	s15, s14
 800f67e:	ecee 7a01 	vstmia	lr!, {s15}
 800f682:	3301      	adds	r3, #1
 800f684:	e7df      	b.n	800f646 <__kernel_rem_pio2f+0x46>
 800f686:	ecf5 6a01 	vldmia	r5!, {s13}
 800f68a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f68e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f692:	f10c 0c01 	add.w	ip, ip, #1
 800f696:	45d4      	cmp	ip, sl
 800f698:	ddf5      	ble.n	800f686 <__kernel_rem_pio2f+0x86>
 800f69a:	ece7 7a01 	vstmia	r7!, {s15}
 800f69e:	3201      	adds	r2, #1
 800f6a0:	e7d5      	b.n	800f64e <__kernel_rem_pio2f+0x4e>
 800f6a2:	ab06      	add	r3, sp, #24
 800f6a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f6a8:	9304      	str	r3, [sp, #16]
 800f6aa:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800f914 <__kernel_rem_pio2f+0x314>
 800f6ae:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800f910 <__kernel_rem_pio2f+0x310>
 800f6b2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f6b6:	9303      	str	r3, [sp, #12]
 800f6b8:	464d      	mov	r5, r9
 800f6ba:	ab56      	add	r3, sp, #344	; 0x158
 800f6bc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800f6c0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f6c4:	3f01      	subs	r7, #1
 800f6c6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800f6ca:	00bf      	lsls	r7, r7, #2
 800f6cc:	ab56      	add	r3, sp, #344	; 0x158
 800f6ce:	19da      	adds	r2, r3, r7
 800f6d0:	3a4c      	subs	r2, #76	; 0x4c
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	1ae9      	subs	r1, r5, r3
 800f6d6:	2900      	cmp	r1, #0
 800f6d8:	dc4c      	bgt.n	800f774 <__kernel_rem_pio2f+0x174>
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 faae 	bl	800fc3c <scalbnf>
 800f6e0:	eeb0 8a40 	vmov.f32	s16, s0
 800f6e4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f6e8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f6ec:	f000 fa64 	bl	800fbb8 <floorf>
 800f6f0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f6f4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f6f8:	2c00      	cmp	r4, #0
 800f6fa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f6fe:	edcd 7a01 	vstr	s15, [sp, #4]
 800f702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f706:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f70a:	dd48      	ble.n	800f79e <__kernel_rem_pio2f+0x19e>
 800f70c:	1e69      	subs	r1, r5, #1
 800f70e:	ab06      	add	r3, sp, #24
 800f710:	f1c4 0008 	rsb	r0, r4, #8
 800f714:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f718:	9a01      	ldr	r2, [sp, #4]
 800f71a:	fa4c f300 	asr.w	r3, ip, r0
 800f71e:	441a      	add	r2, r3
 800f720:	4083      	lsls	r3, r0
 800f722:	9201      	str	r2, [sp, #4]
 800f724:	ebac 0203 	sub.w	r2, ip, r3
 800f728:	ab06      	add	r3, sp, #24
 800f72a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f72e:	f1c4 0307 	rsb	r3, r4, #7
 800f732:	fa42 f803 	asr.w	r8, r2, r3
 800f736:	f1b8 0f00 	cmp.w	r8, #0
 800f73a:	dd41      	ble.n	800f7c0 <__kernel_rem_pio2f+0x1c0>
 800f73c:	9b01      	ldr	r3, [sp, #4]
 800f73e:	2000      	movs	r0, #0
 800f740:	3301      	adds	r3, #1
 800f742:	9301      	str	r3, [sp, #4]
 800f744:	4601      	mov	r1, r0
 800f746:	4285      	cmp	r5, r0
 800f748:	dc6d      	bgt.n	800f826 <__kernel_rem_pio2f+0x226>
 800f74a:	2c00      	cmp	r4, #0
 800f74c:	dd04      	ble.n	800f758 <__kernel_rem_pio2f+0x158>
 800f74e:	2c01      	cmp	r4, #1
 800f750:	d07e      	beq.n	800f850 <__kernel_rem_pio2f+0x250>
 800f752:	2c02      	cmp	r4, #2
 800f754:	f000 8086 	beq.w	800f864 <__kernel_rem_pio2f+0x264>
 800f758:	f1b8 0f02 	cmp.w	r8, #2
 800f75c:	d130      	bne.n	800f7c0 <__kernel_rem_pio2f+0x1c0>
 800f75e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f762:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f766:	b359      	cbz	r1, 800f7c0 <__kernel_rem_pio2f+0x1c0>
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fa67 	bl	800fc3c <scalbnf>
 800f76e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f772:	e025      	b.n	800f7c0 <__kernel_rem_pio2f+0x1c0>
 800f774:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f778:	a806      	add	r0, sp, #24
 800f77a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f77e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f782:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f786:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f78a:	ee10 1a10 	vmov	r1, s0
 800f78e:	ed32 0a01 	vldmdb	r2!, {s0}
 800f792:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f796:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f79a:	3301      	adds	r3, #1
 800f79c:	e79a      	b.n	800f6d4 <__kernel_rem_pio2f+0xd4>
 800f79e:	d106      	bne.n	800f7ae <__kernel_rem_pio2f+0x1ae>
 800f7a0:	1e6b      	subs	r3, r5, #1
 800f7a2:	aa06      	add	r2, sp, #24
 800f7a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f7a8:	ea4f 2822 	mov.w	r8, r2, asr #8
 800f7ac:	e7c3      	b.n	800f736 <__kernel_rem_pio2f+0x136>
 800f7ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f7b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ba:	da31      	bge.n	800f820 <__kernel_rem_pio2f+0x220>
 800f7bc:	f04f 0800 	mov.w	r8, #0
 800f7c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c8:	f040 80a8 	bne.w	800f91c <__kernel_rem_pio2f+0x31c>
 800f7cc:	1e6b      	subs	r3, r5, #1
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	4548      	cmp	r0, r9
 800f7d4:	da4d      	bge.n	800f872 <__kernel_rem_pio2f+0x272>
 800f7d6:	2a00      	cmp	r2, #0
 800f7d8:	f000 8087 	beq.w	800f8ea <__kernel_rem_pio2f+0x2ea>
 800f7dc:	aa06      	add	r2, sp, #24
 800f7de:	3c08      	subs	r4, #8
 800f7e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f7e4:	2900      	cmp	r1, #0
 800f7e6:	f000 808d 	beq.w	800f904 <__kernel_rem_pio2f+0x304>
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f7f0:	9302      	str	r3, [sp, #8]
 800f7f2:	f000 fa23 	bl	800fc3c <scalbnf>
 800f7f6:	9b02      	ldr	r3, [sp, #8]
 800f7f8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f914 <__kernel_rem_pio2f+0x314>
 800f7fc:	0099      	lsls	r1, r3, #2
 800f7fe:	aa42      	add	r2, sp, #264	; 0x108
 800f800:	1850      	adds	r0, r2, r1
 800f802:	1d05      	adds	r5, r0, #4
 800f804:	461c      	mov	r4, r3
 800f806:	2c00      	cmp	r4, #0
 800f808:	f280 80b8 	bge.w	800f97c <__kernel_rem_pio2f+0x37c>
 800f80c:	2500      	movs	r5, #0
 800f80e:	1b5c      	subs	r4, r3, r5
 800f810:	2c00      	cmp	r4, #0
 800f812:	f2c0 80d8 	blt.w	800f9c6 <__kernel_rem_pio2f+0x3c6>
 800f816:	4f3d      	ldr	r7, [pc, #244]	; (800f90c <__kernel_rem_pio2f+0x30c>)
 800f818:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f918 <__kernel_rem_pio2f+0x318>
 800f81c:	2400      	movs	r4, #0
 800f81e:	e0c6      	b.n	800f9ae <__kernel_rem_pio2f+0x3ae>
 800f820:	f04f 0802 	mov.w	r8, #2
 800f824:	e78a      	b.n	800f73c <__kernel_rem_pio2f+0x13c>
 800f826:	ab06      	add	r3, sp, #24
 800f828:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f82c:	b949      	cbnz	r1, 800f842 <__kernel_rem_pio2f+0x242>
 800f82e:	b12b      	cbz	r3, 800f83c <__kernel_rem_pio2f+0x23c>
 800f830:	aa06      	add	r2, sp, #24
 800f832:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f836:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f83a:	2301      	movs	r3, #1
 800f83c:	3001      	adds	r0, #1
 800f83e:	4619      	mov	r1, r3
 800f840:	e781      	b.n	800f746 <__kernel_rem_pio2f+0x146>
 800f842:	aa06      	add	r2, sp, #24
 800f844:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f848:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f84c:	460b      	mov	r3, r1
 800f84e:	e7f5      	b.n	800f83c <__kernel_rem_pio2f+0x23c>
 800f850:	1e68      	subs	r0, r5, #1
 800f852:	ab06      	add	r3, sp, #24
 800f854:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f85c:	aa06      	add	r2, sp, #24
 800f85e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f862:	e779      	b.n	800f758 <__kernel_rem_pio2f+0x158>
 800f864:	1e68      	subs	r0, r5, #1
 800f866:	ab06      	add	r3, sp, #24
 800f868:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f86c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f870:	e7f4      	b.n	800f85c <__kernel_rem_pio2f+0x25c>
 800f872:	a906      	add	r1, sp, #24
 800f874:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f878:	3801      	subs	r0, #1
 800f87a:	430a      	orrs	r2, r1
 800f87c:	e7a9      	b.n	800f7d2 <__kernel_rem_pio2f+0x1d2>
 800f87e:	f10c 0c01 	add.w	ip, ip, #1
 800f882:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f886:	2a00      	cmp	r2, #0
 800f888:	d0f9      	beq.n	800f87e <__kernel_rem_pio2f+0x27e>
 800f88a:	eb0b 0305 	add.w	r3, fp, r5
 800f88e:	aa1a      	add	r2, sp, #104	; 0x68
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	1898      	adds	r0, r3, r2
 800f894:	3004      	adds	r0, #4
 800f896:	1c69      	adds	r1, r5, #1
 800f898:	3704      	adds	r7, #4
 800f89a:	2200      	movs	r2, #0
 800f89c:	4465      	add	r5, ip
 800f89e:	9005      	str	r0, [sp, #20]
 800f8a0:	428d      	cmp	r5, r1
 800f8a2:	f6ff af0a 	blt.w	800f6ba <__kernel_rem_pio2f+0xba>
 800f8a6:	a81a      	add	r0, sp, #104	; 0x68
 800f8a8:	eb02 0c03 	add.w	ip, r2, r3
 800f8ac:	4484      	add	ip, r0
 800f8ae:	9803      	ldr	r0, [sp, #12]
 800f8b0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f8b4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f8b8:	9001      	str	r0, [sp, #4]
 800f8ba:	ee07 0a90 	vmov	s15, r0
 800f8be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8c2:	9805      	ldr	r0, [sp, #20]
 800f8c4:	edcc 7a00 	vstr	s15, [ip]
 800f8c8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f918 <__kernel_rem_pio2f+0x318>
 800f8cc:	eb00 0802 	add.w	r8, r0, r2
 800f8d0:	f04f 0c00 	mov.w	ip, #0
 800f8d4:	45d4      	cmp	ip, sl
 800f8d6:	dd0c      	ble.n	800f8f2 <__kernel_rem_pio2f+0x2f2>
 800f8d8:	eb02 0c07 	add.w	ip, r2, r7
 800f8dc:	a842      	add	r0, sp, #264	; 0x108
 800f8de:	4484      	add	ip, r0
 800f8e0:	edcc 7a01 	vstr	s15, [ip, #4]
 800f8e4:	3101      	adds	r1, #1
 800f8e6:	3204      	adds	r2, #4
 800f8e8:	e7da      	b.n	800f8a0 <__kernel_rem_pio2f+0x2a0>
 800f8ea:	9b04      	ldr	r3, [sp, #16]
 800f8ec:	f04f 0c01 	mov.w	ip, #1
 800f8f0:	e7c7      	b.n	800f882 <__kernel_rem_pio2f+0x282>
 800f8f2:	ecfe 6a01 	vldmia	lr!, {s13}
 800f8f6:	ed38 7a01 	vldmdb	r8!, {s14}
 800f8fa:	f10c 0c01 	add.w	ip, ip, #1
 800f8fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f902:	e7e7      	b.n	800f8d4 <__kernel_rem_pio2f+0x2d4>
 800f904:	3b01      	subs	r3, #1
 800f906:	e769      	b.n	800f7dc <__kernel_rem_pio2f+0x1dc>
 800f908:	08055a40 	.word	0x08055a40
 800f90c:	08055a14 	.word	0x08055a14
 800f910:	43800000 	.word	0x43800000
 800f914:	3b800000 	.word	0x3b800000
 800f918:	00000000 	.word	0x00000000
 800f91c:	4260      	negs	r0, r4
 800f91e:	eeb0 0a48 	vmov.f32	s0, s16
 800f922:	f000 f98b 	bl	800fc3c <scalbnf>
 800f926:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800f910 <__kernel_rem_pio2f+0x310>
 800f92a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f932:	db1a      	blt.n	800f96a <__kernel_rem_pio2f+0x36a>
 800f934:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f914 <__kernel_rem_pio2f+0x314>
 800f938:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f93c:	aa06      	add	r2, sp, #24
 800f93e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f942:	a906      	add	r1, sp, #24
 800f944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f948:	3408      	adds	r4, #8
 800f94a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f94e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f952:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f956:	ee10 3a10 	vmov	r3, s0
 800f95a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f95e:	1c6b      	adds	r3, r5, #1
 800f960:	ee17 2a90 	vmov	r2, s15
 800f964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f968:	e73f      	b.n	800f7ea <__kernel_rem_pio2f+0x1ea>
 800f96a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f96e:	aa06      	add	r2, sp, #24
 800f970:	ee10 3a10 	vmov	r3, s0
 800f974:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f978:	462b      	mov	r3, r5
 800f97a:	e736      	b.n	800f7ea <__kernel_rem_pio2f+0x1ea>
 800f97c:	aa06      	add	r2, sp, #24
 800f97e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f982:	9202      	str	r2, [sp, #8]
 800f984:	ee07 2a90 	vmov	s15, r2
 800f988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f98c:	3c01      	subs	r4, #1
 800f98e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f992:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f996:	ed65 7a01 	vstmdb	r5!, {s15}
 800f99a:	e734      	b.n	800f806 <__kernel_rem_pio2f+0x206>
 800f99c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800f9a0:	ecf7 6a01 	vldmia	r7!, {s13}
 800f9a4:	ed9c 7a00 	vldr	s14, [ip]
 800f9a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f9ac:	3401      	adds	r4, #1
 800f9ae:	454c      	cmp	r4, r9
 800f9b0:	dc01      	bgt.n	800f9b6 <__kernel_rem_pio2f+0x3b6>
 800f9b2:	42a5      	cmp	r5, r4
 800f9b4:	daf2      	bge.n	800f99c <__kernel_rem_pio2f+0x39c>
 800f9b6:	aa56      	add	r2, sp, #344	; 0x158
 800f9b8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800f9bc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800f9c0:	3501      	adds	r5, #1
 800f9c2:	3804      	subs	r0, #4
 800f9c4:	e723      	b.n	800f80e <__kernel_rem_pio2f+0x20e>
 800f9c6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f9c8:	2a03      	cmp	r2, #3
 800f9ca:	d84d      	bhi.n	800fa68 <__kernel_rem_pio2f+0x468>
 800f9cc:	e8df f002 	tbb	[pc, r2]
 800f9d0:	021f1f3e 	.word	0x021f1f3e
 800f9d4:	aa56      	add	r2, sp, #344	; 0x158
 800f9d6:	4411      	add	r1, r2
 800f9d8:	399c      	subs	r1, #156	; 0x9c
 800f9da:	4608      	mov	r0, r1
 800f9dc:	461c      	mov	r4, r3
 800f9de:	2c00      	cmp	r4, #0
 800f9e0:	dc5f      	bgt.n	800faa2 <__kernel_rem_pio2f+0x4a2>
 800f9e2:	4608      	mov	r0, r1
 800f9e4:	461c      	mov	r4, r3
 800f9e6:	2c01      	cmp	r4, #1
 800f9e8:	dc6b      	bgt.n	800fac2 <__kernel_rem_pio2f+0x4c2>
 800f9ea:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800f918 <__kernel_rem_pio2f+0x318>
 800f9ee:	2b01      	cmp	r3, #1
 800f9f0:	dc77      	bgt.n	800fae2 <__kernel_rem_pio2f+0x4e2>
 800f9f2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800f9f6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800f9fa:	f1b8 0f00 	cmp.w	r8, #0
 800f9fe:	d176      	bne.n	800faee <__kernel_rem_pio2f+0x4ee>
 800fa00:	edc6 6a00 	vstr	s13, [r6]
 800fa04:	ed86 7a01 	vstr	s14, [r6, #4]
 800fa08:	edc6 7a02 	vstr	s15, [r6, #8]
 800fa0c:	e02c      	b.n	800fa68 <__kernel_rem_pio2f+0x468>
 800fa0e:	aa56      	add	r2, sp, #344	; 0x158
 800fa10:	4411      	add	r1, r2
 800fa12:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800f918 <__kernel_rem_pio2f+0x318>
 800fa16:	399c      	subs	r1, #156	; 0x9c
 800fa18:	4618      	mov	r0, r3
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	da32      	bge.n	800fa84 <__kernel_rem_pio2f+0x484>
 800fa1e:	f1b8 0f00 	cmp.w	r8, #0
 800fa22:	d035      	beq.n	800fa90 <__kernel_rem_pio2f+0x490>
 800fa24:	eef1 7a47 	vneg.f32	s15, s14
 800fa28:	edc6 7a00 	vstr	s15, [r6]
 800fa2c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800fa30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa34:	a82f      	add	r0, sp, #188	; 0xbc
 800fa36:	2101      	movs	r1, #1
 800fa38:	428b      	cmp	r3, r1
 800fa3a:	da2c      	bge.n	800fa96 <__kernel_rem_pio2f+0x496>
 800fa3c:	f1b8 0f00 	cmp.w	r8, #0
 800fa40:	d001      	beq.n	800fa46 <__kernel_rem_pio2f+0x446>
 800fa42:	eef1 7a67 	vneg.f32	s15, s15
 800fa46:	edc6 7a01 	vstr	s15, [r6, #4]
 800fa4a:	e00d      	b.n	800fa68 <__kernel_rem_pio2f+0x468>
 800fa4c:	aa56      	add	r2, sp, #344	; 0x158
 800fa4e:	4411      	add	r1, r2
 800fa50:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800f918 <__kernel_rem_pio2f+0x318>
 800fa54:	399c      	subs	r1, #156	; 0x9c
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	da0e      	bge.n	800fa78 <__kernel_rem_pio2f+0x478>
 800fa5a:	f1b8 0f00 	cmp.w	r8, #0
 800fa5e:	d001      	beq.n	800fa64 <__kernel_rem_pio2f+0x464>
 800fa60:	eef1 7a67 	vneg.f32	s15, s15
 800fa64:	edc6 7a00 	vstr	s15, [r6]
 800fa68:	9b01      	ldr	r3, [sp, #4]
 800fa6a:	f003 0007 	and.w	r0, r3, #7
 800fa6e:	b057      	add	sp, #348	; 0x15c
 800fa70:	ecbd 8b04 	vpop	{d8-d9}
 800fa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa78:	ed31 7a01 	vldmdb	r1!, {s14}
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa82:	e7e8      	b.n	800fa56 <__kernel_rem_pio2f+0x456>
 800fa84:	ed71 7a01 	vldmdb	r1!, {s15}
 800fa88:	3801      	subs	r0, #1
 800fa8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fa8e:	e7c4      	b.n	800fa1a <__kernel_rem_pio2f+0x41a>
 800fa90:	eef0 7a47 	vmov.f32	s15, s14
 800fa94:	e7c8      	b.n	800fa28 <__kernel_rem_pio2f+0x428>
 800fa96:	ecb0 7a01 	vldmia	r0!, {s14}
 800fa9a:	3101      	adds	r1, #1
 800fa9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800faa0:	e7ca      	b.n	800fa38 <__kernel_rem_pio2f+0x438>
 800faa2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800faa6:	ed70 6a01 	vldmdb	r0!, {s13}
 800faaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800faae:	3c01      	subs	r4, #1
 800fab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fab4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800fab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fabc:	edc0 7a00 	vstr	s15, [r0]
 800fac0:	e78d      	b.n	800f9de <__kernel_rem_pio2f+0x3de>
 800fac2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800fac6:	ed70 6a01 	vldmdb	r0!, {s13}
 800faca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800face:	3c01      	subs	r4, #1
 800fad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fad4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800fad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fadc:	edc0 7a00 	vstr	s15, [r0]
 800fae0:	e781      	b.n	800f9e6 <__kernel_rem_pio2f+0x3e6>
 800fae2:	ed31 7a01 	vldmdb	r1!, {s14}
 800fae6:	3b01      	subs	r3, #1
 800fae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800faec:	e77f      	b.n	800f9ee <__kernel_rem_pio2f+0x3ee>
 800faee:	eef1 6a66 	vneg.f32	s13, s13
 800faf2:	eeb1 7a47 	vneg.f32	s14, s14
 800faf6:	edc6 6a00 	vstr	s13, [r6]
 800fafa:	ed86 7a01 	vstr	s14, [r6, #4]
 800fafe:	eef1 7a67 	vneg.f32	s15, s15
 800fb02:	e781      	b.n	800fa08 <__kernel_rem_pio2f+0x408>

0800fb04 <__kernel_sinf>:
 800fb04:	ee10 3a10 	vmov	r3, s0
 800fb08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb0c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fb10:	da04      	bge.n	800fb1c <__kernel_sinf+0x18>
 800fb12:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb16:	ee17 3a90 	vmov	r3, s15
 800fb1a:	b35b      	cbz	r3, 800fb74 <__kernel_sinf+0x70>
 800fb1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fb20:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fb78 <__kernel_sinf+0x74>
 800fb24:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fb7c <__kernel_sinf+0x78>
 800fb28:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb2c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800fb80 <__kernel_sinf+0x7c>
 800fb30:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb34:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fb84 <__kernel_sinf+0x80>
 800fb38:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fb3c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fb88 <__kernel_sinf+0x84>
 800fb40:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fb44:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb48:	b930      	cbnz	r0, 800fb58 <__kernel_sinf+0x54>
 800fb4a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800fb8c <__kernel_sinf+0x88>
 800fb4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb52:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fb56:	4770      	bx	lr
 800fb58:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fb5c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fb60:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fb64:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fb68:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fb90 <__kernel_sinf+0x8c>
 800fb6c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fb70:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop
 800fb78:	2f2ec9d3 	.word	0x2f2ec9d3
 800fb7c:	b2d72f34 	.word	0xb2d72f34
 800fb80:	3638ef1b 	.word	0x3638ef1b
 800fb84:	b9500d01 	.word	0xb9500d01
 800fb88:	3c088889 	.word	0x3c088889
 800fb8c:	be2aaaab 	.word	0xbe2aaaab
 800fb90:	3e2aaaab 	.word	0x3e2aaaab

0800fb94 <matherr>:
 800fb94:	2000      	movs	r0, #0
 800fb96:	4770      	bx	lr

0800fb98 <nan>:
 800fb98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fba0 <nan+0x8>
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	00000000 	.word	0x00000000
 800fba4:	7ff80000 	.word	0x7ff80000

0800fba8 <fabsf>:
 800fba8:	ee10 3a10 	vmov	r3, s0
 800fbac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbb0:	ee00 3a10 	vmov	s0, r3
 800fbb4:	4770      	bx	lr
	...

0800fbb8 <floorf>:
 800fbb8:	ee10 3a10 	vmov	r3, s0
 800fbbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fbc0:	0dca      	lsrs	r2, r1, #23
 800fbc2:	3a7f      	subs	r2, #127	; 0x7f
 800fbc4:	2a16      	cmp	r2, #22
 800fbc6:	dc2a      	bgt.n	800fc1e <floorf+0x66>
 800fbc8:	2a00      	cmp	r2, #0
 800fbca:	da11      	bge.n	800fbf0 <floorf+0x38>
 800fbcc:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fc30 <floorf+0x78>
 800fbd0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbdc:	dd05      	ble.n	800fbea <floorf+0x32>
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	da23      	bge.n	800fc2a <floorf+0x72>
 800fbe2:	4a14      	ldr	r2, [pc, #80]	; (800fc34 <floorf+0x7c>)
 800fbe4:	2900      	cmp	r1, #0
 800fbe6:	bf18      	it	ne
 800fbe8:	4613      	movne	r3, r2
 800fbea:	ee00 3a10 	vmov	s0, r3
 800fbee:	4770      	bx	lr
 800fbf0:	4911      	ldr	r1, [pc, #68]	; (800fc38 <floorf+0x80>)
 800fbf2:	4111      	asrs	r1, r2
 800fbf4:	420b      	tst	r3, r1
 800fbf6:	d0fa      	beq.n	800fbee <floorf+0x36>
 800fbf8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fc30 <floorf+0x78>
 800fbfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc08:	ddef      	ble.n	800fbea <floorf+0x32>
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	bfbe      	ittt	lt
 800fc0e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800fc12:	fa40 f202 	asrlt.w	r2, r0, r2
 800fc16:	189b      	addlt	r3, r3, r2
 800fc18:	ea23 0301 	bic.w	r3, r3, r1
 800fc1c:	e7e5      	b.n	800fbea <floorf+0x32>
 800fc1e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fc22:	d3e4      	bcc.n	800fbee <floorf+0x36>
 800fc24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc28:	4770      	bx	lr
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	e7dd      	b.n	800fbea <floorf+0x32>
 800fc2e:	bf00      	nop
 800fc30:	7149f2ca 	.word	0x7149f2ca
 800fc34:	bf800000 	.word	0xbf800000
 800fc38:	007fffff 	.word	0x007fffff

0800fc3c <scalbnf>:
 800fc3c:	b508      	push	{r3, lr}
 800fc3e:	ee10 2a10 	vmov	r2, s0
 800fc42:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800fc46:	ed2d 8b02 	vpush	{d8}
 800fc4a:	eef0 0a40 	vmov.f32	s1, s0
 800fc4e:	d004      	beq.n	800fc5a <scalbnf+0x1e>
 800fc50:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fc54:	d306      	bcc.n	800fc64 <scalbnf+0x28>
 800fc56:	ee70 0a00 	vadd.f32	s1, s0, s0
 800fc5a:	ecbd 8b02 	vpop	{d8}
 800fc5e:	eeb0 0a60 	vmov.f32	s0, s1
 800fc62:	bd08      	pop	{r3, pc}
 800fc64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fc68:	d21c      	bcs.n	800fca4 <scalbnf+0x68>
 800fc6a:	4b1f      	ldr	r3, [pc, #124]	; (800fce8 <scalbnf+0xac>)
 800fc6c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fcec <scalbnf+0xb0>
 800fc70:	4298      	cmp	r0, r3
 800fc72:	ee60 0a27 	vmul.f32	s1, s0, s15
 800fc76:	db10      	blt.n	800fc9a <scalbnf+0x5e>
 800fc78:	ee10 2a90 	vmov	r2, s1
 800fc7c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800fc80:	3b19      	subs	r3, #25
 800fc82:	4403      	add	r3, r0
 800fc84:	2bfe      	cmp	r3, #254	; 0xfe
 800fc86:	dd0f      	ble.n	800fca8 <scalbnf+0x6c>
 800fc88:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800fcf0 <scalbnf+0xb4>
 800fc8c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc90:	f000 f834 	bl	800fcfc <copysignf>
 800fc94:	ee60 0a08 	vmul.f32	s1, s0, s16
 800fc98:	e7df      	b.n	800fc5a <scalbnf+0x1e>
 800fc9a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800fcf4 <scalbnf+0xb8>
 800fc9e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800fca2:	e7da      	b.n	800fc5a <scalbnf+0x1e>
 800fca4:	0ddb      	lsrs	r3, r3, #23
 800fca6:	e7ec      	b.n	800fc82 <scalbnf+0x46>
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dd06      	ble.n	800fcba <scalbnf+0x7e>
 800fcac:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fcb0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fcb4:	ee00 3a90 	vmov	s1, r3
 800fcb8:	e7cf      	b.n	800fc5a <scalbnf+0x1e>
 800fcba:	f113 0f16 	cmn.w	r3, #22
 800fcbe:	da06      	bge.n	800fcce <scalbnf+0x92>
 800fcc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fcc4:	4298      	cmp	r0, r3
 800fcc6:	dcdf      	bgt.n	800fc88 <scalbnf+0x4c>
 800fcc8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800fcf4 <scalbnf+0xb8>
 800fccc:	e7de      	b.n	800fc8c <scalbnf+0x50>
 800fcce:	3319      	adds	r3, #25
 800fcd0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fcd4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fcd8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800fcf8 <scalbnf+0xbc>
 800fcdc:	ee07 3a10 	vmov	s14, r3
 800fce0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800fce4:	e7b9      	b.n	800fc5a <scalbnf+0x1e>
 800fce6:	bf00      	nop
 800fce8:	ffff3cb0 	.word	0xffff3cb0
 800fcec:	4c000000 	.word	0x4c000000
 800fcf0:	7149f2ca 	.word	0x7149f2ca
 800fcf4:	0da24260 	.word	0x0da24260
 800fcf8:	33000000 	.word	0x33000000

0800fcfc <copysignf>:
 800fcfc:	ee10 3a10 	vmov	r3, s0
 800fd00:	ee10 2a90 	vmov	r2, s1
 800fd04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	ee00 3a10 	vmov	s0, r3
 800fd12:	4770      	bx	lr

0800fd14 <__errno>:
 800fd14:	4b01      	ldr	r3, [pc, #4]	; (800fd1c <__errno+0x8>)
 800fd16:	6818      	ldr	r0, [r3, #0]
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	20001028 	.word	0x20001028

0800fd20 <_sbrk>:
 800fd20:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <_sbrk+0x14>)
 800fd22:	6819      	ldr	r1, [r3, #0]
 800fd24:	4602      	mov	r2, r0
 800fd26:	b909      	cbnz	r1, 800fd2c <_sbrk+0xc>
 800fd28:	4903      	ldr	r1, [pc, #12]	; (800fd38 <_sbrk+0x18>)
 800fd2a:	6019      	str	r1, [r3, #0]
 800fd2c:	6818      	ldr	r0, [r3, #0]
 800fd2e:	4402      	add	r2, r0
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	4770      	bx	lr
 800fd34:	20001a0c 	.word	0x20001a0c
 800fd38:	20045268 	.word	0x20045268

0800fd3c <_init>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	bf00      	nop
 800fd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd42:	bc08      	pop	{r3}
 800fd44:	469e      	mov	lr, r3
 800fd46:	4770      	bx	lr

0800fd48 <_fini>:
 800fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4a:	bf00      	nop
 800fd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4e:	bc08      	pop	{r3}
 800fd50:	469e      	mov	lr, r3
 800fd52:	4770      	bx	lr
